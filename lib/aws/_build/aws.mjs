var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __reExport = (target, module7, desc) => {
  if (module7 && typeof module7 === "object" || typeof module7 === "function") {
    for (let key of __getOwnPropNames(module7))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module7[key], enumerable: !(desc = __getOwnPropDesc(module7, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module7) => {
  return __reExport(__markAsModule(__defProp(module7 != null ? __create(__getProtoOf(module7)) : {}, "default", module7 && module7.__esModule && "default" in module7 ? { get: () => module7.default, enumerable: true } : { value: module7, enumerable: true })), module7);
};

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module7) {
    var __extends2;
    var __assign2;
    var __rest2;
    var __decorate2;
    var __param2;
    var __metadata2;
    var __awaiter2;
    var __generator2;
    var __exportStar2;
    var __values2;
    var __read2;
    var __spread2;
    var __spreadArrays2;
    var __spreadArray2;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator2;
    var __asyncValues2;
    var __makeTemplateObject2;
    var __importStar2;
    var __importDefault2;
    var __classPrivateFieldGet2;
    var __classPrivateFieldSet2;
    var __createBinding2;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module7 === "object" && typeof module7.exports === "object") {
        factory(createExporter(root, createExporter(module7.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends2 = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest2 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate2 = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter2 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar2 = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding2(o, m, p);
      };
      __createBinding2 = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values2 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread2 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read2(arguments[i]));
        return ar;
      };
      __spreadArrays2 = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray2 = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await2 = function(v) {
        return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator2 = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject2 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar2 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault2 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet2 = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet2 = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate2);
      exporter("__param", __param2);
      exporter("__metadata", __metadata2);
      exporter("__awaiter", __awaiter2);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar2);
      exporter("__createBinding", __createBinding2);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread2);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__spreadArray", __spreadArray2);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator2);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject2);
      exporter("__importStar", __importStar2);
      exporter("__importDefault", __importDefault2);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
    });
  }
});

// node_modules/obliterator/iterator.js
var require_iterator = __commonJS({
  "node_modules/obliterator/iterator.js"(exports, module7) {
    function Iterator(next) {
      Object.defineProperty(this, "_next", {
        writable: false,
        enumerable: false,
        value: next
      });
      this.done = false;
    }
    Iterator.prototype.next = function() {
      if (this.done)
        return { done: true };
      var step = this._next();
      if (step.done)
        this.done = true;
      return step;
    };
    if (typeof Symbol !== "undefined")
      Iterator.prototype[Symbol.iterator] = function() {
        return this;
      };
    Iterator.of = function() {
      var args = arguments, l = args.length, i = 0;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        return { done: false, value: args[i++] };
      });
    };
    Iterator.empty = function() {
      var iterator = new Iterator(null);
      iterator.done = true;
      return iterator;
    };
    Iterator.is = function(value) {
      if (value instanceof Iterator)
        return true;
      return typeof value === "object" && value !== null && typeof value.next === "function";
    };
    module7.exports = Iterator;
  }
});

// node_modules/obliterator/foreach.js
var require_foreach = __commonJS({
  "node_modules/obliterator/foreach.js"(exports, module7) {
    var ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== "undefined";
    var SYMBOL_SUPPORT = typeof Symbol !== "undefined";
    function forEach(iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable)
        throw new Error("obliterator/forEach: invalid iterable.");
      if (typeof callback !== "function")
        throw new Error("obliterator/forEach: expecting a callback.");
      if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
        for (i = 0, l = iterable.length; i < l; i++)
          callback(iterable[i], i);
        return;
      }
      if (typeof iterable.forEach === "function") {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === "function") {
        iterator = iterable;
        i = 0;
        while (s = iterator.next(), s.done !== true) {
          callback(s.value, i);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    }
    forEach.forEachWithNullKeys = function(iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable)
        throw new Error("obliterator/forEachWithNullKeys: invalid iterable.");
      if (typeof callback !== "function")
        throw new Error("obliterator/forEachWithNullKeys: expecting a callback.");
      if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
        for (i = 0, l = iterable.length; i < l; i++)
          callback(iterable[i], null);
        return;
      }
      if (iterable instanceof Set) {
        iterable.forEach(function(value) {
          callback(value, null);
        });
        return;
      }
      if (typeof iterable.forEach === "function") {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === "function") {
        iterator = iterable;
        i = 0;
        while (s = iterator.next(), s.done !== true) {
          callback(s.value, null);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    };
    module7.exports = forEach;
  }
});

// node_modules/mnemonist/utils/typed-arrays.js
var require_typed_arrays = __commonJS({
  "node_modules/mnemonist/utils/typed-arrays.js"(exports) {
    var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1;
    var MAX_16BIT_INTEGER = Math.pow(2, 16) - 1;
    var MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
    var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1;
    var MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1;
    var MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
    exports.getPointerArray = function(size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_8BIT_INTEGER)
        return Uint8Array;
      if (maxIndex <= MAX_16BIT_INTEGER)
        return Uint16Array;
      if (maxIndex <= MAX_32BIT_INTEGER)
        return Uint32Array;
      return Float64Array;
    };
    exports.getSignedPointerArray = function(size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)
        return Int8Array;
      if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)
        return Int16Array;
      if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)
        return Int32Array;
      return Float64Array;
    };
    exports.getNumberType = function(value) {
      if (value === (value | 0)) {
        if (Math.sign(value) === -1) {
          if (value <= 127 && value >= -128)
            return Int8Array;
          if (value <= 32767 && value >= -32768)
            return Int16Array;
          return Int32Array;
        } else {
          if (value <= 255)
            return Uint8Array;
          if (value <= 65535)
            return Uint16Array;
          return Uint32Array;
        }
      }
      return Float64Array;
    };
    var TYPE_PRIORITY = {
      Uint8Array: 1,
      Int8Array: 2,
      Uint16Array: 3,
      Int16Array: 4,
      Uint32Array: 5,
      Int32Array: 6,
      Float32Array: 7,
      Float64Array: 8
    };
    exports.getMinimalRepresentation = function(array, getter) {
      var maxType = null, maxPriority = 0, p, t, v, i, l;
      for (i = 0, l = array.length; i < l; i++) {
        v = getter ? getter(array[i]) : array[i];
        t = exports.getNumberType(v);
        p = TYPE_PRIORITY[t.name];
        if (p > maxPriority) {
          maxPriority = p;
          maxType = t;
        }
      }
      return maxType;
    };
    exports.isTypedArray = function(value) {
      return typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView(value);
    };
    exports.concat = function() {
      var length = 0, i, o, l;
      for (i = 0, l = arguments.length; i < l; i++)
        length += arguments[i].length;
      var array = new arguments[0].constructor(length);
      for (i = 0, o = 0; i < l; i++) {
        array.set(arguments[i], o);
        o += arguments[i].length;
      }
      return array;
    };
    exports.indices = function(length) {
      var PointerArray = exports.getPointerArray(length);
      var array = new PointerArray(length);
      for (var i = 0; i < length; i++)
        array[i] = i;
      return array;
    };
  }
});

// node_modules/mnemonist/utils/iterables.js
var require_iterables = __commonJS({
  "node_modules/mnemonist/utils/iterables.js"(exports) {
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    function isArrayLike(target) {
      return Array.isArray(target) || typed.isTypedArray(target);
    }
    function guessLength(target) {
      if (typeof target.length === "number")
        return target.length;
      if (typeof target.size === "number")
        return target.size;
      return;
    }
    function toArray(target) {
      var l = guessLength(target);
      var array = typeof l === "number" ? new Array(l) : [];
      var i = 0;
      forEach(target, function(value) {
        array[i++] = value;
      });
      return array;
    }
    function toArrayWithIndices(target) {
      var l = guessLength(target);
      var IndexArray = typeof l === "number" ? typed.getPointerArray(l) : Array;
      var array = typeof l === "number" ? new Array(l) : [];
      var indices = typeof l === "number" ? new IndexArray(l) : [];
      var i = 0;
      forEach(target, function(value) {
        array[i] = value;
        indices[i] = i++;
      });
      return [array, indices];
    }
    exports.isArrayLike = isArrayLike;
    exports.guessLength = guessLength;
    exports.toArray = toArray;
    exports.toArrayWithIndices = toArrayWithIndices;
  }
});

// node_modules/mnemonist/lru-cache.js
var require_lru_cache = __commonJS({
  "node_modules/mnemonist/lru-cache.js"(exports, module7) {
    var Iterator = require_iterator();
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    var iterables = require_iterables();
    function LRUCache2(Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      this.capacity = capacity;
      if (typeof this.capacity !== "number" || this.capacity <= 0)
        throw new Error("mnemonist/lru-cache: capacity should be positive number.");
      var PointerArray = typed.getPointerArray(capacity);
      this.forward = new PointerArray(capacity);
      this.backward = new PointerArray(capacity);
      this.K = typeof Keys === "function" ? new Keys(capacity) : new Array(capacity);
      this.V = typeof Values === "function" ? new Values(capacity) : new Array(capacity);
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    }
    LRUCache2.prototype.clear = function() {
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    };
    LRUCache2.prototype.splayOnTop = function(pointer) {
      var oldHead = this.head;
      if (this.head === pointer)
        return this;
      var previous = this.backward[pointer], next = this.forward[pointer];
      if (this.tail === pointer) {
        this.tail = previous;
      } else {
        this.backward[next] = previous;
      }
      this.forward[previous] = next;
      this.backward[oldHead] = pointer;
      this.head = pointer;
      this.forward[pointer] = oldHead;
      return this;
    };
    LRUCache2.prototype.set = function(key, value) {
      var pointer = this.items[key];
      if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        this.V[pointer] = value;
        return;
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
    };
    LRUCache2.prototype.setpop = function(key, value) {
      var oldValue = null;
      var oldKey = null;
      var pointer = this.items[key];
      if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        oldValue = this.V[pointer];
        this.V[pointer] = value;
        return { evicted: false, key, value: oldValue };
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        oldValue = this.V[pointer];
        oldKey = this.K[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
      if (oldKey) {
        return { evicted: true, key: oldKey, value: oldValue };
      } else {
        return null;
      }
    };
    LRUCache2.prototype.has = function(key) {
      return key in this.items;
    };
    LRUCache2.prototype.get = function(key) {
      var pointer = this.items[key];
      if (typeof pointer === "undefined")
        return;
      this.splayOnTop(pointer);
      return this.V[pointer];
    };
    LRUCache2.prototype.peek = function(key) {
      var pointer = this.items[key];
      if (typeof pointer === "undefined")
        return;
      return this.V[pointer];
    };
    LRUCache2.prototype.forEach = function(callback, scope) {
      scope = arguments.length > 1 ? scope : this;
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
      while (i < l) {
        callback.call(scope, values[pointer], keys[pointer], this);
        pointer = forward[pointer];
        i++;
      }
    };
    LRUCache2.prototype.keys = function() {
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var key = keys[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value: key
        };
      });
    };
    LRUCache2.prototype.values = function() {
      var i = 0, l = this.size;
      var pointer = this.head, values = this.V, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var value = values[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value
        };
      });
    };
    LRUCache2.prototype.entries = function() {
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var key = keys[pointer], value = values[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value: [key, value]
        };
      });
    };
    if (typeof Symbol !== "undefined")
      LRUCache2.prototype[Symbol.iterator] = LRUCache2.prototype.entries;
    LRUCache2.prototype.inspect = function() {
      var proxy = new Map();
      var iterator = this.entries(), step;
      while (step = iterator.next(), !step.done)
        proxy.set(step.value[0], step.value[1]);
      Object.defineProperty(proxy, "constructor", {
        value: LRUCache2,
        enumerable: false
      });
      return proxy;
    };
    if (typeof Symbol !== "undefined")
      LRUCache2.prototype[Symbol.for("nodejs.util.inspect.custom")] = LRUCache2.prototype.inspect;
    LRUCache2.from = function(iterable, Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = iterables.guessLength(iterable);
        if (typeof capacity !== "number")
          throw new Error("mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.");
      } else if (arguments.length === 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      var cache = new LRUCache2(Keys, Values, capacity);
      forEach(iterable, function(value, key) {
        cache.set(key, value);
      });
      return cache;
    };
    module7.exports = LRUCache2;
  }
});

// node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.js
var require_tslib2 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.js"(exports, module7) {
    var __extends2;
    var __assign2;
    var __rest2;
    var __decorate2;
    var __param2;
    var __metadata2;
    var __awaiter2;
    var __generator2;
    var __exportStar2;
    var __values2;
    var __read2;
    var __spread2;
    var __spreadArrays2;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator2;
    var __asyncValues2;
    var __makeTemplateObject2;
    var __importStar2;
    var __importDefault2;
    var __classPrivateFieldGet2;
    var __classPrivateFieldSet2;
    var __createBinding2;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module7 === "object" && typeof module7.exports === "object") {
        factory(createExporter(root, createExporter(module7.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      __extends2 = function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest2 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate2 = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter2 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding2 = function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __exportStar2 = function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !exports2.hasOwnProperty(p))
            exports2[p] = m[p];
      };
      __values2 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread2 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read2(arguments[i]));
        return ar;
      };
      __spreadArrays2 = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __await2 = function(v) {
        return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator2 = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject2 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar2 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (Object.hasOwnProperty.call(mod, k))
              result[k] = mod[k];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault2 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet2 = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet2 = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate2);
      exporter("__param", __param2);
      exporter("__metadata", __metadata2);
      exporter("__awaiter", __awaiter2);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar2);
      exporter("__createBinding", __createBinding2);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread2);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator2);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject2);
      exporter("__importStar", __importStar2);
      exporter("__importDefault", __importDefault2);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
    });
  }
});

// node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js
var require_isEmptyData = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData2(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData2;
  }
});

// node_modules/@aws-crypto/sha256-browser/build/constants.js
var require_constants = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
    exports.SHA_256_HASH = { name: "SHA-256" };
    exports.SHA_256_HMAC_ALGO = {
      name: "HMAC",
      hash: exports.SHA_256_HASH
    };
    exports.EMPTY_DATA_SHA_256 = new Uint8Array([
      227,
      176,
      196,
      66,
      152,
      252,
      28,
      20,
      154,
      251,
      244,
      200,
      153,
      111,
      185,
      36,
      39,
      174,
      65,
      228,
      100,
      155,
      147,
      76,
      164,
      149,
      153,
      27,
      120,
      82,
      184,
      85
    ]);
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist-cjs/pureJs.js
var require_pureJs = __commonJS({
  "node_modules/@aws-sdk/util-utf8-browser/dist-cjs/pureJs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    var fromUtf88 = (input) => {
      const bytes = [];
      for (let i = 0, len = input.length; i < len; i++) {
        const value = input.charCodeAt(i);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i + 1) & 64512) === 56320) {
          const surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    exports.fromUtf8 = fromUtf88;
    var toUtf87 = (input) => {
      let decoded = "";
      for (let i = 0, len = input.length; i < len; i++) {
        const byte = input[i];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          const nextByte = input[++i];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          const surrogatePair = [byte, input[++i], input[++i], input[++i]];
          const encoded = "%" + surrogatePair.map((byteValue) => byteValue.toString(16)).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
        }
      }
      return decoded;
    };
    exports.toUtf8 = toUtf87;
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist-cjs/whatwgEncodingApi.js
var require_whatwgEncodingApi = __commonJS({
  "node_modules/@aws-sdk/util-utf8-browser/dist-cjs/whatwgEncodingApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    function fromUtf88(input) {
      return new TextEncoder().encode(input);
    }
    exports.fromUtf8 = fromUtf88;
    function toUtf87(input) {
      return new TextDecoder("utf-8").decode(input);
    }
    exports.toUtf8 = toUtf87;
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "node_modules/@aws-sdk/util-utf8-browser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    var pureJs_1 = require_pureJs();
    var whatwgEncodingApi_1 = require_whatwgEncodingApi();
    var fromUtf88 = (input) => typeof TextEncoder === "function" ? whatwgEncodingApi_1.fromUtf8(input) : pureJs_1.fromUtf8(input);
    exports.fromUtf8 = fromUtf88;
    var toUtf87 = (input) => typeof TextDecoder === "function" ? whatwgEncodingApi_1.toUtf8(input) : pureJs_1.toUtf8(input);
    exports.toUtf8 = toUtf87;
  }
});

// node_modules/@aws-sdk/util-locate-window/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "node_modules/@aws-sdk/util-locate-window/dist-cjs/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.locateWindow = void 0;
    var fallbackWindow = {};
    function locateWindow() {
      if (typeof window !== "undefined") {
        return window;
      } else if (typeof self !== "undefined") {
        return self;
      }
      return fallbackWindow;
    }
    exports.locateWindow = locateWindow;
  }
});

// node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js
var require_ie11Sha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var isEmptyData_1 = require_isEmptyData();
    var constants_1 = require_constants();
    var util_utf8_browser_1 = require_dist_cjs();
    var util_locate_window_1 = require_dist_cjs2();
    var Sha2567 = function() {
      function Sha2568(secret) {
        if (secret) {
          this.operation = getKeyPromise(secret).then(function(keyData) {
            return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
          });
          this.operation.catch(function() {
          });
        } else {
          this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
        }
      }
      Sha2568.prototype.update = function(toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) {
          return;
        }
        this.operation = this.operation.then(function(operation) {
          operation.onerror = function() {
            _this.operation = Promise.reject(new Error("Error encountered updating hash"));
          };
          operation.process(toArrayBufferView(toHash));
          return operation;
        });
        this.operation.catch(function() {
        });
      };
      Sha2568.prototype.digest = function() {
        return this.operation.then(function(operation) {
          return new Promise(function(resolve, reject) {
            operation.onerror = function() {
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.oncomplete = function() {
              if (operation.result) {
                resolve(new Uint8Array(operation.result));
              }
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.finish();
          });
        });
      };
      return Sha2568;
    }();
    exports.Sha256 = Sha2567;
    function getKeyPromise(secret) {
      return new Promise(function(resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]);
        keyOperation.oncomplete = function() {
          if (keyOperation.result) {
            resolve(keyOperation.result);
          }
          reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function() {
          reject(new Error("ImportKey failed to import key."));
        };
      });
    }
    function toArrayBufferView(data) {
      if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
  }
});

// node_modules/@aws-crypto/util/build/convertToBuffer.js
var require_convertToBuffer = __commonJS({
  "node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToBuffer = void 0;
    var util_utf8_browser_1 = require_dist_cjs();
    var fromUtf88 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer2(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf88(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports.convertToBuffer = convertToBuffer2;
  }
});

// node_modules/@aws-crypto/util/build/isEmptyData.js
var require_isEmptyData2 = __commonJS({
  "node_modules/@aws-crypto/util/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData2(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData2;
  }
});

// node_modules/@aws-crypto/util/build/numToUint8.js
var require_numToUint8 = __commonJS({
  "node_modules/@aws-crypto/util/build/numToUint8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports.numToUint8 = numToUint8;
  }
});

// node_modules/@aws-crypto/util/build/uint32ArrayFrom.js
var require_uint32ArrayFrom = __commonJS({
  "node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// node_modules/@aws-crypto/util/build/index.js
var require_build = __commonJS({
  "node_modules/@aws-crypto/util/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData2();
    Object.defineProperty(exports, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js
var require_webCryptoSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var util_1 = require_build();
    var constants_1 = require_constants();
    var util_locate_window_1 = require_dist_cjs2();
    var Sha2567 = function() {
      function Sha2568(secret) {
        this.toHash = new Uint8Array(0);
        if (secret !== void 0) {
          this.key = new Promise(function(resolve, reject) {
            (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]).then(resolve, reject);
          });
          this.key.catch(function() {
          });
        }
      }
      Sha2568.prototype.update = function(data) {
        if ((0, util_1.isEmptyData)(data)) {
          return;
        }
        var update = (0, util_1.convertToBuffer)(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
      };
      Sha2568.prototype.digest = function() {
        var _this = this;
        if (this.key) {
          return this.key.then(function(key) {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function(data) {
              return new Uint8Array(data);
            });
          });
        }
        if ((0, util_1.isEmptyData)(this.toHash)) {
          return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
        }
        return Promise.resolve().then(function() {
          return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
        }).then(function(data) {
          return Promise.resolve(new Uint8Array(data));
        });
      };
      return Sha2568;
    }();
    exports.Sha256 = Sha2567;
  }
});

// node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.js
var require_tslib3 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.js"(exports, module7) {
    var __extends2;
    var __assign2;
    var __rest2;
    var __decorate2;
    var __param2;
    var __metadata2;
    var __awaiter2;
    var __generator2;
    var __exportStar2;
    var __values2;
    var __read2;
    var __spread2;
    var __spreadArrays2;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator2;
    var __asyncValues2;
    var __makeTemplateObject2;
    var __importStar2;
    var __importDefault2;
    var __classPrivateFieldGet2;
    var __classPrivateFieldSet2;
    var __createBinding2;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module7 === "object" && typeof module7.exports === "object") {
        factory(createExporter(root, createExporter(module7.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      __extends2 = function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest2 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate2 = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter2 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding2 = function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __exportStar2 = function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !exports2.hasOwnProperty(p))
            exports2[p] = m[p];
      };
      __values2 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread2 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read2(arguments[i]));
        return ar;
      };
      __spreadArrays2 = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __await2 = function(v) {
        return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator2 = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject2 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar2 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (Object.hasOwnProperty.call(mod, k))
              result[k] = mod[k];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault2 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet2 = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet2 = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate2);
      exporter("__param", __param2);
      exporter("__metadata", __metadata2);
      exporter("__awaiter", __awaiter2);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar2);
      exporter("__createBinding", __createBinding2);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread2);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator2);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject2);
      exporter("__importStar", __importStar2);
      exporter("__importDefault", __importDefault2);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
    });
  }
});

// node_modules/@aws-crypto/sha256-js/build/constants.js
var require_constants2 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
    exports.BLOCK_SIZE = 64;
    exports.DIGEST_LENGTH = 32;
    exports.KEY = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    exports.INIT = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
  }
});

// node_modules/@aws-crypto/sha256-js/build/RawSha256.js
var require_RawSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/RawSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RawSha256 = void 0;
    var constants_1 = require_constants2();
    var RawSha256 = function() {
      function RawSha2562() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
      }
      RawSha2562.prototype.update = function(data) {
        if (this.finished) {
          throw new Error("Attempted to update an already finished hash.");
        }
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
          throw new Error("Cannot hash more than 2^53 - 1 bits");
        }
        while (byteLength > 0) {
          this.buffer[this.bufferLength++] = data[position++];
          byteLength--;
          if (this.bufferLength === constants_1.BLOCK_SIZE) {
            this.hashBuffer();
            this.bufferLength = 0;
          }
        }
      };
      RawSha2562.prototype.digest = function() {
        if (!this.finished) {
          var bitsHashed = this.bytesHashed * 8;
          var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
          var undecoratedLength = this.bufferLength;
          bufferView.setUint8(this.bufferLength++, 128);
          if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
            for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {
              bufferView.setUint8(i, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
          }
          for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {
            bufferView.setUint8(i, 0);
          }
          bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
          bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
          this.hashBuffer();
          this.finished = true;
        }
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for (var i = 0; i < 8; i++) {
          out[i * 4] = this.state[i] >>> 24 & 255;
          out[i * 4 + 1] = this.state[i] >>> 16 & 255;
          out[i * 4 + 2] = this.state[i] >>> 8 & 255;
          out[i * 4 + 3] = this.state[i] >>> 0 & 255;
        }
        return out;
      };
      RawSha2562.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
          if (i < 16) {
            this.temp[i] = (buffer[i * 4] & 255) << 24 | (buffer[i * 4 + 1] & 255) << 16 | (buffer[i * 4 + 2] & 255) << 8 | buffer[i * 4 + 3] & 255;
          } else {
            var u = this.temp[i - 2];
            var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
            u = this.temp[i - 15];
            var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
            this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
          }
          var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i] + this.temp[i] | 0) | 0) | 0;
          var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
          state7 = state6;
          state6 = state5;
          state5 = state4;
          state4 = state3 + t1 | 0;
          state3 = state2;
          state2 = state1;
          state1 = state0;
          state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
      };
      return RawSha2562;
    }();
    exports.RawSha256 = RawSha256;
  }
});

// node_modules/@aws-crypto/sha256-js/build/jsSha256.js
var require_jsSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/jsSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var tslib_1 = require_tslib3();
    var constants_1 = require_constants2();
    var RawSha256_1 = require_RawSha256();
    var util_1 = require_build();
    var Sha2567 = function() {
      function Sha2568(secret) {
        this.hash = new RawSha256_1.RawSha256();
        if (secret) {
          this.outer = new RawSha256_1.RawSha256();
          var inner = bufferFromSecret(secret);
          var outer = new Uint8Array(constants_1.BLOCK_SIZE);
          outer.set(inner);
          for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
            inner[i] ^= 54;
            outer[i] ^= 92;
          }
          this.hash.update(inner);
          this.outer.update(outer);
          for (var i = 0; i < inner.byteLength; i++) {
            inner[i] = 0;
          }
        }
      }
      Sha2568.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash) || this.error) {
          return;
        }
        try {
          this.hash.update((0, util_1.convertToBuffer)(toHash));
        } catch (e) {
          this.error = e;
        }
      };
      Sha2568.prototype.digestSync = function() {
        if (this.error) {
          throw this.error;
        }
        if (this.outer) {
          if (!this.outer.finished) {
            this.outer.update(this.hash.digest());
          }
          return this.outer.digest();
        }
        return this.hash.digest();
      };
      Sha2568.prototype.digest = function() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function() {
          return (0, tslib_1.__generator)(this, function(_a) {
            return [2, this.digestSync()];
          });
        });
      };
      return Sha2568;
    }();
    exports.Sha256 = Sha2567;
    function bufferFromSecret(secret) {
      var input = (0, util_1.convertToBuffer)(secret);
      if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
      }
      var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
      buffer.set(input);
      return buffer;
    }
  }
});

// node_modules/@aws-crypto/sha256-js/build/index.js
var require_build2 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib3();
    (0, tslib_1.__exportStar)(require_jsSha256(), exports);
  }
});

// node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.js
var require_tslib4 = __commonJS({
  "node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.js"(exports, module7) {
    var __extends2;
    var __assign2;
    var __rest2;
    var __decorate2;
    var __param2;
    var __metadata2;
    var __awaiter2;
    var __generator2;
    var __exportStar2;
    var __values2;
    var __read2;
    var __spread2;
    var __spreadArrays2;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator2;
    var __asyncValues2;
    var __makeTemplateObject2;
    var __importStar2;
    var __importDefault2;
    var __classPrivateFieldGet2;
    var __classPrivateFieldSet2;
    var __createBinding2;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module7 === "object" && typeof module7.exports === "object") {
        factory(createExporter(root, createExporter(module7.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      __extends2 = function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest2 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate2 = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter2 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding2 = function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __exportStar2 = function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !exports2.hasOwnProperty(p))
            exports2[p] = m[p];
      };
      __values2 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread2 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read2(arguments[i]));
        return ar;
      };
      __spreadArrays2 = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __await2 = function(v) {
        return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator2 = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject2 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar2 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (Object.hasOwnProperty.call(mod, k))
              result[k] = mod[k];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault2 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet2 = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet2 = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate2);
      exporter("__param", __param2);
      exporter("__metadata", __metadata2);
      exporter("__awaiter", __awaiter2);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar2);
      exporter("__createBinding", __createBinding2);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread2);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator2);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject2);
      exporter("__importStar", __importStar2);
      exporter("__importDefault", __importDefault2);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
    });
  }
});

// node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js
var require_supportsWebCrypto = __commonJS({
  "node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;
    var tslib_1 = require_tslib4();
    var subtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function supportsWebCrypto(window2) {
      if (supportsSecureRandom(window2) && typeof window2.crypto.subtle === "object") {
        var subtle = window2.crypto.subtle;
        return supportsSubtleCrypto(subtle);
      }
      return false;
    }
    exports.supportsWebCrypto = supportsWebCrypto;
    function supportsSecureRandom(window2) {
      if (typeof window2 === "object" && typeof window2.crypto === "object") {
        var getRandomValues2 = window2.crypto.getRandomValues;
        return typeof getRandomValues2 === "function";
      }
      return false;
    }
    exports.supportsSecureRandom = supportsSecureRandom;
    function supportsSubtleCrypto(subtle) {
      return subtle && subtleCryptoMethods.every(function(methodName) {
        return typeof subtle[methodName] === "function";
      });
    }
    exports.supportsSubtleCrypto = supportsSubtleCrypto;
    function supportsZeroByteGCM(subtle) {
      return (0, tslib_1.__awaiter)(this, void 0, void 0, function() {
        var key, zeroByteAuthTag, _a;
        return (0, tslib_1.__generator)(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!supportsSubtleCrypto(subtle))
                return [2, false];
              _b.label = 1;
            case 1:
              _b.trys.push([1, 4, , 5]);
              return [4, subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"])];
            case 2:
              key = _b.sent();
              return [4, subtle.encrypt({
                name: "AES-GCM",
                iv: new Uint8Array(Array(12)),
                additionalData: new Uint8Array(Array(16)),
                tagLength: 128
              }, key, new Uint8Array(0))];
            case 3:
              zeroByteAuthTag = _b.sent();
              return [2, zeroByteAuthTag.byteLength === 16];
            case 4:
              _a = _b.sent();
              return [2, false];
            case 5:
              return [2];
          }
        });
      });
    }
    exports.supportsZeroByteGCM = supportsZeroByteGCM;
  }
});

// node_modules/@aws-crypto/supports-web-crypto/build/index.js
var require_build3 = __commonJS({
  "node_modules/@aws-crypto/supports-web-crypto/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib4();
    (0, tslib_1.__exportStar)(require_supportsWebCrypto(), exports);
  }
});

// node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.js
var require_tslib5 = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.js"(exports, module7) {
    var __extends2;
    var __assign2;
    var __rest2;
    var __decorate2;
    var __param2;
    var __metadata2;
    var __awaiter2;
    var __generator2;
    var __exportStar2;
    var __values2;
    var __read2;
    var __spread2;
    var __spreadArrays2;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator2;
    var __asyncValues2;
    var __makeTemplateObject2;
    var __importStar2;
    var __importDefault2;
    var __classPrivateFieldGet2;
    var __classPrivateFieldSet2;
    var __createBinding2;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module7 === "object" && typeof module7.exports === "object") {
        factory(createExporter(root, createExporter(module7.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      __extends2 = function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest2 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate2 = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter2 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding2 = function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __exportStar2 = function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !exports2.hasOwnProperty(p))
            exports2[p] = m[p];
      };
      __values2 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread2 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read2(arguments[i]));
        return ar;
      };
      __spreadArrays2 = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __await2 = function(v) {
        return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator2 = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject2 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar2 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (Object.hasOwnProperty.call(mod, k))
              result[k] = mod[k];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault2 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet2 = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet2 = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate2);
      exporter("__param", __param2);
      exporter("__metadata", __metadata2);
      exporter("__awaiter", __awaiter2);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar2);
      exporter("__createBinding", __createBinding2);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread2);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator2);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject2);
      exporter("__importStar", __importStar2);
      exporter("__importDefault", __importDefault2);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
    });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js
var require_CryptoOperation = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/Key.js
var require_Key = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/Key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js
var require_KeyOperation = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js
var require_MsSubtleCrypto = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/MsWindow.js
var require_MsWindow = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/MsWindow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMsWindow = void 0;
    var msSubtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function quacksLikeAnMsWindow(window2) {
      return "MSInputMethodContext" in window2 && "msCrypto" in window2;
    }
    function isMsWindow(window2) {
      if (quacksLikeAnMsWindow(window2) && window2.msCrypto.subtle !== void 0) {
        var _a = window2.msCrypto, getRandomValues2 = _a.getRandomValues, subtle_1 = _a.subtle;
        return msSubtleCryptoMethods.map(function(methodName) {
          return subtle_1[methodName];
        }).concat(getRandomValues2).every(function(method) {
          return typeof method === "function";
        });
      }
      return false;
    }
    exports.isMsWindow = isMsWindow;
  }
});

// node_modules/@aws-crypto/ie11-detection/build/index.js
var require_build4 = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib5();
    (0, tslib_1.__exportStar)(require_CryptoOperation(), exports);
    (0, tslib_1.__exportStar)(require_Key(), exports);
    (0, tslib_1.__exportStar)(require_KeyOperation(), exports);
    (0, tslib_1.__exportStar)(require_MsSubtleCrypto(), exports);
    (0, tslib_1.__exportStar)(require_MsWindow(), exports);
  }
});

// node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js
var require_crossPlatformSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var ie11Sha256_1 = require_ie11Sha256();
    var webCryptoSha256_1 = require_webCryptoSha256();
    var sha256_js_1 = require_build2();
    var supports_web_crypto_1 = require_build3();
    var ie11_detection_1 = require_build4();
    var util_locate_window_1 = require_dist_cjs2();
    var Sha2567 = function() {
      function Sha2568(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new webCryptoSha256_1.Sha256(secret);
        } else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new ie11Sha256_1.Sha256(secret);
        } else {
          this.hash = new sha256_js_1.Sha256(secret);
        }
      }
      Sha2568.prototype.update = function(data, encoding) {
        this.hash.update(data, encoding);
      };
      Sha2568.prototype.digest = function() {
        return this.hash.digest();
      };
      return Sha2568;
    }();
    exports.Sha256 = Sha2567;
  }
});

// node_modules/@aws-crypto/sha256-browser/build/index.js
var require_build5 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
    var tslib_1 = require_tslib2();
    (0, tslib_1.__exportStar)(require_crossPlatformSha256(), exports);
    var ie11Sha256_1 = require_ie11Sha256();
    Object.defineProperty(exports, "Ie11Sha256", { enumerable: true, get: function() {
      return ie11Sha256_1.Sha256;
    } });
    var webCryptoSha256_1 = require_webCryptoSha256();
    Object.defineProperty(exports, "WebCryptoSha256", { enumerable: true, get: function() {
      return webCryptoSha256_1.Sha256;
    } });
  }
});

// node_modules/bowser/es5.js
var require_es5 = __commonJS({
  "node_modules/bowser/es5.js"(exports, module7) {
    !function(e, t) {
      typeof exports == "object" && typeof module7 == "object" ? module7.exports = t() : typeof define == "function" && define.amd ? define([], t) : typeof exports == "object" ? exports.bowser = t() : e.bowser = t();
    }(exports, function() {
      return function(e) {
        var t = {};
        function r(n) {
          if (t[n])
            return t[n].exports;
          var i = t[n] = { i: n, l: false, exports: {} };
          return e[n].call(i.exports, i, i.exports, r), i.l = true, i.exports;
        }
        return r.m = e, r.c = t, r.d = function(e2, t2, n) {
          r.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: n });
        }, r.r = function(e2) {
          typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        }, r.t = function(e2, t2) {
          if (1 & t2 && (e2 = r(e2)), 8 & t2)
            return e2;
          if (4 & t2 && typeof e2 == "object" && e2 && e2.__esModule)
            return e2;
          var n = Object.create(null);
          if (r.r(n), Object.defineProperty(n, "default", { enumerable: true, value: e2 }), 2 & t2 && typeof e2 != "string")
            for (var i in e2)
              r.d(n, i, function(t3) {
                return e2[t3];
              }.bind(null, i));
          return n;
        }, r.n = function(e2) {
          var t2 = e2 && e2.__esModule ? function() {
            return e2.default;
          } : function() {
            return e2;
          };
          return r.d(t2, "a", t2), t2;
        }, r.o = function(e2, t2) {
          return Object.prototype.hasOwnProperty.call(e2, t2);
        }, r.p = "", r(r.s = 90);
      }({ 17: function(e, t, r) {
        "use strict";
        t.__esModule = true, t.default = void 0;
        var n = r(18), i = function() {
          function e2() {
          }
          return e2.getFirstMatch = function(e3, t2) {
            var r2 = t2.match(e3);
            return r2 && r2.length > 0 && r2[1] || "";
          }, e2.getSecondMatch = function(e3, t2) {
            var r2 = t2.match(e3);
            return r2 && r2.length > 1 && r2[2] || "";
          }, e2.matchAndReturnConst = function(e3, t2, r2) {
            if (e3.test(t2))
              return r2;
          }, e2.getWindowsVersionName = function(e3) {
            switch (e3) {
              case "NT":
                return "NT";
              case "XP":
                return "XP";
              case "NT 5.0":
                return "2000";
              case "NT 5.1":
                return "XP";
              case "NT 5.2":
                return "2003";
              case "NT 6.0":
                return "Vista";
              case "NT 6.1":
                return "7";
              case "NT 6.2":
                return "8";
              case "NT 6.3":
                return "8.1";
              case "NT 10.0":
                return "10";
              default:
                return;
            }
          }, e2.getMacOSVersionName = function(e3) {
            var t2 = e3.split(".").splice(0, 2).map(function(e4) {
              return parseInt(e4, 10) || 0;
            });
            if (t2.push(0), t2[0] === 10)
              switch (t2[1]) {
                case 5:
                  return "Leopard";
                case 6:
                  return "Snow Leopard";
                case 7:
                  return "Lion";
                case 8:
                  return "Mountain Lion";
                case 9:
                  return "Mavericks";
                case 10:
                  return "Yosemite";
                case 11:
                  return "El Capitan";
                case 12:
                  return "Sierra";
                case 13:
                  return "High Sierra";
                case 14:
                  return "Mojave";
                case 15:
                  return "Catalina";
                default:
                  return;
              }
          }, e2.getAndroidVersionName = function(e3) {
            var t2 = e3.split(".").splice(0, 2).map(function(e4) {
              return parseInt(e4, 10) || 0;
            });
            if (t2.push(0), !(t2[0] === 1 && t2[1] < 5))
              return t2[0] === 1 && t2[1] < 6 ? "Cupcake" : t2[0] === 1 && t2[1] >= 6 ? "Donut" : t2[0] === 2 && t2[1] < 2 ? "Eclair" : t2[0] === 2 && t2[1] === 2 ? "Froyo" : t2[0] === 2 && t2[1] > 2 ? "Gingerbread" : t2[0] === 3 ? "Honeycomb" : t2[0] === 4 && t2[1] < 1 ? "Ice Cream Sandwich" : t2[0] === 4 && t2[1] < 4 ? "Jelly Bean" : t2[0] === 4 && t2[1] >= 4 ? "KitKat" : t2[0] === 5 ? "Lollipop" : t2[0] === 6 ? "Marshmallow" : t2[0] === 7 ? "Nougat" : t2[0] === 8 ? "Oreo" : t2[0] === 9 ? "Pie" : void 0;
          }, e2.getVersionPrecision = function(e3) {
            return e3.split(".").length;
          }, e2.compareVersions = function(t2, r2, n2) {
            n2 === void 0 && (n2 = false);
            var i2 = e2.getVersionPrecision(t2), s = e2.getVersionPrecision(r2), a = Math.max(i2, s), o = 0, u = e2.map([t2, r2], function(t3) {
              var r3 = a - e2.getVersionPrecision(t3), n3 = t3 + new Array(r3 + 1).join(".0");
              return e2.map(n3.split("."), function(e3) {
                return new Array(20 - e3.length).join("0") + e3;
              }).reverse();
            });
            for (n2 && (o = a - Math.min(i2, s)), a -= 1; a >= o; ) {
              if (u[0][a] > u[1][a])
                return 1;
              if (u[0][a] === u[1][a]) {
                if (a === o)
                  return 0;
                a -= 1;
              } else if (u[0][a] < u[1][a])
                return -1;
            }
          }, e2.map = function(e3, t2) {
            var r2, n2 = [];
            if (Array.prototype.map)
              return Array.prototype.map.call(e3, t2);
            for (r2 = 0; r2 < e3.length; r2 += 1)
              n2.push(t2(e3[r2]));
            return n2;
          }, e2.find = function(e3, t2) {
            var r2, n2;
            if (Array.prototype.find)
              return Array.prototype.find.call(e3, t2);
            for (r2 = 0, n2 = e3.length; r2 < n2; r2 += 1) {
              var i2 = e3[r2];
              if (t2(i2, r2))
                return i2;
            }
          }, e2.assign = function(e3) {
            for (var t2, r2, n2 = e3, i2 = arguments.length, s = new Array(i2 > 1 ? i2 - 1 : 0), a = 1; a < i2; a++)
              s[a - 1] = arguments[a];
            if (Object.assign)
              return Object.assign.apply(Object, [e3].concat(s));
            var o = function() {
              var e4 = s[t2];
              typeof e4 == "object" && e4 !== null && Object.keys(e4).forEach(function(t3) {
                n2[t3] = e4[t3];
              });
            };
            for (t2 = 0, r2 = s.length; t2 < r2; t2 += 1)
              o();
            return e3;
          }, e2.getBrowserAlias = function(e3) {
            return n.BROWSER_ALIASES_MAP[e3];
          }, e2.getBrowserTypeByAlias = function(e3) {
            return n.BROWSER_MAP[e3] || "";
          }, e2;
        }();
        t.default = i, e.exports = t.default;
      }, 18: function(e, t, r) {
        "use strict";
        t.__esModule = true, t.ENGINE_MAP = t.OS_MAP = t.PLATFORMS_MAP = t.BROWSER_MAP = t.BROWSER_ALIASES_MAP = void 0;
        t.BROWSER_ALIASES_MAP = { "Amazon Silk": "amazon_silk", "Android Browser": "android", Bada: "bada", BlackBerry: "blackberry", Chrome: "chrome", Chromium: "chromium", Electron: "electron", Epiphany: "epiphany", Firefox: "firefox", Focus: "focus", Generic: "generic", "Google Search": "google_search", Googlebot: "googlebot", "Internet Explorer": "ie", "K-Meleon": "k_meleon", Maxthon: "maxthon", "Microsoft Edge": "edge", "MZ Browser": "mz", "NAVER Whale Browser": "naver", Opera: "opera", "Opera Coast": "opera_coast", PhantomJS: "phantomjs", Puffin: "puffin", QupZilla: "qupzilla", QQ: "qq", QQLite: "qqlite", Safari: "safari", Sailfish: "sailfish", "Samsung Internet for Android": "samsung_internet", SeaMonkey: "seamonkey", Sleipnir: "sleipnir", Swing: "swing", Tizen: "tizen", "UC Browser": "uc", Vivaldi: "vivaldi", "WebOS Browser": "webos", WeChat: "wechat", "Yandex Browser": "yandex", Roku: "roku" };
        t.BROWSER_MAP = { amazon_silk: "Amazon Silk", android: "Android Browser", bada: "Bada", blackberry: "BlackBerry", chrome: "Chrome", chromium: "Chromium", electron: "Electron", epiphany: "Epiphany", firefox: "Firefox", focus: "Focus", generic: "Generic", googlebot: "Googlebot", google_search: "Google Search", ie: "Internet Explorer", k_meleon: "K-Meleon", maxthon: "Maxthon", edge: "Microsoft Edge", mz: "MZ Browser", naver: "NAVER Whale Browser", opera: "Opera", opera_coast: "Opera Coast", phantomjs: "PhantomJS", puffin: "Puffin", qupzilla: "QupZilla", qq: "QQ Browser", qqlite: "QQ Browser Lite", safari: "Safari", sailfish: "Sailfish", samsung_internet: "Samsung Internet for Android", seamonkey: "SeaMonkey", sleipnir: "Sleipnir", swing: "Swing", tizen: "Tizen", uc: "UC Browser", vivaldi: "Vivaldi", webos: "WebOS Browser", wechat: "WeChat", yandex: "Yandex Browser" };
        t.PLATFORMS_MAP = { tablet: "tablet", mobile: "mobile", desktop: "desktop", tv: "tv" };
        t.OS_MAP = { WindowsPhone: "Windows Phone", Windows: "Windows", MacOS: "macOS", iOS: "iOS", Android: "Android", WebOS: "WebOS", BlackBerry: "BlackBerry", Bada: "Bada", Tizen: "Tizen", Linux: "Linux", ChromeOS: "Chrome OS", PlayStation4: "PlayStation 4", Roku: "Roku" };
        t.ENGINE_MAP = { EdgeHTML: "EdgeHTML", Blink: "Blink", Trident: "Trident", Presto: "Presto", Gecko: "Gecko", WebKit: "WebKit" };
      }, 90: function(e, t, r) {
        "use strict";
        t.__esModule = true, t.default = void 0;
        var n, i = (n = r(91)) && n.__esModule ? n : { default: n }, s = r(18);
        function a(e2, t2) {
          for (var r2 = 0; r2 < t2.length; r2++) {
            var n2 = t2[r2];
            n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e2, n2.key, n2);
          }
        }
        var o = function() {
          function e2() {
          }
          var t2, r2, n2;
          return e2.getParser = function(e3, t3) {
            if (t3 === void 0 && (t3 = false), typeof e3 != "string")
              throw new Error("UserAgent should be a string");
            return new i.default(e3, t3);
          }, e2.parse = function(e3) {
            return new i.default(e3).getResult();
          }, t2 = e2, n2 = [{ key: "BROWSER_MAP", get: function() {
            return s.BROWSER_MAP;
          } }, { key: "ENGINE_MAP", get: function() {
            return s.ENGINE_MAP;
          } }, { key: "OS_MAP", get: function() {
            return s.OS_MAP;
          } }, { key: "PLATFORMS_MAP", get: function() {
            return s.PLATFORMS_MAP;
          } }], (r2 = null) && a(t2.prototype, r2), n2 && a(t2, n2), e2;
        }();
        t.default = o, e.exports = t.default;
      }, 91: function(e, t, r) {
        "use strict";
        t.__esModule = true, t.default = void 0;
        var n = u(r(92)), i = u(r(93)), s = u(r(94)), a = u(r(95)), o = u(r(17));
        function u(e2) {
          return e2 && e2.__esModule ? e2 : { default: e2 };
        }
        var d = function() {
          function e2(e3, t3) {
            if (t3 === void 0 && (t3 = false), e3 == null || e3 === "")
              throw new Error("UserAgent parameter can't be empty");
            this._ua = e3, this.parsedResult = {}, t3 !== true && this.parse();
          }
          var t2 = e2.prototype;
          return t2.getUA = function() {
            return this._ua;
          }, t2.test = function(e3) {
            return e3.test(this._ua);
          }, t2.parseBrowser = function() {
            var e3 = this;
            this.parsedResult.browser = {};
            var t3 = o.default.find(n.default, function(t4) {
              if (typeof t4.test == "function")
                return t4.test(e3);
              if (t4.test instanceof Array)
                return t4.test.some(function(t5) {
                  return e3.test(t5);
                });
              throw new Error("Browser's test function is not valid");
            });
            return t3 && (this.parsedResult.browser = t3.describe(this.getUA())), this.parsedResult.browser;
          }, t2.getBrowser = function() {
            return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
          }, t2.getBrowserName = function(e3) {
            return e3 ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
          }, t2.getBrowserVersion = function() {
            return this.getBrowser().version;
          }, t2.getOS = function() {
            return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
          }, t2.parseOS = function() {
            var e3 = this;
            this.parsedResult.os = {};
            var t3 = o.default.find(i.default, function(t4) {
              if (typeof t4.test == "function")
                return t4.test(e3);
              if (t4.test instanceof Array)
                return t4.test.some(function(t5) {
                  return e3.test(t5);
                });
              throw new Error("Browser's test function is not valid");
            });
            return t3 && (this.parsedResult.os = t3.describe(this.getUA())), this.parsedResult.os;
          }, t2.getOSName = function(e3) {
            var t3 = this.getOS().name;
            return e3 ? String(t3).toLowerCase() || "" : t3 || "";
          }, t2.getOSVersion = function() {
            return this.getOS().version;
          }, t2.getPlatform = function() {
            return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
          }, t2.getPlatformType = function(e3) {
            e3 === void 0 && (e3 = false);
            var t3 = this.getPlatform().type;
            return e3 ? String(t3).toLowerCase() || "" : t3 || "";
          }, t2.parsePlatform = function() {
            var e3 = this;
            this.parsedResult.platform = {};
            var t3 = o.default.find(s.default, function(t4) {
              if (typeof t4.test == "function")
                return t4.test(e3);
              if (t4.test instanceof Array)
                return t4.test.some(function(t5) {
                  return e3.test(t5);
                });
              throw new Error("Browser's test function is not valid");
            });
            return t3 && (this.parsedResult.platform = t3.describe(this.getUA())), this.parsedResult.platform;
          }, t2.getEngine = function() {
            return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
          }, t2.getEngineName = function(e3) {
            return e3 ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
          }, t2.parseEngine = function() {
            var e3 = this;
            this.parsedResult.engine = {};
            var t3 = o.default.find(a.default, function(t4) {
              if (typeof t4.test == "function")
                return t4.test(e3);
              if (t4.test instanceof Array)
                return t4.test.some(function(t5) {
                  return e3.test(t5);
                });
              throw new Error("Browser's test function is not valid");
            });
            return t3 && (this.parsedResult.engine = t3.describe(this.getUA())), this.parsedResult.engine;
          }, t2.parse = function() {
            return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
          }, t2.getResult = function() {
            return o.default.assign({}, this.parsedResult);
          }, t2.satisfies = function(e3) {
            var t3 = this, r2 = {}, n2 = 0, i2 = {}, s2 = 0;
            if (Object.keys(e3).forEach(function(t4) {
              var a3 = e3[t4];
              typeof a3 == "string" ? (i2[t4] = a3, s2 += 1) : typeof a3 == "object" && (r2[t4] = a3, n2 += 1);
            }), n2 > 0) {
              var a2 = Object.keys(r2), u2 = o.default.find(a2, function(e4) {
                return t3.isOS(e4);
              });
              if (u2) {
                var d2 = this.satisfies(r2[u2]);
                if (d2 !== void 0)
                  return d2;
              }
              var c = o.default.find(a2, function(e4) {
                return t3.isPlatform(e4);
              });
              if (c) {
                var f = this.satisfies(r2[c]);
                if (f !== void 0)
                  return f;
              }
            }
            if (s2 > 0) {
              var l = Object.keys(i2), h = o.default.find(l, function(e4) {
                return t3.isBrowser(e4, true);
              });
              if (h !== void 0)
                return this.compareVersion(i2[h]);
            }
          }, t2.isBrowser = function(e3, t3) {
            t3 === void 0 && (t3 = false);
            var r2 = this.getBrowserName().toLowerCase(), n2 = e3.toLowerCase(), i2 = o.default.getBrowserTypeByAlias(n2);
            return t3 && i2 && (n2 = i2.toLowerCase()), n2 === r2;
          }, t2.compareVersion = function(e3) {
            var t3 = [0], r2 = e3, n2 = false, i2 = this.getBrowserVersion();
            if (typeof i2 == "string")
              return e3[0] === ">" || e3[0] === "<" ? (r2 = e3.substr(1), e3[1] === "=" ? (n2 = true, r2 = e3.substr(2)) : t3 = [], e3[0] === ">" ? t3.push(1) : t3.push(-1)) : e3[0] === "=" ? r2 = e3.substr(1) : e3[0] === "~" && (n2 = true, r2 = e3.substr(1)), t3.indexOf(o.default.compareVersions(i2, r2, n2)) > -1;
          }, t2.isOS = function(e3) {
            return this.getOSName(true) === String(e3).toLowerCase();
          }, t2.isPlatform = function(e3) {
            return this.getPlatformType(true) === String(e3).toLowerCase();
          }, t2.isEngine = function(e3) {
            return this.getEngineName(true) === String(e3).toLowerCase();
          }, t2.is = function(e3, t3) {
            return t3 === void 0 && (t3 = false), this.isBrowser(e3, t3) || this.isOS(e3) || this.isPlatform(e3);
          }, t2.some = function(e3) {
            var t3 = this;
            return e3 === void 0 && (e3 = []), e3.some(function(e4) {
              return t3.is(e4);
            });
          }, e2;
        }();
        t.default = d, e.exports = t.default;
      }, 92: function(e, t, r) {
        "use strict";
        t.__esModule = true, t.default = void 0;
        var n, i = (n = r(17)) && n.__esModule ? n : { default: n };
        var s = /version\/(\d+(\.?_?\d+)+)/i, a = [{ test: [/googlebot/i], describe: function(e2) {
          var t2 = { name: "Googlebot" }, r2 = i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e2) || i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/opera/i], describe: function(e2) {
          var t2 = { name: "Opera" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/opr\/|opios/i], describe: function(e2) {
          var t2 = { name: "Opera" }, r2 = i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e2) || i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/SamsungBrowser/i], describe: function(e2) {
          var t2 = { name: "Samsung Internet for Android" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/Whale/i], describe: function(e2) {
          var t2 = { name: "NAVER Whale Browser" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/MZBrowser/i], describe: function(e2) {
          var t2 = { name: "MZ Browser" }, r2 = i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/focus/i], describe: function(e2) {
          var t2 = { name: "Focus" }, r2 = i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/swing/i], describe: function(e2) {
          var t2 = { name: "Swing" }, r2 = i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/coast/i], describe: function(e2) {
          var t2 = { name: "Opera Coast" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/opt\/\d+(?:.?_?\d+)+/i], describe: function(e2) {
          var t2 = { name: "Opera Touch" }, r2 = i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/yabrowser/i], describe: function(e2) {
          var t2 = { name: "Yandex Browser" }, r2 = i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/ucbrowser/i], describe: function(e2) {
          var t2 = { name: "UC Browser" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/Maxthon|mxios/i], describe: function(e2) {
          var t2 = { name: "Maxthon" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/epiphany/i], describe: function(e2) {
          var t2 = { name: "Epiphany" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/puffin/i], describe: function(e2) {
          var t2 = { name: "Puffin" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/sleipnir/i], describe: function(e2) {
          var t2 = { name: "Sleipnir" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/k-meleon/i], describe: function(e2) {
          var t2 = { name: "K-Meleon" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/micromessenger/i], describe: function(e2) {
          var t2 = { name: "WeChat" }, r2 = i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/qqbrowser/i], describe: function(e2) {
          var t2 = { name: /qqbrowserlite/i.test(e2) ? "QQ Browser Lite" : "QQ Browser" }, r2 = i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/msie|trident/i], describe: function(e2) {
          var t2 = { name: "Internet Explorer" }, r2 = i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/\sedg\//i], describe: function(e2) {
          var t2 = { name: "Microsoft Edge" }, r2 = i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/edg([ea]|ios)/i], describe: function(e2) {
          var t2 = { name: "Microsoft Edge" }, r2 = i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/vivaldi/i], describe: function(e2) {
          var t2 = { name: "Vivaldi" }, r2 = i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/seamonkey/i], describe: function(e2) {
          var t2 = { name: "SeaMonkey" }, r2 = i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/sailfish/i], describe: function(e2) {
          var t2 = { name: "Sailfish" }, r2 = i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/silk/i], describe: function(e2) {
          var t2 = { name: "Amazon Silk" }, r2 = i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/phantom/i], describe: function(e2) {
          var t2 = { name: "PhantomJS" }, r2 = i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/slimerjs/i], describe: function(e2) {
          var t2 = { name: "SlimerJS" }, r2 = i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/blackberry|\bbb\d+/i, /rim\stablet/i], describe: function(e2) {
          var t2 = { name: "BlackBerry" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/(web|hpw)[o0]s/i], describe: function(e2) {
          var t2 = { name: "WebOS Browser" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/bada/i], describe: function(e2) {
          var t2 = { name: "Bada" }, r2 = i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/tizen/i], describe: function(e2) {
          var t2 = { name: "Tizen" }, r2 = i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/qupzilla/i], describe: function(e2) {
          var t2 = { name: "QupZilla" }, r2 = i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/firefox|iceweasel|fxios/i], describe: function(e2) {
          var t2 = { name: "Firefox" }, r2 = i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/electron/i], describe: function(e2) {
          var t2 = { name: "Electron" }, r2 = i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/MiuiBrowser/i], describe: function(e2) {
          var t2 = { name: "Miui" }, r2 = i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/chromium/i], describe: function(e2) {
          var t2 = { name: "Chromium" }, r2 = i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/chrome|crios|crmo/i], describe: function(e2) {
          var t2 = { name: "Chrome" }, r2 = i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/GSA/i], describe: function(e2) {
          var t2 = { name: "Google Search" }, r2 = i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: function(e2) {
          var t2 = !e2.test(/like android/i), r2 = e2.test(/android/i);
          return t2 && r2;
        }, describe: function(e2) {
          var t2 = { name: "Android Browser" }, r2 = i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/playstation 4/i], describe: function(e2) {
          var t2 = { name: "PlayStation 4" }, r2 = i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/safari|applewebkit/i], describe: function(e2) {
          var t2 = { name: "Safari" }, r2 = i.default.getFirstMatch(s, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/.*/i], describe: function(e2) {
          var t2 = e2.search("\\(") !== -1 ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
          return { name: i.default.getFirstMatch(t2, e2), version: i.default.getSecondMatch(t2, e2) };
        } }];
        t.default = a, e.exports = t.default;
      }, 93: function(e, t, r) {
        "use strict";
        t.__esModule = true, t.default = void 0;
        var n, i = (n = r(17)) && n.__esModule ? n : { default: n }, s = r(18);
        var a = [{ test: [/Roku\/DVP/], describe: function(e2) {
          var t2 = i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e2);
          return { name: s.OS_MAP.Roku, version: t2 };
        } }, { test: [/windows phone/i], describe: function(e2) {
          var t2 = i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e2);
          return { name: s.OS_MAP.WindowsPhone, version: t2 };
        } }, { test: [/windows /i], describe: function(e2) {
          var t2 = i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e2), r2 = i.default.getWindowsVersionName(t2);
          return { name: s.OS_MAP.Windows, version: t2, versionName: r2 };
        } }, { test: [/Macintosh(.*?) FxiOS(.*?)\//], describe: function(e2) {
          var t2 = { name: s.OS_MAP.iOS }, r2 = i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/macintosh/i], describe: function(e2) {
          var t2 = i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e2).replace(/[_\s]/g, "."), r2 = i.default.getMacOSVersionName(t2), n2 = { name: s.OS_MAP.MacOS, version: t2 };
          return r2 && (n2.versionName = r2), n2;
        } }, { test: [/(ipod|iphone|ipad)/i], describe: function(e2) {
          var t2 = i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e2).replace(/[_\s]/g, ".");
          return { name: s.OS_MAP.iOS, version: t2 };
        } }, { test: function(e2) {
          var t2 = !e2.test(/like android/i), r2 = e2.test(/android/i);
          return t2 && r2;
        }, describe: function(e2) {
          var t2 = i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e2), r2 = i.default.getAndroidVersionName(t2), n2 = { name: s.OS_MAP.Android, version: t2 };
          return r2 && (n2.versionName = r2), n2;
        } }, { test: [/(web|hpw)[o0]s/i], describe: function(e2) {
          var t2 = i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e2), r2 = { name: s.OS_MAP.WebOS };
          return t2 && t2.length && (r2.version = t2), r2;
        } }, { test: [/blackberry|\bbb\d+/i, /rim\stablet/i], describe: function(e2) {
          var t2 = i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e2) || i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e2) || i.default.getFirstMatch(/\bbb(\d+)/i, e2);
          return { name: s.OS_MAP.BlackBerry, version: t2 };
        } }, { test: [/bada/i], describe: function(e2) {
          var t2 = i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e2);
          return { name: s.OS_MAP.Bada, version: t2 };
        } }, { test: [/tizen/i], describe: function(e2) {
          var t2 = i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e2);
          return { name: s.OS_MAP.Tizen, version: t2 };
        } }, { test: [/linux/i], describe: function() {
          return { name: s.OS_MAP.Linux };
        } }, { test: [/CrOS/], describe: function() {
          return { name: s.OS_MAP.ChromeOS };
        } }, { test: [/PlayStation 4/], describe: function(e2) {
          var t2 = i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e2);
          return { name: s.OS_MAP.PlayStation4, version: t2 };
        } }];
        t.default = a, e.exports = t.default;
      }, 94: function(e, t, r) {
        "use strict";
        t.__esModule = true, t.default = void 0;
        var n, i = (n = r(17)) && n.__esModule ? n : { default: n }, s = r(18);
        var a = [{ test: [/googlebot/i], describe: function() {
          return { type: "bot", vendor: "Google" };
        } }, { test: [/huawei/i], describe: function(e2) {
          var t2 = i.default.getFirstMatch(/(can-l01)/i, e2) && "Nova", r2 = { type: s.PLATFORMS_MAP.mobile, vendor: "Huawei" };
          return t2 && (r2.model = t2), r2;
        } }, { test: [/nexus\s*(?:7|8|9|10).*/i], describe: function() {
          return { type: s.PLATFORMS_MAP.tablet, vendor: "Nexus" };
        } }, { test: [/ipad/i], describe: function() {
          return { type: s.PLATFORMS_MAP.tablet, vendor: "Apple", model: "iPad" };
        } }, { test: [/Macintosh(.*?) FxiOS(.*?)\//], describe: function() {
          return { type: s.PLATFORMS_MAP.tablet, vendor: "Apple", model: "iPad" };
        } }, { test: [/kftt build/i], describe: function() {
          return { type: s.PLATFORMS_MAP.tablet, vendor: "Amazon", model: "Kindle Fire HD 7" };
        } }, { test: [/silk/i], describe: function() {
          return { type: s.PLATFORMS_MAP.tablet, vendor: "Amazon" };
        } }, { test: [/tablet(?! pc)/i], describe: function() {
          return { type: s.PLATFORMS_MAP.tablet };
        } }, { test: function(e2) {
          var t2 = e2.test(/ipod|iphone/i), r2 = e2.test(/like (ipod|iphone)/i);
          return t2 && !r2;
        }, describe: function(e2) {
          var t2 = i.default.getFirstMatch(/(ipod|iphone)/i, e2);
          return { type: s.PLATFORMS_MAP.mobile, vendor: "Apple", model: t2 };
        } }, { test: [/nexus\s*[0-6].*/i, /galaxy nexus/i], describe: function() {
          return { type: s.PLATFORMS_MAP.mobile, vendor: "Nexus" };
        } }, { test: [/[^-]mobi/i], describe: function() {
          return { type: s.PLATFORMS_MAP.mobile };
        } }, { test: function(e2) {
          return e2.getBrowserName(true) === "blackberry";
        }, describe: function() {
          return { type: s.PLATFORMS_MAP.mobile, vendor: "BlackBerry" };
        } }, { test: function(e2) {
          return e2.getBrowserName(true) === "bada";
        }, describe: function() {
          return { type: s.PLATFORMS_MAP.mobile };
        } }, { test: function(e2) {
          return e2.getBrowserName() === "windows phone";
        }, describe: function() {
          return { type: s.PLATFORMS_MAP.mobile, vendor: "Microsoft" };
        } }, { test: function(e2) {
          var t2 = Number(String(e2.getOSVersion()).split(".")[0]);
          return e2.getOSName(true) === "android" && t2 >= 3;
        }, describe: function() {
          return { type: s.PLATFORMS_MAP.tablet };
        } }, { test: function(e2) {
          return e2.getOSName(true) === "android";
        }, describe: function() {
          return { type: s.PLATFORMS_MAP.mobile };
        } }, { test: function(e2) {
          return e2.getOSName(true) === "macos";
        }, describe: function() {
          return { type: s.PLATFORMS_MAP.desktop, vendor: "Apple" };
        } }, { test: function(e2) {
          return e2.getOSName(true) === "windows";
        }, describe: function() {
          return { type: s.PLATFORMS_MAP.desktop };
        } }, { test: function(e2) {
          return e2.getOSName(true) === "linux";
        }, describe: function() {
          return { type: s.PLATFORMS_MAP.desktop };
        } }, { test: function(e2) {
          return e2.getOSName(true) === "playstation 4";
        }, describe: function() {
          return { type: s.PLATFORMS_MAP.tv };
        } }, { test: function(e2) {
          return e2.getOSName(true) === "roku";
        }, describe: function() {
          return { type: s.PLATFORMS_MAP.tv };
        } }];
        t.default = a, e.exports = t.default;
      }, 95: function(e, t, r) {
        "use strict";
        t.__esModule = true, t.default = void 0;
        var n, i = (n = r(17)) && n.__esModule ? n : { default: n }, s = r(18);
        var a = [{ test: function(e2) {
          return e2.getBrowserName(true) === "microsoft edge";
        }, describe: function(e2) {
          if (/\sedg\//i.test(e2))
            return { name: s.ENGINE_MAP.Blink };
          var t2 = i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e2);
          return { name: s.ENGINE_MAP.EdgeHTML, version: t2 };
        } }, { test: [/trident/i], describe: function(e2) {
          var t2 = { name: s.ENGINE_MAP.Trident }, r2 = i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: function(e2) {
          return e2.test(/presto/i);
        }, describe: function(e2) {
          var t2 = { name: s.ENGINE_MAP.Presto }, r2 = i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: function(e2) {
          var t2 = e2.test(/gecko/i), r2 = e2.test(/like gecko/i);
          return t2 && !r2;
        }, describe: function(e2) {
          var t2 = { name: s.ENGINE_MAP.Gecko }, r2 = i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }, { test: [/(apple)?webkit\/537\.36/i], describe: function() {
          return { name: s.ENGINE_MAP.Blink };
        } }, { test: [/(apple)?webkit/i], describe: function(e2) {
          var t2 = { name: s.ENGINE_MAP.WebKit }, r2 = i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e2);
          return r2 && (t2.version = r2), t2;
        } }];
        t.default = a, e.exports = t.default;
      } });
    });
  }
});

// node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.js
var require_tslib6 = __commonJS({
  "node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.js"(exports, module7) {
    var __extends2;
    var __assign2;
    var __rest2;
    var __decorate2;
    var __param2;
    var __metadata2;
    var __awaiter2;
    var __generator2;
    var __exportStar2;
    var __values2;
    var __read2;
    var __spread2;
    var __spreadArrays2;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator2;
    var __asyncValues2;
    var __makeTemplateObject2;
    var __importStar2;
    var __importDefault2;
    var __classPrivateFieldGet2;
    var __classPrivateFieldSet2;
    var __createBinding2;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module7 === "object" && typeof module7.exports === "object") {
        factory(createExporter(root, createExporter(module7.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      __extends2 = function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest2 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate2 = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter2 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding2 = function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __exportStar2 = function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !exports2.hasOwnProperty(p))
            exports2[p] = m[p];
      };
      __values2 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread2 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read2(arguments[i]));
        return ar;
      };
      __spreadArrays2 = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __await2 = function(v) {
        return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator2 = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject2 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar2 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (Object.hasOwnProperty.call(mod, k))
              result[k] = mod[k];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault2 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet2 = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet2 = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate2);
      exporter("__param", __param2);
      exporter("__metadata", __metadata2);
      exporter("__awaiter", __awaiter2);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar2);
      exporter("__createBinding", __createBinding2);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread2);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator2);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject2);
      exporter("__importStar", __importStar2);
      exporter("__importDefault", __importDefault2);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
    });
  }
});

// node_modules/@aws-crypto/crc32/build/aws_crc32.js
var require_aws_crc32 = __commonJS({
  "node_modules/@aws-crypto/crc32/build/aws_crc32.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsCrc32 = void 0;
    var tslib_1 = require_tslib6();
    var util_1 = require_build();
    var index_1 = require_build6();
    var AwsCrc32 = function() {
      function AwsCrc322() {
        this.crc32 = new index_1.Crc32();
      }
      AwsCrc322.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash))
          return;
        this.crc32.update((0, util_1.convertToBuffer)(toHash));
      };
      AwsCrc322.prototype.digest = function() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function() {
          return (0, tslib_1.__generator)(this, function(_a) {
            return [2, (0, util_1.numToUint8)(this.crc32.digest())];
          });
        });
      };
      return AwsCrc322;
    }();
    exports.AwsCrc32 = AwsCrc32;
  }
});

// node_modules/@aws-crypto/crc32/build/index.js
var require_build6 = __commonJS({
  "node_modules/@aws-crypto/crc32/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsCrc32 = exports.Crc32 = exports.crc32 = void 0;
    var tslib_1 = require_tslib6();
    var util_1 = require_build();
    function crc32(data) {
      return new Crc323().update(data).digest();
    }
    exports.crc32 = crc32;
    var Crc323 = function() {
      function Crc324() {
        this.checksum = 4294967295;
      }
      Crc324.prototype.update = function(data) {
        var e_1, _a;
        try {
          for (var data_1 = (0, tslib_1.__values)(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
            var byte = data_1_1.value;
            this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (data_1_1 && !data_1_1.done && (_a = data_1.return))
              _a.call(data_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return this;
      };
      Crc324.prototype.digest = function() {
        return (this.checksum ^ 4294967295) >>> 0;
      };
      return Crc324;
    }();
    exports.Crc32 = Crc323;
    var a_lookUpTable = [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
    var aws_crc32_1 = require_aws_crc32();
    Object.defineProperty(exports, "AwsCrc32", { enumerable: true, get: function() {
      return aws_crc32_1.AwsCrc32;
    } });
  }
});

// node_modules/entities/lib/maps/entities.json
var require_entities = __commonJS({
  "node_modules/entities/lib/maps/entities.json"(exports, module7) {
    module7.exports = { Aacute: "\xC1", aacute: "\xE1", Abreve: "\u0102", abreve: "\u0103", ac: "\u223E", acd: "\u223F", acE: "\u223E\u0333", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", Acy: "\u0410", acy: "\u0430", AElig: "\xC6", aelig: "\xE6", af: "\u2061", Afr: "\u{1D504}", afr: "\u{1D51E}", Agrave: "\xC0", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", Alpha: "\u0391", alpha: "\u03B1", Amacr: "\u0100", amacr: "\u0101", amalg: "\u2A3F", amp: "&", AMP: "&", andand: "\u2A55", And: "\u2A53", and: "\u2227", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angmsd: "\u2221", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", Aogon: "\u0104", aogon: "\u0105", Aopf: "\u{1D538}", aopf: "\u{1D552}", apacir: "\u2A6F", ap: "\u2248", apE: "\u2A70", ape: "\u224A", apid: "\u224B", apos: "'", ApplyFunction: "\u2061", approx: "\u2248", approxeq: "\u224A", Aring: "\xC5", aring: "\xE5", Ascr: "\u{1D49C}", ascr: "\u{1D4B6}", Assign: "\u2254", ast: "*", asymp: "\u2248", asympeq: "\u224D", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", awconint: "\u2233", awint: "\u2A11", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", Backslash: "\u2216", Barv: "\u2AE7", barvee: "\u22BD", barwed: "\u2305", Barwed: "\u2306", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", Bcy: "\u0411", bcy: "\u0431", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", Because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", Bernoullis: "\u212C", Beta: "\u0392", beta: "\u03B2", beth: "\u2136", between: "\u226C", Bfr: "\u{1D505}", bfr: "\u{1D51F}", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bNot: "\u2AED", bnot: "\u2310", Bopf: "\u{1D539}", bopf: "\u{1D553}", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxbox: "\u29C9", boxdl: "\u2510", boxdL: "\u2555", boxDl: "\u2556", boxDL: "\u2557", boxdr: "\u250C", boxdR: "\u2552", boxDr: "\u2553", boxDR: "\u2554", boxh: "\u2500", boxH: "\u2550", boxhd: "\u252C", boxHd: "\u2564", boxhD: "\u2565", boxHD: "\u2566", boxhu: "\u2534", boxHu: "\u2567", boxhU: "\u2568", boxHU: "\u2569", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxuL: "\u255B", boxUl: "\u255C", boxUL: "\u255D", boxur: "\u2514", boxuR: "\u2558", boxUr: "\u2559", boxUR: "\u255A", boxv: "\u2502", boxV: "\u2551", boxvh: "\u253C", boxvH: "\u256A", boxVh: "\u256B", boxVH: "\u256C", boxvl: "\u2524", boxvL: "\u2561", boxVl: "\u2562", boxVL: "\u2563", boxvr: "\u251C", boxvR: "\u255E", boxVr: "\u255F", boxVR: "\u2560", bprime: "\u2035", breve: "\u02D8", Breve: "\u02D8", brvbar: "\xA6", bscr: "\u{1D4B7}", Bscr: "\u212C", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsolb: "\u29C5", bsol: "\\", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpE: "\u2AAE", bumpe: "\u224F", Bumpeq: "\u224E", bumpeq: "\u224F", Cacute: "\u0106", cacute: "\u0107", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", cap: "\u2229", Cap: "\u22D2", capcup: "\u2A47", capdot: "\u2A40", CapitalDifferentialD: "\u2145", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", Cayleys: "\u212D", ccaps: "\u2A4D", Ccaron: "\u010C", ccaron: "\u010D", Ccedil: "\xC7", ccedil: "\xE7", Ccirc: "\u0108", ccirc: "\u0109", Cconint: "\u2230", ccups: "\u2A4C", ccupssm: "\u2A50", Cdot: "\u010A", cdot: "\u010B", cedil: "\xB8", Cedilla: "\xB8", cemptyv: "\u29B2", cent: "\xA2", centerdot: "\xB7", CenterDot: "\xB7", cfr: "\u{1D520}", Cfr: "\u212D", CHcy: "\u0427", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", Chi: "\u03A7", chi: "\u03C7", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", CircleDot: "\u2299", circledR: "\xAE", circledS: "\u24C8", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", cir: "\u25CB", cirE: "\u29C3", cire: "\u2257", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", clubs: "\u2663", clubsuit: "\u2663", colon: ":", Colon: "\u2237", Colone: "\u2A74", colone: "\u2254", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", Congruent: "\u2261", conint: "\u222E", Conint: "\u222F", ContourIntegral: "\u222E", copf: "\u{1D554}", Copf: "\u2102", coprod: "\u2210", Coproduct: "\u2210", copy: "\xA9", COPY: "\xA9", copysr: "\u2117", CounterClockwiseContourIntegral: "\u2233", crarr: "\u21B5", cross: "\u2717", Cross: "\u2A2F", Cscr: "\u{1D49E}", cscr: "\u{1D4B8}", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cupbrcap: "\u2A48", cupcap: "\u2A46", CupCap: "\u224D", cup: "\u222A", Cup: "\u22D3", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dagger: "\u2020", Dagger: "\u2021", daleth: "\u2138", darr: "\u2193", Darr: "\u21A1", dArr: "\u21D3", dash: "\u2010", Dashv: "\u2AE4", dashv: "\u22A3", dbkarow: "\u290F", dblac: "\u02DD", Dcaron: "\u010E", dcaron: "\u010F", Dcy: "\u0414", dcy: "\u0434", ddagger: "\u2021", ddarr: "\u21CA", DD: "\u2145", dd: "\u2146", DDotrahd: "\u2911", ddotseq: "\u2A77", deg: "\xB0", Del: "\u2207", Delta: "\u0394", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", Dfr: "\u{1D507}", dfr: "\u{1D521}", dHar: "\u2965", dharl: "\u21C3", dharr: "\u21C2", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", diam: "\u22C4", diamond: "\u22C4", Diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", DifferentialD: "\u2146", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", DJcy: "\u0402", djcy: "\u0452", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", Dopf: "\u{1D53B}", dopf: "\u{1D555}", Dot: "\xA8", dot: "\u02D9", DotDot: "\u20DC", doteq: "\u2250", doteqdot: "\u2251", DotEqual: "\u2250", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", DownArrowBar: "\u2913", downarrow: "\u2193", DownArrow: "\u2193", Downarrow: "\u21D3", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVectorBar: "\u2956", DownLeftVector: "\u21BD", DownRightTeeVector: "\u295F", DownRightVectorBar: "\u2957", DownRightVector: "\u21C1", DownTeeArrow: "\u21A7", DownTee: "\u22A4", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", Dscr: "\u{1D49F}", dscr: "\u{1D4B9}", DScy: "\u0405", dscy: "\u0455", dsol: "\u29F6", Dstrok: "\u0110", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", DZcy: "\u040F", dzcy: "\u045F", dzigrarr: "\u27FF", Eacute: "\xC9", eacute: "\xE9", easter: "\u2A6E", Ecaron: "\u011A", ecaron: "\u011B", Ecirc: "\xCA", ecirc: "\xEA", ecir: "\u2256", ecolon: "\u2255", Ecy: "\u042D", ecy: "\u044D", eDDot: "\u2A77", Edot: "\u0116", edot: "\u0117", eDot: "\u2251", ee: "\u2147", efDot: "\u2252", Efr: "\u{1D508}", efr: "\u{1D522}", eg: "\u2A9A", Egrave: "\xC8", egrave: "\xE8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", Element: "\u2208", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", Emacr: "\u0112", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", EmptySmallSquare: "\u25FB", emptyv: "\u2205", EmptyVerySmallSquare: "\u25AB", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", ENG: "\u014A", eng: "\u014B", ensp: "\u2002", Eogon: "\u0118", eogon: "\u0119", Eopf: "\u{1D53C}", eopf: "\u{1D556}", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", Epsilon: "\u0395", epsilon: "\u03B5", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", Equal: "\u2A75", equals: "=", EqualTilde: "\u2242", equest: "\u225F", Equilibrium: "\u21CC", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erarr: "\u2971", erDot: "\u2253", escr: "\u212F", Escr: "\u2130", esdot: "\u2250", Esim: "\u2A73", esim: "\u2242", Eta: "\u0397", eta: "\u03B7", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", euro: "\u20AC", excl: "!", exist: "\u2203", Exists: "\u2203", expectation: "\u2130", exponentiale: "\u2147", ExponentialE: "\u2147", fallingdotseq: "\u2252", Fcy: "\u0424", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", Ffr: "\u{1D509}", ffr: "\u{1D523}", filig: "\uFB01", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", Fopf: "\u{1D53D}", fopf: "\u{1D557}", forall: "\u2200", ForAll: "\u2200", fork: "\u22D4", forkv: "\u2AD9", Fouriertrf: "\u2131", fpartint: "\u2A0D", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\u{1D4BB}", Fscr: "\u2131", gacute: "\u01F5", Gamma: "\u0393", gamma: "\u03B3", Gammad: "\u03DC", gammad: "\u03DD", gap: "\u2A86", Gbreve: "\u011E", gbreve: "\u011F", Gcedil: "\u0122", Gcirc: "\u011C", gcirc: "\u011D", Gcy: "\u0413", gcy: "\u0433", Gdot: "\u0120", gdot: "\u0121", ge: "\u2265", gE: "\u2267", gEl: "\u2A8C", gel: "\u22DB", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", gescc: "\u2AA9", ges: "\u2A7E", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", Gfr: "\u{1D50A}", gfr: "\u{1D524}", gg: "\u226B", Gg: "\u22D9", ggg: "\u22D9", gimel: "\u2137", GJcy: "\u0403", gjcy: "\u0453", gla: "\u2AA5", gl: "\u2277", glE: "\u2A92", glj: "\u2AA4", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gnE: "\u2269", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", Gopf: "\u{1D53E}", gopf: "\u{1D558}", grave: "`", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Gscr: "\u{1D4A2}", gscr: "\u210A", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", gtcc: "\u2AA7", gtcir: "\u2A7A", gt: ">", GT: ">", Gt: "\u226B", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", Hacek: "\u02C7", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", HARDcy: "\u042A", hardcy: "\u044A", harrcir: "\u2948", harr: "\u2194", hArr: "\u21D4", harrw: "\u21AD", Hat: "^", hbar: "\u210F", Hcirc: "\u0124", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\u{1D525}", Hfr: "\u210C", HilbertSpace: "\u210B", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\u{1D559}", Hopf: "\u210D", horbar: "\u2015", HorizontalLine: "\u2500", hscr: "\u{1D4BD}", Hscr: "\u210B", hslash: "\u210F", Hstrok: "\u0126", hstrok: "\u0127", HumpDownHump: "\u224E", HumpEqual: "\u224F", hybull: "\u2043", hyphen: "\u2010", Iacute: "\xCD", iacute: "\xED", ic: "\u2063", Icirc: "\xCE", icirc: "\xEE", Icy: "\u0418", icy: "\u0438", Idot: "\u0130", IEcy: "\u0415", iecy: "\u0435", iexcl: "\xA1", iff: "\u21D4", ifr: "\u{1D526}", Ifr: "\u2111", Igrave: "\xCC", igrave: "\xEC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", IJlig: "\u0132", ijlig: "\u0133", Imacr: "\u012A", imacr: "\u012B", image: "\u2111", ImaginaryI: "\u2148", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", Im: "\u2111", imof: "\u22B7", imped: "\u01B5", Implies: "\u21D2", incare: "\u2105", in: "\u2208", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", intcal: "\u22BA", int: "\u222B", Int: "\u222C", integers: "\u2124", Integral: "\u222B", intercal: "\u22BA", Intersection: "\u22C2", intlarhk: "\u2A17", intprod: "\u2A3C", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", IOcy: "\u0401", iocy: "\u0451", Iogon: "\u012E", iogon: "\u012F", Iopf: "\u{1D540}", iopf: "\u{1D55A}", Iota: "\u0399", iota: "\u03B9", iprod: "\u2A3C", iquest: "\xBF", iscr: "\u{1D4BE}", Iscr: "\u2110", isin: "\u2208", isindot: "\u22F5", isinE: "\u22F9", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", Itilde: "\u0128", itilde: "\u0129", Iukcy: "\u0406", iukcy: "\u0456", Iuml: "\xCF", iuml: "\xEF", Jcirc: "\u0134", jcirc: "\u0135", Jcy: "\u0419", jcy: "\u0439", Jfr: "\u{1D50D}", jfr: "\u{1D527}", jmath: "\u0237", Jopf: "\u{1D541}", jopf: "\u{1D55B}", Jscr: "\u{1D4A5}", jscr: "\u{1D4BF}", Jsercy: "\u0408", jsercy: "\u0458", Jukcy: "\u0404", jukcy: "\u0454", Kappa: "\u039A", kappa: "\u03BA", kappav: "\u03F0", Kcedil: "\u0136", kcedil: "\u0137", Kcy: "\u041A", kcy: "\u043A", Kfr: "\u{1D50E}", kfr: "\u{1D528}", kgreen: "\u0138", KHcy: "\u0425", khcy: "\u0445", KJcy: "\u040C", kjcy: "\u045C", Kopf: "\u{1D542}", kopf: "\u{1D55C}", Kscr: "\u{1D4A6}", kscr: "\u{1D4C0}", lAarr: "\u21DA", Lacute: "\u0139", lacute: "\u013A", laemptyv: "\u29B4", lagran: "\u2112", Lambda: "\u039B", lambda: "\u03BB", lang: "\u27E8", Lang: "\u27EA", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", Laplacetrf: "\u2112", laquo: "\xAB", larrb: "\u21E4", larrbfs: "\u291F", larr: "\u2190", Larr: "\u219E", lArr: "\u21D0", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", latail: "\u2919", lAtail: "\u291B", lat: "\u2AAB", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lBarr: "\u290E", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", Lcaron: "\u013D", lcaron: "\u013E", Lcedil: "\u013B", lcedil: "\u013C", lceil: "\u2308", lcub: "{", Lcy: "\u041B", lcy: "\u043B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", lE: "\u2266", LeftAngleBracket: "\u27E8", LeftArrowBar: "\u21E4", leftarrow: "\u2190", LeftArrow: "\u2190", Leftarrow: "\u21D0", LeftArrowRightArrow: "\u21C6", leftarrowtail: "\u21A2", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVectorBar: "\u2959", LeftDownVector: "\u21C3", LeftFloor: "\u230A", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", LeftRightArrow: "\u2194", Leftrightarrow: "\u21D4", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", LeftRightVector: "\u294E", LeftTeeArrow: "\u21A4", LeftTee: "\u22A3", LeftTeeVector: "\u295A", leftthreetimes: "\u22CB", LeftTriangleBar: "\u29CF", LeftTriangle: "\u22B2", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVectorBar: "\u2958", LeftUpVector: "\u21BF", LeftVectorBar: "\u2952", LeftVector: "\u21BC", lEg: "\u2A8B", leg: "\u22DA", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", lescc: "\u2AA8", les: "\u2A7D", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", LessLess: "\u2AA1", lesssim: "\u2272", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", lfisht: "\u297C", lfloor: "\u230A", Lfr: "\u{1D50F}", lfr: "\u{1D529}", lg: "\u2276", lgE: "\u2A91", lHar: "\u2962", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", LJcy: "\u0409", ljcy: "\u0459", llarr: "\u21C7", ll: "\u226A", Ll: "\u22D8", llcorner: "\u231E", Lleftarrow: "\u21DA", llhard: "\u296B", lltri: "\u25FA", Lmidot: "\u013F", lmidot: "\u0140", lmoustache: "\u23B0", lmoust: "\u23B0", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lnE: "\u2268", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", LongLeftArrow: "\u27F5", Longleftarrow: "\u27F8", longleftrightarrow: "\u27F7", LongLeftRightArrow: "\u27F7", Longleftrightarrow: "\u27FA", longmapsto: "\u27FC", longrightarrow: "\u27F6", LongRightArrow: "\u27F6", Longrightarrow: "\u27F9", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", Lopf: "\u{1D543}", lopf: "\u{1D55D}", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\u{1D4C1}", Lscr: "\u2112", lsh: "\u21B0", Lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", Lstrok: "\u0141", lstrok: "\u0142", ltcc: "\u2AA6", ltcir: "\u2A79", lt: "<", LT: "<", Lt: "\u226A", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", ltrPar: "\u2996", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", Map: "\u2905", map: "\u21A6", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", Mcy: "\u041C", mcy: "\u043C", mdash: "\u2014", mDDot: "\u223A", measuredangle: "\u2221", MediumSpace: "\u205F", Mellintrf: "\u2133", Mfr: "\u{1D510}", mfr: "\u{1D52A}", mho: "\u2127", micro: "\xB5", midast: "*", midcir: "\u2AF0", mid: "\u2223", middot: "\xB7", minusb: "\u229F", minus: "\u2212", minusd: "\u2238", minusdu: "\u2A2A", MinusPlus: "\u2213", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", Mopf: "\u{1D544}", mopf: "\u{1D55E}", mp: "\u2213", mscr: "\u{1D4C2}", Mscr: "\u2133", mstpos: "\u223E", Mu: "\u039C", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nabla: "\u2207", Nacute: "\u0143", nacute: "\u0144", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natural: "\u266E", naturals: "\u2115", natur: "\u266E", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", Ncaron: "\u0147", ncaron: "\u0148", Ncedil: "\u0145", ncedil: "\u0146", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", Ncy: "\u041D", ncy: "\u043D", ndash: "\u2013", nearhk: "\u2924", nearr: "\u2197", neArr: "\u21D7", nearrow: "\u2197", ne: "\u2260", nedot: "\u2250\u0338", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: "\n", nexist: "\u2204", nexists: "\u2204", Nfr: "\u{1D511}", nfr: "\u{1D52B}", ngE: "\u2267\u0338", nge: "\u2271", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", nGg: "\u22D9\u0338", ngsim: "\u2275", nGt: "\u226B\u20D2", ngt: "\u226F", ngtr: "\u226F", nGtv: "\u226B\u0338", nharr: "\u21AE", nhArr: "\u21CE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", NJcy: "\u040A", njcy: "\u045A", nlarr: "\u219A", nlArr: "\u21CD", nldr: "\u2025", nlE: "\u2266\u0338", nle: "\u2270", nleftarrow: "\u219A", nLeftarrow: "\u21CD", nleftrightarrow: "\u21AE", nLeftrightarrow: "\u21CE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nLl: "\u22D8\u0338", nlsim: "\u2274", nLt: "\u226A\u20D2", nlt: "\u226E", nltri: "\u22EA", nltrie: "\u22EC", nLtv: "\u226A\u0338", nmid: "\u2224", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nopf: "\u{1D55F}", Nopf: "\u2115", Not: "\u2AEC", not: "\xAC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", notin: "\u2209", notindot: "\u22F5\u0338", notinE: "\u22F9\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangle: "\u22EA", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangle: "\u22EB", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", nparallel: "\u2226", npar: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", nprec: "\u2280", npreceq: "\u2AAF\u0338", npre: "\u2AAF\u0338", nrarrc: "\u2933\u0338", nrarr: "\u219B", nrArr: "\u21CF", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nRightarrow: "\u21CF", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", Nscr: "\u{1D4A9}", nscr: "\u{1D4C3}", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsube: "\u2288", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupe: "\u2289", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", Ntilde: "\xD1", ntilde: "\xF1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", Nu: "\u039D", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvDash: "\u22AD", nVdash: "\u22AE", nVDash: "\u22AF", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvHarr: "\u2904", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwarhk: "\u2923", nwarr: "\u2196", nwArr: "\u21D6", nwarrow: "\u2196", nwnear: "\u2927", Oacute: "\xD3", oacute: "\xF3", oast: "\u229B", Ocirc: "\xD4", ocirc: "\xF4", ocir: "\u229A", Ocy: "\u041E", ocy: "\u043E", odash: "\u229D", Odblac: "\u0150", odblac: "\u0151", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", OElig: "\u0152", oelig: "\u0153", ofcir: "\u29BF", Ofr: "\u{1D512}", ofr: "\u{1D52C}", ogon: "\u02DB", Ograve: "\xD2", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", Omacr: "\u014C", omacr: "\u014D", Omega: "\u03A9", omega: "\u03C9", Omicron: "\u039F", omicron: "\u03BF", omid: "\u29B6", ominus: "\u2296", Oopf: "\u{1D546}", oopf: "\u{1D560}", opar: "\u29B7", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", operp: "\u29B9", oplus: "\u2295", orarr: "\u21BB", Or: "\u2A54", or: "\u2228", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oS: "\u24C8", Oscr: "\u{1D4AA}", oscr: "\u2134", Oslash: "\xD8", oslash: "\xF8", osol: "\u2298", Otilde: "\xD5", otilde: "\xF5", otimesas: "\u2A36", Otimes: "\u2A37", otimes: "\u2297", Ouml: "\xD6", ouml: "\xF6", ovbar: "\u233D", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", para: "\xB6", parallel: "\u2225", par: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", PartialD: "\u2202", Pcy: "\u041F", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", Pfr: "\u{1D513}", pfr: "\u{1D52D}", Phi: "\u03A6", phi: "\u03C6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", Pi: "\u03A0", pi: "\u03C0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plus: "+", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", PlusMinus: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", Poincareplane: "\u210C", pointint: "\u2A15", popf: "\u{1D561}", Popf: "\u2119", pound: "\xA3", prap: "\u2AB7", Pr: "\u2ABB", pr: "\u227A", prcue: "\u227C", precapprox: "\u2AB7", prec: "\u227A", preccurlyeq: "\u227C", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", pre: "\u2AAF", prE: "\u2AB3", precsim: "\u227E", prime: "\u2032", Prime: "\u2033", primes: "\u2119", prnap: "\u2AB9", prnE: "\u2AB5", prnsim: "\u22E8", prod: "\u220F", Product: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", Proportional: "\u221D", Proportion: "\u2237", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", Pscr: "\u{1D4AB}", pscr: "\u{1D4C5}", Psi: "\u03A8", psi: "\u03C8", puncsp: "\u2008", Qfr: "\u{1D514}", qfr: "\u{1D52E}", qint: "\u2A0C", qopf: "\u{1D562}", Qopf: "\u211A", qprime: "\u2057", Qscr: "\u{1D4AC}", qscr: "\u{1D4C6}", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quot: '"', QUOT: '"', rAarr: "\u21DB", race: "\u223D\u0331", Racute: "\u0154", racute: "\u0155", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", Rang: "\u27EB", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raquo: "\xBB", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarr: "\u2192", Rarr: "\u21A0", rArr: "\u21D2", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", Rarrtl: "\u2916", rarrtl: "\u21A3", rarrw: "\u219D", ratail: "\u291A", rAtail: "\u291C", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rBarr: "\u290F", RBarr: "\u2910", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", Rcaron: "\u0158", rcaron: "\u0159", Rcedil: "\u0156", rcedil: "\u0157", rceil: "\u2309", rcub: "}", Rcy: "\u0420", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", Re: "\u211C", rect: "\u25AD", reg: "\xAE", REG: "\xAE", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", rfisht: "\u297D", rfloor: "\u230B", rfr: "\u{1D52F}", Rfr: "\u211C", rHar: "\u2964", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", Rho: "\u03A1", rho: "\u03C1", rhov: "\u03F1", RightAngleBracket: "\u27E9", RightArrowBar: "\u21E5", rightarrow: "\u2192", RightArrow: "\u2192", Rightarrow: "\u21D2", RightArrowLeftArrow: "\u21C4", rightarrowtail: "\u21A3", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVectorBar: "\u2955", RightDownVector: "\u21C2", RightFloor: "\u230B", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", RightTeeArrow: "\u21A6", RightTee: "\u22A2", RightTeeVector: "\u295B", rightthreetimes: "\u22CC", RightTriangleBar: "\u29D0", RightTriangle: "\u22B3", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVectorBar: "\u2954", RightUpVector: "\u21BE", RightVectorBar: "\u2953", RightVector: "\u21C0", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoustache: "\u23B1", rmoust: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\u{1D563}", Ropf: "\u211D", roplus: "\u2A2E", rotimes: "\u2A35", RoundImplies: "\u2970", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", Rrightarrow: "\u21DB", rsaquo: "\u203A", rscr: "\u{1D4C7}", Rscr: "\u211B", rsh: "\u21B1", Rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", RuleDelayed: "\u29F4", ruluhar: "\u2968", rx: "\u211E", Sacute: "\u015A", sacute: "\u015B", sbquo: "\u201A", scap: "\u2AB8", Scaron: "\u0160", scaron: "\u0161", Sc: "\u2ABC", sc: "\u227B", sccue: "\u227D", sce: "\u2AB0", scE: "\u2AB4", Scedil: "\u015E", scedil: "\u015F", Scirc: "\u015C", scirc: "\u015D", scnap: "\u2ABA", scnE: "\u2AB6", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", Scy: "\u0421", scy: "\u0441", sdotb: "\u22A1", sdot: "\u22C5", sdote: "\u2A66", searhk: "\u2925", searr: "\u2198", seArr: "\u21D8", searrow: "\u2198", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", Sfr: "\u{1D516}", sfr: "\u{1D530}", sfrown: "\u2322", sharp: "\u266F", SHCHcy: "\u0429", shchcy: "\u0449", SHcy: "\u0428", shcy: "\u0448", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", shortmid: "\u2223", shortparallel: "\u2225", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", shy: "\xAD", Sigma: "\u03A3", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", SmallCircle: "\u2218", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", SOFTcy: "\u042C", softcy: "\u044C", solbar: "\u233F", solb: "\u29C4", sol: "/", Sopf: "\u{1D54A}", sopf: "\u{1D564}", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", Sqrt: "\u221A", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", square: "\u25A1", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", squarf: "\u25AA", squ: "\u25A1", squf: "\u25AA", srarr: "\u2192", Sscr: "\u{1D4AE}", sscr: "\u{1D4C8}", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", Star: "\u22C6", star: "\u2606", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", Sub: "\u22D0", subdot: "\u2ABD", subE: "\u2AC5", sube: "\u2286", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subne: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", Subset: "\u22D0", subseteq: "\u2286", subseteqq: "\u2AC5", SubsetEqual: "\u2286", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succapprox: "\u2AB8", succ: "\u227B", succcurlyeq: "\u227D", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", SuchThat: "\u220B", sum: "\u2211", Sum: "\u2211", sung: "\u266A", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", sup: "\u2283", Sup: "\u22D1", supdot: "\u2ABE", supdsub: "\u2AD8", supE: "\u2AC6", supe: "\u2287", supedot: "\u2AC4", Superset: "\u2283", SupersetEqual: "\u2287", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supne: "\u228B", supplus: "\u2AC0", supset: "\u2283", Supset: "\u22D1", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swarhk: "\u2926", swarr: "\u2199", swArr: "\u21D9", swarrow: "\u2199", swnwar: "\u292A", szlig: "\xDF", Tab: "	", target: "\u2316", Tau: "\u03A4", tau: "\u03C4", tbrk: "\u23B4", Tcaron: "\u0164", tcaron: "\u0165", Tcedil: "\u0162", tcedil: "\u0163", Tcy: "\u0422", tcy: "\u0442", tdot: "\u20DB", telrec: "\u2315", Tfr: "\u{1D517}", tfr: "\u{1D531}", there4: "\u2234", therefore: "\u2234", Therefore: "\u2234", Theta: "\u0398", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", thinsp: "\u2009", thkap: "\u2248", thksim: "\u223C", THORN: "\xDE", thorn: "\xFE", tilde: "\u02DC", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", timesbar: "\u2A31", timesb: "\u22A0", times: "\xD7", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", topbot: "\u2336", topcir: "\u2AF1", top: "\u22A4", Topf: "\u{1D54B}", topf: "\u{1D565}", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", TRADE: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", TripleDot: "\u20DB", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", Tscr: "\u{1D4AF}", tscr: "\u{1D4C9}", TScy: "\u0426", tscy: "\u0446", TSHcy: "\u040B", tshcy: "\u045B", Tstrok: "\u0166", tstrok: "\u0167", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", Uacute: "\xDA", uacute: "\xFA", uarr: "\u2191", Uarr: "\u219F", uArr: "\u21D1", Uarrocir: "\u2949", Ubrcy: "\u040E", ubrcy: "\u045E", Ubreve: "\u016C", ubreve: "\u016D", Ucirc: "\xDB", ucirc: "\xFB", Ucy: "\u0423", ucy: "\u0443", udarr: "\u21C5", Udblac: "\u0170", udblac: "\u0171", udhar: "\u296E", ufisht: "\u297E", Ufr: "\u{1D518}", ufr: "\u{1D532}", Ugrave: "\xD9", ugrave: "\xF9", uHar: "\u2963", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", Umacr: "\u016A", umacr: "\u016B", uml: "\xA8", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", Uogon: "\u0172", uogon: "\u0173", Uopf: "\u{1D54C}", uopf: "\u{1D566}", UpArrowBar: "\u2912", uparrow: "\u2191", UpArrow: "\u2191", Uparrow: "\u21D1", UpArrowDownArrow: "\u21C5", updownarrow: "\u2195", UpDownArrow: "\u2195", Updownarrow: "\u21D5", UpEquilibrium: "\u296E", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", upsi: "\u03C5", Upsi: "\u03D2", upsih: "\u03D2", Upsilon: "\u03A5", upsilon: "\u03C5", UpTeeArrow: "\u21A5", UpTee: "\u22A5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", Uring: "\u016E", uring: "\u016F", urtri: "\u25F9", Uscr: "\u{1D4B0}", uscr: "\u{1D4CA}", utdot: "\u22F0", Utilde: "\u0168", utilde: "\u0169", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", Uuml: "\xDC", uuml: "\xFC", uwangle: "\u29A7", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", vArr: "\u21D5", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vBar: "\u2AE8", Vbar: "\u2AEB", vBarv: "\u2AE9", Vcy: "\u0412", vcy: "\u0432", vdash: "\u22A2", vDash: "\u22A8", Vdash: "\u22A9", VDash: "\u22AB", Vdashl: "\u2AE6", veebar: "\u22BB", vee: "\u2228", Vee: "\u22C1", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", Verbar: "\u2016", vert: "|", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", Vfr: "\u{1D519}", vfr: "\u{1D533}", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", Vopf: "\u{1D54D}", vopf: "\u{1D567}", vprop: "\u221D", vrtri: "\u22B3", Vscr: "\u{1D4B1}", vscr: "\u{1D4CB}", vsubnE: "\u2ACB\uFE00", vsubne: "\u228A\uFE00", vsupnE: "\u2ACC\uFE00", vsupne: "\u228B\uFE00", Vvdash: "\u22AA", vzigzag: "\u299A", Wcirc: "\u0174", wcirc: "\u0175", wedbar: "\u2A5F", wedge: "\u2227", Wedge: "\u22C0", wedgeq: "\u2259", weierp: "\u2118", Wfr: "\u{1D51A}", wfr: "\u{1D534}", Wopf: "\u{1D54E}", wopf: "\u{1D568}", wp: "\u2118", wr: "\u2240", wreath: "\u2240", Wscr: "\u{1D4B2}", wscr: "\u{1D4CC}", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", Xfr: "\u{1D51B}", xfr: "\u{1D535}", xharr: "\u27F7", xhArr: "\u27FA", Xi: "\u039E", xi: "\u03BE", xlarr: "\u27F5", xlArr: "\u27F8", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", Xopf: "\u{1D54F}", xopf: "\u{1D569}", xoplus: "\u2A01", xotime: "\u2A02", xrarr: "\u27F6", xrArr: "\u27F9", Xscr: "\u{1D4B3}", xscr: "\u{1D4CD}", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", Yacute: "\xDD", yacute: "\xFD", YAcy: "\u042F", yacy: "\u044F", Ycirc: "\u0176", ycirc: "\u0177", Ycy: "\u042B", ycy: "\u044B", yen: "\xA5", Yfr: "\u{1D51C}", yfr: "\u{1D536}", YIcy: "\u0407", yicy: "\u0457", Yopf: "\u{1D550}", yopf: "\u{1D56A}", Yscr: "\u{1D4B4}", yscr: "\u{1D4CE}", YUcy: "\u042E", yucy: "\u044E", yuml: "\xFF", Yuml: "\u0178", Zacute: "\u0179", zacute: "\u017A", Zcaron: "\u017D", zcaron: "\u017E", Zcy: "\u0417", zcy: "\u0437", Zdot: "\u017B", zdot: "\u017C", zeetrf: "\u2128", ZeroWidthSpace: "\u200B", Zeta: "\u0396", zeta: "\u03B6", zfr: "\u{1D537}", Zfr: "\u2128", ZHcy: "\u0416", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\u{1D56B}", Zopf: "\u2124", Zscr: "\u{1D4B5}", zscr: "\u{1D4CF}", zwj: "\u200D", zwnj: "\u200C" };
  }
});

// node_modules/entities/lib/maps/legacy.json
var require_legacy = __commonJS({
  "node_modules/entities/lib/maps/legacy.json"(exports, module7) {
    module7.exports = { Aacute: "\xC1", aacute: "\xE1", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", AElig: "\xC6", aelig: "\xE6", Agrave: "\xC0", agrave: "\xE0", amp: "&", AMP: "&", Aring: "\xC5", aring: "\xE5", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", brvbar: "\xA6", Ccedil: "\xC7", ccedil: "\xE7", cedil: "\xB8", cent: "\xA2", copy: "\xA9", COPY: "\xA9", curren: "\xA4", deg: "\xB0", divide: "\xF7", Eacute: "\xC9", eacute: "\xE9", Ecirc: "\xCA", ecirc: "\xEA", Egrave: "\xC8", egrave: "\xE8", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", frac12: "\xBD", frac14: "\xBC", frac34: "\xBE", gt: ">", GT: ">", Iacute: "\xCD", iacute: "\xED", Icirc: "\xCE", icirc: "\xEE", iexcl: "\xA1", Igrave: "\xCC", igrave: "\xEC", iquest: "\xBF", Iuml: "\xCF", iuml: "\xEF", laquo: "\xAB", lt: "<", LT: "<", macr: "\xAF", micro: "\xB5", middot: "\xB7", nbsp: "\xA0", not: "\xAC", Ntilde: "\xD1", ntilde: "\xF1", Oacute: "\xD3", oacute: "\xF3", Ocirc: "\xD4", ocirc: "\xF4", Ograve: "\xD2", ograve: "\xF2", ordf: "\xAA", ordm: "\xBA", Oslash: "\xD8", oslash: "\xF8", Otilde: "\xD5", otilde: "\xF5", Ouml: "\xD6", ouml: "\xF6", para: "\xB6", plusmn: "\xB1", pound: "\xA3", quot: '"', QUOT: '"', raquo: "\xBB", reg: "\xAE", REG: "\xAE", sect: "\xA7", shy: "\xAD", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", szlig: "\xDF", THORN: "\xDE", thorn: "\xFE", times: "\xD7", Uacute: "\xDA", uacute: "\xFA", Ucirc: "\xDB", ucirc: "\xFB", Ugrave: "\xD9", ugrave: "\xF9", uml: "\xA8", Uuml: "\xDC", uuml: "\xFC", Yacute: "\xDD", yacute: "\xFD", yen: "\xA5", yuml: "\xFF" };
  }
});

// node_modules/entities/lib/maps/xml.json
var require_xml = __commonJS({
  "node_modules/entities/lib/maps/xml.json"(exports, module7) {
    module7.exports = { amp: "&", apos: "'", gt: ">", lt: "<", quot: '"' };
  }
});

// node_modules/entities/lib/maps/decode.json
var require_decode = __commonJS({
  "node_modules/entities/lib/maps/decode.json"(exports, module7) {
    module7.exports = { "0": 65533, "128": 8364, "130": 8218, "131": 402, "132": 8222, "133": 8230, "134": 8224, "135": 8225, "136": 710, "137": 8240, "138": 352, "139": 8249, "140": 338, "142": 381, "145": 8216, "146": 8217, "147": 8220, "148": 8221, "149": 8226, "150": 8211, "151": 8212, "152": 732, "153": 8482, "154": 353, "155": 8250, "156": 339, "158": 382, "159": 376 };
  }
});

// node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint = __commonJS({
  "node_modules/entities/lib/decode_codepoint.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var decode_json_1 = __importDefault2(require_decode());
    var fromCodePoint = String.fromCodePoint || function(codePoint) {
      var output = "";
      if (codePoint > 65535) {
        codePoint -= 65536;
        output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      output += String.fromCharCode(codePoint);
      return output;
    };
    function decodeCodePoint(codePoint) {
      if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
        return "\uFFFD";
      }
      if (codePoint in decode_json_1.default) {
        codePoint = decode_json_1.default[codePoint];
      }
      return fromCodePoint(codePoint);
    }
    exports.default = decodeCodePoint;
  }
});

// node_modules/entities/lib/decode.js
var require_decode2 = __commonJS({
  "node_modules/entities/lib/decode.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
    var entities_json_1 = __importDefault2(require_entities());
    var legacy_json_1 = __importDefault2(require_legacy());
    var xml_json_1 = __importDefault2(require_xml());
    var decode_codepoint_1 = __importDefault2(require_decode_codepoint());
    var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
    exports.decodeXML = getStrictDecoder(xml_json_1.default);
    exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
    function getStrictDecoder(map) {
      var replace = getReplacer(map);
      return function(str) {
        return String(str).replace(strictEntityRe, replace);
      };
    }
    var sorter = function(a, b) {
      return a < b ? 1 : -1;
    };
    exports.decodeHTML = function() {
      var legacy = Object.keys(legacy_json_1.default).sort(sorter);
      var keys = Object.keys(entities_json_1.default).sort(sorter);
      for (var i = 0, j = 0; i < keys.length; i++) {
        if (legacy[j] === keys[i]) {
          keys[i] += ";?";
          j++;
        } else {
          keys[i] += ";";
        }
      }
      var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
      var replace = getReplacer(entities_json_1.default);
      function replacer(str) {
        if (str.substr(-1) !== ";")
          str += ";";
        return replace(str);
      }
      return function(str) {
        return String(str).replace(re, replacer);
      };
    }();
    function getReplacer(map) {
      return function replace(str) {
        if (str.charAt(1) === "#") {
          var secondChar = str.charAt(2);
          if (secondChar === "X" || secondChar === "x") {
            return decode_codepoint_1.default(parseInt(str.substr(3), 16));
          }
          return decode_codepoint_1.default(parseInt(str.substr(2), 10));
        }
        return map[str.slice(1, -1)] || str;
      };
    }
  }
});

// node_modules/entities/lib/encode.js
var require_encode = __commonJS({
  "node_modules/entities/lib/encode.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;
    var xml_json_1 = __importDefault2(require_xml());
    var inverseXML = getInverseObj(xml_json_1.default);
    var xmlReplacer = getInverseReplacer(inverseXML);
    exports.encodeXML = getASCIIEncoder(inverseXML);
    var entities_json_1 = __importDefault2(require_entities());
    var inverseHTML = getInverseObj(entities_json_1.default);
    var htmlReplacer = getInverseReplacer(inverseHTML);
    exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
    exports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
    function getInverseObj(obj) {
      return Object.keys(obj).sort().reduce(function(inverse, name7) {
        inverse[obj[name7]] = "&" + name7 + ";";
        return inverse;
      }, {});
    }
    function getInverseReplacer(inverse) {
      var single = [];
      var multiple = [];
      for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
        var k = _a[_i];
        if (k.length === 1) {
          single.push("\\" + k);
        } else {
          multiple.push(k);
        }
      }
      single.sort();
      for (var start = 0; start < single.length - 1; start++) {
        var end = start;
        while (end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
          end += 1;
        }
        var count = 1 + end - start;
        if (count < 3)
          continue;
        single.splice(start, count, single[start] + "-" + single[end]);
      }
      multiple.unshift("[" + single.join("") + "]");
      return new RegExp(multiple.join("|"), "g");
    }
    var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
    var getCodePoint = String.prototype.codePointAt != null ? function(str) {
      return str.codePointAt(0);
    } : function(c) {
      return (c.charCodeAt(0) - 55296) * 1024 + c.charCodeAt(1) - 56320 + 65536;
    };
    function singleCharReplacer(c) {
      return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + ";";
    }
    function getInverse(inverse, re) {
      return function(data) {
        return data.replace(re, function(name7) {
          return inverse[name7];
        }).replace(reNonASCII, singleCharReplacer);
      };
    }
    var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
    function escape(data) {
      return data.replace(reEscapeChars, singleCharReplacer);
    }
    exports.escape = escape;
    function escapeUTF8(data) {
      return data.replace(xmlReplacer, singleCharReplacer);
    }
    exports.escapeUTF8 = escapeUTF8;
    function getASCIIEncoder(obj) {
      return function(data) {
        return data.replace(reEscapeChars, function(c) {
          return obj[c] || singleCharReplacer(c);
        });
      };
    }
  }
});

// node_modules/entities/lib/index.js
var require_lib = __commonJS({
  "node_modules/entities/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
    var decode_1 = require_decode2();
    var encode_1 = require_encode();
    function decode(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
    }
    exports.decode = decode;
    function decodeStrict(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
    }
    exports.decodeStrict = decodeStrict;
    function encode(data, level) {
      return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
    }
    exports.encode = encode;
    var encode_2 = require_encode();
    Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function() {
      return encode_2.encodeXML;
    } });
    Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: function() {
      return encode_2.encodeNonAsciiHTML;
    } });
    Object.defineProperty(exports, "escape", { enumerable: true, get: function() {
      return encode_2.escape;
    } });
    Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: function() {
      return encode_2.escapeUTF8;
    } });
    Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    var decode_2 = require_decode2();
    Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function() {
      return decode_2.decodeXML;
    } });
    Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function() {
      return decode_2.decodeXML;
    } });
  }
});

// node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS({
  "node_modules/fast-xml-parser/src/util.js"(exports) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function(v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports.buildOptions = function(options, defaultOptions, props) {
      var newOptions = {};
      if (!options) {
        return defaultOptions;
      }
      for (let i = 0; i < props.length; i++) {
        if (options[props[i]] !== void 0) {
          newOptions[props[i]] = options[props[i]];
        } else {
          newOptions[props[i]] = defaultOptions[props[i]];
        }
      }
      return newOptions;
    };
    exports.isTagNameInArrayMode = function(tagName, arrayMode, parentTagName) {
      if (arrayMode === false) {
        return false;
      } else if (arrayMode instanceof RegExp) {
        return arrayMode.test(tagName);
      } else if (typeof arrayMode === "function") {
        return !!arrayMode(tagName, parentTagName);
      }
      return arrayMode === "strict";
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  }
});

// node_modules/fast-xml-parser/src/node2json.js
var require_node2json = __commonJS({
  "node_modules/fast-xml-parser/src/node2json.js"(exports) {
    "use strict";
    var util = require_util();
    var convertToJson = function(node, options, parentTagName) {
      const jObj = {};
      if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {
        return util.isExist(node.val) ? node.val : "";
      }
      if (util.isExist(node.val) && !(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
        const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName);
        jObj[options.textNodeName] = asArray ? [node.val] : node.val;
      }
      util.merge(jObj, node.attrsMap, options.arrayMode);
      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        const tagName = keys[index];
        if (node.child[tagName] && node.child[tagName].length > 1) {
          jObj[tagName] = [];
          for (let tag in node.child[tagName]) {
            if (node.child[tagName].hasOwnProperty(tag)) {
              jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));
            }
          }
        } else {
          const result = convertToJson(node.child[tagName][0], options, tagName);
          const asArray = options.arrayMode === true && typeof result === "object" || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);
          jObj[tagName] = asArray ? [result] : result;
        }
      }
      return jObj;
    };
    exports.convertToJson = convertToJson;
  }
});

// node_modules/fast-xml-parser/src/xmlNode.js
var require_xmlNode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlNode.js"(exports, module7) {
    "use strict";
    module7.exports = function(tagname, parent, val) {
      this.tagname = tagname;
      this.parent = parent;
      this.child = {};
      this.attrsMap = {};
      this.val = val;
      this.addChild = function(child) {
        if (Array.isArray(this.child[child.tagname])) {
          this.child[child.tagname].push(child);
        } else {
          this.child[child.tagname] = [child];
        }
      };
    };
  }
});

// node_modules/fast-xml-parser/src/xmlstr2xmlnode.js
var require_xmlstr2xmlnode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlstr2xmlnode.js"(exports) {
    "use strict";
    var util = require_util();
    var buildOptions = require_util().buildOptions;
    var xmlNode = require_xmlNode();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attrNodeName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      ignoreNameSpace: false,
      allowBooleanAttributes: false,
      parseNodeValue: true,
      parseAttributeValue: false,
      arrayMode: false,
      trimValues: true,
      cdataTagName: false,
      cdataPositionChar: "\\c",
      tagValueProcessor: function(a, tagName) {
        return a;
      },
      attrValueProcessor: function(a, attrName) {
        return a;
      },
      stopNodes: []
    };
    exports.defaultOptions = defaultOptions;
    var props = [
      "attributeNamePrefix",
      "attrNodeName",
      "textNodeName",
      "ignoreAttributes",
      "ignoreNameSpace",
      "allowBooleanAttributes",
      "parseNodeValue",
      "parseAttributeValue",
      "arrayMode",
      "trimValues",
      "cdataTagName",
      "cdataPositionChar",
      "tagValueProcessor",
      "attrValueProcessor",
      "parseTrueNumberOnly",
      "stopNodes"
    ];
    exports.props = props;
    function processTagValue(tagName, val, options) {
      if (val) {
        if (options.trimValues) {
          val = val.trim();
        }
        val = options.tagValueProcessor(val, tagName);
        val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);
      }
      return val;
    }
    function resolveNameSpace(tagname, options) {
      if (options.ignoreNameSpace) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    function parseValue(val, shouldParse, parseTrueNumberOnly) {
      if (shouldParse && typeof val === "string") {
        let parsed;
        if (val.trim() === "" || isNaN(val)) {
          parsed = val === "true" ? true : val === "false" ? false : val;
        } else {
          if (val.indexOf("0x") !== -1) {
            parsed = Number.parseInt(val, 16);
          } else if (val.indexOf(".") !== -1) {
            parsed = Number.parseFloat(val);
            val = val.replace(/\.?0+$/, "");
          } else {
            parsed = Number.parseInt(val, 10);
          }
          if (parseTrueNumberOnly) {
            parsed = String(parsed) === val ? parsed : val;
          }
        }
        return parsed;
      } else {
        if (util.isExist(val)) {
          return val;
        } else {
          return "";
        }
      }
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])(.*?)\\3)?`, "g");
    function buildAttributesMap(attrStr, options) {
      if (!options.ignoreAttributes && typeof attrStr === "string") {
        attrStr = attrStr.replace(/\r?\n/g, " ");
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = resolveNameSpace(matches[i][1], options);
          if (attrName.length) {
            if (matches[i][4] !== void 0) {
              if (options.trimValues) {
                matches[i][4] = matches[i][4].trim();
              }
              matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);
              attrs[options.attributeNamePrefix + attrName] = parseValue(matches[i][4], options.parseAttributeValue, options.parseTrueNumberOnly);
            } else if (options.allowBooleanAttributes) {
              attrs[options.attributeNamePrefix + attrName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (options.attrNodeName) {
          const attrCollection = {};
          attrCollection[options.attrNodeName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var getTraversalObj = function(xmlData, options) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      options = buildOptions(options, defaultOptions, props);
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (options.ignoreNameSpace) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (currentNode) {
              if (currentNode.val) {
                currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(tagName, textData, options);
              } else {
                currentNode.val = processTagValue(tagName, textData, options);
              }
            }
            if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {
              currentNode.child = [];
              if (currentNode.attrsMap == void 0) {
                currentNode.attrsMap = {};
              }
              currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1);
            }
            currentNode = currentNode.parent;
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            i = findClosingIndex(xmlData, "?>", i, "Pi Tag is not closed.");
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            i = findClosingIndex(xmlData, "-->", i, "Comment is not closed.");
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "DOCTYPE is not closed.");
            const tagExp = xmlData.substring(i, closeIndex);
            if (tagExp.indexOf("[") >= 0) {
              i = xmlData.indexOf("]>", i) + 1;
            } else {
              i = closeIndex;
            }
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            if (textData) {
              currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
              textData = "";
            }
            if (options.cdataTagName) {
              const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);
              currentNode.addChild(childNode);
              currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;
              if (tagExp) {
                childNode.val = tagExp;
              }
            } else {
              currentNode.val = (currentNode.val || "") + (tagExp || "");
            }
            i = closeIndex + 2;
          } else {
            const result = closingIndexForOpeningTag(xmlData, i + 1);
            let tagExp = result.data;
            const closeIndex = result.index;
            const separatorIndex = tagExp.indexOf(" ");
            let tagName = tagExp;
            let shouldBuildAttributesMap = true;
            if (separatorIndex !== -1) {
              tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
              tagExp = tagExp.substr(separatorIndex + 1);
            }
            if (options.ignoreNameSpace) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
                shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);
              }
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
              }
            }
            if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
              if (tagName[tagName.length - 1] === "/") {
                tagName = tagName.substr(0, tagName.length - 1);
                tagExp = tagName;
              } else {
                tagExp = tagExp.substr(0, tagExp.length - 1);
              }
              const childNode = new xmlNode(tagName, currentNode, "");
              if (tagName !== tagExp) {
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
            } else {
              const childNode = new xmlNode(tagName, currentNode);
              if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {
                childNode.startIndex = closeIndex;
              }
              if (tagName !== tagExp && shouldBuildAttributesMap) {
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
              currentNode = childNode;
            }
            textData = "";
            i = closeIndex;
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj;
    };
    function closingIndexForOpeningTag(data, i) {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < data.length; index++) {
        let ch = data[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === ">") {
          return {
            data: tagExp,
            index
          };
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    exports.getTraversalObj = getTraversalObj;
  }
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "node_modules/fast-xml-parser/src/validator.js"(exports) {
    "use strict";
    var util = require_util();
    var defaultOptions = {
      allowBooleanAttributes: false
    };
    var props = ["allowBooleanAttributes"];
    exports.validate = function(xmlData, options) {
      options = util.buildOptions(options, defaultOptions, props);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "There is an unnecessary space between tag name and backward slash '</ ..'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, i));
              } else {
                const otg = tags.pop();
                if (tagName !== otg) {
                  return getErrorObject("InvalidTag", "Closing tag '" + otg + "' is expected inplace of '" + tagName + "'.", getLineNumberForPosition(xmlData, i));
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else {
                tags.push(tagName);
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (xmlData[i] === " " || xmlData[i] === "	" || xmlData[i] === "\n" || xmlData[i] === "\r") {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags, null, 4).replace(/\r?\n/g, "") + "' found.", 1);
      }
      return true;
    };
    function readPI(xmlData, i) {
      var start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          var tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
            continue;
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(attrStr, matches[i][0]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(attrStr, matches[i][0]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(attrStr, matches[i][0]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(attrStr, matches[i][0]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      var lines = xmlData.substring(0, index).split(/\r?\n/);
      return lines.length;
    }
    function getPositionFromMatch(attrStr, match) {
      return attrStr.indexOf(match) + match.length;
    }
  }
});

// node_modules/fast-xml-parser/src/nimndata.js
var require_nimndata = __commonJS({
  "node_modules/fast-xml-parser/src/nimndata.js"(exports) {
    "use strict";
    var char = function(a) {
      return String.fromCharCode(a);
    };
    var chars = {
      nilChar: char(176),
      missingChar: char(201),
      nilPremitive: char(175),
      missingPremitive: char(200),
      emptyChar: char(178),
      emptyValue: char(177),
      boundryChar: char(179),
      objStart: char(198),
      arrStart: char(204),
      arrayEnd: char(185)
    };
    var charsArr = [
      chars.nilChar,
      chars.nilPremitive,
      chars.missingChar,
      chars.missingPremitive,
      chars.boundryChar,
      chars.emptyChar,
      chars.emptyValue,
      chars.arrayEnd,
      chars.objStart,
      chars.arrStart
    ];
    var _e = function(node, e_schema, options) {
      if (typeof e_schema === "string") {
        if (node && node[0] && node[0].val !== void 0) {
          return getValue(node[0].val, e_schema);
        } else {
          return getValue(node, e_schema);
        }
      } else {
        const hasValidData = hasData(node);
        if (hasValidData === true) {
          let str = "";
          if (Array.isArray(e_schema)) {
            str += chars.arrStart;
            const itemSchema = e_schema[0];
            const arr_len = node.length;
            if (typeof itemSchema === "string") {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = getValue(node[arr_i].val, itemSchema);
                str = processValue(str, r);
              }
            } else {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = _e(node[arr_i], itemSchema, options);
                str = processValue(str, r);
              }
            }
            str += chars.arrayEnd;
          } else {
            str += chars.objStart;
            const keys = Object.keys(e_schema);
            if (Array.isArray(node)) {
              node = node[0];
            }
            for (let i in keys) {
              const key = keys[i];
              let r;
              if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {
                r = _e(node.attrsMap[key], e_schema[key], options);
              } else if (key === options.textNodeName) {
                r = _e(node.val, e_schema[key], options);
              } else {
                r = _e(node.child[key], e_schema[key], options);
              }
              str = processValue(str, r);
            }
          }
          return str;
        } else {
          return hasValidData;
        }
      }
    };
    var getValue = function(a) {
      switch (a) {
        case void 0:
          return chars.missingPremitive;
        case null:
          return chars.nilPremitive;
        case "":
          return chars.emptyValue;
        default:
          return a;
      }
    };
    var processValue = function(str, r) {
      if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {
        str += chars.boundryChar;
      }
      return str + r;
    };
    var isAppChar = function(ch) {
      return charsArr.indexOf(ch) !== -1;
    };
    function hasData(jObj) {
      if (jObj === void 0) {
        return chars.missingChar;
      } else if (jObj === null) {
        return chars.nilChar;
      } else if (jObj.child && Object.keys(jObj.child).length === 0 && (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)) {
        return chars.emptyChar;
      } else {
        return true;
      }
    }
    var x2j = require_xmlstr2xmlnode();
    var buildOptions = require_util().buildOptions;
    var convert2nimn = function(node, e_schema, options) {
      options = buildOptions(options, x2j.defaultOptions, x2j.props);
      return _e(node, e_schema, options);
    };
    exports.convert2nimn = convert2nimn;
  }
});

// node_modules/fast-xml-parser/src/node2json_str.js
var require_node2json_str = __commonJS({
  "node_modules/fast-xml-parser/src/node2json_str.js"(exports) {
    "use strict";
    var util = require_util();
    var buildOptions = require_util().buildOptions;
    var x2j = require_xmlstr2xmlnode();
    var convertToJsonString = function(node, options) {
      options = buildOptions(options, x2j.defaultOptions, x2j.props);
      options.indentBy = options.indentBy || "";
      return _cToJsonStr(node, options, 0);
    };
    var _cToJsonStr = function(node, options, level) {
      let jObj = "{";
      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        var tagname = keys[index];
        if (node.child[tagname] && node.child[tagname].length > 1) {
          jObj += '"' + tagname + '" : [ ';
          for (var tag in node.child[tagname]) {
            jObj += _cToJsonStr(node.child[tagname][tag], options) + " , ";
          }
          jObj = jObj.substr(0, jObj.length - 1) + " ] ";
        } else {
          jObj += '"' + tagname + '" : ' + _cToJsonStr(node.child[tagname][0], options) + " ,";
        }
      }
      util.merge(jObj, node.attrsMap);
      if (util.isEmptyObject(jObj)) {
        return util.isExist(node.val) ? node.val : "";
      } else {
        if (util.isExist(node.val)) {
          if (!(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
            jObj += '"' + options.textNodeName + '" : ' + stringval(node.val);
          }
        }
      }
      if (jObj[jObj.length - 1] === ",") {
        jObj = jObj.substr(0, jObj.length - 2);
      }
      return jObj + "}";
    };
    function stringval(v) {
      if (v === true || v === false || !isNaN(v)) {
        return v;
      } else {
        return '"' + v + '"';
      }
    }
    exports.convertToJsonString = convertToJsonString;
  }
});

// node_modules/fast-xml-parser/src/json2xml.js
var require_json2xml = __commonJS({
  "node_modules/fast-xml-parser/src/json2xml.js"(exports, module7) {
    "use strict";
    var buildOptions = require_util().buildOptions;
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attrNodeName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataTagName: false,
      cdataPositionChar: "\\c",
      format: false,
      indentBy: "  ",
      supressEmptyNode: false,
      tagValueProcessor: function(a) {
        return a;
      },
      attrValueProcessor: function(a) {
        return a;
      }
    };
    var props = [
      "attributeNamePrefix",
      "attrNodeName",
      "textNodeName",
      "ignoreAttributes",
      "cdataTagName",
      "cdataPositionChar",
      "format",
      "indentBy",
      "supressEmptyNode",
      "tagValueProcessor",
      "attrValueProcessor"
    ];
    function Parser(options) {
      this.options = buildOptions(options, defaultOptions, props);
      if (this.options.ignoreAttributes || this.options.attrNodeName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      if (this.options.cdataTagName) {
        this.isCDATA = isCDATA;
      } else {
        this.isCDATA = function() {
          return false;
        };
      }
      this.replaceCDATAstr = replaceCDATAstr;
      this.replaceCDATAarr = replaceCDATAarr;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
      if (this.options.supressEmptyNode) {
        this.buildTextNode = buildEmptyTextNode;
        this.buildObjNode = buildEmptyObjNode;
      } else {
        this.buildTextNode = buildTextValNode;
        this.buildObjNode = buildObjectNode;
      }
      this.buildTextValNode = buildTextValNode;
      this.buildObjectNode = buildObjectNode;
    }
    Parser.prototype.parse = function(jObj) {
      return this.j2x(jObj, 0).val;
    };
    Parser.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val = "";
      const keys = Object.keys(jObj);
      const len = keys.length;
      for (let i = 0; i < len; i++) {
        const key = keys[i];
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += " " + attr + '="' + this.options.attrValueProcessor("" + jObj[key]) + '"';
          } else if (this.isCDATA(key)) {
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAstr("", jObj[key]);
            }
          } else {
            if (key === this.options.textNodeName) {
              if (jObj[this.options.cdataTagName]) {
              } else {
                val += this.options.tagValueProcessor("" + jObj[key]);
              }
            } else {
              val += this.buildTextNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          if (this.isCDATA(key)) {
            val += this.indentate(level);
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAarr("", jObj[key]);
            }
          } else {
            const arrLen = jObj[key].length;
            for (let j = 0; j < arrLen; j++) {
              const item = jObj[key][j];
              if (typeof item === "undefined") {
              } else if (item === null) {
                val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
              } else if (typeof item === "object") {
                const result = this.j2x(item, level + 1);
                val += this.buildObjNode(result.val, key, result.attrStr, level);
              } else {
                val += this.buildTextNode(item, key, "", level);
              }
            }
          }
        } else {
          if (this.options.attrNodeName && key === this.options.attrNodeName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += " " + Ks[j] + '="' + this.options.attrValueProcessor("" + jObj[key][Ks[j]]) + '"';
            }
          } else {
            const result = this.j2x(jObj[key], level + 1);
            val += this.buildObjNode(result.val, key, result.attrStr, level);
          }
        }
      }
      return { attrStr, val };
    };
    function replaceCDATAstr(str, cdata) {
      str = this.options.tagValueProcessor("" + str);
      if (this.options.cdataPositionChar === "" || str === "") {
        return str + "<![CDATA[" + cdata + "]]" + this.tagEndChar;
      } else {
        return str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata + "]]" + this.tagEndChar);
      }
    }
    function replaceCDATAarr(str, cdata) {
      str = this.options.tagValueProcessor("" + str);
      if (this.options.cdataPositionChar === "" || str === "") {
        return str + "<![CDATA[" + cdata.join("]]><![CDATA[") + "]]" + this.tagEndChar;
      } else {
        for (let v in cdata) {
          str = str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata[v] + "]]>");
        }
        return str + this.newLine;
      }
    }
    function buildObjectNode(val, key, attrStr, level) {
      if (attrStr && !val.includes("<")) {
        return this.indentate(level) + "<" + key + attrStr + ">" + val + "</" + key + this.tagEndChar;
      } else {
        return this.indentate(level) + "<" + key + attrStr + this.tagEndChar + val + this.indentate(level) + "</" + key + this.tagEndChar;
      }
    }
    function buildEmptyObjNode(val, key, attrStr, level) {
      if (val !== "") {
        return this.buildObjectNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
      }
    }
    function buildTextValNode(val, key, attrStr, level) {
      return this.indentate(level) + "<" + key + attrStr + ">" + this.options.tagValueProcessor(val) + "</" + key + this.tagEndChar;
    }
    function buildEmptyTextNode(val, key, attrStr, level) {
      if (val !== "") {
        return this.buildTextValNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
      }
    }
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name7) {
      if (name7.startsWith(this.options.attributeNamePrefix)) {
        return name7.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    function isCDATA(name7) {
      return name7 === this.options.cdataTagName;
    }
    module7.exports = Parser;
  }
});

// node_modules/fast-xml-parser/src/parser.js
var require_parser = __commonJS({
  "node_modules/fast-xml-parser/src/parser.js"(exports) {
    "use strict";
    var nodeToJson = require_node2json();
    var xmlToNodeobj = require_xmlstr2xmlnode();
    var x2xmlnode = require_xmlstr2xmlnode();
    var buildOptions = require_util().buildOptions;
    var validator = require_validator();
    exports.parse = function(xmlData, options, validationOption) {
      if (validationOption) {
        if (validationOption === true)
          validationOption = {};
        const result = validator.validate(xmlData, validationOption);
        if (result !== true) {
          throw Error(result.err.msg);
        }
      }
      options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);
      const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options);
      return nodeToJson.convertToJson(traversableObj, options);
    };
    exports.convertTonimn = require_nimndata().convert2nimn;
    exports.getTraversalObj = xmlToNodeobj.getTraversalObj;
    exports.convertToJson = nodeToJson.convertToJson;
    exports.convertToJsonString = require_node2json_str().convertToJsonString;
    exports.validate = validator.validate;
    exports.j2xParser = require_json2xml();
    exports.parseToNimn = function(xmlData, schema, options) {
      return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);
    };
  }
});

// (disabled):@aws-sdk/signature-v4-crt
var require_signature_v4_crt = __commonJS({
  "(disabled):@aws-sdk/signature-v4-crt"() {
  }
});

// node_modules/tslib/modules/index.js
var import_tslib = __toModule(require_tslib());
var {
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __exportStar,
  __createBinding,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet
} = import_tslib.default;

// node_modules/@aws-sdk/middleware-serde/dist-es/deserializerMiddleware.js
var deserializerMiddleware = function(options, deserializer) {
  return function(next, context) {
    return function(args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var response, parsed;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, next(args)];
            case 1:
              response = _a.sent().response;
              return [4, deserializer(response, options)];
            case 2:
              parsed = _a.sent();
              return [2, {
                response,
                output: parsed
              }];
          }
        });
      });
    };
  };
};

// node_modules/@aws-sdk/middleware-serde/dist-es/serializerMiddleware.js
var serializerMiddleware = function(options, serializer) {
  return function(next, context) {
    return function(args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var request;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, serializer(args.input, options)];
            case 1:
              request = _a.sent();
              return [2, next(__assign(__assign({}, args), { request }))];
          }
        });
      });
    };
  };
};

// node_modules/@aws-sdk/middleware-serde/dist-es/serdePlugin.js
var deserializerMiddlewareOption = {
  name: "deserializerMiddleware",
  step: "deserialize",
  tags: ["DESERIALIZER"],
  override: true
};
var serializerMiddlewareOption = {
  name: "serializerMiddleware",
  step: "serialize",
  tags: ["SERIALIZER"],
  override: true
};
function getSerdePlugin(config, serializer, deserializer) {
  return {
    applyToStack: function(commandStack) {
      commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
      commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
    }
  };
}

// node_modules/@aws-sdk/middleware-stack/dist-es/MiddlewareStack.js
var constructStack = function() {
  var absoluteEntries = [];
  var relativeEntries = [];
  var entriesNameSet = new Set();
  var sort = function(entries) {
    return entries.sort(function(a, b) {
      return stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"];
    });
  };
  var removeByName = function(toRemove) {
    var isRemoved = false;
    var filterCb = function(entry) {
      if (entry.name && entry.name === toRemove) {
        isRemoved = true;
        entriesNameSet.delete(toRemove);
        return false;
      }
      return true;
    };
    absoluteEntries = absoluteEntries.filter(filterCb);
    relativeEntries = relativeEntries.filter(filterCb);
    return isRemoved;
  };
  var removeByReference = function(toRemove) {
    var isRemoved = false;
    var filterCb = function(entry) {
      if (entry.middleware === toRemove) {
        isRemoved = true;
        if (entry.name)
          entriesNameSet.delete(entry.name);
        return false;
      }
      return true;
    };
    absoluteEntries = absoluteEntries.filter(filterCb);
    relativeEntries = relativeEntries.filter(filterCb);
    return isRemoved;
  };
  var cloneTo = function(toStack) {
    absoluteEntries.forEach(function(entry) {
      toStack.add(entry.middleware, __assign({}, entry));
    });
    relativeEntries.forEach(function(entry) {
      toStack.addRelativeTo(entry.middleware, __assign({}, entry));
    });
    return toStack;
  };
  var expandRelativeMiddlewareList = function(from) {
    var expandedMiddlewareList = [];
    from.before.forEach(function(entry) {
      if (entry.before.length === 0 && entry.after.length === 0) {
        expandedMiddlewareList.push(entry);
      } else {
        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spreadArray([], __read(expandRelativeMiddlewareList(entry))));
      }
    });
    expandedMiddlewareList.push(from);
    from.after.reverse().forEach(function(entry) {
      if (entry.before.length === 0 && entry.after.length === 0) {
        expandedMiddlewareList.push(entry);
      } else {
        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spreadArray([], __read(expandRelativeMiddlewareList(entry))));
      }
    });
    return expandedMiddlewareList;
  };
  var getMiddlewareList = function() {
    var normalizedAbsoluteEntries = [];
    var normalizedRelativeEntries = [];
    var normalizedEntriesNameMap = {};
    absoluteEntries.forEach(function(entry) {
      var normalizedEntry = __assign(__assign({}, entry), { before: [], after: [] });
      if (normalizedEntry.name)
        normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
      normalizedAbsoluteEntries.push(normalizedEntry);
    });
    relativeEntries.forEach(function(entry) {
      var normalizedEntry = __assign(__assign({}, entry), { before: [], after: [] });
      if (normalizedEntry.name)
        normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
      normalizedRelativeEntries.push(normalizedEntry);
    });
    normalizedRelativeEntries.forEach(function(entry) {
      if (entry.toMiddleware) {
        var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
        if (toMiddleware === void 0) {
          throw new Error(entry.toMiddleware + " is not found when adding " + (entry.name || "anonymous") + " middleware " + entry.relation + " " + entry.toMiddleware);
        }
        if (entry.relation === "after") {
          toMiddleware.after.push(entry);
        }
        if (entry.relation === "before") {
          toMiddleware.before.push(entry);
        }
      }
    });
    var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function(wholeList, expendedMiddlewareList) {
      wholeList.push.apply(wholeList, __spreadArray([], __read(expendedMiddlewareList)));
      return wholeList;
    }, []);
    return mainChain.map(function(entry) {
      return entry.middleware;
    });
  };
  var stack = {
    add: function(middleware, options) {
      if (options === void 0) {
        options = {};
      }
      var name7 = options.name, override = options.override;
      var entry = __assign({ step: "initialize", priority: "normal", middleware }, options);
      if (name7) {
        if (entriesNameSet.has(name7)) {
          if (!override)
            throw new Error("Duplicate middleware name '" + name7 + "'");
          var toOverrideIndex = absoluteEntries.findIndex(function(entry2) {
            return entry2.name === name7;
          });
          var toOverride = absoluteEntries[toOverrideIndex];
          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
            throw new Error('"' + name7 + '" middleware with ' + toOverride.priority + " priority in " + toOverride.step + " step cannot be " + ("overridden by same-name middleware with " + entry.priority + " priority in " + entry.step + " step."));
          }
          absoluteEntries.splice(toOverrideIndex, 1);
        }
        entriesNameSet.add(name7);
      }
      absoluteEntries.push(entry);
    },
    addRelativeTo: function(middleware, options) {
      var name7 = options.name, override = options.override;
      var entry = __assign({ middleware }, options);
      if (name7) {
        if (entriesNameSet.has(name7)) {
          if (!override)
            throw new Error("Duplicate middleware name '" + name7 + "'");
          var toOverrideIndex = relativeEntries.findIndex(function(entry2) {
            return entry2.name === name7;
          });
          var toOverride = relativeEntries[toOverrideIndex];
          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
            throw new Error('"' + name7 + '" middleware ' + toOverride.relation + ' "' + toOverride.toMiddleware + '" middleware cannot be overridden ' + ("by same-name middleware " + entry.relation + ' "' + entry.toMiddleware + '" middleware.'));
          }
          relativeEntries.splice(toOverrideIndex, 1);
        }
        entriesNameSet.add(name7);
      }
      relativeEntries.push(entry);
    },
    clone: function() {
      return cloneTo(constructStack());
    },
    use: function(plugin) {
      plugin.applyToStack(stack);
    },
    remove: function(toRemove) {
      if (typeof toRemove === "string")
        return removeByName(toRemove);
      else
        return removeByReference(toRemove);
    },
    removeByTag: function(toRemove) {
      var isRemoved = false;
      var filterCb = function(entry) {
        var tags = entry.tags, name7 = entry.name;
        if (tags && tags.includes(toRemove)) {
          if (name7)
            entriesNameSet.delete(name7);
          isRemoved = true;
          return false;
        }
        return true;
      };
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    },
    concat: function(from) {
      var cloned = cloneTo(constructStack());
      cloned.use(from);
      return cloned;
    },
    applyToStack: cloneTo,
    resolve: function(handler, context) {
      var e_1, _a;
      try {
        for (var _b = __values(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var middleware = _c.value;
          handler = middleware(handler, context);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return handler;
    }
  };
  return stack;
};
var stepWeights = {
  initialize: 5,
  serialize: 4,
  build: 3,
  finalizeRequest: 2,
  deserialize: 1
};
var priorityWeights = {
  high: 3,
  normal: 2,
  low: 1
};

// node_modules/@aws-sdk/smithy-client/dist-es/client.js
var Client = function() {
  function Client2(config) {
    this.middlewareStack = constructStack();
    this.config = config;
  }
  Client2.prototype.send = function(command, optionsOrCb, cb) {
    var options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
    var callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
    var handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
    if (callback) {
      handler(command).then(function(result) {
        return callback(null, result.output);
      }, function(err) {
        return callback(err);
      }).catch(function() {
      });
    } else {
      return handler(command).then(function(result) {
        return result.output;
      });
    }
  };
  Client2.prototype.destroy = function() {
    if (this.config.requestHandler.destroy)
      this.config.requestHandler.destroy();
  };
  return Client2;
}();

// node_modules/@aws-sdk/smithy-client/dist-es/command.js
var Command = function() {
  function Command2() {
    this.middlewareStack = constructStack();
  }
  return Command2;
}();

// node_modules/@aws-sdk/smithy-client/dist-es/constants.js
var SENSITIVE_STRING = "***SensitiveInformation***";

// node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js
var parseBoolean = function(value) {
  switch (value) {
    case "true":
      return true;
    case "false":
      return false;
    default:
      throw new Error('Unable to parse boolean value "' + value + '"');
  }
};
var expectBoolean = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  if (typeof value === "boolean") {
    return value;
  }
  throw new TypeError("Expected boolean, got " + typeof value);
};
var expectNumber = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  if (typeof value === "number") {
    return value;
  }
  throw new TypeError("Expected number, got " + typeof value);
};
var MAX_FLOAT = Math.ceil(Math.pow(2, 127) * (2 - Math.pow(2, -23)));
var expectFloat32 = function(value) {
  var expected = expectNumber(value);
  if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
    if (Math.abs(expected) > MAX_FLOAT) {
      throw new TypeError("Expected 32-bit float, got " + value);
    }
  }
  return expected;
};
var expectLong = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  if (Number.isInteger(value) && !Number.isNaN(value)) {
    return value;
  }
  throw new TypeError("Expected integer, got " + typeof value);
};
var expectInt32 = function(value) {
  return expectSizedInt(value, 32);
};
var expectShort = function(value) {
  return expectSizedInt(value, 16);
};
var expectByte = function(value) {
  return expectSizedInt(value, 8);
};
var expectSizedInt = function(value, size) {
  var expected = expectLong(value);
  if (expected !== void 0 && castInt(expected, size) !== expected) {
    throw new TypeError("Expected " + size + "-bit integer, got " + value);
  }
  return expected;
};
var castInt = function(value, size) {
  switch (size) {
    case 32:
      return Int32Array.of(value)[0];
    case 16:
      return Int16Array.of(value)[0];
    case 8:
      return Int8Array.of(value)[0];
  }
};
var expectNonNull = function(value, location) {
  if (value === null || value === void 0) {
    if (location) {
      throw new TypeError("Expected a non-null value for " + location);
    }
    throw new TypeError("Expected a non-null value");
  }
  return value;
};
var expectObject = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  if (typeof value === "object" && !Array.isArray(value)) {
    return value;
  }
  throw new TypeError("Expected object, got " + typeof value);
};
var expectString = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  if (typeof value === "string") {
    return value;
  }
  throw new TypeError("Expected string, got " + typeof value);
};
var expectUnion = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  var asObject = expectObject(value);
  var setKeys = Object.entries(asObject).filter(function(_a) {
    var _b = __read(_a, 2), _ = _b[0], v = _b[1];
    return v !== null && v !== void 0;
  }).map(function(_a) {
    var _b = __read(_a, 2), k = _b[0], _ = _b[1];
    return k;
  });
  if (setKeys.length === 0) {
    throw new TypeError("Unions must have exactly one non-null member");
  }
  if (setKeys.length > 1) {
    throw new TypeError("Unions must have exactly one non-null member. Keys " + setKeys + " were not null.");
  }
  return asObject;
};
var strictParseDouble = function(value) {
  if (typeof value == "string") {
    return expectNumber(parseNumber(value));
  }
  return expectNumber(value);
};
var strictParseFloat = strictParseDouble;
var strictParseFloat32 = function(value) {
  if (typeof value == "string") {
    return expectFloat32(parseNumber(value));
  }
  return expectFloat32(value);
};
var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
var parseNumber = function(value) {
  var matches = value.match(NUMBER_REGEX);
  if (matches === null || matches[0].length !== value.length) {
    throw new TypeError("Expected real number, got implicit NaN");
  }
  return parseFloat(value);
};
var limitedParseDouble = function(value) {
  if (typeof value == "string") {
    return parseFloatString(value);
  }
  return expectNumber(value);
};
var parseFloatString = function(value) {
  switch (value) {
    case "NaN":
      return NaN;
    case "Infinity":
      return Infinity;
    case "-Infinity":
      return -Infinity;
    default:
      throw new Error("Unable to parse float value: " + value);
  }
};
var strictParseLong = function(value) {
  if (typeof value === "string") {
    return expectLong(parseNumber(value));
  }
  return expectLong(value);
};
var strictParseInt32 = function(value) {
  if (typeof value === "string") {
    return expectInt32(parseNumber(value));
  }
  return expectInt32(value);
};
var strictParseShort = function(value) {
  if (typeof value === "string") {
    return expectShort(parseNumber(value));
  }
  return expectShort(value);
};
var strictParseByte = function(value) {
  if (typeof value === "string") {
    return expectByte(parseNumber(value));
  }
  return expectByte(value);
};

// node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js
var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
function dateToUtcString(date) {
  var year = date.getUTCFullYear();
  var month = date.getUTCMonth();
  var dayOfWeek = date.getUTCDay();
  var dayOfMonthInt = date.getUTCDate();
  var hoursInt = date.getUTCHours();
  var minutesInt = date.getUTCMinutes();
  var secondsInt = date.getUTCSeconds();
  var dayOfMonthString = dayOfMonthInt < 10 ? "0" + dayOfMonthInt : "" + dayOfMonthInt;
  var hoursString = hoursInt < 10 ? "0" + hoursInt : "" + hoursInt;
  var minutesString = minutesInt < 10 ? "0" + minutesInt : "" + minutesInt;
  var secondsString = secondsInt < 10 ? "0" + secondsInt : "" + secondsInt;
  return DAYS[dayOfWeek] + ", " + dayOfMonthString + " " + MONTHS[month] + " " + year + " " + hoursString + ":" + minutesString + ":" + secondsString + " GMT";
}
var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
var parseRfc3339DateTime = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  if (typeof value !== "string") {
    throw new TypeError("RFC-3339 date-times must be expressed as strings");
  }
  var match = RFC3339.exec(value);
  if (!match) {
    throw new TypeError("Invalid RFC-3339 date-time value");
  }
  var _a = __read(match, 8), _ = _a[0], yearStr = _a[1], monthStr = _a[2], dayStr = _a[3], hours = _a[4], minutes = _a[5], seconds = _a[6], fractionalMilliseconds = _a[7];
  var year = strictParseShort(stripLeadingZeroes(yearStr));
  var month = parseDateValue(monthStr, "month", 1, 12);
  var day = parseDateValue(dayStr, "day", 1, 31);
  return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
};
var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
var parseRfc7231DateTime = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  if (typeof value !== "string") {
    throw new TypeError("RFC-7231 date-times must be expressed as strings");
  }
  var match = IMF_FIXDATE.exec(value);
  if (match) {
    var _a = __read(match, 8), _1 = _a[0], dayStr = _a[1], monthStr = _a[2], yearStr = _a[3], hours = _a[4], minutes = _a[5], seconds = _a[6], fractionalMilliseconds = _a[7];
    return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
  }
  match = RFC_850_DATE.exec(value);
  if (match) {
    var _b = __read(match, 8), _2 = _b[0], dayStr = _b[1], monthStr = _b[2], yearStr = _b[3], hours = _b[4], minutes = _b[5], seconds = _b[6], fractionalMilliseconds = _b[7];
    return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
      hours,
      minutes,
      seconds,
      fractionalMilliseconds
    }));
  }
  match = ASC_TIME.exec(value);
  if (match) {
    var _c = __read(match, 8), _3 = _c[0], monthStr = _c[1], dayStr = _c[2], hours = _c[3], minutes = _c[4], seconds = _c[5], fractionalMilliseconds = _c[6], yearStr = _c[7];
    return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
  }
  throw new TypeError("Invalid RFC-7231 date-time value");
};
var parseEpochTimestamp = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  var valueAsDouble;
  if (typeof value === "number") {
    valueAsDouble = value;
  } else if (typeof value === "string") {
    valueAsDouble = strictParseDouble(value);
  } else {
    throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
  }
  if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
    throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
  }
  return new Date(Math.round(valueAsDouble * 1e3));
};
var buildDate = function(year, month, day, time) {
  var adjustedMonth = month - 1;
  validateDayOfMonth(year, adjustedMonth, day);
  return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
};
var parseTwoDigitYear = function(value) {
  var thisYear = new Date().getUTCFullYear();
  var valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));
  if (valueInThisCentury < thisYear) {
    return valueInThisCentury + 100;
  }
  return valueInThisCentury;
};
var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
var adjustRfc850Year = function(input) {
  if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
    return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
  }
  return input;
};
var parseMonthByShortName = function(value) {
  var monthIdx = MONTHS.indexOf(value);
  if (monthIdx < 0) {
    throw new TypeError("Invalid month: " + value);
  }
  return monthIdx + 1;
};
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var validateDayOfMonth = function(year, month, day) {
  var maxDays = DAYS_IN_MONTH[month];
  if (month === 1 && isLeapYear(year)) {
    maxDays = 29;
  }
  if (day > maxDays) {
    throw new TypeError("Invalid day for " + MONTHS[month] + " in " + year + ": " + day);
  }
};
var isLeapYear = function(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
};
var parseDateValue = function(value, type, lower, upper) {
  var dateVal = strictParseByte(stripLeadingZeroes(value));
  if (dateVal < lower || dateVal > upper) {
    throw new TypeError(type + " must be between " + lower + " and " + upper + ", inclusive");
  }
  return dateVal;
};
var parseMilliseconds = function(value) {
  if (value === null || value === void 0) {
    return 0;
  }
  return strictParseFloat32("0." + value) * 1e3;
};
var stripLeadingZeroes = function(value) {
  var idx = 0;
  while (idx < value.length - 1 && value.charAt(idx) === "0") {
    idx++;
  }
  if (idx === 0) {
    return value;
  }
  return value.slice(idx);
};

// node_modules/@aws-sdk/smithy-client/dist-es/extended-encode-uri-component.js
function extendedEncodeURIComponent(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

// node_modules/@aws-sdk/smithy-client/dist-es/get-array-if-single-item.js
var getArrayIfSingleItem = function(mayBeArray) {
  return Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
};

// node_modules/@aws-sdk/smithy-client/dist-es/get-value-from-text-node.js
var getValueFromTextNode = function(obj) {
  var textNodeName = "#text";
  for (var key in obj) {
    if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
      obj[key] = obj[key][textNodeName];
    } else if (typeof obj[key] === "object" && obj[key] !== null) {
      obj[key] = getValueFromTextNode(obj[key]);
    }
  }
  return obj;
};

// node_modules/@aws-sdk/smithy-client/dist-es/lazy-json.js
var StringWrapper = function() {
  var Class = Object.getPrototypeOf(this).constructor;
  var Constructor = Function.bind.apply(String, __spreadArray([null], __read(arguments)));
  var instance = new Constructor();
  Object.setPrototypeOf(instance, Class.prototype);
  return instance;
};
StringWrapper.prototype = Object.create(String.prototype, {
  constructor: {
    value: StringWrapper,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
Object.setPrototypeOf(StringWrapper, String);
var LazyJsonString = function(_super) {
  __extends(LazyJsonString2, _super);
  function LazyJsonString2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  LazyJsonString2.prototype.deserializeJSON = function() {
    return JSON.parse(_super.prototype.toString.call(this));
  };
  LazyJsonString2.prototype.toJSON = function() {
    return _super.prototype.toString.call(this);
  };
  LazyJsonString2.fromObject = function(object) {
    if (object instanceof LazyJsonString2) {
      return object;
    } else if (object instanceof String || typeof object === "string") {
      return new LazyJsonString2(object);
    }
    return new LazyJsonString2(JSON.stringify(object));
  };
  return LazyJsonString2;
}(StringWrapper);

// node_modules/@aws-sdk/smithy-client/dist-es/ser-utils.js
var serializeFloat = function(value) {
  if (value !== value) {
    return "NaN";
  }
  switch (value) {
    case Infinity:
      return "Infinity";
    case -Infinity:
      return "-Infinity";
    default:
      return value;
  }
};

// node_modules/@aws-sdk/client-dynamodb/dist-es/models/models_0.js
var ArchivalSummary;
(function(ArchivalSummary2) {
  ArchivalSummary2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ArchivalSummary || (ArchivalSummary = {}));
var AttributeDefinition;
(function(AttributeDefinition2) {
  AttributeDefinition2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AttributeDefinition || (AttributeDefinition = {}));
var AutoScalingTargetTrackingScalingPolicyConfigurationDescription;
(function(AutoScalingTargetTrackingScalingPolicyConfigurationDescription2) {
  AutoScalingTargetTrackingScalingPolicyConfigurationDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AutoScalingTargetTrackingScalingPolicyConfigurationDescription || (AutoScalingTargetTrackingScalingPolicyConfigurationDescription = {}));
var AutoScalingPolicyDescription;
(function(AutoScalingPolicyDescription2) {
  AutoScalingPolicyDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AutoScalingPolicyDescription || (AutoScalingPolicyDescription = {}));
var AutoScalingTargetTrackingScalingPolicyConfigurationUpdate;
(function(AutoScalingTargetTrackingScalingPolicyConfigurationUpdate2) {
  AutoScalingTargetTrackingScalingPolicyConfigurationUpdate2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AutoScalingTargetTrackingScalingPolicyConfigurationUpdate || (AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = {}));
var AutoScalingPolicyUpdate;
(function(AutoScalingPolicyUpdate2) {
  AutoScalingPolicyUpdate2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AutoScalingPolicyUpdate || (AutoScalingPolicyUpdate = {}));
var AutoScalingSettingsDescription;
(function(AutoScalingSettingsDescription2) {
  AutoScalingSettingsDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AutoScalingSettingsDescription || (AutoScalingSettingsDescription = {}));
var AutoScalingSettingsUpdate;
(function(AutoScalingSettingsUpdate2) {
  AutoScalingSettingsUpdate2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AutoScalingSettingsUpdate || (AutoScalingSettingsUpdate = {}));
var BackupType;
(function(BackupType2) {
  BackupType2["AWS_BACKUP"] = "AWS_BACKUP";
  BackupType2["SYSTEM"] = "SYSTEM";
  BackupType2["USER"] = "USER";
})(BackupType || (BackupType = {}));
var BackupDetails;
(function(BackupDetails2) {
  BackupDetails2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BackupDetails || (BackupDetails = {}));
var KeySchemaElement;
(function(KeySchemaElement2) {
  KeySchemaElement2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KeySchemaElement || (KeySchemaElement = {}));
var ProvisionedThroughput;
(function(ProvisionedThroughput2) {
  ProvisionedThroughput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ProvisionedThroughput || (ProvisionedThroughput = {}));
var SourceTableDetails;
(function(SourceTableDetails2) {
  SourceTableDetails2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SourceTableDetails || (SourceTableDetails = {}));
var Projection;
(function(Projection2) {
  Projection2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Projection || (Projection = {}));
var GlobalSecondaryIndexInfo;
(function(GlobalSecondaryIndexInfo2) {
  GlobalSecondaryIndexInfo2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GlobalSecondaryIndexInfo || (GlobalSecondaryIndexInfo = {}));
var LocalSecondaryIndexInfo;
(function(LocalSecondaryIndexInfo2) {
  LocalSecondaryIndexInfo2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LocalSecondaryIndexInfo || (LocalSecondaryIndexInfo = {}));
var SSEDescription;
(function(SSEDescription2) {
  SSEDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SSEDescription || (SSEDescription = {}));
var StreamSpecification;
(function(StreamSpecification2) {
  StreamSpecification2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StreamSpecification || (StreamSpecification = {}));
var TimeToLiveDescription;
(function(TimeToLiveDescription2) {
  TimeToLiveDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TimeToLiveDescription || (TimeToLiveDescription = {}));
var SourceTableFeatureDetails;
(function(SourceTableFeatureDetails2) {
  SourceTableFeatureDetails2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SourceTableFeatureDetails || (SourceTableFeatureDetails = {}));
var BackupDescription;
(function(BackupDescription2) {
  BackupDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BackupDescription || (BackupDescription = {}));
var BackupInUseException;
(function(BackupInUseException2) {
  BackupInUseException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BackupInUseException || (BackupInUseException = {}));
var BackupNotFoundException;
(function(BackupNotFoundException2) {
  BackupNotFoundException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BackupNotFoundException || (BackupNotFoundException = {}));
var BackupSummary;
(function(BackupSummary2) {
  BackupSummary2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BackupSummary || (BackupSummary = {}));
var BackupTypeFilter;
(function(BackupTypeFilter2) {
  BackupTypeFilter2["ALL"] = "ALL";
  BackupTypeFilter2["AWS_BACKUP"] = "AWS_BACKUP";
  BackupTypeFilter2["SYSTEM"] = "SYSTEM";
  BackupTypeFilter2["USER"] = "USER";
})(BackupTypeFilter || (BackupTypeFilter = {}));
var BatchStatementErrorCodeEnum;
(function(BatchStatementErrorCodeEnum2) {
  BatchStatementErrorCodeEnum2["AccessDenied"] = "AccessDenied";
  BatchStatementErrorCodeEnum2["ConditionalCheckFailed"] = "ConditionalCheckFailed";
  BatchStatementErrorCodeEnum2["DuplicateItem"] = "DuplicateItem";
  BatchStatementErrorCodeEnum2["InternalServerError"] = "InternalServerError";
  BatchStatementErrorCodeEnum2["ItemCollectionSizeLimitExceeded"] = "ItemCollectionSizeLimitExceeded";
  BatchStatementErrorCodeEnum2["ProvisionedThroughputExceeded"] = "ProvisionedThroughputExceeded";
  BatchStatementErrorCodeEnum2["RequestLimitExceeded"] = "RequestLimitExceeded";
  BatchStatementErrorCodeEnum2["ResourceNotFound"] = "ResourceNotFound";
  BatchStatementErrorCodeEnum2["ThrottlingError"] = "ThrottlingError";
  BatchStatementErrorCodeEnum2["TransactionConflict"] = "TransactionConflict";
  BatchStatementErrorCodeEnum2["ValidationError"] = "ValidationError";
})(BatchStatementErrorCodeEnum || (BatchStatementErrorCodeEnum = {}));
var BatchStatementError;
(function(BatchStatementError2) {
  BatchStatementError2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BatchStatementError || (BatchStatementError = {}));
var InternalServerError;
(function(InternalServerError2) {
  InternalServerError2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InternalServerError || (InternalServerError = {}));
var RequestLimitExceeded;
(function(RequestLimitExceeded2) {
  RequestLimitExceeded2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RequestLimitExceeded || (RequestLimitExceeded = {}));
var Capacity;
(function(Capacity2) {
  Capacity2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Capacity || (Capacity = {}));
var ConsumedCapacity;
(function(ConsumedCapacity2) {
  ConsumedCapacity2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ConsumedCapacity || (ConsumedCapacity = {}));
var InvalidEndpointException;
(function(InvalidEndpointException2) {
  InvalidEndpointException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidEndpointException || (InvalidEndpointException = {}));
var ProvisionedThroughputExceededException;
(function(ProvisionedThroughputExceededException3) {
  ProvisionedThroughputExceededException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ProvisionedThroughputExceededException || (ProvisionedThroughputExceededException = {}));
var ResourceNotFoundException;
(function(ResourceNotFoundException4) {
  ResourceNotFoundException4.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ResourceNotFoundException || (ResourceNotFoundException = {}));
var ItemCollectionSizeLimitExceededException;
(function(ItemCollectionSizeLimitExceededException2) {
  ItemCollectionSizeLimitExceededException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ItemCollectionSizeLimitExceededException || (ItemCollectionSizeLimitExceededException = {}));
var BillingModeSummary;
(function(BillingModeSummary2) {
  BillingModeSummary2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BillingModeSummary || (BillingModeSummary = {}));
var ConditionalCheckFailedException;
(function(ConditionalCheckFailedException2) {
  ConditionalCheckFailedException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ConditionalCheckFailedException || (ConditionalCheckFailedException = {}));
var PointInTimeRecoveryDescription;
(function(PointInTimeRecoveryDescription2) {
  PointInTimeRecoveryDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PointInTimeRecoveryDescription || (PointInTimeRecoveryDescription = {}));
var ContinuousBackupsDescription;
(function(ContinuousBackupsDescription2) {
  ContinuousBackupsDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ContinuousBackupsDescription || (ContinuousBackupsDescription = {}));
var ContinuousBackupsUnavailableException;
(function(ContinuousBackupsUnavailableException2) {
  ContinuousBackupsUnavailableException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ContinuousBackupsUnavailableException || (ContinuousBackupsUnavailableException = {}));
var ContributorInsightsSummary;
(function(ContributorInsightsSummary2) {
  ContributorInsightsSummary2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ContributorInsightsSummary || (ContributorInsightsSummary = {}));
var CreateBackupInput;
(function(CreateBackupInput2) {
  CreateBackupInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateBackupInput || (CreateBackupInput = {}));
var CreateBackupOutput;
(function(CreateBackupOutput2) {
  CreateBackupOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateBackupOutput || (CreateBackupOutput = {}));
var LimitExceededException;
(function(LimitExceededException4) {
  LimitExceededException4.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LimitExceededException || (LimitExceededException = {}));
var TableInUseException;
(function(TableInUseException2) {
  TableInUseException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TableInUseException || (TableInUseException = {}));
var TableNotFoundException;
(function(TableNotFoundException2) {
  TableNotFoundException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TableNotFoundException || (TableNotFoundException = {}));
var CreateGlobalSecondaryIndexAction;
(function(CreateGlobalSecondaryIndexAction2) {
  CreateGlobalSecondaryIndexAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateGlobalSecondaryIndexAction || (CreateGlobalSecondaryIndexAction = {}));
var Replica;
(function(Replica2) {
  Replica2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Replica || (Replica = {}));
var CreateGlobalTableInput;
(function(CreateGlobalTableInput2) {
  CreateGlobalTableInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateGlobalTableInput || (CreateGlobalTableInput = {}));
var ProvisionedThroughputOverride;
(function(ProvisionedThroughputOverride2) {
  ProvisionedThroughputOverride2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ProvisionedThroughputOverride || (ProvisionedThroughputOverride = {}));
var ReplicaGlobalSecondaryIndexDescription;
(function(ReplicaGlobalSecondaryIndexDescription2) {
  ReplicaGlobalSecondaryIndexDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaGlobalSecondaryIndexDescription || (ReplicaGlobalSecondaryIndexDescription = {}));
var ReplicaDescription;
(function(ReplicaDescription2) {
  ReplicaDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaDescription || (ReplicaDescription = {}));
var GlobalTableDescription;
(function(GlobalTableDescription2) {
  GlobalTableDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GlobalTableDescription || (GlobalTableDescription = {}));
var CreateGlobalTableOutput;
(function(CreateGlobalTableOutput2) {
  CreateGlobalTableOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateGlobalTableOutput || (CreateGlobalTableOutput = {}));
var GlobalTableAlreadyExistsException;
(function(GlobalTableAlreadyExistsException2) {
  GlobalTableAlreadyExistsException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GlobalTableAlreadyExistsException || (GlobalTableAlreadyExistsException = {}));
var CreateReplicaAction;
(function(CreateReplicaAction2) {
  CreateReplicaAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateReplicaAction || (CreateReplicaAction = {}));
var ReplicaGlobalSecondaryIndex;
(function(ReplicaGlobalSecondaryIndex2) {
  ReplicaGlobalSecondaryIndex2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaGlobalSecondaryIndex || (ReplicaGlobalSecondaryIndex = {}));
var CreateReplicationGroupMemberAction;
(function(CreateReplicationGroupMemberAction2) {
  CreateReplicationGroupMemberAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateReplicationGroupMemberAction || (CreateReplicationGroupMemberAction = {}));
var GlobalSecondaryIndex;
(function(GlobalSecondaryIndex2) {
  GlobalSecondaryIndex2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GlobalSecondaryIndex || (GlobalSecondaryIndex = {}));
var LocalSecondaryIndex;
(function(LocalSecondaryIndex2) {
  LocalSecondaryIndex2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LocalSecondaryIndex || (LocalSecondaryIndex = {}));
var SSESpecification;
(function(SSESpecification2) {
  SSESpecification2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SSESpecification || (SSESpecification = {}));
var Tag;
(function(Tag5) {
  Tag5.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Tag || (Tag = {}));
var CreateTableInput;
(function(CreateTableInput2) {
  CreateTableInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateTableInput || (CreateTableInput = {}));
var ProvisionedThroughputDescription;
(function(ProvisionedThroughputDescription2) {
  ProvisionedThroughputDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ProvisionedThroughputDescription || (ProvisionedThroughputDescription = {}));
var GlobalSecondaryIndexDescription;
(function(GlobalSecondaryIndexDescription2) {
  GlobalSecondaryIndexDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GlobalSecondaryIndexDescription || (GlobalSecondaryIndexDescription = {}));
var LocalSecondaryIndexDescription;
(function(LocalSecondaryIndexDescription2) {
  LocalSecondaryIndexDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LocalSecondaryIndexDescription || (LocalSecondaryIndexDescription = {}));
var RestoreSummary;
(function(RestoreSummary2) {
  RestoreSummary2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RestoreSummary || (RestoreSummary = {}));
var TableDescription;
(function(TableDescription2) {
  TableDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TableDescription || (TableDescription = {}));
var CreateTableOutput;
(function(CreateTableOutput2) {
  CreateTableOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateTableOutput || (CreateTableOutput = {}));
var ResourceInUseException;
(function(ResourceInUseException3) {
  ResourceInUseException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ResourceInUseException || (ResourceInUseException = {}));
var DeleteBackupInput;
(function(DeleteBackupInput2) {
  DeleteBackupInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBackupInput || (DeleteBackupInput = {}));
var DeleteBackupOutput;
(function(DeleteBackupOutput2) {
  DeleteBackupOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBackupOutput || (DeleteBackupOutput = {}));
var DeleteGlobalSecondaryIndexAction;
(function(DeleteGlobalSecondaryIndexAction2) {
  DeleteGlobalSecondaryIndexAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteGlobalSecondaryIndexAction || (DeleteGlobalSecondaryIndexAction = {}));
var TransactionConflictException;
(function(TransactionConflictException2) {
  TransactionConflictException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TransactionConflictException || (TransactionConflictException = {}));
var DeleteReplicaAction;
(function(DeleteReplicaAction2) {
  DeleteReplicaAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteReplicaAction || (DeleteReplicaAction = {}));
var DeleteReplicationGroupMemberAction;
(function(DeleteReplicationGroupMemberAction2) {
  DeleteReplicationGroupMemberAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteReplicationGroupMemberAction || (DeleteReplicationGroupMemberAction = {}));
var DeleteTableInput;
(function(DeleteTableInput2) {
  DeleteTableInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteTableInput || (DeleteTableInput = {}));
var DeleteTableOutput;
(function(DeleteTableOutput2) {
  DeleteTableOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteTableOutput || (DeleteTableOutput = {}));
var DescribeBackupInput;
(function(DescribeBackupInput2) {
  DescribeBackupInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeBackupInput || (DescribeBackupInput = {}));
var DescribeBackupOutput;
(function(DescribeBackupOutput2) {
  DescribeBackupOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeBackupOutput || (DescribeBackupOutput = {}));
var DescribeContinuousBackupsInput;
(function(DescribeContinuousBackupsInput2) {
  DescribeContinuousBackupsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeContinuousBackupsInput || (DescribeContinuousBackupsInput = {}));
var DescribeContinuousBackupsOutput;
(function(DescribeContinuousBackupsOutput2) {
  DescribeContinuousBackupsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeContinuousBackupsOutput || (DescribeContinuousBackupsOutput = {}));
var DescribeContributorInsightsInput;
(function(DescribeContributorInsightsInput2) {
  DescribeContributorInsightsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeContributorInsightsInput || (DescribeContributorInsightsInput = {}));
var FailureException;
(function(FailureException2) {
  FailureException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(FailureException || (FailureException = {}));
var DescribeContributorInsightsOutput;
(function(DescribeContributorInsightsOutput2) {
  DescribeContributorInsightsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeContributorInsightsOutput || (DescribeContributorInsightsOutput = {}));
var DescribeEndpointsRequest;
(function(DescribeEndpointsRequest2) {
  DescribeEndpointsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeEndpointsRequest || (DescribeEndpointsRequest = {}));
var Endpoint;
(function(Endpoint3) {
  Endpoint3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Endpoint || (Endpoint = {}));
var DescribeEndpointsResponse;
(function(DescribeEndpointsResponse2) {
  DescribeEndpointsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeEndpointsResponse || (DescribeEndpointsResponse = {}));
var DescribeExportInput;
(function(DescribeExportInput2) {
  DescribeExportInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeExportInput || (DescribeExportInput = {}));
var ExportFormat;
(function(ExportFormat2) {
  ExportFormat2["DYNAMODB_JSON"] = "DYNAMODB_JSON";
  ExportFormat2["ION"] = "ION";
})(ExportFormat || (ExportFormat = {}));
var ExportStatus;
(function(ExportStatus2) {
  ExportStatus2["COMPLETED"] = "COMPLETED";
  ExportStatus2["FAILED"] = "FAILED";
  ExportStatus2["IN_PROGRESS"] = "IN_PROGRESS";
})(ExportStatus || (ExportStatus = {}));
var ExportDescription;
(function(ExportDescription2) {
  ExportDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ExportDescription || (ExportDescription = {}));
var DescribeExportOutput;
(function(DescribeExportOutput2) {
  DescribeExportOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeExportOutput || (DescribeExportOutput = {}));
var ExportNotFoundException;
(function(ExportNotFoundException2) {
  ExportNotFoundException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ExportNotFoundException || (ExportNotFoundException = {}));
var DescribeGlobalTableInput;
(function(DescribeGlobalTableInput2) {
  DescribeGlobalTableInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeGlobalTableInput || (DescribeGlobalTableInput = {}));
var DescribeGlobalTableOutput;
(function(DescribeGlobalTableOutput2) {
  DescribeGlobalTableOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeGlobalTableOutput || (DescribeGlobalTableOutput = {}));
var GlobalTableNotFoundException;
(function(GlobalTableNotFoundException2) {
  GlobalTableNotFoundException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GlobalTableNotFoundException || (GlobalTableNotFoundException = {}));
var DescribeGlobalTableSettingsInput;
(function(DescribeGlobalTableSettingsInput2) {
  DescribeGlobalTableSettingsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeGlobalTableSettingsInput || (DescribeGlobalTableSettingsInput = {}));
var ReplicaGlobalSecondaryIndexSettingsDescription;
(function(ReplicaGlobalSecondaryIndexSettingsDescription2) {
  ReplicaGlobalSecondaryIndexSettingsDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaGlobalSecondaryIndexSettingsDescription || (ReplicaGlobalSecondaryIndexSettingsDescription = {}));
var ReplicaSettingsDescription;
(function(ReplicaSettingsDescription2) {
  ReplicaSettingsDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaSettingsDescription || (ReplicaSettingsDescription = {}));
var DescribeGlobalTableSettingsOutput;
(function(DescribeGlobalTableSettingsOutput2) {
  DescribeGlobalTableSettingsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeGlobalTableSettingsOutput || (DescribeGlobalTableSettingsOutput = {}));
var DescribeKinesisStreamingDestinationInput;
(function(DescribeKinesisStreamingDestinationInput2) {
  DescribeKinesisStreamingDestinationInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeKinesisStreamingDestinationInput || (DescribeKinesisStreamingDestinationInput = {}));
var KinesisDataStreamDestination;
(function(KinesisDataStreamDestination2) {
  KinesisDataStreamDestination2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KinesisDataStreamDestination || (KinesisDataStreamDestination = {}));
var DescribeKinesisStreamingDestinationOutput;
(function(DescribeKinesisStreamingDestinationOutput2) {
  DescribeKinesisStreamingDestinationOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeKinesisStreamingDestinationOutput || (DescribeKinesisStreamingDestinationOutput = {}));
var DescribeLimitsInput;
(function(DescribeLimitsInput3) {
  DescribeLimitsInput3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeLimitsInput || (DescribeLimitsInput = {}));
var DescribeLimitsOutput;
(function(DescribeLimitsOutput3) {
  DescribeLimitsOutput3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeLimitsOutput || (DescribeLimitsOutput = {}));
var DescribeTableInput;
(function(DescribeTableInput2) {
  DescribeTableInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeTableInput || (DescribeTableInput = {}));
var DescribeTableOutput;
(function(DescribeTableOutput2) {
  DescribeTableOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeTableOutput || (DescribeTableOutput = {}));
var DescribeTableReplicaAutoScalingInput;
(function(DescribeTableReplicaAutoScalingInput2) {
  DescribeTableReplicaAutoScalingInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeTableReplicaAutoScalingInput || (DescribeTableReplicaAutoScalingInput = {}));
var ReplicaGlobalSecondaryIndexAutoScalingDescription;
(function(ReplicaGlobalSecondaryIndexAutoScalingDescription2) {
  ReplicaGlobalSecondaryIndexAutoScalingDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaGlobalSecondaryIndexAutoScalingDescription || (ReplicaGlobalSecondaryIndexAutoScalingDescription = {}));
var ReplicaAutoScalingDescription;
(function(ReplicaAutoScalingDescription2) {
  ReplicaAutoScalingDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaAutoScalingDescription || (ReplicaAutoScalingDescription = {}));
var TableAutoScalingDescription;
(function(TableAutoScalingDescription2) {
  TableAutoScalingDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TableAutoScalingDescription || (TableAutoScalingDescription = {}));
var DescribeTableReplicaAutoScalingOutput;
(function(DescribeTableReplicaAutoScalingOutput2) {
  DescribeTableReplicaAutoScalingOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeTableReplicaAutoScalingOutput || (DescribeTableReplicaAutoScalingOutput = {}));
var DescribeTimeToLiveInput;
(function(DescribeTimeToLiveInput2) {
  DescribeTimeToLiveInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeTimeToLiveInput || (DescribeTimeToLiveInput = {}));
var DescribeTimeToLiveOutput;
(function(DescribeTimeToLiveOutput2) {
  DescribeTimeToLiveOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeTimeToLiveOutput || (DescribeTimeToLiveOutput = {}));
var KinesisStreamingDestinationInput;
(function(KinesisStreamingDestinationInput2) {
  KinesisStreamingDestinationInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KinesisStreamingDestinationInput || (KinesisStreamingDestinationInput = {}));
var KinesisStreamingDestinationOutput;
(function(KinesisStreamingDestinationOutput2) {
  KinesisStreamingDestinationOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KinesisStreamingDestinationOutput || (KinesisStreamingDestinationOutput = {}));
var DuplicateItemException;
(function(DuplicateItemException2) {
  DuplicateItemException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DuplicateItemException || (DuplicateItemException = {}));
var IdempotentParameterMismatchException;
(function(IdempotentParameterMismatchException2) {
  IdempotentParameterMismatchException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(IdempotentParameterMismatchException || (IdempotentParameterMismatchException = {}));
var TransactionInProgressException;
(function(TransactionInProgressException2) {
  TransactionInProgressException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TransactionInProgressException || (TransactionInProgressException = {}));
var ExportConflictException;
(function(ExportConflictException2) {
  ExportConflictException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ExportConflictException || (ExportConflictException = {}));
var ExportTableToPointInTimeInput;
(function(ExportTableToPointInTimeInput2) {
  ExportTableToPointInTimeInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ExportTableToPointInTimeInput || (ExportTableToPointInTimeInput = {}));
var ExportTableToPointInTimeOutput;
(function(ExportTableToPointInTimeOutput2) {
  ExportTableToPointInTimeOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ExportTableToPointInTimeOutput || (ExportTableToPointInTimeOutput = {}));
var InvalidExportTimeException;
(function(InvalidExportTimeException2) {
  InvalidExportTimeException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidExportTimeException || (InvalidExportTimeException = {}));
var PointInTimeRecoveryUnavailableException;
(function(PointInTimeRecoveryUnavailableException2) {
  PointInTimeRecoveryUnavailableException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PointInTimeRecoveryUnavailableException || (PointInTimeRecoveryUnavailableException = {}));
var ListBackupsInput;
(function(ListBackupsInput2) {
  ListBackupsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListBackupsInput || (ListBackupsInput = {}));
var ListBackupsOutput;
(function(ListBackupsOutput2) {
  ListBackupsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListBackupsOutput || (ListBackupsOutput = {}));
var ListContributorInsightsInput;
(function(ListContributorInsightsInput2) {
  ListContributorInsightsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListContributorInsightsInput || (ListContributorInsightsInput = {}));
var ListContributorInsightsOutput;
(function(ListContributorInsightsOutput2) {
  ListContributorInsightsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListContributorInsightsOutput || (ListContributorInsightsOutput = {}));
var ListExportsInput;
(function(ListExportsInput2) {
  ListExportsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListExportsInput || (ListExportsInput = {}));
var ExportSummary;
(function(ExportSummary2) {
  ExportSummary2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ExportSummary || (ExportSummary = {}));
var ListExportsOutput;
(function(ListExportsOutput2) {
  ListExportsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListExportsOutput || (ListExportsOutput = {}));
var ListGlobalTablesInput;
(function(ListGlobalTablesInput2) {
  ListGlobalTablesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListGlobalTablesInput || (ListGlobalTablesInput = {}));
var GlobalTable;
(function(GlobalTable2) {
  GlobalTable2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GlobalTable || (GlobalTable = {}));
var ListGlobalTablesOutput;
(function(ListGlobalTablesOutput2) {
  ListGlobalTablesOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListGlobalTablesOutput || (ListGlobalTablesOutput = {}));
var ListTablesInput;
(function(ListTablesInput2) {
  ListTablesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTablesInput || (ListTablesInput = {}));
var ListTablesOutput;
(function(ListTablesOutput2) {
  ListTablesOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTablesOutput || (ListTablesOutput = {}));
var ListTagsOfResourceInput;
(function(ListTagsOfResourceInput2) {
  ListTagsOfResourceInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTagsOfResourceInput || (ListTagsOfResourceInput = {}));
var ListTagsOfResourceOutput;
(function(ListTagsOfResourceOutput2) {
  ListTagsOfResourceOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTagsOfResourceOutput || (ListTagsOfResourceOutput = {}));
var RestoreTableFromBackupInput;
(function(RestoreTableFromBackupInput2) {
  RestoreTableFromBackupInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RestoreTableFromBackupInput || (RestoreTableFromBackupInput = {}));
var RestoreTableFromBackupOutput;
(function(RestoreTableFromBackupOutput2) {
  RestoreTableFromBackupOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RestoreTableFromBackupOutput || (RestoreTableFromBackupOutput = {}));
var TableAlreadyExistsException;
(function(TableAlreadyExistsException2) {
  TableAlreadyExistsException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TableAlreadyExistsException || (TableAlreadyExistsException = {}));
var InvalidRestoreTimeException;
(function(InvalidRestoreTimeException2) {
  InvalidRestoreTimeException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidRestoreTimeException || (InvalidRestoreTimeException = {}));
var RestoreTableToPointInTimeInput;
(function(RestoreTableToPointInTimeInput2) {
  RestoreTableToPointInTimeInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RestoreTableToPointInTimeInput || (RestoreTableToPointInTimeInput = {}));
var RestoreTableToPointInTimeOutput;
(function(RestoreTableToPointInTimeOutput2) {
  RestoreTableToPointInTimeOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RestoreTableToPointInTimeOutput || (RestoreTableToPointInTimeOutput = {}));
var TagResourceInput;
(function(TagResourceInput2) {
  TagResourceInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TagResourceInput || (TagResourceInput = {}));
var UntagResourceInput;
(function(UntagResourceInput2) {
  UntagResourceInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UntagResourceInput || (UntagResourceInput = {}));
var PointInTimeRecoverySpecification;
(function(PointInTimeRecoverySpecification2) {
  PointInTimeRecoverySpecification2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PointInTimeRecoverySpecification || (PointInTimeRecoverySpecification = {}));
var UpdateContinuousBackupsInput;
(function(UpdateContinuousBackupsInput2) {
  UpdateContinuousBackupsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateContinuousBackupsInput || (UpdateContinuousBackupsInput = {}));
var UpdateContinuousBackupsOutput;
(function(UpdateContinuousBackupsOutput2) {
  UpdateContinuousBackupsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateContinuousBackupsOutput || (UpdateContinuousBackupsOutput = {}));
var UpdateContributorInsightsInput;
(function(UpdateContributorInsightsInput2) {
  UpdateContributorInsightsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateContributorInsightsInput || (UpdateContributorInsightsInput = {}));
var UpdateContributorInsightsOutput;
(function(UpdateContributorInsightsOutput2) {
  UpdateContributorInsightsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateContributorInsightsOutput || (UpdateContributorInsightsOutput = {}));
var ReplicaAlreadyExistsException;
(function(ReplicaAlreadyExistsException2) {
  ReplicaAlreadyExistsException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaAlreadyExistsException || (ReplicaAlreadyExistsException = {}));
var ReplicaNotFoundException;
(function(ReplicaNotFoundException2) {
  ReplicaNotFoundException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaNotFoundException || (ReplicaNotFoundException = {}));
var ReplicaUpdate;
(function(ReplicaUpdate2) {
  ReplicaUpdate2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaUpdate || (ReplicaUpdate = {}));
var UpdateGlobalTableInput;
(function(UpdateGlobalTableInput2) {
  UpdateGlobalTableInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateGlobalTableInput || (UpdateGlobalTableInput = {}));
var UpdateGlobalTableOutput;
(function(UpdateGlobalTableOutput2) {
  UpdateGlobalTableOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateGlobalTableOutput || (UpdateGlobalTableOutput = {}));
var IndexNotFoundException;
(function(IndexNotFoundException2) {
  IndexNotFoundException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(IndexNotFoundException || (IndexNotFoundException = {}));
var GlobalTableGlobalSecondaryIndexSettingsUpdate;
(function(GlobalTableGlobalSecondaryIndexSettingsUpdate2) {
  GlobalTableGlobalSecondaryIndexSettingsUpdate2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GlobalTableGlobalSecondaryIndexSettingsUpdate || (GlobalTableGlobalSecondaryIndexSettingsUpdate = {}));
var ReplicaGlobalSecondaryIndexSettingsUpdate;
(function(ReplicaGlobalSecondaryIndexSettingsUpdate2) {
  ReplicaGlobalSecondaryIndexSettingsUpdate2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaGlobalSecondaryIndexSettingsUpdate || (ReplicaGlobalSecondaryIndexSettingsUpdate = {}));
var ReplicaSettingsUpdate;
(function(ReplicaSettingsUpdate2) {
  ReplicaSettingsUpdate2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaSettingsUpdate || (ReplicaSettingsUpdate = {}));
var UpdateGlobalTableSettingsInput;
(function(UpdateGlobalTableSettingsInput2) {
  UpdateGlobalTableSettingsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateGlobalTableSettingsInput || (UpdateGlobalTableSettingsInput = {}));
var UpdateGlobalTableSettingsOutput;
(function(UpdateGlobalTableSettingsOutput2) {
  UpdateGlobalTableSettingsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateGlobalTableSettingsOutput || (UpdateGlobalTableSettingsOutput = {}));
var UpdateGlobalSecondaryIndexAction;
(function(UpdateGlobalSecondaryIndexAction2) {
  UpdateGlobalSecondaryIndexAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateGlobalSecondaryIndexAction || (UpdateGlobalSecondaryIndexAction = {}));
var GlobalSecondaryIndexUpdate;
(function(GlobalSecondaryIndexUpdate2) {
  GlobalSecondaryIndexUpdate2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GlobalSecondaryIndexUpdate || (GlobalSecondaryIndexUpdate = {}));
var UpdateReplicationGroupMemberAction;
(function(UpdateReplicationGroupMemberAction2) {
  UpdateReplicationGroupMemberAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateReplicationGroupMemberAction || (UpdateReplicationGroupMemberAction = {}));
var ReplicationGroupUpdate;
(function(ReplicationGroupUpdate2) {
  ReplicationGroupUpdate2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicationGroupUpdate || (ReplicationGroupUpdate = {}));
var UpdateTableInput;
(function(UpdateTableInput2) {
  UpdateTableInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateTableInput || (UpdateTableInput = {}));
var UpdateTableOutput;
(function(UpdateTableOutput2) {
  UpdateTableOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateTableOutput || (UpdateTableOutput = {}));
var GlobalSecondaryIndexAutoScalingUpdate;
(function(GlobalSecondaryIndexAutoScalingUpdate2) {
  GlobalSecondaryIndexAutoScalingUpdate2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GlobalSecondaryIndexAutoScalingUpdate || (GlobalSecondaryIndexAutoScalingUpdate = {}));
var ReplicaGlobalSecondaryIndexAutoScalingUpdate;
(function(ReplicaGlobalSecondaryIndexAutoScalingUpdate2) {
  ReplicaGlobalSecondaryIndexAutoScalingUpdate2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaGlobalSecondaryIndexAutoScalingUpdate || (ReplicaGlobalSecondaryIndexAutoScalingUpdate = {}));
var ReplicaAutoScalingUpdate;
(function(ReplicaAutoScalingUpdate2) {
  ReplicaAutoScalingUpdate2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaAutoScalingUpdate || (ReplicaAutoScalingUpdate = {}));
var UpdateTableReplicaAutoScalingInput;
(function(UpdateTableReplicaAutoScalingInput2) {
  UpdateTableReplicaAutoScalingInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateTableReplicaAutoScalingInput || (UpdateTableReplicaAutoScalingInput = {}));
var UpdateTableReplicaAutoScalingOutput;
(function(UpdateTableReplicaAutoScalingOutput2) {
  UpdateTableReplicaAutoScalingOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateTableReplicaAutoScalingOutput || (UpdateTableReplicaAutoScalingOutput = {}));
var TimeToLiveSpecification;
(function(TimeToLiveSpecification2) {
  TimeToLiveSpecification2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TimeToLiveSpecification || (TimeToLiveSpecification = {}));
var UpdateTimeToLiveInput;
(function(UpdateTimeToLiveInput2) {
  UpdateTimeToLiveInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateTimeToLiveInput || (UpdateTimeToLiveInput = {}));
var UpdateTimeToLiveOutput;
(function(UpdateTimeToLiveOutput2) {
  UpdateTimeToLiveOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateTimeToLiveOutput || (UpdateTimeToLiveOutput = {}));
var AttributeValue;
(function(AttributeValue2) {
  AttributeValue2.visit = function(value, visitor) {
    if (value.S !== void 0)
      return visitor.S(value.S);
    if (value.N !== void 0)
      return visitor.N(value.N);
    if (value.B !== void 0)
      return visitor.B(value.B);
    if (value.SS !== void 0)
      return visitor.SS(value.SS);
    if (value.NS !== void 0)
      return visitor.NS(value.NS);
    if (value.BS !== void 0)
      return visitor.BS(value.BS);
    if (value.M !== void 0)
      return visitor.M(value.M);
    if (value.L !== void 0)
      return visitor.L(value.L);
    if (value.NULL !== void 0)
      return visitor.NULL(value.NULL);
    if (value.BOOL !== void 0)
      return visitor.BOOL(value.BOOL);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
  AttributeValue2.filterSensitiveLog = function(obj) {
    var _a;
    if (obj.S !== void 0)
      return { S: obj.S };
    if (obj.N !== void 0)
      return { N: obj.N };
    if (obj.B !== void 0)
      return { B: obj.B };
    if (obj.SS !== void 0)
      return { SS: obj.SS };
    if (obj.NS !== void 0)
      return { NS: obj.NS };
    if (obj.BS !== void 0)
      return { BS: obj.BS };
    if (obj.M !== void 0)
      return {
        M: Object.entries(obj.M).reduce(function(acc, _a2) {
          var _b;
          var _c = __read(_a2, 2), key = _c[0], value = _c[1];
          return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue2.filterSensitiveLog(value), _b));
        }, {})
      };
    if (obj.L !== void 0)
      return { L: obj.L.map(function(item) {
        return AttributeValue2.filterSensitiveLog(item);
      }) };
    if (obj.NULL !== void 0)
      return { NULL: obj.NULL };
    if (obj.BOOL !== void 0)
      return { BOOL: obj.BOOL };
    if (obj.$unknown !== void 0)
      return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
  };
})(AttributeValue || (AttributeValue = {}));
var AttributeValueUpdate;
(function(AttributeValueUpdate2) {
  AttributeValueUpdate2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Value && { Value: AttributeValue.filterSensitiveLog(obj.Value) });
  };
})(AttributeValueUpdate || (AttributeValueUpdate = {}));
var BatchStatementRequest;
(function(BatchStatementRequest2) {
  BatchStatementRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Parameters && { Parameters: obj.Parameters.map(function(item) {
      return AttributeValue.filterSensitiveLog(item);
    }) });
  };
})(BatchStatementRequest || (BatchStatementRequest = {}));
var BatchStatementResponse;
(function(BatchStatementResponse2) {
  BatchStatementResponse2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Item && {
      Item: Object.entries(obj.Item).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(BatchStatementResponse || (BatchStatementResponse = {}));
var CancellationReason;
(function(CancellationReason2) {
  CancellationReason2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Item && {
      Item: Object.entries(obj.Item).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(CancellationReason || (CancellationReason = {}));
var Condition;
(function(Condition3) {
  Condition3.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.AttributeValueList && {
      AttributeValueList: obj.AttributeValueList.map(function(item) {
        return AttributeValue.filterSensitiveLog(item);
      })
    });
  };
})(Condition || (Condition = {}));
var DeleteRequest;
(function(DeleteRequest2) {
  DeleteRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Key && {
      Key: Object.entries(obj.Key).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(DeleteRequest || (DeleteRequest = {}));
var ExecuteStatementInput;
(function(ExecuteStatementInput2) {
  ExecuteStatementInput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Parameters && { Parameters: obj.Parameters.map(function(item) {
      return AttributeValue.filterSensitiveLog(item);
    }) });
  };
})(ExecuteStatementInput || (ExecuteStatementInput = {}));
var Get;
(function(Get2) {
  Get2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Key && {
      Key: Object.entries(obj.Key).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(Get || (Get = {}));
var GetItemInput;
(function(GetItemInput2) {
  GetItemInput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Key && {
      Key: Object.entries(obj.Key).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(GetItemInput || (GetItemInput = {}));
var GetItemOutput;
(function(GetItemOutput2) {
  GetItemOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Item && {
      Item: Object.entries(obj.Item).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(GetItemOutput || (GetItemOutput = {}));
var ItemCollectionMetrics;
(function(ItemCollectionMetrics2) {
  ItemCollectionMetrics2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.ItemCollectionKey && {
      ItemCollectionKey: Object.entries(obj.ItemCollectionKey).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(ItemCollectionMetrics || (ItemCollectionMetrics = {}));
var ItemResponse;
(function(ItemResponse2) {
  ItemResponse2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Item && {
      Item: Object.entries(obj.Item).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(ItemResponse || (ItemResponse = {}));
var ParameterizedStatement;
(function(ParameterizedStatement2) {
  ParameterizedStatement2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Parameters && { Parameters: obj.Parameters.map(function(item) {
      return AttributeValue.filterSensitiveLog(item);
    }) });
  };
})(ParameterizedStatement || (ParameterizedStatement = {}));
var PutRequest;
(function(PutRequest2) {
  PutRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Item && {
      Item: Object.entries(obj.Item).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(PutRequest || (PutRequest = {}));
var ExecuteStatementOutput;
(function(ExecuteStatementOutput2) {
  ExecuteStatementOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Items && {
      Items: obj.Items.map(function(item) {
        return Object.entries(item).reduce(function(acc, _a) {
          var _b;
          var _c = __read(_a, 2), key = _c[0], value = _c[1];
          return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
        }, {});
      })
    });
  };
})(ExecuteStatementOutput || (ExecuteStatementOutput = {}));
var KeysAndAttributes;
(function(KeysAndAttributes2) {
  KeysAndAttributes2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Keys && {
      Keys: obj.Keys.map(function(item) {
        return Object.entries(item).reduce(function(acc, _a) {
          var _b;
          var _c = __read(_a, 2), key = _c[0], value = _c[1];
          return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
        }, {});
      })
    });
  };
})(KeysAndAttributes || (KeysAndAttributes = {}));
var TransactGetItem;
(function(TransactGetItem2) {
  TransactGetItem2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Get && { Get: Get.filterSensitiveLog(obj.Get) });
  };
})(TransactGetItem || (TransactGetItem = {}));
var BatchExecuteStatementInput;
(function(BatchExecuteStatementInput2) {
  BatchExecuteStatementInput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Statements && { Statements: obj.Statements.map(function(item) {
      return BatchStatementRequest.filterSensitiveLog(item);
    }) });
  };
})(BatchExecuteStatementInput || (BatchExecuteStatementInput = {}));
var BatchExecuteStatementOutput;
(function(BatchExecuteStatementOutput2) {
  BatchExecuteStatementOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Responses && { Responses: obj.Responses.map(function(item) {
      return BatchStatementResponse.filterSensitiveLog(item);
    }) });
  };
})(BatchExecuteStatementOutput || (BatchExecuteStatementOutput = {}));
var ExecuteTransactionInput;
(function(ExecuteTransactionInput2) {
  ExecuteTransactionInput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.TransactStatements && {
      TransactStatements: obj.TransactStatements.map(function(item) {
        return ParameterizedStatement.filterSensitiveLog(item);
      })
    });
  };
})(ExecuteTransactionInput || (ExecuteTransactionInput = {}));
var ExecuteTransactionOutput;
(function(ExecuteTransactionOutput2) {
  ExecuteTransactionOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Responses && { Responses: obj.Responses.map(function(item) {
      return ItemResponse.filterSensitiveLog(item);
    }) });
  };
})(ExecuteTransactionOutput || (ExecuteTransactionOutput = {}));
var TransactGetItemsOutput;
(function(TransactGetItemsOutput2) {
  TransactGetItemsOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Responses && { Responses: obj.Responses.map(function(item) {
      return ItemResponse.filterSensitiveLog(item);
    }) });
  };
})(TransactGetItemsOutput || (TransactGetItemsOutput = {}));
var TransactionCanceledException;
(function(TransactionCanceledException2) {
  TransactionCanceledException2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.CancellationReasons && {
      CancellationReasons: obj.CancellationReasons.map(function(item) {
        return CancellationReason.filterSensitiveLog(item);
      })
    });
  };
})(TransactionCanceledException || (TransactionCanceledException = {}));
var BatchGetItemInput;
(function(BatchGetItemInput2) {
  BatchGetItemInput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.RequestItems && {
      RequestItems: Object.entries(obj.RequestItems).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = KeysAndAttributes.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(BatchGetItemInput || (BatchGetItemInput = {}));
var ExpectedAttributeValue;
(function(ExpectedAttributeValue2) {
  ExpectedAttributeValue2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.Value && { Value: AttributeValue.filterSensitiveLog(obj.Value) }), obj.AttributeValueList && {
      AttributeValueList: obj.AttributeValueList.map(function(item) {
        return AttributeValue.filterSensitiveLog(item);
      })
    });
  };
})(ExpectedAttributeValue || (ExpectedAttributeValue = {}));
var TransactGetItemsInput;
(function(TransactGetItemsInput2) {
  TransactGetItemsInput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.TransactItems && {
      TransactItems: obj.TransactItems.map(function(item) {
        return TransactGetItem.filterSensitiveLog(item);
      })
    });
  };
})(TransactGetItemsInput || (TransactGetItemsInput = {}));
var TransactWriteItemsOutput;
(function(TransactWriteItemsOutput2) {
  TransactWriteItemsOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.ItemCollectionMetrics && {
      ItemCollectionMetrics: Object.entries(obj.ItemCollectionMetrics).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = value.map(function(item) {
          return ItemCollectionMetrics.filterSensitiveLog(item);
        }), _b));
      }, {})
    });
  };
})(TransactWriteItemsOutput || (TransactWriteItemsOutput = {}));
var ConditionCheck;
(function(ConditionCheck2) {
  ConditionCheck2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.Key && {
      Key: Object.entries(obj.Key).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.ExpressionAttributeValues && {
      ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(ConditionCheck || (ConditionCheck = {}));
var Delete;
(function(Delete3) {
  Delete3.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.Key && {
      Key: Object.entries(obj.Key).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.ExpressionAttributeValues && {
      ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(Delete || (Delete = {}));
var Put;
(function(Put2) {
  Put2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.Item && {
      Item: Object.entries(obj.Item).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.ExpressionAttributeValues && {
      ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(Put || (Put = {}));
var Update;
(function(Update2) {
  Update2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.Key && {
      Key: Object.entries(obj.Key).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.ExpressionAttributeValues && {
      ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(Update || (Update = {}));
var DeleteItemOutput;
(function(DeleteItemOutput2) {
  DeleteItemOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.Attributes && {
      Attributes: Object.entries(obj.Attributes).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.ItemCollectionMetrics && {
      ItemCollectionMetrics: ItemCollectionMetrics.filterSensitiveLog(obj.ItemCollectionMetrics)
    });
  };
})(DeleteItemOutput || (DeleteItemOutput = {}));
var PutItemOutput;
(function(PutItemOutput2) {
  PutItemOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.Attributes && {
      Attributes: Object.entries(obj.Attributes).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.ItemCollectionMetrics && {
      ItemCollectionMetrics: ItemCollectionMetrics.filterSensitiveLog(obj.ItemCollectionMetrics)
    });
  };
})(PutItemOutput || (PutItemOutput = {}));
var QueryOutput;
(function(QueryOutput2) {
  QueryOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.Items && {
      Items: obj.Items.map(function(item) {
        return Object.entries(item).reduce(function(acc, _a) {
          var _b;
          var _c = __read(_a, 2), key = _c[0], value = _c[1];
          return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
        }, {});
      })
    }), obj.LastEvaluatedKey && {
      LastEvaluatedKey: Object.entries(obj.LastEvaluatedKey).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(QueryOutput || (QueryOutput = {}));
var ScanOutput;
(function(ScanOutput2) {
  ScanOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.Items && {
      Items: obj.Items.map(function(item) {
        return Object.entries(item).reduce(function(acc, _a) {
          var _b;
          var _c = __read(_a, 2), key = _c[0], value = _c[1];
          return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
        }, {});
      })
    }), obj.LastEvaluatedKey && {
      LastEvaluatedKey: Object.entries(obj.LastEvaluatedKey).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(ScanOutput || (ScanOutput = {}));
var UpdateItemOutput;
(function(UpdateItemOutput2) {
  UpdateItemOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.Attributes && {
      Attributes: Object.entries(obj.Attributes).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.ItemCollectionMetrics && {
      ItemCollectionMetrics: ItemCollectionMetrics.filterSensitiveLog(obj.ItemCollectionMetrics)
    });
  };
})(UpdateItemOutput || (UpdateItemOutput = {}));
var WriteRequest;
(function(WriteRequest2) {
  WriteRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.PutRequest && { PutRequest: PutRequest.filterSensitiveLog(obj.PutRequest) }), obj.DeleteRequest && { DeleteRequest: DeleteRequest.filterSensitiveLog(obj.DeleteRequest) });
  };
})(WriteRequest || (WriteRequest = {}));
var BatchGetItemOutput;
(function(BatchGetItemOutput2) {
  BatchGetItemOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.Responses && {
      Responses: Object.entries(obj.Responses).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = value.map(function(item) {
          return Object.entries(item).reduce(function(acc2, _a2) {
            var _b2;
            var _c2 = __read(_a2, 2), key2 = _c2[0], value2 = _c2[1];
            return __assign(__assign({}, acc2), (_b2 = {}, _b2[key2] = AttributeValue.filterSensitiveLog(value2), _b2));
          }, {});
        }), _b));
      }, {})
    }), obj.UnprocessedKeys && {
      UnprocessedKeys: Object.entries(obj.UnprocessedKeys).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = KeysAndAttributes.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(BatchGetItemOutput || (BatchGetItemOutput = {}));
var ScanInput;
(function(ScanInput2) {
  ScanInput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign(__assign({}, obj), obj.ScanFilter && {
      ScanFilter: Object.entries(obj.ScanFilter).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = Condition.filterSensitiveLog(value), _b));
      }, {})
    }), obj.ExclusiveStartKey && {
      ExclusiveStartKey: Object.entries(obj.ExclusiveStartKey).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.ExpressionAttributeValues && {
      ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(ScanInput || (ScanInput = {}));
var BatchWriteItemInput;
(function(BatchWriteItemInput2) {
  BatchWriteItemInput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.RequestItems && {
      RequestItems: Object.entries(obj.RequestItems).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = value.map(function(item) {
          return WriteRequest.filterSensitiveLog(item);
        }), _b));
      }, {})
    });
  };
})(BatchWriteItemInput || (BatchWriteItemInput = {}));
var DeleteItemInput;
(function(DeleteItemInput2) {
  DeleteItemInput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign(__assign({}, obj), obj.Key && {
      Key: Object.entries(obj.Key).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.Expected && {
      Expected: Object.entries(obj.Expected).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = ExpectedAttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.ExpressionAttributeValues && {
      ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(DeleteItemInput || (DeleteItemInput = {}));
var PutItemInput;
(function(PutItemInput2) {
  PutItemInput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign(__assign({}, obj), obj.Item && {
      Item: Object.entries(obj.Item).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.Expected && {
      Expected: Object.entries(obj.Expected).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = ExpectedAttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.ExpressionAttributeValues && {
      ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(PutItemInput || (PutItemInput = {}));
var QueryInput;
(function(QueryInput2) {
  QueryInput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign(__assign(__assign({}, obj), obj.KeyConditions && {
      KeyConditions: Object.entries(obj.KeyConditions).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = Condition.filterSensitiveLog(value), _b));
      }, {})
    }), obj.QueryFilter && {
      QueryFilter: Object.entries(obj.QueryFilter).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = Condition.filterSensitiveLog(value), _b));
      }, {})
    }), obj.ExclusiveStartKey && {
      ExclusiveStartKey: Object.entries(obj.ExclusiveStartKey).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.ExpressionAttributeValues && {
      ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(QueryInput || (QueryInput = {}));
var BatchWriteItemOutput;
(function(BatchWriteItemOutput2) {
  BatchWriteItemOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.UnprocessedItems && {
      UnprocessedItems: Object.entries(obj.UnprocessedItems).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = value.map(function(item) {
          return WriteRequest.filterSensitiveLog(item);
        }), _b));
      }, {})
    }), obj.ItemCollectionMetrics && {
      ItemCollectionMetrics: Object.entries(obj.ItemCollectionMetrics).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = value.map(function(item) {
          return ItemCollectionMetrics.filterSensitiveLog(item);
        }), _b));
      }, {})
    });
  };
})(BatchWriteItemOutput || (BatchWriteItemOutput = {}));
var UpdateItemInput;
(function(UpdateItemInput2) {
  UpdateItemInput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign(__assign(__assign({}, obj), obj.Key && {
      Key: Object.entries(obj.Key).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.AttributeUpdates && {
      AttributeUpdates: Object.entries(obj.AttributeUpdates).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValueUpdate.filterSensitiveLog(value), _b));
      }, {})
    }), obj.Expected && {
      Expected: Object.entries(obj.Expected).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = ExpectedAttributeValue.filterSensitiveLog(value), _b));
      }, {})
    }), obj.ExpressionAttributeValues && {
      ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(function(acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return __assign(__assign({}, acc), (_b = {}, _b[key] = AttributeValue.filterSensitiveLog(value), _b));
      }, {})
    });
  };
})(UpdateItemInput || (UpdateItemInput = {}));
var TransactWriteItem;
(function(TransactWriteItem2) {
  TransactWriteItem2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign(__assign(__assign({}, obj), obj.ConditionCheck && { ConditionCheck: ConditionCheck.filterSensitiveLog(obj.ConditionCheck) }), obj.Put && { Put: Put.filterSensitiveLog(obj.Put) }), obj.Delete && { Delete: Delete.filterSensitiveLog(obj.Delete) }), obj.Update && { Update: Update.filterSensitiveLog(obj.Update) });
  };
})(TransactWriteItem || (TransactWriteItem = {}));
var TransactWriteItemsInput;
(function(TransactWriteItemsInput2) {
  TransactWriteItemsInput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.TransactItems && {
      TransactItems: obj.TransactItems.map(function(item) {
        return TransactWriteItem.filterSensitiveLog(item);
      })
    });
  };
})(TransactWriteItemsInput || (TransactWriteItemsInput = {}));

// node_modules/@aws-sdk/protocol-http/dist-es/httpRequest.js
var HttpRequest = function() {
  function HttpRequest2(options) {
    this.method = options.method || "GET";
    this.hostname = options.hostname || "localhost";
    this.port = options.port;
    this.query = options.query || {};
    this.headers = options.headers || {};
    this.body = options.body;
    this.protocol = options.protocol ? options.protocol.substr(-1) !== ":" ? options.protocol + ":" : options.protocol : "https:";
    this.path = options.path ? options.path.charAt(0) !== "/" ? "/" + options.path : options.path : "/";
  }
  HttpRequest2.isInstance = function(request) {
    if (!request)
      return false;
    var req = request;
    return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
  };
  HttpRequest2.prototype.clone = function() {
    var cloned = new HttpRequest2(__assign(__assign({}, this), { headers: __assign({}, this.headers) }));
    if (cloned.query)
      cloned.query = cloneQuery(cloned.query);
    return cloned;
  };
  return HttpRequest2;
}();
function cloneQuery(query) {
  return Object.keys(query).reduce(function(carry, paramName) {
    var _a;
    var param = query[paramName];
    return __assign(__assign({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spreadArray([], __read(param)) : param, _a));
  }, {});
}

// node_modules/@aws-sdk/protocol-http/dist-es/httpResponse.js
var HttpResponse = function() {
  function HttpResponse2(options) {
    this.statusCode = options.statusCode;
    this.headers = options.headers || {};
    this.body = options.body;
  }
  HttpResponse2.isInstance = function(response) {
    if (!response)
      return false;
    var resp = response;
    return typeof resp.statusCode === "number" && typeof resp.headers === "object";
  };
  return HttpResponse2;
}();

// node_modules/@aws-sdk/protocol-http/dist-es/isValidHostname.js
function isValidHostname(hostname) {
  var hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
  return hostPattern.test(hostname);
}

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).substr(1));
}
var i;
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var stringify_default = stringify;

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default = v4;

// node_modules/@aws-sdk/client-dynamodb/dist-es/protocols/Aws_json1_0.js
var serializeAws_json1_0BatchExecuteStatementCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.BatchExecuteStatement"
      };
      body = JSON.stringify(serializeAws_json1_0BatchExecuteStatementInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0BatchGetItemCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.BatchGetItem"
      };
      body = JSON.stringify(serializeAws_json1_0BatchGetItemInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0BatchWriteItemCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.BatchWriteItem"
      };
      body = JSON.stringify(serializeAws_json1_0BatchWriteItemInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0CreateBackupCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.CreateBackup"
      };
      body = JSON.stringify(serializeAws_json1_0CreateBackupInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0CreateGlobalTableCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.CreateGlobalTable"
      };
      body = JSON.stringify(serializeAws_json1_0CreateGlobalTableInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0CreateTableCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.CreateTable"
      };
      body = JSON.stringify(serializeAws_json1_0CreateTableInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DeleteBackupCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DeleteBackup"
      };
      body = JSON.stringify(serializeAws_json1_0DeleteBackupInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DeleteItemCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DeleteItem"
      };
      body = JSON.stringify(serializeAws_json1_0DeleteItemInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DeleteTableCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DeleteTable"
      };
      body = JSON.stringify(serializeAws_json1_0DeleteTableInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DescribeBackupCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeBackup"
      };
      body = JSON.stringify(serializeAws_json1_0DescribeBackupInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DescribeContinuousBackupsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeContinuousBackups"
      };
      body = JSON.stringify(serializeAws_json1_0DescribeContinuousBackupsInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DescribeContributorInsightsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeContributorInsights"
      };
      body = JSON.stringify(serializeAws_json1_0DescribeContributorInsightsInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DescribeEndpointsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeEndpoints"
      };
      body = JSON.stringify(serializeAws_json1_0DescribeEndpointsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DescribeExportCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeExport"
      };
      body = JSON.stringify(serializeAws_json1_0DescribeExportInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DescribeGlobalTableCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeGlobalTable"
      };
      body = JSON.stringify(serializeAws_json1_0DescribeGlobalTableInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DescribeGlobalTableSettingsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeGlobalTableSettings"
      };
      body = JSON.stringify(serializeAws_json1_0DescribeGlobalTableSettingsInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DescribeKinesisStreamingDestinationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeKinesisStreamingDestination"
      };
      body = JSON.stringify(serializeAws_json1_0DescribeKinesisStreamingDestinationInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DescribeLimitsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeLimits"
      };
      body = JSON.stringify(serializeAws_json1_0DescribeLimitsInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DescribeTableCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeTable"
      };
      body = JSON.stringify(serializeAws_json1_0DescribeTableInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DescribeTableReplicaAutoScalingCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeTableReplicaAutoScaling"
      };
      body = JSON.stringify(serializeAws_json1_0DescribeTableReplicaAutoScalingInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DescribeTimeToLiveCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeTimeToLive"
      };
      body = JSON.stringify(serializeAws_json1_0DescribeTimeToLiveInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0DisableKinesisStreamingDestinationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DisableKinesisStreamingDestination"
      };
      body = JSON.stringify(serializeAws_json1_0KinesisStreamingDestinationInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0EnableKinesisStreamingDestinationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.EnableKinesisStreamingDestination"
      };
      body = JSON.stringify(serializeAws_json1_0KinesisStreamingDestinationInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0ExecuteStatementCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ExecuteStatement"
      };
      body = JSON.stringify(serializeAws_json1_0ExecuteStatementInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0ExecuteTransactionCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ExecuteTransaction"
      };
      body = JSON.stringify(serializeAws_json1_0ExecuteTransactionInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0ExportTableToPointInTimeCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ExportTableToPointInTime"
      };
      body = JSON.stringify(serializeAws_json1_0ExportTableToPointInTimeInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0GetItemCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.GetItem"
      };
      body = JSON.stringify(serializeAws_json1_0GetItemInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0ListBackupsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListBackups"
      };
      body = JSON.stringify(serializeAws_json1_0ListBackupsInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0ListContributorInsightsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListContributorInsights"
      };
      body = JSON.stringify(serializeAws_json1_0ListContributorInsightsInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0ListExportsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListExports"
      };
      body = JSON.stringify(serializeAws_json1_0ListExportsInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0ListGlobalTablesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListGlobalTables"
      };
      body = JSON.stringify(serializeAws_json1_0ListGlobalTablesInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0ListTablesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListTables"
      };
      body = JSON.stringify(serializeAws_json1_0ListTablesInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0ListTagsOfResourceCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListTagsOfResource"
      };
      body = JSON.stringify(serializeAws_json1_0ListTagsOfResourceInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0PutItemCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.PutItem"
      };
      body = JSON.stringify(serializeAws_json1_0PutItemInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0QueryCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.Query"
      };
      body = JSON.stringify(serializeAws_json1_0QueryInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0RestoreTableFromBackupCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.RestoreTableFromBackup"
      };
      body = JSON.stringify(serializeAws_json1_0RestoreTableFromBackupInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0RestoreTableToPointInTimeCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.RestoreTableToPointInTime"
      };
      body = JSON.stringify(serializeAws_json1_0RestoreTableToPointInTimeInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0ScanCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.Scan"
      };
      body = JSON.stringify(serializeAws_json1_0ScanInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0TagResourceCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.TagResource"
      };
      body = JSON.stringify(serializeAws_json1_0TagResourceInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0TransactGetItemsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.TransactGetItems"
      };
      body = JSON.stringify(serializeAws_json1_0TransactGetItemsInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0TransactWriteItemsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.TransactWriteItems"
      };
      body = JSON.stringify(serializeAws_json1_0TransactWriteItemsInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0UntagResourceCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UntagResource"
      };
      body = JSON.stringify(serializeAws_json1_0UntagResourceInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0UpdateContinuousBackupsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateContinuousBackups"
      };
      body = JSON.stringify(serializeAws_json1_0UpdateContinuousBackupsInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0UpdateContributorInsightsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateContributorInsights"
      };
      body = JSON.stringify(serializeAws_json1_0UpdateContributorInsightsInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0UpdateGlobalTableCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateGlobalTable"
      };
      body = JSON.stringify(serializeAws_json1_0UpdateGlobalTableInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0UpdateGlobalTableSettingsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateGlobalTableSettings"
      };
      body = JSON.stringify(serializeAws_json1_0UpdateGlobalTableSettingsInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0UpdateItemCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateItem"
      };
      body = JSON.stringify(serializeAws_json1_0UpdateItemInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0UpdateTableCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateTable"
      };
      body = JSON.stringify(serializeAws_json1_0UpdateTableInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0UpdateTableReplicaAutoScalingCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateTableReplicaAutoScaling"
      };
      body = JSON.stringify(serializeAws_json1_0UpdateTableReplicaAutoScalingInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_0UpdateTimeToLiveCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateTimeToLive"
      };
      body = JSON.stringify(serializeAws_json1_0UpdateTimeToLiveInput(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var deserializeAws_json1_0BatchExecuteStatementCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0BatchExecuteStatementCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0BatchExecuteStatementOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0BatchExecuteStatementCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "RequestLimitExceeded":
              return [3, 4];
            case "com.amazonaws.dynamodb#RequestLimitExceeded":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0BatchGetItemCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0BatchGetItemCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0BatchGetItemOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0BatchGetItemCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "ProvisionedThroughputExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
              return [3, 6];
            case "RequestLimitExceeded":
              return [3, 8];
            case "com.amazonaws.dynamodb#RequestLimitExceeded":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0BatchWriteItemCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0BatchWriteItemCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0BatchWriteItemOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0BatchWriteItemCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "ItemCollectionSizeLimitExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
              return [3, 6];
            case "ProvisionedThroughputExceededException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
              return [3, 8];
            case "RequestLimitExceeded":
              return [3, 10];
            case "com.amazonaws.dynamodb#RequestLimitExceeded":
              return [3, 10];
            case "ResourceNotFoundException":
              return [3, 12];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0CreateBackupCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0CreateBackupCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0CreateBackupOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0CreateBackupCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign({}, output)];
          _k = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "BackupInUseException":
              return [3, 2];
            case "com.amazonaws.dynamodb#BackupInUseException":
              return [3, 2];
            case "ContinuousBackupsUnavailableException":
              return [3, 4];
            case "com.amazonaws.dynamodb#ContinuousBackupsUnavailableException":
              return [3, 4];
            case "InternalServerError":
              return [3, 6];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 6];
            case "InvalidEndpointException":
              return [3, 8];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 8];
            case "LimitExceededException":
              return [3, 10];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 10];
            case "TableInUseException":
              return [3, 12];
            case "com.amazonaws.dynamodb#TableInUseException":
              return [3, 12];
            case "TableNotFoundException":
              return [3, 14];
            case "com.amazonaws.dynamodb#TableNotFoundException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0CreateGlobalTableCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0CreateGlobalTableCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0CreateGlobalTableOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0CreateGlobalTableCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "GlobalTableAlreadyExistsException":
              return [3, 2];
            case "com.amazonaws.dynamodb#GlobalTableAlreadyExistsException":
              return [3, 2];
            case "InternalServerError":
              return [3, 4];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 4];
            case "InvalidEndpointException":
              return [3, 6];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 6];
            case "LimitExceededException":
              return [3, 8];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 8];
            case "TableNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#TableNotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0GlobalTableAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0CreateTableCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0CreateTableCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0CreateTableOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0CreateTableCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 6];
            case "ResourceInUseException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ResourceInUseException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DeleteBackupCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DeleteBackupCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DeleteBackupOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DeleteBackupCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "BackupInUseException":
              return [3, 2];
            case "com.amazonaws.dynamodb#BackupInUseException":
              return [3, 2];
            case "BackupNotFoundException":
              return [3, 4];
            case "com.amazonaws.dynamodb#BackupNotFoundException":
              return [3, 4];
            case "InternalServerError":
              return [3, 6];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 6];
            case "InvalidEndpointException":
              return [3, 8];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 8];
            case "LimitExceededException":
              return [3, 10];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DeleteItemCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DeleteItemCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DeleteItemOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DeleteItemCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign({}, output)];
          _l = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConditionalCheckFailedException":
              return [3, 2];
            case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
              return [3, 2];
            case "InternalServerError":
              return [3, 4];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 4];
            case "InvalidEndpointException":
              return [3, 6];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 6];
            case "ItemCollectionSizeLimitExceededException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
              return [3, 8];
            case "ProvisionedThroughputExceededException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
              return [3, 10];
            case "RequestLimitExceeded":
              return [3, 12];
            case "com.amazonaws.dynamodb#RequestLimitExceeded":
              return [3, 12];
            case "ResourceNotFoundException":
              return [3, 14];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 14];
            case "TransactionConflictException":
              return [3, 16];
            case "com.amazonaws.dynamodb#TransactionConflictException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DeleteTableCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DeleteTableCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DeleteTableOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DeleteTableCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 6];
            case "ResourceInUseException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ResourceInUseException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DescribeBackupCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DescribeBackupCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DescribeBackupOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DescribeBackupCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "BackupNotFoundException":
              return [3, 2];
            case "com.amazonaws.dynamodb#BackupNotFoundException":
              return [3, 2];
            case "InternalServerError":
              return [3, 4];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 4];
            case "InvalidEndpointException":
              return [3, 6];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DescribeContinuousBackupsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DescribeContinuousBackupsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DescribeContinuousBackupsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DescribeContinuousBackupsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "TableNotFoundException":
              return [3, 6];
            case "com.amazonaws.dynamodb#TableNotFoundException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DescribeContributorInsightsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DescribeContributorInsightsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DescribeContributorInsightsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DescribeContributorInsightsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DescribeEndpointsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DescribeEndpointsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DescribeEndpointsResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DescribeEndpointsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DescribeExportCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DescribeExportCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DescribeExportOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DescribeExportCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExportNotFoundException":
              return [3, 2];
            case "com.amazonaws.dynamodb#ExportNotFoundException":
              return [3, 2];
            case "InternalServerError":
              return [3, 4];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0ExportNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DescribeGlobalTableCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DescribeGlobalTableCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DescribeGlobalTableOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DescribeGlobalTableCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "GlobalTableNotFoundException":
              return [3, 2];
            case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
              return [3, 2];
            case "InternalServerError":
              return [3, 4];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 4];
            case "InvalidEndpointException":
              return [3, 6];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DescribeGlobalTableSettingsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DescribeGlobalTableSettingsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DescribeGlobalTableSettingsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DescribeGlobalTableSettingsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "GlobalTableNotFoundException":
              return [3, 2];
            case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
              return [3, 2];
            case "InternalServerError":
              return [3, 4];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 4];
            case "InvalidEndpointException":
              return [3, 6];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DescribeKinesisStreamingDestinationCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DescribeKinesisStreamingDestinationOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DescribeKinesisStreamingDestinationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DescribeLimitsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DescribeLimitsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DescribeLimitsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DescribeLimitsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DescribeTableCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DescribeTableCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DescribeTableOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DescribeTableCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DescribeTableReplicaAutoScalingCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DescribeTableReplicaAutoScalingOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DescribeTableReplicaAutoScalingCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DescribeTimeToLiveCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DescribeTimeToLiveCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0DescribeTimeToLiveOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DescribeTimeToLiveCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0DisableKinesisStreamingDestinationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0DisableKinesisStreamingDestinationCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0KinesisStreamingDestinationOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0DisableKinesisStreamingDestinationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 6];
            case "ResourceInUseException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ResourceInUseException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0EnableKinesisStreamingDestinationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0EnableKinesisStreamingDestinationCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0KinesisStreamingDestinationOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0EnableKinesisStreamingDestinationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 6];
            case "ResourceInUseException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ResourceInUseException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0ExecuteStatementCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0ExecuteStatementCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0ExecuteStatementOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0ExecuteStatementCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign({}, output)];
          _l = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConditionalCheckFailedException":
              return [3, 2];
            case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
              return [3, 2];
            case "DuplicateItemException":
              return [3, 4];
            case "com.amazonaws.dynamodb#DuplicateItemException":
              return [3, 4];
            case "InternalServerError":
              return [3, 6];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 6];
            case "ItemCollectionSizeLimitExceededException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
              return [3, 8];
            case "ProvisionedThroughputExceededException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
              return [3, 10];
            case "RequestLimitExceeded":
              return [3, 12];
            case "com.amazonaws.dynamodb#RequestLimitExceeded":
              return [3, 12];
            case "ResourceNotFoundException":
              return [3, 14];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 14];
            case "TransactionConflictException":
              return [3, 16];
            case "com.amazonaws.dynamodb#TransactionConflictException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0DuplicateItemExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0ExecuteTransactionCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0ExecuteTransactionCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0ExecuteTransactionOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0ExecuteTransactionCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign({}, output)];
          _k = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "IdempotentParameterMismatchException":
              return [3, 2];
            case "com.amazonaws.dynamodb#IdempotentParameterMismatchException":
              return [3, 2];
            case "InternalServerError":
              return [3, 4];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 4];
            case "ProvisionedThroughputExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
              return [3, 6];
            case "RequestLimitExceeded":
              return [3, 8];
            case "com.amazonaws.dynamodb#RequestLimitExceeded":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 10];
            case "TransactionCanceledException":
              return [3, 12];
            case "com.amazonaws.dynamodb#TransactionCanceledException":
              return [3, 12];
            case "TransactionInProgressException":
              return [3, 14];
            case "com.amazonaws.dynamodb#TransactionInProgressException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_0TransactionInProgressExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0ExportTableToPointInTimeCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0ExportTableToPointInTimeCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0ExportTableToPointInTimeOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0ExportTableToPointInTimeCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExportConflictException":
              return [3, 2];
            case "com.amazonaws.dynamodb#ExportConflictException":
              return [3, 2];
            case "InternalServerError":
              return [3, 4];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 4];
            case "InvalidExportTimeException":
              return [3, 6];
            case "com.amazonaws.dynamodb#InvalidExportTimeException":
              return [3, 6];
            case "LimitExceededException":
              return [3, 8];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 8];
            case "PointInTimeRecoveryUnavailableException":
              return [3, 10];
            case "com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException":
              return [3, 10];
            case "TableNotFoundException":
              return [3, 12];
            case "com.amazonaws.dynamodb#TableNotFoundException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0ExportConflictExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InvalidExportTimeExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0GetItemCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0GetItemCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0GetItemOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0GetItemCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "ProvisionedThroughputExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
              return [3, 6];
            case "RequestLimitExceeded":
              return [3, 8];
            case "com.amazonaws.dynamodb#RequestLimitExceeded":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0ListBackupsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0ListBackupsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0ListBackupsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0ListBackupsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0ListContributorInsightsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0ListContributorInsightsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0ListContributorInsightsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0ListContributorInsightsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0ListExportsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0ListExportsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0ListExportsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0ListExportsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0ListGlobalTablesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0ListGlobalTablesCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0ListGlobalTablesOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0ListGlobalTablesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0ListTablesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0ListTablesCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0ListTablesOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0ListTablesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0ListTagsOfResourceCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0ListTagsOfResourceCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0ListTagsOfResourceOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0ListTagsOfResourceCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0PutItemCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0PutItemCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0PutItemOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0PutItemCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign({}, output)];
          _l = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConditionalCheckFailedException":
              return [3, 2];
            case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
              return [3, 2];
            case "InternalServerError":
              return [3, 4];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 4];
            case "InvalidEndpointException":
              return [3, 6];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 6];
            case "ItemCollectionSizeLimitExceededException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
              return [3, 8];
            case "ProvisionedThroughputExceededException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
              return [3, 10];
            case "RequestLimitExceeded":
              return [3, 12];
            case "com.amazonaws.dynamodb#RequestLimitExceeded":
              return [3, 12];
            case "ResourceNotFoundException":
              return [3, 14];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 14];
            case "TransactionConflictException":
              return [3, 16];
            case "com.amazonaws.dynamodb#TransactionConflictException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0QueryCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0QueryCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0QueryOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0QueryCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "ProvisionedThroughputExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
              return [3, 6];
            case "RequestLimitExceeded":
              return [3, 8];
            case "com.amazonaws.dynamodb#RequestLimitExceeded":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0RestoreTableFromBackupCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0RestoreTableFromBackupCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0RestoreTableFromBackupOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0RestoreTableFromBackupCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign({}, output)];
          _k = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "BackupInUseException":
              return [3, 2];
            case "com.amazonaws.dynamodb#BackupInUseException":
              return [3, 2];
            case "BackupNotFoundException":
              return [3, 4];
            case "com.amazonaws.dynamodb#BackupNotFoundException":
              return [3, 4];
            case "InternalServerError":
              return [3, 6];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 6];
            case "InvalidEndpointException":
              return [3, 8];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 8];
            case "LimitExceededException":
              return [3, 10];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 10];
            case "TableAlreadyExistsException":
              return [3, 12];
            case "com.amazonaws.dynamodb#TableAlreadyExistsException":
              return [3, 12];
            case "TableInUseException":
              return [3, 14];
            case "com.amazonaws.dynamodb#TableInUseException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_0TableAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0RestoreTableToPointInTimeCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0RestoreTableToPointInTimeCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0RestoreTableToPointInTimeOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0RestoreTableToPointInTimeCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign({}, output)];
          _l = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "InvalidRestoreTimeException":
              return [3, 6];
            case "com.amazonaws.dynamodb#InvalidRestoreTimeException":
              return [3, 6];
            case "LimitExceededException":
              return [3, 8];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 8];
            case "PointInTimeRecoveryUnavailableException":
              return [3, 10];
            case "com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException":
              return [3, 10];
            case "TableAlreadyExistsException":
              return [3, 12];
            case "com.amazonaws.dynamodb#TableAlreadyExistsException":
              return [3, 12];
            case "TableInUseException":
              return [3, 14];
            case "com.amazonaws.dynamodb#TableInUseException":
              return [3, 14];
            case "TableNotFoundException":
              return [3, 16];
            case "com.amazonaws.dynamodb#TableNotFoundException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InvalidRestoreTimeExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_0TableAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0ScanCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0ScanCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0ScanOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0ScanCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "ProvisionedThroughputExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
              return [3, 6];
            case "RequestLimitExceeded":
              return [3, 8];
            case "com.amazonaws.dynamodb#RequestLimitExceeded":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0TagResourceCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0TagResourceCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0TagResourceCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 6];
            case "ResourceInUseException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ResourceInUseException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0TransactGetItemsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0TransactGetItemsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0TransactGetItemsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0TransactGetItemsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "ProvisionedThroughputExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
              return [3, 6];
            case "RequestLimitExceeded":
              return [3, 8];
            case "com.amazonaws.dynamodb#RequestLimitExceeded":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 10];
            case "TransactionCanceledException":
              return [3, 12];
            case "com.amazonaws.dynamodb#TransactionCanceledException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0TransactWriteItemsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0TransactWriteItemsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0TransactWriteItemsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0TransactWriteItemsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign({}, output)];
          _l = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "IdempotentParameterMismatchException":
              return [3, 2];
            case "com.amazonaws.dynamodb#IdempotentParameterMismatchException":
              return [3, 2];
            case "InternalServerError":
              return [3, 4];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 4];
            case "InvalidEndpointException":
              return [3, 6];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 6];
            case "ProvisionedThroughputExceededException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
              return [3, 8];
            case "RequestLimitExceeded":
              return [3, 10];
            case "com.amazonaws.dynamodb#RequestLimitExceeded":
              return [3, 10];
            case "ResourceNotFoundException":
              return [3, 12];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 12];
            case "TransactionCanceledException":
              return [3, 14];
            case "com.amazonaws.dynamodb#TransactionCanceledException":
              return [3, 14];
            case "TransactionInProgressException":
              return [3, 16];
            case "com.amazonaws.dynamodb#TransactionInProgressException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_0TransactionInProgressExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0UntagResourceCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0UntagResourceCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0UntagResourceCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 6];
            case "ResourceInUseException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ResourceInUseException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0UpdateContinuousBackupsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0UpdateContinuousBackupsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0UpdateContinuousBackupsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0UpdateContinuousBackupsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ContinuousBackupsUnavailableException":
              return [3, 2];
            case "com.amazonaws.dynamodb#ContinuousBackupsUnavailableException":
              return [3, 2];
            case "InternalServerError":
              return [3, 4];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 4];
            case "InvalidEndpointException":
              return [3, 6];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 6];
            case "TableNotFoundException":
              return [3, 8];
            case "com.amazonaws.dynamodb#TableNotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0UpdateContributorInsightsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0UpdateContributorInsightsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0UpdateContributorInsightsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0UpdateContributorInsightsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0UpdateGlobalTableCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0UpdateGlobalTableCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0UpdateGlobalTableOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0UpdateGlobalTableCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "GlobalTableNotFoundException":
              return [3, 2];
            case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
              return [3, 2];
            case "InternalServerError":
              return [3, 4];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 4];
            case "InvalidEndpointException":
              return [3, 6];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 6];
            case "ReplicaAlreadyExistsException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ReplicaAlreadyExistsException":
              return [3, 8];
            case "ReplicaNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ReplicaNotFoundException":
              return [3, 10];
            case "TableNotFoundException":
              return [3, 12];
            case "com.amazonaws.dynamodb#TableNotFoundException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ReplicaAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ReplicaNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0UpdateGlobalTableSettingsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0UpdateGlobalTableSettingsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0UpdateGlobalTableSettingsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0UpdateGlobalTableSettingsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign({}, output)];
          _k = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "GlobalTableNotFoundException":
              return [3, 2];
            case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
              return [3, 2];
            case "IndexNotFoundException":
              return [3, 4];
            case "com.amazonaws.dynamodb#IndexNotFoundException":
              return [3, 4];
            case "InternalServerError":
              return [3, 6];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 6];
            case "InvalidEndpointException":
              return [3, 8];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 8];
            case "LimitExceededException":
              return [3, 10];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 10];
            case "ReplicaNotFoundException":
              return [3, 12];
            case "com.amazonaws.dynamodb#ReplicaNotFoundException":
              return [3, 12];
            case "ResourceInUseException":
              return [3, 14];
            case "com.amazonaws.dynamodb#ResourceInUseException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0IndexNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_0ReplicaNotFoundExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0UpdateItemCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0UpdateItemCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0UpdateItemOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0UpdateItemCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign({}, output)];
          _l = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConditionalCheckFailedException":
              return [3, 2];
            case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
              return [3, 2];
            case "InternalServerError":
              return [3, 4];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 4];
            case "InvalidEndpointException":
              return [3, 6];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 6];
            case "ItemCollectionSizeLimitExceededException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
              return [3, 8];
            case "ProvisionedThroughputExceededException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
              return [3, 10];
            case "RequestLimitExceeded":
              return [3, 12];
            case "com.amazonaws.dynamodb#RequestLimitExceeded":
              return [3, 12];
            case "ResourceNotFoundException":
              return [3, 14];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 14];
            case "TransactionConflictException":
              return [3, 16];
            case "com.amazonaws.dynamodb#TransactionConflictException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0UpdateTableCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0UpdateTableCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0UpdateTableOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0UpdateTableCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 6];
            case "ResourceInUseException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ResourceInUseException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0UpdateTableReplicaAutoScalingCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0UpdateTableReplicaAutoScalingOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0UpdateTableReplicaAutoScalingCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 4];
            case "ResourceInUseException":
              return [3, 6];
            case "com.amazonaws.dynamodb#ResourceInUseException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0UpdateTimeToLiveCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_0UpdateTimeToLiveCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_0UpdateTimeToLiveOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_0UpdateTimeToLiveCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalServerError":
              return [3, 2];
            case "com.amazonaws.dynamodb#InternalServerError":
              return [3, 2];
            case "InvalidEndpointException":
              return [3, 4];
            case "com.amazonaws.dynamodb#InvalidEndpointException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.dynamodb#LimitExceededException":
              return [3, 6];
            case "ResourceInUseException":
              return [3, 8];
            case "com.amazonaws.dynamodb#ResourceInUseException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.dynamodb#ResourceNotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_0BackupInUseExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0BackupInUseException(body, context);
      contents = __assign({ name: "BackupInUseException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0BackupNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0BackupNotFoundException(body, context);
      contents = __assign({ name: "BackupNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0ConditionalCheckFailedExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0ConditionalCheckFailedException(body, context);
      contents = __assign({ name: "ConditionalCheckFailedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0ContinuousBackupsUnavailableException(body, context);
      contents = __assign({ name: "ContinuousBackupsUnavailableException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0DuplicateItemExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0DuplicateItemException(body, context);
      contents = __assign({ name: "DuplicateItemException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0ExportConflictExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0ExportConflictException(body, context);
      contents = __assign({ name: "ExportConflictException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0ExportNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0ExportNotFoundException(body, context);
      contents = __assign({ name: "ExportNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0GlobalTableAlreadyExistsExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0GlobalTableAlreadyExistsException(body, context);
      contents = __assign({ name: "GlobalTableAlreadyExistsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0GlobalTableNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0GlobalTableNotFoundException(body, context);
      contents = __assign({ name: "GlobalTableNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0IdempotentParameterMismatchException(body, context);
      contents = __assign({ name: "IdempotentParameterMismatchException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0IndexNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0IndexNotFoundException(body, context);
      contents = __assign({ name: "IndexNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0InternalServerErrorResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0InternalServerError(body, context);
      contents = __assign({ name: "InternalServerError", $fault: "server", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0InvalidEndpointExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0InvalidEndpointException(body, context);
      contents = __assign({ name: "InvalidEndpointException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0InvalidExportTimeExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0InvalidExportTimeException(body, context);
      contents = __assign({ name: "InvalidExportTimeException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0InvalidRestoreTimeExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0InvalidRestoreTimeException(body, context);
      contents = __assign({ name: "InvalidRestoreTimeException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0ItemCollectionSizeLimitExceededException(body, context);
      contents = __assign({ name: "ItemCollectionSizeLimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0LimitExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0LimitExceededException(body, context);
      contents = __assign({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0PointInTimeRecoveryUnavailableException(body, context);
      contents = __assign({ name: "PointInTimeRecoveryUnavailableException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0ProvisionedThroughputExceededException(body, context);
      contents = __assign({ name: "ProvisionedThroughputExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0ReplicaAlreadyExistsExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0ReplicaAlreadyExistsException(body, context);
      contents = __assign({ name: "ReplicaAlreadyExistsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0ReplicaNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0ReplicaNotFoundException(body, context);
      contents = __assign({ name: "ReplicaNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0RequestLimitExceededResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0RequestLimitExceeded(body, context);
      contents = __assign({ name: "RequestLimitExceeded", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0ResourceInUseExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0ResourceInUseException(body, context);
      contents = __assign({ name: "ResourceInUseException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0ResourceNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0ResourceNotFoundException(body, context);
      contents = __assign({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0TableAlreadyExistsExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0TableAlreadyExistsException(body, context);
      contents = __assign({ name: "TableAlreadyExistsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0TableInUseExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0TableInUseException(body, context);
      contents = __assign({ name: "TableInUseException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0TableNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0TableNotFoundException(body, context);
      contents = __assign({ name: "TableNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0TransactionCanceledExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0TransactionCanceledException(body, context);
      contents = __assign({ name: "TransactionCanceledException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0TransactionConflictExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0TransactionConflictException(body, context);
      contents = __assign({ name: "TransactionConflictException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_0TransactionInProgressExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_0TransactionInProgressException(body, context);
      contents = __assign({ name: "TransactionInProgressException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var serializeAws_json1_0AttributeDefinition = function(input, context) {
  return __assign(__assign({}, input.AttributeName !== void 0 && input.AttributeName !== null && { AttributeName: input.AttributeName }), input.AttributeType !== void 0 && input.AttributeType !== null && { AttributeType: input.AttributeType });
};
var serializeAws_json1_0AttributeDefinitions = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0AttributeDefinition(entry, context);
  });
};
var serializeAws_json1_0AttributeNameList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_0AttributeUpdates = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = serializeAws_json1_0AttributeValueUpdate(value, context), _b));
  }, {});
};
var serializeAws_json1_0AttributeValue = function(input, context) {
  return AttributeValue.visit(input, {
    B: function(value) {
      return { B: context.base64Encoder(value) };
    },
    BOOL: function(value) {
      return { BOOL: value };
    },
    BS: function(value) {
      return { BS: serializeAws_json1_0BinarySetAttributeValue(value, context) };
    },
    L: function(value) {
      return { L: serializeAws_json1_0ListAttributeValue(value, context) };
    },
    M: function(value) {
      return { M: serializeAws_json1_0MapAttributeValue(value, context) };
    },
    N: function(value) {
      return { N: value };
    },
    NS: function(value) {
      return { NS: serializeAws_json1_0NumberSetAttributeValue(value, context) };
    },
    NULL: function(value) {
      return { NULL: value };
    },
    S: function(value) {
      return { S: value };
    },
    SS: function(value) {
      return { SS: serializeAws_json1_0StringSetAttributeValue(value, context) };
    },
    _: function(name7, value) {
      return { name: value };
    }
  });
};
var serializeAws_json1_0AttributeValueList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0AttributeValue(entry, context);
  });
};
var serializeAws_json1_0AttributeValueUpdate = function(input, context) {
  return __assign(__assign({}, input.Action !== void 0 && input.Action !== null && { Action: input.Action }), input.Value !== void 0 && input.Value !== null && { Value: serializeAws_json1_0AttributeValue(input.Value, context) });
};
var serializeAws_json1_0AutoScalingPolicyUpdate = function(input, context) {
  return __assign(__assign({}, input.PolicyName !== void 0 && input.PolicyName !== null && { PolicyName: input.PolicyName }), input.TargetTrackingScalingPolicyConfiguration !== void 0 && input.TargetTrackingScalingPolicyConfiguration !== null && {
    TargetTrackingScalingPolicyConfiguration: serializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(input.TargetTrackingScalingPolicyConfiguration, context)
  });
};
var serializeAws_json1_0AutoScalingSettingsUpdate = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign({}, input.AutoScalingDisabled !== void 0 && input.AutoScalingDisabled !== null && { AutoScalingDisabled: input.AutoScalingDisabled }), input.AutoScalingRoleArn !== void 0 && input.AutoScalingRoleArn !== null && { AutoScalingRoleArn: input.AutoScalingRoleArn }), input.MaximumUnits !== void 0 && input.MaximumUnits !== null && { MaximumUnits: input.MaximumUnits }), input.MinimumUnits !== void 0 && input.MinimumUnits !== null && { MinimumUnits: input.MinimumUnits }), input.ScalingPolicyUpdate !== void 0 && input.ScalingPolicyUpdate !== null && {
    ScalingPolicyUpdate: serializeAws_json1_0AutoScalingPolicyUpdate(input.ScalingPolicyUpdate, context)
  });
};
var serializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.DisableScaleIn !== void 0 && input.DisableScaleIn !== null && { DisableScaleIn: input.DisableScaleIn }), input.ScaleInCooldown !== void 0 && input.ScaleInCooldown !== null && { ScaleInCooldown: input.ScaleInCooldown }), input.ScaleOutCooldown !== void 0 && input.ScaleOutCooldown !== null && { ScaleOutCooldown: input.ScaleOutCooldown }), input.TargetValue !== void 0 && input.TargetValue !== null && { TargetValue: serializeFloat(input.TargetValue) });
};
var serializeAws_json1_0BatchExecuteStatementInput = function(input, context) {
  return __assign({}, input.Statements !== void 0 && input.Statements !== null && { Statements: serializeAws_json1_0PartiQLBatchRequest(input.Statements, context) });
};
var serializeAws_json1_0BatchGetItemInput = function(input, context) {
  return __assign(__assign({}, input.RequestItems !== void 0 && input.RequestItems !== null && {
    RequestItems: serializeAws_json1_0BatchGetRequestMap(input.RequestItems, context)
  }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity });
};
var serializeAws_json1_0BatchGetRequestMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = serializeAws_json1_0KeysAndAttributes(value, context), _b));
  }, {});
};
var serializeAws_json1_0BatchStatementRequest = function(input, context) {
  return __assign(__assign(__assign({}, input.ConsistentRead !== void 0 && input.ConsistentRead !== null && { ConsistentRead: input.ConsistentRead }), input.Parameters !== void 0 && input.Parameters !== null && {
    Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context)
  }), input.Statement !== void 0 && input.Statement !== null && { Statement: input.Statement });
};
var serializeAws_json1_0BatchWriteItemInput = function(input, context) {
  return __assign(__assign(__assign({}, input.RequestItems !== void 0 && input.RequestItems !== null && {
    RequestItems: serializeAws_json1_0BatchWriteItemRequestMap(input.RequestItems, context)
  }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.ReturnItemCollectionMetrics !== void 0 && input.ReturnItemCollectionMetrics !== null && { ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics });
};
var serializeAws_json1_0BatchWriteItemRequestMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = serializeAws_json1_0WriteRequests(value, context), _b));
  }, {});
};
var serializeAws_json1_0BinarySetAttributeValue = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return context.base64Encoder(entry);
  });
};
var serializeAws_json1_0Condition = function(input, context) {
  return __assign(__assign({}, input.AttributeValueList !== void 0 && input.AttributeValueList !== null && {
    AttributeValueList: serializeAws_json1_0AttributeValueList(input.AttributeValueList, context)
  }), input.ComparisonOperator !== void 0 && input.ComparisonOperator !== null && { ComparisonOperator: input.ComparisonOperator });
};
var serializeAws_json1_0ConditionCheck = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign({}, input.ConditionExpression !== void 0 && input.ConditionExpression !== null && { ConditionExpression: input.ConditionExpression }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
    ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
  }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
    ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
  }), input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) }), input.ReturnValuesOnConditionCheckFailure !== void 0 && input.ReturnValuesOnConditionCheckFailure !== null && {
    ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
  }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0CreateBackupInput = function(input, context) {
  return __assign(__assign({}, input.BackupName !== void 0 && input.BackupName !== null && { BackupName: input.BackupName }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0CreateGlobalSecondaryIndexAction = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.KeySchema !== void 0 && input.KeySchema !== null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) }), input.Projection !== void 0 && input.Projection !== null && { Projection: serializeAws_json1_0Projection(input.Projection, context) }), input.ProvisionedThroughput !== void 0 && input.ProvisionedThroughput !== null && {
    ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
  });
};
var serializeAws_json1_0CreateGlobalTableInput = function(input, context) {
  return __assign(__assign({}, input.GlobalTableName !== void 0 && input.GlobalTableName !== null && { GlobalTableName: input.GlobalTableName }), input.ReplicationGroup !== void 0 && input.ReplicationGroup !== null && {
    ReplicationGroup: serializeAws_json1_0ReplicaList(input.ReplicationGroup, context)
  });
};
var serializeAws_json1_0CreateReplicaAction = function(input, context) {
  return __assign({}, input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName });
};
var serializeAws_json1_0CreateReplicationGroupMemberAction = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.GlobalSecondaryIndexes !== void 0 && input.GlobalSecondaryIndexes !== null && {
    GlobalSecondaryIndexes: serializeAws_json1_0ReplicaGlobalSecondaryIndexList(input.GlobalSecondaryIndexes, context)
  }), input.KMSMasterKeyId !== void 0 && input.KMSMasterKeyId !== null && { KMSMasterKeyId: input.KMSMasterKeyId }), input.ProvisionedThroughputOverride !== void 0 && input.ProvisionedThroughputOverride !== null && {
    ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(input.ProvisionedThroughputOverride, context)
  }), input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName });
};
var serializeAws_json1_0CreateTableInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.AttributeDefinitions !== void 0 && input.AttributeDefinitions !== null && {
    AttributeDefinitions: serializeAws_json1_0AttributeDefinitions(input.AttributeDefinitions, context)
  }), input.BillingMode !== void 0 && input.BillingMode !== null && { BillingMode: input.BillingMode }), input.GlobalSecondaryIndexes !== void 0 && input.GlobalSecondaryIndexes !== null && {
    GlobalSecondaryIndexes: serializeAws_json1_0GlobalSecondaryIndexList(input.GlobalSecondaryIndexes, context)
  }), input.KeySchema !== void 0 && input.KeySchema !== null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) }), input.LocalSecondaryIndexes !== void 0 && input.LocalSecondaryIndexes !== null && {
    LocalSecondaryIndexes: serializeAws_json1_0LocalSecondaryIndexList(input.LocalSecondaryIndexes, context)
  }), input.ProvisionedThroughput !== void 0 && input.ProvisionedThroughput !== null && {
    ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
  }), input.SSESpecification !== void 0 && input.SSESpecification !== null && {
    SSESpecification: serializeAws_json1_0SSESpecification(input.SSESpecification, context)
  }), input.StreamSpecification !== void 0 && input.StreamSpecification !== null && {
    StreamSpecification: serializeAws_json1_0StreamSpecification(input.StreamSpecification, context)
  }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName }), input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_0TagList(input.Tags, context) });
};
var serializeAws_json1_0Delete = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign({}, input.ConditionExpression !== void 0 && input.ConditionExpression !== null && { ConditionExpression: input.ConditionExpression }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
    ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
  }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
    ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
  }), input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) }), input.ReturnValuesOnConditionCheckFailure !== void 0 && input.ReturnValuesOnConditionCheckFailure !== null && {
    ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
  }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0DeleteBackupInput = function(input, context) {
  return __assign({}, input.BackupArn !== void 0 && input.BackupArn !== null && { BackupArn: input.BackupArn });
};
var serializeAws_json1_0DeleteGlobalSecondaryIndexAction = function(input, context) {
  return __assign({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName });
};
var serializeAws_json1_0DeleteItemInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.ConditionExpression !== void 0 && input.ConditionExpression !== null && { ConditionExpression: input.ConditionExpression }), input.ConditionalOperator !== void 0 && input.ConditionalOperator !== null && { ConditionalOperator: input.ConditionalOperator }), input.Expected !== void 0 && input.Expected !== null && { Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context) }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
    ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
  }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
    ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
  }), input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.ReturnItemCollectionMetrics !== void 0 && input.ReturnItemCollectionMetrics !== null && { ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics }), input.ReturnValues !== void 0 && input.ReturnValues !== null && { ReturnValues: input.ReturnValues }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0DeleteReplicaAction = function(input, context) {
  return __assign({}, input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName });
};
var serializeAws_json1_0DeleteReplicationGroupMemberAction = function(input, context) {
  return __assign({}, input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName });
};
var serializeAws_json1_0DeleteRequest = function(input, context) {
  return __assign({}, input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) });
};
var serializeAws_json1_0DeleteTableInput = function(input, context) {
  return __assign({}, input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0DescribeBackupInput = function(input, context) {
  return __assign({}, input.BackupArn !== void 0 && input.BackupArn !== null && { BackupArn: input.BackupArn });
};
var serializeAws_json1_0DescribeContinuousBackupsInput = function(input, context) {
  return __assign({}, input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0DescribeContributorInsightsInput = function(input, context) {
  return __assign(__assign({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0DescribeEndpointsRequest = function(input, context) {
  return {};
};
var serializeAws_json1_0DescribeExportInput = function(input, context) {
  return __assign({}, input.ExportArn !== void 0 && input.ExportArn !== null && { ExportArn: input.ExportArn });
};
var serializeAws_json1_0DescribeGlobalTableInput = function(input, context) {
  return __assign({}, input.GlobalTableName !== void 0 && input.GlobalTableName !== null && { GlobalTableName: input.GlobalTableName });
};
var serializeAws_json1_0DescribeGlobalTableSettingsInput = function(input, context) {
  return __assign({}, input.GlobalTableName !== void 0 && input.GlobalTableName !== null && { GlobalTableName: input.GlobalTableName });
};
var serializeAws_json1_0DescribeKinesisStreamingDestinationInput = function(input, context) {
  return __assign({}, input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0DescribeLimitsInput = function(input, context) {
  return {};
};
var serializeAws_json1_0DescribeTableInput = function(input, context) {
  return __assign({}, input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0DescribeTableReplicaAutoScalingInput = function(input, context) {
  return __assign({}, input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0DescribeTimeToLiveInput = function(input, context) {
  return __assign({}, input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0ExecuteStatementInput = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.ConsistentRead !== void 0 && input.ConsistentRead !== null && { ConsistentRead: input.ConsistentRead }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }), input.Parameters !== void 0 && input.Parameters !== null && {
    Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context)
  }), input.Statement !== void 0 && input.Statement !== null && { Statement: input.Statement });
};
var serializeAws_json1_0ExecuteTransactionInput = function(input, context) {
  var _a;
  return __assign({ ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : v4_default() }, input.TransactStatements !== void 0 && input.TransactStatements !== null && {
    TransactStatements: serializeAws_json1_0ParameterizedStatements(input.TransactStatements, context)
  });
};
var serializeAws_json1_0ExpectedAttributeMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = serializeAws_json1_0ExpectedAttributeValue(value, context), _b));
  }, {});
};
var serializeAws_json1_0ExpectedAttributeValue = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.AttributeValueList !== void 0 && input.AttributeValueList !== null && {
    AttributeValueList: serializeAws_json1_0AttributeValueList(input.AttributeValueList, context)
  }), input.ComparisonOperator !== void 0 && input.ComparisonOperator !== null && { ComparisonOperator: input.ComparisonOperator }), input.Exists !== void 0 && input.Exists !== null && { Exists: input.Exists }), input.Value !== void 0 && input.Value !== null && { Value: serializeAws_json1_0AttributeValue(input.Value, context) });
};
var serializeAws_json1_0ExportTableToPointInTimeInput = function(input, context) {
  var _a;
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ ClientToken: (_a = input.ClientToken) !== null && _a !== void 0 ? _a : v4_default() }, input.ExportFormat !== void 0 && input.ExportFormat !== null && { ExportFormat: input.ExportFormat }), input.ExportTime !== void 0 && input.ExportTime !== null && { ExportTime: Math.round(input.ExportTime.getTime() / 1e3) }), input.S3Bucket !== void 0 && input.S3Bucket !== null && { S3Bucket: input.S3Bucket }), input.S3BucketOwner !== void 0 && input.S3BucketOwner !== null && { S3BucketOwner: input.S3BucketOwner }), input.S3Prefix !== void 0 && input.S3Prefix !== null && { S3Prefix: input.S3Prefix }), input.S3SseAlgorithm !== void 0 && input.S3SseAlgorithm !== null && { S3SseAlgorithm: input.S3SseAlgorithm }), input.S3SseKmsKeyId !== void 0 && input.S3SseKmsKeyId !== null && { S3SseKmsKeyId: input.S3SseKmsKeyId }), input.TableArn !== void 0 && input.TableArn !== null && { TableArn: input.TableArn });
};
var serializeAws_json1_0ExpressionAttributeNameMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_0ExpressionAttributeValueMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = serializeAws_json1_0AttributeValue(value, context), _b));
  }, {});
};
var serializeAws_json1_0FilterConditionMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = serializeAws_json1_0Condition(value, context), _b));
  }, {});
};
var serializeAws_json1_0Get = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
    ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
  }), input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) }), input.ProjectionExpression !== void 0 && input.ProjectionExpression !== null && { ProjectionExpression: input.ProjectionExpression }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0GetItemInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.AttributesToGet !== void 0 && input.AttributesToGet !== null && {
    AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
  }), input.ConsistentRead !== void 0 && input.ConsistentRead !== null && { ConsistentRead: input.ConsistentRead }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
    ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
  }), input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) }), input.ProjectionExpression !== void 0 && input.ProjectionExpression !== null && { ProjectionExpression: input.ProjectionExpression }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0GlobalSecondaryIndex = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.KeySchema !== void 0 && input.KeySchema !== null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) }), input.Projection !== void 0 && input.Projection !== null && { Projection: serializeAws_json1_0Projection(input.Projection, context) }), input.ProvisionedThroughput !== void 0 && input.ProvisionedThroughput !== null && {
    ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
  });
};
var serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdate = function(input, context) {
  return __assign(__assign({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.ProvisionedWriteCapacityAutoScalingUpdate !== void 0 && input.ProvisionedWriteCapacityAutoScalingUpdate !== null && {
    ProvisionedWriteCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedWriteCapacityAutoScalingUpdate, context)
  });
};
var serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdateList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdate(entry, context);
  });
};
var serializeAws_json1_0GlobalSecondaryIndexList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0GlobalSecondaryIndex(entry, context);
  });
};
var serializeAws_json1_0GlobalSecondaryIndexUpdate = function(input, context) {
  return __assign(__assign(__assign({}, input.Create !== void 0 && input.Create !== null && { Create: serializeAws_json1_0CreateGlobalSecondaryIndexAction(input.Create, context) }), input.Delete !== void 0 && input.Delete !== null && { Delete: serializeAws_json1_0DeleteGlobalSecondaryIndexAction(input.Delete, context) }), input.Update !== void 0 && input.Update !== null && { Update: serializeAws_json1_0UpdateGlobalSecondaryIndexAction(input.Update, context) });
};
var serializeAws_json1_0GlobalSecondaryIndexUpdateList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0GlobalSecondaryIndexUpdate(entry, context);
  });
};
var serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdate = function(input, context) {
  return __assign(__assign(__assign({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.ProvisionedWriteCapacityAutoScalingSettingsUpdate !== void 0 && input.ProvisionedWriteCapacityAutoScalingSettingsUpdate !== null && {
    ProvisionedWriteCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedWriteCapacityAutoScalingSettingsUpdate, context)
  }), input.ProvisionedWriteCapacityUnits !== void 0 && input.ProvisionedWriteCapacityUnits !== null && {
    ProvisionedWriteCapacityUnits: input.ProvisionedWriteCapacityUnits
  });
};
var serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdateList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdate(entry, context);
  });
};
var serializeAws_json1_0Key = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = serializeAws_json1_0AttributeValue(value, context), _b));
  }, {});
};
var serializeAws_json1_0KeyConditions = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = serializeAws_json1_0Condition(value, context), _b));
  }, {});
};
var serializeAws_json1_0KeyList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0Key(entry, context);
  });
};
var serializeAws_json1_0KeysAndAttributes = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign({}, input.AttributesToGet !== void 0 && input.AttributesToGet !== null && {
    AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
  }), input.ConsistentRead !== void 0 && input.ConsistentRead !== null && { ConsistentRead: input.ConsistentRead }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
    ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
  }), input.Keys !== void 0 && input.Keys !== null && { Keys: serializeAws_json1_0KeyList(input.Keys, context) }), input.ProjectionExpression !== void 0 && input.ProjectionExpression !== null && { ProjectionExpression: input.ProjectionExpression });
};
var serializeAws_json1_0KeySchema = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0KeySchemaElement(entry, context);
  });
};
var serializeAws_json1_0KeySchemaElement = function(input, context) {
  return __assign(__assign({}, input.AttributeName !== void 0 && input.AttributeName !== null && { AttributeName: input.AttributeName }), input.KeyType !== void 0 && input.KeyType !== null && { KeyType: input.KeyType });
};
var serializeAws_json1_0KinesisStreamingDestinationInput = function(input, context) {
  return __assign(__assign({}, input.StreamArn !== void 0 && input.StreamArn !== null && { StreamArn: input.StreamArn }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0ListAttributeValue = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0AttributeValue(entry, context);
  });
};
var serializeAws_json1_0ListBackupsInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign({}, input.BackupType !== void 0 && input.BackupType !== null && { BackupType: input.BackupType }), input.ExclusiveStartBackupArn !== void 0 && input.ExclusiveStartBackupArn !== null && { ExclusiveStartBackupArn: input.ExclusiveStartBackupArn }), input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName }), input.TimeRangeLowerBound !== void 0 && input.TimeRangeLowerBound !== null && {
    TimeRangeLowerBound: Math.round(input.TimeRangeLowerBound.getTime() / 1e3)
  }), input.TimeRangeUpperBound !== void 0 && input.TimeRangeUpperBound !== null && {
    TimeRangeUpperBound: Math.round(input.TimeRangeUpperBound.getTime() / 1e3)
  });
};
var serializeAws_json1_0ListContributorInsightsInput = function(input, context) {
  return __assign(__assign(__assign({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0ListExportsInput = function(input, context) {
  return __assign(__assign(__assign({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }), input.TableArn !== void 0 && input.TableArn !== null && { TableArn: input.TableArn });
};
var serializeAws_json1_0ListGlobalTablesInput = function(input, context) {
  return __assign(__assign(__assign({}, input.ExclusiveStartGlobalTableName !== void 0 && input.ExclusiveStartGlobalTableName !== null && {
    ExclusiveStartGlobalTableName: input.ExclusiveStartGlobalTableName
  }), input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit }), input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName });
};
var serializeAws_json1_0ListTablesInput = function(input, context) {
  return __assign(__assign({}, input.ExclusiveStartTableName !== void 0 && input.ExclusiveStartTableName !== null && { ExclusiveStartTableName: input.ExclusiveStartTableName }), input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit });
};
var serializeAws_json1_0ListTagsOfResourceInput = function(input, context) {
  return __assign(__assign({}, input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }), input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn });
};
var serializeAws_json1_0LocalSecondaryIndex = function(input, context) {
  return __assign(__assign(__assign({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.KeySchema !== void 0 && input.KeySchema !== null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) }), input.Projection !== void 0 && input.Projection !== null && { Projection: serializeAws_json1_0Projection(input.Projection, context) });
};
var serializeAws_json1_0LocalSecondaryIndexList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0LocalSecondaryIndex(entry, context);
  });
};
var serializeAws_json1_0MapAttributeValue = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = serializeAws_json1_0AttributeValue(value, context), _b));
  }, {});
};
var serializeAws_json1_0NonKeyAttributeNameList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_0NumberSetAttributeValue = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_0ParameterizedStatement = function(input, context) {
  return __assign(__assign({}, input.Parameters !== void 0 && input.Parameters !== null && {
    Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context)
  }), input.Statement !== void 0 && input.Statement !== null && { Statement: input.Statement });
};
var serializeAws_json1_0ParameterizedStatements = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0ParameterizedStatement(entry, context);
  });
};
var serializeAws_json1_0PartiQLBatchRequest = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0BatchStatementRequest(entry, context);
  });
};
var serializeAws_json1_0PointInTimeRecoverySpecification = function(input, context) {
  return __assign({}, input.PointInTimeRecoveryEnabled !== void 0 && input.PointInTimeRecoveryEnabled !== null && { PointInTimeRecoveryEnabled: input.PointInTimeRecoveryEnabled });
};
var serializeAws_json1_0PreparedStatementParameters = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0AttributeValue(entry, context);
  });
};
var serializeAws_json1_0Projection = function(input, context) {
  return __assign(__assign({}, input.NonKeyAttributes !== void 0 && input.NonKeyAttributes !== null && {
    NonKeyAttributes: serializeAws_json1_0NonKeyAttributeNameList(input.NonKeyAttributes, context)
  }), input.ProjectionType !== void 0 && input.ProjectionType !== null && { ProjectionType: input.ProjectionType });
};
var serializeAws_json1_0ProvisionedThroughput = function(input, context) {
  return __assign(__assign({}, input.ReadCapacityUnits !== void 0 && input.ReadCapacityUnits !== null && { ReadCapacityUnits: input.ReadCapacityUnits }), input.WriteCapacityUnits !== void 0 && input.WriteCapacityUnits !== null && { WriteCapacityUnits: input.WriteCapacityUnits });
};
var serializeAws_json1_0ProvisionedThroughputOverride = function(input, context) {
  return __assign({}, input.ReadCapacityUnits !== void 0 && input.ReadCapacityUnits !== null && { ReadCapacityUnits: input.ReadCapacityUnits });
};
var serializeAws_json1_0Put = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign({}, input.ConditionExpression !== void 0 && input.ConditionExpression !== null && { ConditionExpression: input.ConditionExpression }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
    ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
  }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
    ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
  }), input.Item !== void 0 && input.Item !== null && { Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context) }), input.ReturnValuesOnConditionCheckFailure !== void 0 && input.ReturnValuesOnConditionCheckFailure !== null && {
    ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
  }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0PutItemInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.ConditionExpression !== void 0 && input.ConditionExpression !== null && { ConditionExpression: input.ConditionExpression }), input.ConditionalOperator !== void 0 && input.ConditionalOperator !== null && { ConditionalOperator: input.ConditionalOperator }), input.Expected !== void 0 && input.Expected !== null && { Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context) }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
    ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
  }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
    ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
  }), input.Item !== void 0 && input.Item !== null && { Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context) }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.ReturnItemCollectionMetrics !== void 0 && input.ReturnItemCollectionMetrics !== null && { ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics }), input.ReturnValues !== void 0 && input.ReturnValues !== null && { ReturnValues: input.ReturnValues }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0PutItemInputAttributeMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = serializeAws_json1_0AttributeValue(value, context), _b));
  }, {});
};
var serializeAws_json1_0PutRequest = function(input, context) {
  return __assign({}, input.Item !== void 0 && input.Item !== null && { Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context) });
};
var serializeAws_json1_0QueryInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.AttributesToGet !== void 0 && input.AttributesToGet !== null && {
    AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
  }), input.ConditionalOperator !== void 0 && input.ConditionalOperator !== null && { ConditionalOperator: input.ConditionalOperator }), input.ConsistentRead !== void 0 && input.ConsistentRead !== null && { ConsistentRead: input.ConsistentRead }), input.ExclusiveStartKey !== void 0 && input.ExclusiveStartKey !== null && {
    ExclusiveStartKey: serializeAws_json1_0Key(input.ExclusiveStartKey, context)
  }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
    ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
  }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
    ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
  }), input.FilterExpression !== void 0 && input.FilterExpression !== null && { FilterExpression: input.FilterExpression }), input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.KeyConditionExpression !== void 0 && input.KeyConditionExpression !== null && { KeyConditionExpression: input.KeyConditionExpression }), input.KeyConditions !== void 0 && input.KeyConditions !== null && {
    KeyConditions: serializeAws_json1_0KeyConditions(input.KeyConditions, context)
  }), input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit }), input.ProjectionExpression !== void 0 && input.ProjectionExpression !== null && { ProjectionExpression: input.ProjectionExpression }), input.QueryFilter !== void 0 && input.QueryFilter !== null && {
    QueryFilter: serializeAws_json1_0FilterConditionMap(input.QueryFilter, context)
  }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.ScanIndexForward !== void 0 && input.ScanIndexForward !== null && { ScanIndexForward: input.ScanIndexForward }), input.Select !== void 0 && input.Select !== null && { Select: input.Select }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0Replica = function(input, context) {
  return __assign({}, input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName });
};
var serializeAws_json1_0ReplicaAutoScalingUpdate = function(input, context) {
  return __assign(__assign(__assign({}, input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName }), input.ReplicaGlobalSecondaryIndexUpdates !== void 0 && input.ReplicaGlobalSecondaryIndexUpdates !== null && {
    ReplicaGlobalSecondaryIndexUpdates: serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdateList(input.ReplicaGlobalSecondaryIndexUpdates, context)
  }), input.ReplicaProvisionedReadCapacityAutoScalingUpdate !== void 0 && input.ReplicaProvisionedReadCapacityAutoScalingUpdate !== null && {
    ReplicaProvisionedReadCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ReplicaProvisionedReadCapacityAutoScalingUpdate, context)
  });
};
var serializeAws_json1_0ReplicaAutoScalingUpdateList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0ReplicaAutoScalingUpdate(entry, context);
  });
};
var serializeAws_json1_0ReplicaGlobalSecondaryIndex = function(input, context) {
  return __assign(__assign({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.ProvisionedThroughputOverride !== void 0 && input.ProvisionedThroughputOverride !== null && {
    ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(input.ProvisionedThroughputOverride, context)
  });
};
var serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdate = function(input, context) {
  return __assign(__assign({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.ProvisionedReadCapacityAutoScalingUpdate !== void 0 && input.ProvisionedReadCapacityAutoScalingUpdate !== null && {
    ProvisionedReadCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedReadCapacityAutoScalingUpdate, context)
  });
};
var serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdateList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdate(entry, context);
  });
};
var serializeAws_json1_0ReplicaGlobalSecondaryIndexList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0ReplicaGlobalSecondaryIndex(entry, context);
  });
};
var serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdate = function(input, context) {
  return __assign(__assign(__assign({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.ProvisionedReadCapacityAutoScalingSettingsUpdate !== void 0 && input.ProvisionedReadCapacityAutoScalingSettingsUpdate !== null && {
    ProvisionedReadCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedReadCapacityAutoScalingSettingsUpdate, context)
  }), input.ProvisionedReadCapacityUnits !== void 0 && input.ProvisionedReadCapacityUnits !== null && {
    ProvisionedReadCapacityUnits: input.ProvisionedReadCapacityUnits
  });
};
var serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdateList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdate(entry, context);
  });
};
var serializeAws_json1_0ReplicaList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0Replica(entry, context);
  });
};
var serializeAws_json1_0ReplicaSettingsUpdate = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName }), input.ReplicaGlobalSecondaryIndexSettingsUpdate !== void 0 && input.ReplicaGlobalSecondaryIndexSettingsUpdate !== null && {
    ReplicaGlobalSecondaryIndexSettingsUpdate: serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdateList(input.ReplicaGlobalSecondaryIndexSettingsUpdate, context)
  }), input.ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate !== void 0 && input.ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate !== null && {
    ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate, context)
  }), input.ReplicaProvisionedReadCapacityUnits !== void 0 && input.ReplicaProvisionedReadCapacityUnits !== null && {
    ReplicaProvisionedReadCapacityUnits: input.ReplicaProvisionedReadCapacityUnits
  });
};
var serializeAws_json1_0ReplicaSettingsUpdateList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0ReplicaSettingsUpdate(entry, context);
  });
};
var serializeAws_json1_0ReplicationGroupUpdate = function(input, context) {
  return __assign(__assign(__assign({}, input.Create !== void 0 && input.Create !== null && {
    Create: serializeAws_json1_0CreateReplicationGroupMemberAction(input.Create, context)
  }), input.Delete !== void 0 && input.Delete !== null && {
    Delete: serializeAws_json1_0DeleteReplicationGroupMemberAction(input.Delete, context)
  }), input.Update !== void 0 && input.Update !== null && {
    Update: serializeAws_json1_0UpdateReplicationGroupMemberAction(input.Update, context)
  });
};
var serializeAws_json1_0ReplicationGroupUpdateList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0ReplicationGroupUpdate(entry, context);
  });
};
var serializeAws_json1_0ReplicaUpdate = function(input, context) {
  return __assign(__assign({}, input.Create !== void 0 && input.Create !== null && { Create: serializeAws_json1_0CreateReplicaAction(input.Create, context) }), input.Delete !== void 0 && input.Delete !== null && { Delete: serializeAws_json1_0DeleteReplicaAction(input.Delete, context) });
};
var serializeAws_json1_0ReplicaUpdateList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0ReplicaUpdate(entry, context);
  });
};
var serializeAws_json1_0RestoreTableFromBackupInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.BackupArn !== void 0 && input.BackupArn !== null && { BackupArn: input.BackupArn }), input.BillingModeOverride !== void 0 && input.BillingModeOverride !== null && { BillingModeOverride: input.BillingModeOverride }), input.GlobalSecondaryIndexOverride !== void 0 && input.GlobalSecondaryIndexOverride !== null && {
    GlobalSecondaryIndexOverride: serializeAws_json1_0GlobalSecondaryIndexList(input.GlobalSecondaryIndexOverride, context)
  }), input.LocalSecondaryIndexOverride !== void 0 && input.LocalSecondaryIndexOverride !== null && {
    LocalSecondaryIndexOverride: serializeAws_json1_0LocalSecondaryIndexList(input.LocalSecondaryIndexOverride, context)
  }), input.ProvisionedThroughputOverride !== void 0 && input.ProvisionedThroughputOverride !== null && {
    ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughputOverride, context)
  }), input.SSESpecificationOverride !== void 0 && input.SSESpecificationOverride !== null && {
    SSESpecificationOverride: serializeAws_json1_0SSESpecification(input.SSESpecificationOverride, context)
  }), input.TargetTableName !== void 0 && input.TargetTableName !== null && { TargetTableName: input.TargetTableName });
};
var serializeAws_json1_0RestoreTableToPointInTimeInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.BillingModeOverride !== void 0 && input.BillingModeOverride !== null && { BillingModeOverride: input.BillingModeOverride }), input.GlobalSecondaryIndexOverride !== void 0 && input.GlobalSecondaryIndexOverride !== null && {
    GlobalSecondaryIndexOverride: serializeAws_json1_0GlobalSecondaryIndexList(input.GlobalSecondaryIndexOverride, context)
  }), input.LocalSecondaryIndexOverride !== void 0 && input.LocalSecondaryIndexOverride !== null && {
    LocalSecondaryIndexOverride: serializeAws_json1_0LocalSecondaryIndexList(input.LocalSecondaryIndexOverride, context)
  }), input.ProvisionedThroughputOverride !== void 0 && input.ProvisionedThroughputOverride !== null && {
    ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughputOverride, context)
  }), input.RestoreDateTime !== void 0 && input.RestoreDateTime !== null && { RestoreDateTime: Math.round(input.RestoreDateTime.getTime() / 1e3) }), input.SSESpecificationOverride !== void 0 && input.SSESpecificationOverride !== null && {
    SSESpecificationOverride: serializeAws_json1_0SSESpecification(input.SSESpecificationOverride, context)
  }), input.SourceTableArn !== void 0 && input.SourceTableArn !== null && { SourceTableArn: input.SourceTableArn }), input.SourceTableName !== void 0 && input.SourceTableName !== null && { SourceTableName: input.SourceTableName }), input.TargetTableName !== void 0 && input.TargetTableName !== null && { TargetTableName: input.TargetTableName }), input.UseLatestRestorableTime !== void 0 && input.UseLatestRestorableTime !== null && { UseLatestRestorableTime: input.UseLatestRestorableTime });
};
var serializeAws_json1_0ScanInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.AttributesToGet !== void 0 && input.AttributesToGet !== null && {
    AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
  }), input.ConditionalOperator !== void 0 && input.ConditionalOperator !== null && { ConditionalOperator: input.ConditionalOperator }), input.ConsistentRead !== void 0 && input.ConsistentRead !== null && { ConsistentRead: input.ConsistentRead }), input.ExclusiveStartKey !== void 0 && input.ExclusiveStartKey !== null && {
    ExclusiveStartKey: serializeAws_json1_0Key(input.ExclusiveStartKey, context)
  }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
    ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
  }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
    ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
  }), input.FilterExpression !== void 0 && input.FilterExpression !== null && { FilterExpression: input.FilterExpression }), input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit }), input.ProjectionExpression !== void 0 && input.ProjectionExpression !== null && { ProjectionExpression: input.ProjectionExpression }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.ScanFilter !== void 0 && input.ScanFilter !== null && { ScanFilter: serializeAws_json1_0FilterConditionMap(input.ScanFilter, context) }), input.Segment !== void 0 && input.Segment !== null && { Segment: input.Segment }), input.Select !== void 0 && input.Select !== null && { Select: input.Select }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName }), input.TotalSegments !== void 0 && input.TotalSegments !== null && { TotalSegments: input.TotalSegments });
};
var serializeAws_json1_0SSESpecification = function(input, context) {
  return __assign(__assign(__assign({}, input.Enabled !== void 0 && input.Enabled !== null && { Enabled: input.Enabled }), input.KMSMasterKeyId !== void 0 && input.KMSMasterKeyId !== null && { KMSMasterKeyId: input.KMSMasterKeyId }), input.SSEType !== void 0 && input.SSEType !== null && { SSEType: input.SSEType });
};
var serializeAws_json1_0StreamSpecification = function(input, context) {
  return __assign(__assign({}, input.StreamEnabled !== void 0 && input.StreamEnabled !== null && { StreamEnabled: input.StreamEnabled }), input.StreamViewType !== void 0 && input.StreamViewType !== null && { StreamViewType: input.StreamViewType });
};
var serializeAws_json1_0StringSetAttributeValue = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_0Tag = function(input, context) {
  return __assign(__assign({}, input.Key !== void 0 && input.Key !== null && { Key: input.Key }), input.Value !== void 0 && input.Value !== null && { Value: input.Value });
};
var serializeAws_json1_0TagKeyList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_0TagList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0Tag(entry, context);
  });
};
var serializeAws_json1_0TagResourceInput = function(input, context) {
  return __assign(__assign({}, input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }), input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_0TagList(input.Tags, context) });
};
var serializeAws_json1_0TimeToLiveSpecification = function(input, context) {
  return __assign(__assign({}, input.AttributeName !== void 0 && input.AttributeName !== null && { AttributeName: input.AttributeName }), input.Enabled !== void 0 && input.Enabled !== null && { Enabled: input.Enabled });
};
var serializeAws_json1_0TransactGetItem = function(input, context) {
  return __assign({}, input.Get !== void 0 && input.Get !== null && { Get: serializeAws_json1_0Get(input.Get, context) });
};
var serializeAws_json1_0TransactGetItemList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0TransactGetItem(entry, context);
  });
};
var serializeAws_json1_0TransactGetItemsInput = function(input, context) {
  return __assign(__assign({}, input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.TransactItems !== void 0 && input.TransactItems !== null && {
    TransactItems: serializeAws_json1_0TransactGetItemList(input.TransactItems, context)
  });
};
var serializeAws_json1_0TransactWriteItem = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.ConditionCheck !== void 0 && input.ConditionCheck !== null && {
    ConditionCheck: serializeAws_json1_0ConditionCheck(input.ConditionCheck, context)
  }), input.Delete !== void 0 && input.Delete !== null && { Delete: serializeAws_json1_0Delete(input.Delete, context) }), input.Put !== void 0 && input.Put !== null && { Put: serializeAws_json1_0Put(input.Put, context) }), input.Update !== void 0 && input.Update !== null && { Update: serializeAws_json1_0Update(input.Update, context) });
};
var serializeAws_json1_0TransactWriteItemList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0TransactWriteItem(entry, context);
  });
};
var serializeAws_json1_0TransactWriteItemsInput = function(input, context) {
  var _a;
  return __assign(__assign(__assign({ ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : v4_default() }, input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.ReturnItemCollectionMetrics !== void 0 && input.ReturnItemCollectionMetrics !== null && { ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics }), input.TransactItems !== void 0 && input.TransactItems !== null && {
    TransactItems: serializeAws_json1_0TransactWriteItemList(input.TransactItems, context)
  });
};
var serializeAws_json1_0UntagResourceInput = function(input, context) {
  return __assign(__assign({}, input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }), input.TagKeys !== void 0 && input.TagKeys !== null && { TagKeys: serializeAws_json1_0TagKeyList(input.TagKeys, context) });
};
var serializeAws_json1_0Update = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.ConditionExpression !== void 0 && input.ConditionExpression !== null && { ConditionExpression: input.ConditionExpression }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
    ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
  }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
    ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
  }), input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) }), input.ReturnValuesOnConditionCheckFailure !== void 0 && input.ReturnValuesOnConditionCheckFailure !== null && {
    ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
  }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName }), input.UpdateExpression !== void 0 && input.UpdateExpression !== null && { UpdateExpression: input.UpdateExpression });
};
var serializeAws_json1_0UpdateContinuousBackupsInput = function(input, context) {
  return __assign(__assign({}, input.PointInTimeRecoverySpecification !== void 0 && input.PointInTimeRecoverySpecification !== null && {
    PointInTimeRecoverySpecification: serializeAws_json1_0PointInTimeRecoverySpecification(input.PointInTimeRecoverySpecification, context)
  }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0UpdateContributorInsightsInput = function(input, context) {
  return __assign(__assign(__assign({}, input.ContributorInsightsAction !== void 0 && input.ContributorInsightsAction !== null && { ContributorInsightsAction: input.ContributorInsightsAction }), input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0UpdateGlobalSecondaryIndexAction = function(input, context) {
  return __assign(__assign({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.ProvisionedThroughput !== void 0 && input.ProvisionedThroughput !== null && {
    ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
  });
};
var serializeAws_json1_0UpdateGlobalTableInput = function(input, context) {
  return __assign(__assign({}, input.GlobalTableName !== void 0 && input.GlobalTableName !== null && { GlobalTableName: input.GlobalTableName }), input.ReplicaUpdates !== void 0 && input.ReplicaUpdates !== null && {
    ReplicaUpdates: serializeAws_json1_0ReplicaUpdateList(input.ReplicaUpdates, context)
  });
};
var serializeAws_json1_0UpdateGlobalTableSettingsInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign({}, input.GlobalTableBillingMode !== void 0 && input.GlobalTableBillingMode !== null && { GlobalTableBillingMode: input.GlobalTableBillingMode }), input.GlobalTableGlobalSecondaryIndexSettingsUpdate !== void 0 && input.GlobalTableGlobalSecondaryIndexSettingsUpdate !== null && {
    GlobalTableGlobalSecondaryIndexSettingsUpdate: serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdateList(input.GlobalTableGlobalSecondaryIndexSettingsUpdate, context)
  }), input.GlobalTableName !== void 0 && input.GlobalTableName !== null && { GlobalTableName: input.GlobalTableName }), input.GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate !== void 0 && input.GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate !== null && {
    GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate, context)
  }), input.GlobalTableProvisionedWriteCapacityUnits !== void 0 && input.GlobalTableProvisionedWriteCapacityUnits !== null && {
    GlobalTableProvisionedWriteCapacityUnits: input.GlobalTableProvisionedWriteCapacityUnits
  }), input.ReplicaSettingsUpdate !== void 0 && input.ReplicaSettingsUpdate !== null && {
    ReplicaSettingsUpdate: serializeAws_json1_0ReplicaSettingsUpdateList(input.ReplicaSettingsUpdate, context)
  });
};
var serializeAws_json1_0UpdateItemInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.AttributeUpdates !== void 0 && input.AttributeUpdates !== null && {
    AttributeUpdates: serializeAws_json1_0AttributeUpdates(input.AttributeUpdates, context)
  }), input.ConditionExpression !== void 0 && input.ConditionExpression !== null && { ConditionExpression: input.ConditionExpression }), input.ConditionalOperator !== void 0 && input.ConditionalOperator !== null && { ConditionalOperator: input.ConditionalOperator }), input.Expected !== void 0 && input.Expected !== null && { Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context) }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
    ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
  }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
    ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
  }), input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.ReturnItemCollectionMetrics !== void 0 && input.ReturnItemCollectionMetrics !== null && { ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics }), input.ReturnValues !== void 0 && input.ReturnValues !== null && { ReturnValues: input.ReturnValues }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName }), input.UpdateExpression !== void 0 && input.UpdateExpression !== null && { UpdateExpression: input.UpdateExpression });
};
var serializeAws_json1_0UpdateReplicationGroupMemberAction = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.GlobalSecondaryIndexes !== void 0 && input.GlobalSecondaryIndexes !== null && {
    GlobalSecondaryIndexes: serializeAws_json1_0ReplicaGlobalSecondaryIndexList(input.GlobalSecondaryIndexes, context)
  }), input.KMSMasterKeyId !== void 0 && input.KMSMasterKeyId !== null && { KMSMasterKeyId: input.KMSMasterKeyId }), input.ProvisionedThroughputOverride !== void 0 && input.ProvisionedThroughputOverride !== null && {
    ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(input.ProvisionedThroughputOverride, context)
  }), input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName });
};
var serializeAws_json1_0UpdateTableInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.AttributeDefinitions !== void 0 && input.AttributeDefinitions !== null && {
    AttributeDefinitions: serializeAws_json1_0AttributeDefinitions(input.AttributeDefinitions, context)
  }), input.BillingMode !== void 0 && input.BillingMode !== null && { BillingMode: input.BillingMode }), input.GlobalSecondaryIndexUpdates !== void 0 && input.GlobalSecondaryIndexUpdates !== null && {
    GlobalSecondaryIndexUpdates: serializeAws_json1_0GlobalSecondaryIndexUpdateList(input.GlobalSecondaryIndexUpdates, context)
  }), input.ProvisionedThroughput !== void 0 && input.ProvisionedThroughput !== null && {
    ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
  }), input.ReplicaUpdates !== void 0 && input.ReplicaUpdates !== null && {
    ReplicaUpdates: serializeAws_json1_0ReplicationGroupUpdateList(input.ReplicaUpdates, context)
  }), input.SSESpecification !== void 0 && input.SSESpecification !== null && {
    SSESpecification: serializeAws_json1_0SSESpecification(input.SSESpecification, context)
  }), input.StreamSpecification !== void 0 && input.StreamSpecification !== null && {
    StreamSpecification: serializeAws_json1_0StreamSpecification(input.StreamSpecification, context)
  }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0UpdateTableReplicaAutoScalingInput = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.GlobalSecondaryIndexUpdates !== void 0 && input.GlobalSecondaryIndexUpdates !== null && {
    GlobalSecondaryIndexUpdates: serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdateList(input.GlobalSecondaryIndexUpdates, context)
  }), input.ProvisionedWriteCapacityAutoScalingUpdate !== void 0 && input.ProvisionedWriteCapacityAutoScalingUpdate !== null && {
    ProvisionedWriteCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedWriteCapacityAutoScalingUpdate, context)
  }), input.ReplicaUpdates !== void 0 && input.ReplicaUpdates !== null && {
    ReplicaUpdates: serializeAws_json1_0ReplicaAutoScalingUpdateList(input.ReplicaUpdates, context)
  }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
};
var serializeAws_json1_0UpdateTimeToLiveInput = function(input, context) {
  return __assign(__assign({}, input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName }), input.TimeToLiveSpecification !== void 0 && input.TimeToLiveSpecification !== null && {
    TimeToLiveSpecification: serializeAws_json1_0TimeToLiveSpecification(input.TimeToLiveSpecification, context)
  });
};
var serializeAws_json1_0WriteRequest = function(input, context) {
  return __assign(__assign({}, input.DeleteRequest !== void 0 && input.DeleteRequest !== null && {
    DeleteRequest: serializeAws_json1_0DeleteRequest(input.DeleteRequest, context)
  }), input.PutRequest !== void 0 && input.PutRequest !== null && { PutRequest: serializeAws_json1_0PutRequest(input.PutRequest, context) });
};
var serializeAws_json1_0WriteRequests = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_0WriteRequest(entry, context);
  });
};
var deserializeAws_json1_0ArchivalSummary = function(output, context) {
  return {
    ArchivalBackupArn: expectString(output.ArchivalBackupArn),
    ArchivalDateTime: output.ArchivalDateTime !== void 0 && output.ArchivalDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.ArchivalDateTime))) : void 0,
    ArchivalReason: expectString(output.ArchivalReason)
  };
};
var deserializeAws_json1_0AttributeDefinition = function(output, context) {
  return {
    AttributeName: expectString(output.AttributeName),
    AttributeType: expectString(output.AttributeType)
  };
};
var deserializeAws_json1_0AttributeDefinitions = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0AttributeDefinition(entry, context);
  });
};
var deserializeAws_json1_0AttributeMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = deserializeAws_json1_0AttributeValue(expectUnion(value), context), _b));
  }, {});
};
var deserializeAws_json1_0AttributeNameList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_json1_0AttributeValue = function(output, context) {
  if (output.B !== void 0 && output.B !== null) {
    return {
      B: context.base64Decoder(output.B)
    };
  }
  if (expectBoolean(output.BOOL) !== void 0) {
    return { BOOL: expectBoolean(output.BOOL) };
  }
  if (output.BS !== void 0 && output.BS !== null) {
    return {
      BS: deserializeAws_json1_0BinarySetAttributeValue(output.BS, context)
    };
  }
  if (output.L !== void 0 && output.L !== null) {
    return {
      L: deserializeAws_json1_0ListAttributeValue(output.L, context)
    };
  }
  if (output.M !== void 0 && output.M !== null) {
    return {
      M: deserializeAws_json1_0MapAttributeValue(output.M, context)
    };
  }
  if (expectString(output.N) !== void 0) {
    return { N: expectString(output.N) };
  }
  if (output.NS !== void 0 && output.NS !== null) {
    return {
      NS: deserializeAws_json1_0NumberSetAttributeValue(output.NS, context)
    };
  }
  if (expectBoolean(output.NULL) !== void 0) {
    return { NULL: expectBoolean(output.NULL) };
  }
  if (expectString(output.S) !== void 0) {
    return { S: expectString(output.S) };
  }
  if (output.SS !== void 0 && output.SS !== null) {
    return {
      SS: deserializeAws_json1_0StringSetAttributeValue(output.SS, context)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var deserializeAws_json1_0AutoScalingPolicyDescription = function(output, context) {
  return {
    PolicyName: expectString(output.PolicyName),
    TargetTrackingScalingPolicyConfiguration: output.TargetTrackingScalingPolicyConfiguration !== void 0 && output.TargetTrackingScalingPolicyConfiguration !== null ? deserializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationDescription(output.TargetTrackingScalingPolicyConfiguration, context) : void 0
  };
};
var deserializeAws_json1_0AutoScalingPolicyDescriptionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0AutoScalingPolicyDescription(entry, context);
  });
};
var deserializeAws_json1_0AutoScalingSettingsDescription = function(output, context) {
  return {
    AutoScalingDisabled: expectBoolean(output.AutoScalingDisabled),
    AutoScalingRoleArn: expectString(output.AutoScalingRoleArn),
    MaximumUnits: expectLong(output.MaximumUnits),
    MinimumUnits: expectLong(output.MinimumUnits),
    ScalingPolicies: output.ScalingPolicies !== void 0 && output.ScalingPolicies !== null ? deserializeAws_json1_0AutoScalingPolicyDescriptionList(output.ScalingPolicies, context) : void 0
  };
};
var deserializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationDescription = function(output, context) {
  return {
    DisableScaleIn: expectBoolean(output.DisableScaleIn),
    ScaleInCooldown: expectInt32(output.ScaleInCooldown),
    ScaleOutCooldown: expectInt32(output.ScaleOutCooldown),
    TargetValue: limitedParseDouble(output.TargetValue)
  };
};
var deserializeAws_json1_0BackupDescription = function(output, context) {
  return {
    BackupDetails: output.BackupDetails !== void 0 && output.BackupDetails !== null ? deserializeAws_json1_0BackupDetails(output.BackupDetails, context) : void 0,
    SourceTableDetails: output.SourceTableDetails !== void 0 && output.SourceTableDetails !== null ? deserializeAws_json1_0SourceTableDetails(output.SourceTableDetails, context) : void 0,
    SourceTableFeatureDetails: output.SourceTableFeatureDetails !== void 0 && output.SourceTableFeatureDetails !== null ? deserializeAws_json1_0SourceTableFeatureDetails(output.SourceTableFeatureDetails, context) : void 0
  };
};
var deserializeAws_json1_0BackupDetails = function(output, context) {
  return {
    BackupArn: expectString(output.BackupArn),
    BackupCreationDateTime: output.BackupCreationDateTime !== void 0 && output.BackupCreationDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.BackupCreationDateTime))) : void 0,
    BackupExpiryDateTime: output.BackupExpiryDateTime !== void 0 && output.BackupExpiryDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.BackupExpiryDateTime))) : void 0,
    BackupName: expectString(output.BackupName),
    BackupSizeBytes: expectLong(output.BackupSizeBytes),
    BackupStatus: expectString(output.BackupStatus),
    BackupType: expectString(output.BackupType)
  };
};
var deserializeAws_json1_0BackupInUseException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0BackupNotFoundException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0BackupSummaries = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0BackupSummary(entry, context);
  });
};
var deserializeAws_json1_0BackupSummary = function(output, context) {
  return {
    BackupArn: expectString(output.BackupArn),
    BackupCreationDateTime: output.BackupCreationDateTime !== void 0 && output.BackupCreationDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.BackupCreationDateTime))) : void 0,
    BackupExpiryDateTime: output.BackupExpiryDateTime !== void 0 && output.BackupExpiryDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.BackupExpiryDateTime))) : void 0,
    BackupName: expectString(output.BackupName),
    BackupSizeBytes: expectLong(output.BackupSizeBytes),
    BackupStatus: expectString(output.BackupStatus),
    BackupType: expectString(output.BackupType),
    TableArn: expectString(output.TableArn),
    TableId: expectString(output.TableId),
    TableName: expectString(output.TableName)
  };
};
var deserializeAws_json1_0BatchExecuteStatementOutput = function(output, context) {
  return {
    Responses: output.Responses !== void 0 && output.Responses !== null ? deserializeAws_json1_0PartiQLBatchResponse(output.Responses, context) : void 0
  };
};
var deserializeAws_json1_0BatchGetItemOutput = function(output, context) {
  return {
    ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
    Responses: output.Responses !== void 0 && output.Responses !== null ? deserializeAws_json1_0BatchGetResponseMap(output.Responses, context) : void 0,
    UnprocessedKeys: output.UnprocessedKeys !== void 0 && output.UnprocessedKeys !== null ? deserializeAws_json1_0BatchGetRequestMap(output.UnprocessedKeys, context) : void 0
  };
};
var deserializeAws_json1_0BatchGetRequestMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = deserializeAws_json1_0KeysAndAttributes(value, context), _b));
  }, {});
};
var deserializeAws_json1_0BatchGetResponseMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = deserializeAws_json1_0ItemList(value, context), _b));
  }, {});
};
var deserializeAws_json1_0BatchStatementError = function(output, context) {
  return {
    Code: expectString(output.Code),
    Message: expectString(output.Message)
  };
};
var deserializeAws_json1_0BatchStatementResponse = function(output, context) {
  return {
    Error: output.Error !== void 0 && output.Error !== null ? deserializeAws_json1_0BatchStatementError(output.Error, context) : void 0,
    Item: output.Item !== void 0 && output.Item !== null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0,
    TableName: expectString(output.TableName)
  };
};
var deserializeAws_json1_0BatchWriteItemOutput = function(output, context) {
  return {
    ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
    ItemCollectionMetrics: output.ItemCollectionMetrics !== void 0 && output.ItemCollectionMetrics !== null ? deserializeAws_json1_0ItemCollectionMetricsPerTable(output.ItemCollectionMetrics, context) : void 0,
    UnprocessedItems: output.UnprocessedItems !== void 0 && output.UnprocessedItems !== null ? deserializeAws_json1_0BatchWriteItemRequestMap(output.UnprocessedItems, context) : void 0
  };
};
var deserializeAws_json1_0BatchWriteItemRequestMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = deserializeAws_json1_0WriteRequests(value, context), _b));
  }, {});
};
var deserializeAws_json1_0BillingModeSummary = function(output, context) {
  return {
    BillingMode: expectString(output.BillingMode),
    LastUpdateToPayPerRequestDateTime: output.LastUpdateToPayPerRequestDateTime !== void 0 && output.LastUpdateToPayPerRequestDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.LastUpdateToPayPerRequestDateTime))) : void 0
  };
};
var deserializeAws_json1_0BinarySetAttributeValue = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return context.base64Decoder(entry);
  });
};
var deserializeAws_json1_0CancellationReason = function(output, context) {
  return {
    Code: expectString(output.Code),
    Item: output.Item !== void 0 && output.Item !== null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0,
    Message: expectString(output.Message)
  };
};
var deserializeAws_json1_0CancellationReasonList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0CancellationReason(entry, context);
  });
};
var deserializeAws_json1_0Capacity = function(output, context) {
  return {
    CapacityUnits: limitedParseDouble(output.CapacityUnits),
    ReadCapacityUnits: limitedParseDouble(output.ReadCapacityUnits),
    WriteCapacityUnits: limitedParseDouble(output.WriteCapacityUnits)
  };
};
var deserializeAws_json1_0ConditionalCheckFailedException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0ConsumedCapacity = function(output, context) {
  return {
    CapacityUnits: limitedParseDouble(output.CapacityUnits),
    GlobalSecondaryIndexes: output.GlobalSecondaryIndexes !== void 0 && output.GlobalSecondaryIndexes !== null ? deserializeAws_json1_0SecondaryIndexesCapacityMap(output.GlobalSecondaryIndexes, context) : void 0,
    LocalSecondaryIndexes: output.LocalSecondaryIndexes !== void 0 && output.LocalSecondaryIndexes !== null ? deserializeAws_json1_0SecondaryIndexesCapacityMap(output.LocalSecondaryIndexes, context) : void 0,
    ReadCapacityUnits: limitedParseDouble(output.ReadCapacityUnits),
    Table: output.Table !== void 0 && output.Table !== null ? deserializeAws_json1_0Capacity(output.Table, context) : void 0,
    TableName: expectString(output.TableName),
    WriteCapacityUnits: limitedParseDouble(output.WriteCapacityUnits)
  };
};
var deserializeAws_json1_0ConsumedCapacityMultiple = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0ConsumedCapacity(entry, context);
  });
};
var deserializeAws_json1_0ContinuousBackupsDescription = function(output, context) {
  return {
    ContinuousBackupsStatus: expectString(output.ContinuousBackupsStatus),
    PointInTimeRecoveryDescription: output.PointInTimeRecoveryDescription !== void 0 && output.PointInTimeRecoveryDescription !== null ? deserializeAws_json1_0PointInTimeRecoveryDescription(output.PointInTimeRecoveryDescription, context) : void 0
  };
};
var deserializeAws_json1_0ContinuousBackupsUnavailableException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0ContributorInsightsRuleList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_json1_0ContributorInsightsSummaries = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0ContributorInsightsSummary(entry, context);
  });
};
var deserializeAws_json1_0ContributorInsightsSummary = function(output, context) {
  return {
    ContributorInsightsStatus: expectString(output.ContributorInsightsStatus),
    IndexName: expectString(output.IndexName),
    TableName: expectString(output.TableName)
  };
};
var deserializeAws_json1_0CreateBackupOutput = function(output, context) {
  return {
    BackupDetails: output.BackupDetails !== void 0 && output.BackupDetails !== null ? deserializeAws_json1_0BackupDetails(output.BackupDetails, context) : void 0
  };
};
var deserializeAws_json1_0CreateGlobalTableOutput = function(output, context) {
  return {
    GlobalTableDescription: output.GlobalTableDescription !== void 0 && output.GlobalTableDescription !== null ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context) : void 0
  };
};
var deserializeAws_json1_0CreateTableOutput = function(output, context) {
  return {
    TableDescription: output.TableDescription !== void 0 && output.TableDescription !== null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
  };
};
var deserializeAws_json1_0DeleteBackupOutput = function(output, context) {
  return {
    BackupDescription: output.BackupDescription !== void 0 && output.BackupDescription !== null ? deserializeAws_json1_0BackupDescription(output.BackupDescription, context) : void 0
  };
};
var deserializeAws_json1_0DeleteItemOutput = function(output, context) {
  return {
    Attributes: output.Attributes !== void 0 && output.Attributes !== null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : void 0,
    ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
    ItemCollectionMetrics: output.ItemCollectionMetrics !== void 0 && output.ItemCollectionMetrics !== null ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context) : void 0
  };
};
var deserializeAws_json1_0DeleteRequest = function(output, context) {
  return {
    Key: output.Key !== void 0 && output.Key !== null ? deserializeAws_json1_0Key(output.Key, context) : void 0
  };
};
var deserializeAws_json1_0DeleteTableOutput = function(output, context) {
  return {
    TableDescription: output.TableDescription !== void 0 && output.TableDescription !== null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
  };
};
var deserializeAws_json1_0DescribeBackupOutput = function(output, context) {
  return {
    BackupDescription: output.BackupDescription !== void 0 && output.BackupDescription !== null ? deserializeAws_json1_0BackupDescription(output.BackupDescription, context) : void 0
  };
};
var deserializeAws_json1_0DescribeContinuousBackupsOutput = function(output, context) {
  return {
    ContinuousBackupsDescription: output.ContinuousBackupsDescription !== void 0 && output.ContinuousBackupsDescription !== null ? deserializeAws_json1_0ContinuousBackupsDescription(output.ContinuousBackupsDescription, context) : void 0
  };
};
var deserializeAws_json1_0DescribeContributorInsightsOutput = function(output, context) {
  return {
    ContributorInsightsRuleList: output.ContributorInsightsRuleList !== void 0 && output.ContributorInsightsRuleList !== null ? deserializeAws_json1_0ContributorInsightsRuleList(output.ContributorInsightsRuleList, context) : void 0,
    ContributorInsightsStatus: expectString(output.ContributorInsightsStatus),
    FailureException: output.FailureException !== void 0 && output.FailureException !== null ? deserializeAws_json1_0FailureException(output.FailureException, context) : void 0,
    IndexName: expectString(output.IndexName),
    LastUpdateDateTime: output.LastUpdateDateTime !== void 0 && output.LastUpdateDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.LastUpdateDateTime))) : void 0,
    TableName: expectString(output.TableName)
  };
};
var deserializeAws_json1_0DescribeEndpointsResponse = function(output, context) {
  return {
    Endpoints: output.Endpoints !== void 0 && output.Endpoints !== null ? deserializeAws_json1_0Endpoints(output.Endpoints, context) : void 0
  };
};
var deserializeAws_json1_0DescribeExportOutput = function(output, context) {
  return {
    ExportDescription: output.ExportDescription !== void 0 && output.ExportDescription !== null ? deserializeAws_json1_0ExportDescription(output.ExportDescription, context) : void 0
  };
};
var deserializeAws_json1_0DescribeGlobalTableOutput = function(output, context) {
  return {
    GlobalTableDescription: output.GlobalTableDescription !== void 0 && output.GlobalTableDescription !== null ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context) : void 0
  };
};
var deserializeAws_json1_0DescribeGlobalTableSettingsOutput = function(output, context) {
  return {
    GlobalTableName: expectString(output.GlobalTableName),
    ReplicaSettings: output.ReplicaSettings !== void 0 && output.ReplicaSettings !== null ? deserializeAws_json1_0ReplicaSettingsDescriptionList(output.ReplicaSettings, context) : void 0
  };
};
var deserializeAws_json1_0DescribeKinesisStreamingDestinationOutput = function(output, context) {
  return {
    KinesisDataStreamDestinations: output.KinesisDataStreamDestinations !== void 0 && output.KinesisDataStreamDestinations !== null ? deserializeAws_json1_0KinesisDataStreamDestinations(output.KinesisDataStreamDestinations, context) : void 0,
    TableName: expectString(output.TableName)
  };
};
var deserializeAws_json1_0DescribeLimitsOutput = function(output, context) {
  return {
    AccountMaxReadCapacityUnits: expectLong(output.AccountMaxReadCapacityUnits),
    AccountMaxWriteCapacityUnits: expectLong(output.AccountMaxWriteCapacityUnits),
    TableMaxReadCapacityUnits: expectLong(output.TableMaxReadCapacityUnits),
    TableMaxWriteCapacityUnits: expectLong(output.TableMaxWriteCapacityUnits)
  };
};
var deserializeAws_json1_0DescribeTableOutput = function(output, context) {
  return {
    Table: output.Table !== void 0 && output.Table !== null ? deserializeAws_json1_0TableDescription(output.Table, context) : void 0
  };
};
var deserializeAws_json1_0DescribeTableReplicaAutoScalingOutput = function(output, context) {
  return {
    TableAutoScalingDescription: output.TableAutoScalingDescription !== void 0 && output.TableAutoScalingDescription !== null ? deserializeAws_json1_0TableAutoScalingDescription(output.TableAutoScalingDescription, context) : void 0
  };
};
var deserializeAws_json1_0DescribeTimeToLiveOutput = function(output, context) {
  return {
    TimeToLiveDescription: output.TimeToLiveDescription !== void 0 && output.TimeToLiveDescription !== null ? deserializeAws_json1_0TimeToLiveDescription(output.TimeToLiveDescription, context) : void 0
  };
};
var deserializeAws_json1_0DuplicateItemException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0Endpoint = function(output, context) {
  return {
    Address: expectString(output.Address),
    CachePeriodInMinutes: expectLong(output.CachePeriodInMinutes)
  };
};
var deserializeAws_json1_0Endpoints = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0Endpoint(entry, context);
  });
};
var deserializeAws_json1_0ExecuteStatementOutput = function(output, context) {
  return {
    Items: output.Items !== void 0 && output.Items !== null ? deserializeAws_json1_0ItemList(output.Items, context) : void 0,
    NextToken: expectString(output.NextToken)
  };
};
var deserializeAws_json1_0ExecuteTransactionOutput = function(output, context) {
  return {
    Responses: output.Responses !== void 0 && output.Responses !== null ? deserializeAws_json1_0ItemResponseList(output.Responses, context) : void 0
  };
};
var deserializeAws_json1_0ExportConflictException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0ExportDescription = function(output, context) {
  return {
    BilledSizeBytes: expectLong(output.BilledSizeBytes),
    ClientToken: expectString(output.ClientToken),
    EndTime: output.EndTime !== void 0 && output.EndTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.EndTime))) : void 0,
    ExportArn: expectString(output.ExportArn),
    ExportFormat: expectString(output.ExportFormat),
    ExportManifest: expectString(output.ExportManifest),
    ExportStatus: expectString(output.ExportStatus),
    ExportTime: output.ExportTime !== void 0 && output.ExportTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.ExportTime))) : void 0,
    FailureCode: expectString(output.FailureCode),
    FailureMessage: expectString(output.FailureMessage),
    ItemCount: expectLong(output.ItemCount),
    S3Bucket: expectString(output.S3Bucket),
    S3BucketOwner: expectString(output.S3BucketOwner),
    S3Prefix: expectString(output.S3Prefix),
    S3SseAlgorithm: expectString(output.S3SseAlgorithm),
    S3SseKmsKeyId: expectString(output.S3SseKmsKeyId),
    StartTime: output.StartTime !== void 0 && output.StartTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.StartTime))) : void 0,
    TableArn: expectString(output.TableArn),
    TableId: expectString(output.TableId)
  };
};
var deserializeAws_json1_0ExportNotFoundException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0ExportSummaries = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0ExportSummary(entry, context);
  });
};
var deserializeAws_json1_0ExportSummary = function(output, context) {
  return {
    ExportArn: expectString(output.ExportArn),
    ExportStatus: expectString(output.ExportStatus)
  };
};
var deserializeAws_json1_0ExportTableToPointInTimeOutput = function(output, context) {
  return {
    ExportDescription: output.ExportDescription !== void 0 && output.ExportDescription !== null ? deserializeAws_json1_0ExportDescription(output.ExportDescription, context) : void 0
  };
};
var deserializeAws_json1_0ExpressionAttributeNameMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = expectString(value), _b));
  }, {});
};
var deserializeAws_json1_0FailureException = function(output, context) {
  return {
    ExceptionDescription: expectString(output.ExceptionDescription),
    ExceptionName: expectString(output.ExceptionName)
  };
};
var deserializeAws_json1_0GetItemOutput = function(output, context) {
  return {
    ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
    Item: output.Item !== void 0 && output.Item !== null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0
  };
};
var deserializeAws_json1_0GlobalSecondaryIndexDescription = function(output, context) {
  return {
    Backfilling: expectBoolean(output.Backfilling),
    IndexArn: expectString(output.IndexArn),
    IndexName: expectString(output.IndexName),
    IndexSizeBytes: expectLong(output.IndexSizeBytes),
    IndexStatus: expectString(output.IndexStatus),
    ItemCount: expectLong(output.ItemCount),
    KeySchema: output.KeySchema !== void 0 && output.KeySchema !== null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
    Projection: output.Projection !== void 0 && output.Projection !== null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0,
    ProvisionedThroughput: output.ProvisionedThroughput !== void 0 && output.ProvisionedThroughput !== null ? deserializeAws_json1_0ProvisionedThroughputDescription(output.ProvisionedThroughput, context) : void 0
  };
};
var deserializeAws_json1_0GlobalSecondaryIndexDescriptionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0GlobalSecondaryIndexDescription(entry, context);
  });
};
var deserializeAws_json1_0GlobalSecondaryIndexes = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0GlobalSecondaryIndexInfo(entry, context);
  });
};
var deserializeAws_json1_0GlobalSecondaryIndexInfo = function(output, context) {
  return {
    IndexName: expectString(output.IndexName),
    KeySchema: output.KeySchema !== void 0 && output.KeySchema !== null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
    Projection: output.Projection !== void 0 && output.Projection !== null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0,
    ProvisionedThroughput: output.ProvisionedThroughput !== void 0 && output.ProvisionedThroughput !== null ? deserializeAws_json1_0ProvisionedThroughput(output.ProvisionedThroughput, context) : void 0
  };
};
var deserializeAws_json1_0GlobalTable = function(output, context) {
  return {
    GlobalTableName: expectString(output.GlobalTableName),
    ReplicationGroup: output.ReplicationGroup !== void 0 && output.ReplicationGroup !== null ? deserializeAws_json1_0ReplicaList(output.ReplicationGroup, context) : void 0
  };
};
var deserializeAws_json1_0GlobalTableAlreadyExistsException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0GlobalTableDescription = function(output, context) {
  return {
    CreationDateTime: output.CreationDateTime !== void 0 && output.CreationDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.CreationDateTime))) : void 0,
    GlobalTableArn: expectString(output.GlobalTableArn),
    GlobalTableName: expectString(output.GlobalTableName),
    GlobalTableStatus: expectString(output.GlobalTableStatus),
    ReplicationGroup: output.ReplicationGroup !== void 0 && output.ReplicationGroup !== null ? deserializeAws_json1_0ReplicaDescriptionList(output.ReplicationGroup, context) : void 0
  };
};
var deserializeAws_json1_0GlobalTableList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0GlobalTable(entry, context);
  });
};
var deserializeAws_json1_0GlobalTableNotFoundException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0IdempotentParameterMismatchException = function(output, context) {
  return {
    Message: expectString(output.Message)
  };
};
var deserializeAws_json1_0IndexNotFoundException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0InternalServerError = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0InvalidEndpointException = function(output, context) {
  return {
    Message: expectString(output.Message)
  };
};
var deserializeAws_json1_0InvalidExportTimeException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0InvalidRestoreTimeException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0ItemCollectionKeyAttributeMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = deserializeAws_json1_0AttributeValue(expectUnion(value), context), _b));
  }, {});
};
var deserializeAws_json1_0ItemCollectionMetrics = function(output, context) {
  return {
    ItemCollectionKey: output.ItemCollectionKey !== void 0 && output.ItemCollectionKey !== null ? deserializeAws_json1_0ItemCollectionKeyAttributeMap(output.ItemCollectionKey, context) : void 0,
    SizeEstimateRangeGB: output.SizeEstimateRangeGB !== void 0 && output.SizeEstimateRangeGB !== null ? deserializeAws_json1_0ItemCollectionSizeEstimateRange(output.SizeEstimateRangeGB, context) : void 0
  };
};
var deserializeAws_json1_0ItemCollectionMetricsMultiple = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0ItemCollectionMetrics(entry, context);
  });
};
var deserializeAws_json1_0ItemCollectionMetricsPerTable = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = deserializeAws_json1_0ItemCollectionMetricsMultiple(value, context), _b));
  }, {});
};
var deserializeAws_json1_0ItemCollectionSizeEstimateRange = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return limitedParseDouble(entry);
  });
};
var deserializeAws_json1_0ItemCollectionSizeLimitExceededException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0ItemList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0AttributeMap(entry, context);
  });
};
var deserializeAws_json1_0ItemResponse = function(output, context) {
  return {
    Item: output.Item !== void 0 && output.Item !== null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0
  };
};
var deserializeAws_json1_0ItemResponseList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0ItemResponse(entry, context);
  });
};
var deserializeAws_json1_0Key = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = deserializeAws_json1_0AttributeValue(expectUnion(value), context), _b));
  }, {});
};
var deserializeAws_json1_0KeyList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0Key(entry, context);
  });
};
var deserializeAws_json1_0KeysAndAttributes = function(output, context) {
  return {
    AttributesToGet: output.AttributesToGet !== void 0 && output.AttributesToGet !== null ? deserializeAws_json1_0AttributeNameList(output.AttributesToGet, context) : void 0,
    ConsistentRead: expectBoolean(output.ConsistentRead),
    ExpressionAttributeNames: output.ExpressionAttributeNames !== void 0 && output.ExpressionAttributeNames !== null ? deserializeAws_json1_0ExpressionAttributeNameMap(output.ExpressionAttributeNames, context) : void 0,
    Keys: output.Keys !== void 0 && output.Keys !== null ? deserializeAws_json1_0KeyList(output.Keys, context) : void 0,
    ProjectionExpression: expectString(output.ProjectionExpression)
  };
};
var deserializeAws_json1_0KeySchema = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0KeySchemaElement(entry, context);
  });
};
var deserializeAws_json1_0KeySchemaElement = function(output, context) {
  return {
    AttributeName: expectString(output.AttributeName),
    KeyType: expectString(output.KeyType)
  };
};
var deserializeAws_json1_0KinesisDataStreamDestination = function(output, context) {
  return {
    DestinationStatus: expectString(output.DestinationStatus),
    DestinationStatusDescription: expectString(output.DestinationStatusDescription),
    StreamArn: expectString(output.StreamArn)
  };
};
var deserializeAws_json1_0KinesisDataStreamDestinations = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0KinesisDataStreamDestination(entry, context);
  });
};
var deserializeAws_json1_0KinesisStreamingDestinationOutput = function(output, context) {
  return {
    DestinationStatus: expectString(output.DestinationStatus),
    StreamArn: expectString(output.StreamArn),
    TableName: expectString(output.TableName)
  };
};
var deserializeAws_json1_0LimitExceededException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0ListAttributeValue = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0AttributeValue(expectUnion(entry), context);
  });
};
var deserializeAws_json1_0ListBackupsOutput = function(output, context) {
  return {
    BackupSummaries: output.BackupSummaries !== void 0 && output.BackupSummaries !== null ? deserializeAws_json1_0BackupSummaries(output.BackupSummaries, context) : void 0,
    LastEvaluatedBackupArn: expectString(output.LastEvaluatedBackupArn)
  };
};
var deserializeAws_json1_0ListContributorInsightsOutput = function(output, context) {
  return {
    ContributorInsightsSummaries: output.ContributorInsightsSummaries !== void 0 && output.ContributorInsightsSummaries !== null ? deserializeAws_json1_0ContributorInsightsSummaries(output.ContributorInsightsSummaries, context) : void 0,
    NextToken: expectString(output.NextToken)
  };
};
var deserializeAws_json1_0ListExportsOutput = function(output, context) {
  return {
    ExportSummaries: output.ExportSummaries !== void 0 && output.ExportSummaries !== null ? deserializeAws_json1_0ExportSummaries(output.ExportSummaries, context) : void 0,
    NextToken: expectString(output.NextToken)
  };
};
var deserializeAws_json1_0ListGlobalTablesOutput = function(output, context) {
  return {
    GlobalTables: output.GlobalTables !== void 0 && output.GlobalTables !== null ? deserializeAws_json1_0GlobalTableList(output.GlobalTables, context) : void 0,
    LastEvaluatedGlobalTableName: expectString(output.LastEvaluatedGlobalTableName)
  };
};
var deserializeAws_json1_0ListTablesOutput = function(output, context) {
  return {
    LastEvaluatedTableName: expectString(output.LastEvaluatedTableName),
    TableNames: output.TableNames !== void 0 && output.TableNames !== null ? deserializeAws_json1_0TableNameList(output.TableNames, context) : void 0
  };
};
var deserializeAws_json1_0ListTagsOfResourceOutput = function(output, context) {
  return {
    NextToken: expectString(output.NextToken),
    Tags: output.Tags !== void 0 && output.Tags !== null ? deserializeAws_json1_0TagList(output.Tags, context) : void 0
  };
};
var deserializeAws_json1_0LocalSecondaryIndexDescription = function(output, context) {
  return {
    IndexArn: expectString(output.IndexArn),
    IndexName: expectString(output.IndexName),
    IndexSizeBytes: expectLong(output.IndexSizeBytes),
    ItemCount: expectLong(output.ItemCount),
    KeySchema: output.KeySchema !== void 0 && output.KeySchema !== null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
    Projection: output.Projection !== void 0 && output.Projection !== null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0
  };
};
var deserializeAws_json1_0LocalSecondaryIndexDescriptionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0LocalSecondaryIndexDescription(entry, context);
  });
};
var deserializeAws_json1_0LocalSecondaryIndexes = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0LocalSecondaryIndexInfo(entry, context);
  });
};
var deserializeAws_json1_0LocalSecondaryIndexInfo = function(output, context) {
  return {
    IndexName: expectString(output.IndexName),
    KeySchema: output.KeySchema !== void 0 && output.KeySchema !== null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
    Projection: output.Projection !== void 0 && output.Projection !== null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0
  };
};
var deserializeAws_json1_0MapAttributeValue = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = deserializeAws_json1_0AttributeValue(expectUnion(value), context), _b));
  }, {});
};
var deserializeAws_json1_0NonKeyAttributeNameList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_json1_0NumberSetAttributeValue = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_json1_0PartiQLBatchResponse = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0BatchStatementResponse(entry, context);
  });
};
var deserializeAws_json1_0PointInTimeRecoveryDescription = function(output, context) {
  return {
    EarliestRestorableDateTime: output.EarliestRestorableDateTime !== void 0 && output.EarliestRestorableDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.EarliestRestorableDateTime))) : void 0,
    LatestRestorableDateTime: output.LatestRestorableDateTime !== void 0 && output.LatestRestorableDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.LatestRestorableDateTime))) : void 0,
    PointInTimeRecoveryStatus: expectString(output.PointInTimeRecoveryStatus)
  };
};
var deserializeAws_json1_0PointInTimeRecoveryUnavailableException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0Projection = function(output, context) {
  return {
    NonKeyAttributes: output.NonKeyAttributes !== void 0 && output.NonKeyAttributes !== null ? deserializeAws_json1_0NonKeyAttributeNameList(output.NonKeyAttributes, context) : void 0,
    ProjectionType: expectString(output.ProjectionType)
  };
};
var deserializeAws_json1_0ProvisionedThroughput = function(output, context) {
  return {
    ReadCapacityUnits: expectLong(output.ReadCapacityUnits),
    WriteCapacityUnits: expectLong(output.WriteCapacityUnits)
  };
};
var deserializeAws_json1_0ProvisionedThroughputDescription = function(output, context) {
  return {
    LastDecreaseDateTime: output.LastDecreaseDateTime !== void 0 && output.LastDecreaseDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.LastDecreaseDateTime))) : void 0,
    LastIncreaseDateTime: output.LastIncreaseDateTime !== void 0 && output.LastIncreaseDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.LastIncreaseDateTime))) : void 0,
    NumberOfDecreasesToday: expectLong(output.NumberOfDecreasesToday),
    ReadCapacityUnits: expectLong(output.ReadCapacityUnits),
    WriteCapacityUnits: expectLong(output.WriteCapacityUnits)
  };
};
var deserializeAws_json1_0ProvisionedThroughputExceededException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0ProvisionedThroughputOverride = function(output, context) {
  return {
    ReadCapacityUnits: expectLong(output.ReadCapacityUnits)
  };
};
var deserializeAws_json1_0PutItemInputAttributeMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = deserializeAws_json1_0AttributeValue(expectUnion(value), context), _b));
  }, {});
};
var deserializeAws_json1_0PutItemOutput = function(output, context) {
  return {
    Attributes: output.Attributes !== void 0 && output.Attributes !== null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : void 0,
    ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
    ItemCollectionMetrics: output.ItemCollectionMetrics !== void 0 && output.ItemCollectionMetrics !== null ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context) : void 0
  };
};
var deserializeAws_json1_0PutRequest = function(output, context) {
  return {
    Item: output.Item !== void 0 && output.Item !== null ? deserializeAws_json1_0PutItemInputAttributeMap(output.Item, context) : void 0
  };
};
var deserializeAws_json1_0QueryOutput = function(output, context) {
  return {
    ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
    Count: expectInt32(output.Count),
    Items: output.Items !== void 0 && output.Items !== null ? deserializeAws_json1_0ItemList(output.Items, context) : void 0,
    LastEvaluatedKey: output.LastEvaluatedKey !== void 0 && output.LastEvaluatedKey !== null ? deserializeAws_json1_0Key(output.LastEvaluatedKey, context) : void 0,
    ScannedCount: expectInt32(output.ScannedCount)
  };
};
var deserializeAws_json1_0Replica = function(output, context) {
  return {
    RegionName: expectString(output.RegionName)
  };
};
var deserializeAws_json1_0ReplicaAlreadyExistsException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0ReplicaAutoScalingDescription = function(output, context) {
  return {
    GlobalSecondaryIndexes: output.GlobalSecondaryIndexes !== void 0 && output.GlobalSecondaryIndexes !== null ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescriptionList(output.GlobalSecondaryIndexes, context) : void 0,
    RegionName: expectString(output.RegionName),
    ReplicaProvisionedReadCapacityAutoScalingSettings: output.ReplicaProvisionedReadCapacityAutoScalingSettings !== void 0 && output.ReplicaProvisionedReadCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedReadCapacityAutoScalingSettings, context) : void 0,
    ReplicaProvisionedWriteCapacityAutoScalingSettings: output.ReplicaProvisionedWriteCapacityAutoScalingSettings !== void 0 && output.ReplicaProvisionedWriteCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedWriteCapacityAutoScalingSettings, context) : void 0,
    ReplicaStatus: expectString(output.ReplicaStatus)
  };
};
var deserializeAws_json1_0ReplicaAutoScalingDescriptionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0ReplicaAutoScalingDescription(entry, context);
  });
};
var deserializeAws_json1_0ReplicaDescription = function(output, context) {
  return {
    GlobalSecondaryIndexes: output.GlobalSecondaryIndexes !== void 0 && output.GlobalSecondaryIndexes !== null ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescriptionList(output.GlobalSecondaryIndexes, context) : void 0,
    KMSMasterKeyId: expectString(output.KMSMasterKeyId),
    ProvisionedThroughputOverride: output.ProvisionedThroughputOverride !== void 0 && output.ProvisionedThroughputOverride !== null ? deserializeAws_json1_0ProvisionedThroughputOverride(output.ProvisionedThroughputOverride, context) : void 0,
    RegionName: expectString(output.RegionName),
    ReplicaInaccessibleDateTime: output.ReplicaInaccessibleDateTime !== void 0 && output.ReplicaInaccessibleDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.ReplicaInaccessibleDateTime))) : void 0,
    ReplicaStatus: expectString(output.ReplicaStatus),
    ReplicaStatusDescription: expectString(output.ReplicaStatusDescription),
    ReplicaStatusPercentProgress: expectString(output.ReplicaStatusPercentProgress)
  };
};
var deserializeAws_json1_0ReplicaDescriptionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0ReplicaDescription(entry, context);
  });
};
var deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescription = function(output, context) {
  return {
    IndexName: expectString(output.IndexName),
    IndexStatus: expectString(output.IndexStatus),
    ProvisionedReadCapacityAutoScalingSettings: output.ProvisionedReadCapacityAutoScalingSettings !== void 0 && output.ProvisionedReadCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedReadCapacityAutoScalingSettings, context) : void 0,
    ProvisionedWriteCapacityAutoScalingSettings: output.ProvisionedWriteCapacityAutoScalingSettings !== void 0 && output.ProvisionedWriteCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedWriteCapacityAutoScalingSettings, context) : void 0
  };
};
var deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescriptionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescription(entry, context);
  });
};
var deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescription = function(output, context) {
  return {
    IndexName: expectString(output.IndexName),
    ProvisionedThroughputOverride: output.ProvisionedThroughputOverride !== void 0 && output.ProvisionedThroughputOverride !== null ? deserializeAws_json1_0ProvisionedThroughputOverride(output.ProvisionedThroughputOverride, context) : void 0
  };
};
var deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescriptionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescription(entry, context);
  });
};
var deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescription = function(output, context) {
  return {
    IndexName: expectString(output.IndexName),
    IndexStatus: expectString(output.IndexStatus),
    ProvisionedReadCapacityAutoScalingSettings: output.ProvisionedReadCapacityAutoScalingSettings !== void 0 && output.ProvisionedReadCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedReadCapacityAutoScalingSettings, context) : void 0,
    ProvisionedReadCapacityUnits: expectLong(output.ProvisionedReadCapacityUnits),
    ProvisionedWriteCapacityAutoScalingSettings: output.ProvisionedWriteCapacityAutoScalingSettings !== void 0 && output.ProvisionedWriteCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedWriteCapacityAutoScalingSettings, context) : void 0,
    ProvisionedWriteCapacityUnits: expectLong(output.ProvisionedWriteCapacityUnits)
  };
};
var deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescriptionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescription(entry, context);
  });
};
var deserializeAws_json1_0ReplicaList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0Replica(entry, context);
  });
};
var deserializeAws_json1_0ReplicaNotFoundException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0ReplicaSettingsDescription = function(output, context) {
  return {
    RegionName: expectString(output.RegionName),
    ReplicaBillingModeSummary: output.ReplicaBillingModeSummary !== void 0 && output.ReplicaBillingModeSummary !== null ? deserializeAws_json1_0BillingModeSummary(output.ReplicaBillingModeSummary, context) : void 0,
    ReplicaGlobalSecondaryIndexSettings: output.ReplicaGlobalSecondaryIndexSettings !== void 0 && output.ReplicaGlobalSecondaryIndexSettings !== null ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescriptionList(output.ReplicaGlobalSecondaryIndexSettings, context) : void 0,
    ReplicaProvisionedReadCapacityAutoScalingSettings: output.ReplicaProvisionedReadCapacityAutoScalingSettings !== void 0 && output.ReplicaProvisionedReadCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedReadCapacityAutoScalingSettings, context) : void 0,
    ReplicaProvisionedReadCapacityUnits: expectLong(output.ReplicaProvisionedReadCapacityUnits),
    ReplicaProvisionedWriteCapacityAutoScalingSettings: output.ReplicaProvisionedWriteCapacityAutoScalingSettings !== void 0 && output.ReplicaProvisionedWriteCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedWriteCapacityAutoScalingSettings, context) : void 0,
    ReplicaProvisionedWriteCapacityUnits: expectLong(output.ReplicaProvisionedWriteCapacityUnits),
    ReplicaStatus: expectString(output.ReplicaStatus)
  };
};
var deserializeAws_json1_0ReplicaSettingsDescriptionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0ReplicaSettingsDescription(entry, context);
  });
};
var deserializeAws_json1_0RequestLimitExceeded = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0ResourceInUseException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0ResourceNotFoundException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0RestoreSummary = function(output, context) {
  return {
    RestoreDateTime: output.RestoreDateTime !== void 0 && output.RestoreDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.RestoreDateTime))) : void 0,
    RestoreInProgress: expectBoolean(output.RestoreInProgress),
    SourceBackupArn: expectString(output.SourceBackupArn),
    SourceTableArn: expectString(output.SourceTableArn)
  };
};
var deserializeAws_json1_0RestoreTableFromBackupOutput = function(output, context) {
  return {
    TableDescription: output.TableDescription !== void 0 && output.TableDescription !== null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
  };
};
var deserializeAws_json1_0RestoreTableToPointInTimeOutput = function(output, context) {
  return {
    TableDescription: output.TableDescription !== void 0 && output.TableDescription !== null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
  };
};
var deserializeAws_json1_0ScanOutput = function(output, context) {
  return {
    ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
    Count: expectInt32(output.Count),
    Items: output.Items !== void 0 && output.Items !== null ? deserializeAws_json1_0ItemList(output.Items, context) : void 0,
    LastEvaluatedKey: output.LastEvaluatedKey !== void 0 && output.LastEvaluatedKey !== null ? deserializeAws_json1_0Key(output.LastEvaluatedKey, context) : void 0,
    ScannedCount: expectInt32(output.ScannedCount)
  };
};
var deserializeAws_json1_0SecondaryIndexesCapacityMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = deserializeAws_json1_0Capacity(value, context), _b));
  }, {});
};
var deserializeAws_json1_0SourceTableDetails = function(output, context) {
  return {
    BillingMode: expectString(output.BillingMode),
    ItemCount: expectLong(output.ItemCount),
    KeySchema: output.KeySchema !== void 0 && output.KeySchema !== null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
    ProvisionedThroughput: output.ProvisionedThroughput !== void 0 && output.ProvisionedThroughput !== null ? deserializeAws_json1_0ProvisionedThroughput(output.ProvisionedThroughput, context) : void 0,
    TableArn: expectString(output.TableArn),
    TableCreationDateTime: output.TableCreationDateTime !== void 0 && output.TableCreationDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.TableCreationDateTime))) : void 0,
    TableId: expectString(output.TableId),
    TableName: expectString(output.TableName),
    TableSizeBytes: expectLong(output.TableSizeBytes)
  };
};
var deserializeAws_json1_0SourceTableFeatureDetails = function(output, context) {
  return {
    GlobalSecondaryIndexes: output.GlobalSecondaryIndexes !== void 0 && output.GlobalSecondaryIndexes !== null ? deserializeAws_json1_0GlobalSecondaryIndexes(output.GlobalSecondaryIndexes, context) : void 0,
    LocalSecondaryIndexes: output.LocalSecondaryIndexes !== void 0 && output.LocalSecondaryIndexes !== null ? deserializeAws_json1_0LocalSecondaryIndexes(output.LocalSecondaryIndexes, context) : void 0,
    SSEDescription: output.SSEDescription !== void 0 && output.SSEDescription !== null ? deserializeAws_json1_0SSEDescription(output.SSEDescription, context) : void 0,
    StreamDescription: output.StreamDescription !== void 0 && output.StreamDescription !== null ? deserializeAws_json1_0StreamSpecification(output.StreamDescription, context) : void 0,
    TimeToLiveDescription: output.TimeToLiveDescription !== void 0 && output.TimeToLiveDescription !== null ? deserializeAws_json1_0TimeToLiveDescription(output.TimeToLiveDescription, context) : void 0
  };
};
var deserializeAws_json1_0SSEDescription = function(output, context) {
  return {
    InaccessibleEncryptionDateTime: output.InaccessibleEncryptionDateTime !== void 0 && output.InaccessibleEncryptionDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.InaccessibleEncryptionDateTime))) : void 0,
    KMSMasterKeyArn: expectString(output.KMSMasterKeyArn),
    SSEType: expectString(output.SSEType),
    Status: expectString(output.Status)
  };
};
var deserializeAws_json1_0StreamSpecification = function(output, context) {
  return {
    StreamEnabled: expectBoolean(output.StreamEnabled),
    StreamViewType: expectString(output.StreamViewType)
  };
};
var deserializeAws_json1_0StringSetAttributeValue = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_json1_0TableAlreadyExistsException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0TableAutoScalingDescription = function(output, context) {
  return {
    Replicas: output.Replicas !== void 0 && output.Replicas !== null ? deserializeAws_json1_0ReplicaAutoScalingDescriptionList(output.Replicas, context) : void 0,
    TableName: expectString(output.TableName),
    TableStatus: expectString(output.TableStatus)
  };
};
var deserializeAws_json1_0TableDescription = function(output, context) {
  return {
    ArchivalSummary: output.ArchivalSummary !== void 0 && output.ArchivalSummary !== null ? deserializeAws_json1_0ArchivalSummary(output.ArchivalSummary, context) : void 0,
    AttributeDefinitions: output.AttributeDefinitions !== void 0 && output.AttributeDefinitions !== null ? deserializeAws_json1_0AttributeDefinitions(output.AttributeDefinitions, context) : void 0,
    BillingModeSummary: output.BillingModeSummary !== void 0 && output.BillingModeSummary !== null ? deserializeAws_json1_0BillingModeSummary(output.BillingModeSummary, context) : void 0,
    CreationDateTime: output.CreationDateTime !== void 0 && output.CreationDateTime !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.CreationDateTime))) : void 0,
    GlobalSecondaryIndexes: output.GlobalSecondaryIndexes !== void 0 && output.GlobalSecondaryIndexes !== null ? deserializeAws_json1_0GlobalSecondaryIndexDescriptionList(output.GlobalSecondaryIndexes, context) : void 0,
    GlobalTableVersion: expectString(output.GlobalTableVersion),
    ItemCount: expectLong(output.ItemCount),
    KeySchema: output.KeySchema !== void 0 && output.KeySchema !== null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
    LatestStreamArn: expectString(output.LatestStreamArn),
    LatestStreamLabel: expectString(output.LatestStreamLabel),
    LocalSecondaryIndexes: output.LocalSecondaryIndexes !== void 0 && output.LocalSecondaryIndexes !== null ? deserializeAws_json1_0LocalSecondaryIndexDescriptionList(output.LocalSecondaryIndexes, context) : void 0,
    ProvisionedThroughput: output.ProvisionedThroughput !== void 0 && output.ProvisionedThroughput !== null ? deserializeAws_json1_0ProvisionedThroughputDescription(output.ProvisionedThroughput, context) : void 0,
    Replicas: output.Replicas !== void 0 && output.Replicas !== null ? deserializeAws_json1_0ReplicaDescriptionList(output.Replicas, context) : void 0,
    RestoreSummary: output.RestoreSummary !== void 0 && output.RestoreSummary !== null ? deserializeAws_json1_0RestoreSummary(output.RestoreSummary, context) : void 0,
    SSEDescription: output.SSEDescription !== void 0 && output.SSEDescription !== null ? deserializeAws_json1_0SSEDescription(output.SSEDescription, context) : void 0,
    StreamSpecification: output.StreamSpecification !== void 0 && output.StreamSpecification !== null ? deserializeAws_json1_0StreamSpecification(output.StreamSpecification, context) : void 0,
    TableArn: expectString(output.TableArn),
    TableId: expectString(output.TableId),
    TableName: expectString(output.TableName),
    TableSizeBytes: expectLong(output.TableSizeBytes),
    TableStatus: expectString(output.TableStatus)
  };
};
var deserializeAws_json1_0TableInUseException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0TableNameList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_json1_0TableNotFoundException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0Tag = function(output, context) {
  return {
    Key: expectString(output.Key),
    Value: expectString(output.Value)
  };
};
var deserializeAws_json1_0TagList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0Tag(entry, context);
  });
};
var deserializeAws_json1_0TimeToLiveDescription = function(output, context) {
  return {
    AttributeName: expectString(output.AttributeName),
    TimeToLiveStatus: expectString(output.TimeToLiveStatus)
  };
};
var deserializeAws_json1_0TimeToLiveSpecification = function(output, context) {
  return {
    AttributeName: expectString(output.AttributeName),
    Enabled: expectBoolean(output.Enabled)
  };
};
var deserializeAws_json1_0TransactGetItemsOutput = function(output, context) {
  return {
    ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
    Responses: output.Responses !== void 0 && output.Responses !== null ? deserializeAws_json1_0ItemResponseList(output.Responses, context) : void 0
  };
};
var deserializeAws_json1_0TransactionCanceledException = function(output, context) {
  return {
    CancellationReasons: output.CancellationReasons !== void 0 && output.CancellationReasons !== null ? deserializeAws_json1_0CancellationReasonList(output.CancellationReasons, context) : void 0,
    Message: expectString(output.Message)
  };
};
var deserializeAws_json1_0TransactionConflictException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_0TransactionInProgressException = function(output, context) {
  return {
    Message: expectString(output.Message)
  };
};
var deserializeAws_json1_0TransactWriteItemsOutput = function(output, context) {
  return {
    ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
    ItemCollectionMetrics: output.ItemCollectionMetrics !== void 0 && output.ItemCollectionMetrics !== null ? deserializeAws_json1_0ItemCollectionMetricsPerTable(output.ItemCollectionMetrics, context) : void 0
  };
};
var deserializeAws_json1_0UpdateContinuousBackupsOutput = function(output, context) {
  return {
    ContinuousBackupsDescription: output.ContinuousBackupsDescription !== void 0 && output.ContinuousBackupsDescription !== null ? deserializeAws_json1_0ContinuousBackupsDescription(output.ContinuousBackupsDescription, context) : void 0
  };
};
var deserializeAws_json1_0UpdateContributorInsightsOutput = function(output, context) {
  return {
    ContributorInsightsStatus: expectString(output.ContributorInsightsStatus),
    IndexName: expectString(output.IndexName),
    TableName: expectString(output.TableName)
  };
};
var deserializeAws_json1_0UpdateGlobalTableOutput = function(output, context) {
  return {
    GlobalTableDescription: output.GlobalTableDescription !== void 0 && output.GlobalTableDescription !== null ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context) : void 0
  };
};
var deserializeAws_json1_0UpdateGlobalTableSettingsOutput = function(output, context) {
  return {
    GlobalTableName: expectString(output.GlobalTableName),
    ReplicaSettings: output.ReplicaSettings !== void 0 && output.ReplicaSettings !== null ? deserializeAws_json1_0ReplicaSettingsDescriptionList(output.ReplicaSettings, context) : void 0
  };
};
var deserializeAws_json1_0UpdateItemOutput = function(output, context) {
  return {
    Attributes: output.Attributes !== void 0 && output.Attributes !== null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : void 0,
    ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
    ItemCollectionMetrics: output.ItemCollectionMetrics !== void 0 && output.ItemCollectionMetrics !== null ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context) : void 0
  };
};
var deserializeAws_json1_0UpdateTableOutput = function(output, context) {
  return {
    TableDescription: output.TableDescription !== void 0 && output.TableDescription !== null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
  };
};
var deserializeAws_json1_0UpdateTableReplicaAutoScalingOutput = function(output, context) {
  return {
    TableAutoScalingDescription: output.TableAutoScalingDescription !== void 0 && output.TableAutoScalingDescription !== null ? deserializeAws_json1_0TableAutoScalingDescription(output.TableAutoScalingDescription, context) : void 0
  };
};
var deserializeAws_json1_0UpdateTimeToLiveOutput = function(output, context) {
  return {
    TimeToLiveSpecification: output.TimeToLiveSpecification !== void 0 && output.TimeToLiveSpecification !== null ? deserializeAws_json1_0TimeToLiveSpecification(output.TimeToLiveSpecification, context) : void 0
  };
};
var deserializeAws_json1_0WriteRequest = function(output, context) {
  return {
    DeleteRequest: output.DeleteRequest !== void 0 && output.DeleteRequest !== null ? deserializeAws_json1_0DeleteRequest(output.DeleteRequest, context) : void 0,
    PutRequest: output.PutRequest !== void 0 && output.PutRequest !== null ? deserializeAws_json1_0PutRequest(output.PutRequest, context) : void 0
  };
};
var deserializeAws_json1_0WriteRequests = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_0WriteRequest(entry, context);
  });
};
var deserializeMetadata = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function(streamBody, context) {
  return collectBody(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var buildHttpRpcRequest = function(context, headers, path, resolvedHostname, body) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          contents = {
            protocol,
            hostname,
            port,
            method: "POST",
            path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
            headers
          };
          if (resolvedHostname !== void 0) {
            contents.hostname = resolvedHostname;
          }
          if (body !== void 0) {
            contents.body = body;
          }
          return [2, new HttpRequest(contents)];
      }
    });
  });
};
var parseBody = function(streamBody, context) {
  return collectBodyString(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });
};
var loadRestJsonErrorCode = function(output, data) {
  var findKey = function(object, key) {
    return Object.keys(object).find(function(k) {
      return k.toLowerCase() === key.toLowerCase();
    });
  };
  var sanitizeErrorCode = function(rawValue) {
    var cleanValue = rawValue;
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  var headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
  return "";
};

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/BatchExecuteStatementCommand.js
var BatchExecuteStatementCommand = function(_super) {
  __extends(BatchExecuteStatementCommand2, _super);
  function BatchExecuteStatementCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  BatchExecuteStatementCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "BatchExecuteStatementCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: BatchExecuteStatementInput.filterSensitiveLog,
      outputFilterSensitiveLog: BatchExecuteStatementOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  BatchExecuteStatementCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0BatchExecuteStatementCommand(input, context);
  };
  BatchExecuteStatementCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0BatchExecuteStatementCommand(output, context);
  };
  return BatchExecuteStatementCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/BatchGetItemCommand.js
var BatchGetItemCommand = function(_super) {
  __extends(BatchGetItemCommand2, _super);
  function BatchGetItemCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  BatchGetItemCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "BatchGetItemCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: BatchGetItemInput.filterSensitiveLog,
      outputFilterSensitiveLog: BatchGetItemOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  BatchGetItemCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0BatchGetItemCommand(input, context);
  };
  BatchGetItemCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0BatchGetItemCommand(output, context);
  };
  return BatchGetItemCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/BatchWriteItemCommand.js
var BatchWriteItemCommand = function(_super) {
  __extends(BatchWriteItemCommand2, _super);
  function BatchWriteItemCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  BatchWriteItemCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "BatchWriteItemCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: BatchWriteItemInput.filterSensitiveLog,
      outputFilterSensitiveLog: BatchWriteItemOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  BatchWriteItemCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0BatchWriteItemCommand(input, context);
  };
  BatchWriteItemCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0BatchWriteItemCommand(output, context);
  };
  return BatchWriteItemCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/CreateBackupCommand.js
var CreateBackupCommand = function(_super) {
  __extends(CreateBackupCommand2, _super);
  function CreateBackupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateBackupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "CreateBackupCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateBackupInput.filterSensitiveLog,
      outputFilterSensitiveLog: CreateBackupOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateBackupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0CreateBackupCommand(input, context);
  };
  CreateBackupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0CreateBackupCommand(output, context);
  };
  return CreateBackupCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/CreateGlobalTableCommand.js
var CreateGlobalTableCommand = function(_super) {
  __extends(CreateGlobalTableCommand2, _super);
  function CreateGlobalTableCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateGlobalTableCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "CreateGlobalTableCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateGlobalTableInput.filterSensitiveLog,
      outputFilterSensitiveLog: CreateGlobalTableOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateGlobalTableCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0CreateGlobalTableCommand(input, context);
  };
  CreateGlobalTableCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0CreateGlobalTableCommand(output, context);
  };
  return CreateGlobalTableCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/CreateTableCommand.js
var CreateTableCommand = function(_super) {
  __extends(CreateTableCommand2, _super);
  function CreateTableCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateTableCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "CreateTableCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateTableInput.filterSensitiveLog,
      outputFilterSensitiveLog: CreateTableOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateTableCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0CreateTableCommand(input, context);
  };
  CreateTableCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0CreateTableCommand(output, context);
  };
  return CreateTableCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DeleteBackupCommand.js
var DeleteBackupCommand = function(_super) {
  __extends(DeleteBackupCommand2, _super);
  function DeleteBackupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteBackupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DeleteBackupCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteBackupInput.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteBackupOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteBackupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DeleteBackupCommand(input, context);
  };
  DeleteBackupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DeleteBackupCommand(output, context);
  };
  return DeleteBackupCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DeleteItemCommand.js
var DeleteItemCommand = function(_super) {
  __extends(DeleteItemCommand2, _super);
  function DeleteItemCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteItemCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DeleteItemCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteItemInput.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteItemOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteItemCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DeleteItemCommand(input, context);
  };
  DeleteItemCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DeleteItemCommand(output, context);
  };
  return DeleteItemCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DeleteTableCommand.js
var DeleteTableCommand = function(_super) {
  __extends(DeleteTableCommand2, _super);
  function DeleteTableCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteTableCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DeleteTableCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteTableInput.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteTableOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteTableCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DeleteTableCommand(input, context);
  };
  DeleteTableCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DeleteTableCommand(output, context);
  };
  return DeleteTableCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeBackupCommand.js
var DescribeBackupCommand = function(_super) {
  __extends(DescribeBackupCommand2, _super);
  function DescribeBackupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeBackupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DescribeBackupCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeBackupInput.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeBackupOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeBackupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DescribeBackupCommand(input, context);
  };
  DescribeBackupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DescribeBackupCommand(output, context);
  };
  return DescribeBackupCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeContinuousBackupsCommand.js
var DescribeContinuousBackupsCommand = function(_super) {
  __extends(DescribeContinuousBackupsCommand2, _super);
  function DescribeContinuousBackupsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeContinuousBackupsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DescribeContinuousBackupsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeContinuousBackupsInput.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeContinuousBackupsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeContinuousBackupsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DescribeContinuousBackupsCommand(input, context);
  };
  DescribeContinuousBackupsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DescribeContinuousBackupsCommand(output, context);
  };
  return DescribeContinuousBackupsCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeContributorInsightsCommand.js
var DescribeContributorInsightsCommand = function(_super) {
  __extends(DescribeContributorInsightsCommand2, _super);
  function DescribeContributorInsightsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeContributorInsightsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DescribeContributorInsightsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeContributorInsightsInput.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeContributorInsightsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeContributorInsightsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DescribeContributorInsightsCommand(input, context);
  };
  DescribeContributorInsightsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DescribeContributorInsightsCommand(output, context);
  };
  return DescribeContributorInsightsCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeEndpointsCommand.js
var DescribeEndpointsCommand = function(_super) {
  __extends(DescribeEndpointsCommand2, _super);
  function DescribeEndpointsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeEndpointsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DescribeEndpointsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeEndpointsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeEndpointsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeEndpointsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DescribeEndpointsCommand(input, context);
  };
  DescribeEndpointsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DescribeEndpointsCommand(output, context);
  };
  return DescribeEndpointsCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeExportCommand.js
var DescribeExportCommand = function(_super) {
  __extends(DescribeExportCommand2, _super);
  function DescribeExportCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeExportCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DescribeExportCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeExportInput.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeExportOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeExportCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DescribeExportCommand(input, context);
  };
  DescribeExportCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DescribeExportCommand(output, context);
  };
  return DescribeExportCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeGlobalTableCommand.js
var DescribeGlobalTableCommand = function(_super) {
  __extends(DescribeGlobalTableCommand2, _super);
  function DescribeGlobalTableCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeGlobalTableCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DescribeGlobalTableCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeGlobalTableInput.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeGlobalTableOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeGlobalTableCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DescribeGlobalTableCommand(input, context);
  };
  DescribeGlobalTableCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DescribeGlobalTableCommand(output, context);
  };
  return DescribeGlobalTableCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeGlobalTableSettingsCommand.js
var DescribeGlobalTableSettingsCommand = function(_super) {
  __extends(DescribeGlobalTableSettingsCommand2, _super);
  function DescribeGlobalTableSettingsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeGlobalTableSettingsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DescribeGlobalTableSettingsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeGlobalTableSettingsInput.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeGlobalTableSettingsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeGlobalTableSettingsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DescribeGlobalTableSettingsCommand(input, context);
  };
  DescribeGlobalTableSettingsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DescribeGlobalTableSettingsCommand(output, context);
  };
  return DescribeGlobalTableSettingsCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeKinesisStreamingDestinationCommand.js
var DescribeKinesisStreamingDestinationCommand = function(_super) {
  __extends(DescribeKinesisStreamingDestinationCommand2, _super);
  function DescribeKinesisStreamingDestinationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeKinesisStreamingDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DescribeKinesisStreamingDestinationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeKinesisStreamingDestinationInput.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeKinesisStreamingDestinationOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeKinesisStreamingDestinationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DescribeKinesisStreamingDestinationCommand(input, context);
  };
  DescribeKinesisStreamingDestinationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand(output, context);
  };
  return DescribeKinesisStreamingDestinationCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeLimitsCommand.js
var DescribeLimitsCommand = function(_super) {
  __extends(DescribeLimitsCommand3, _super);
  function DescribeLimitsCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeLimitsCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DescribeLimitsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeLimitsInput.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeLimitsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeLimitsCommand3.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DescribeLimitsCommand(input, context);
  };
  DescribeLimitsCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DescribeLimitsCommand(output, context);
  };
  return DescribeLimitsCommand3;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeTableCommand.js
var DescribeTableCommand = function(_super) {
  __extends(DescribeTableCommand2, _super);
  function DescribeTableCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeTableCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DescribeTableCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeTableInput.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeTableOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeTableCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DescribeTableCommand(input, context);
  };
  DescribeTableCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DescribeTableCommand(output, context);
  };
  return DescribeTableCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeTableReplicaAutoScalingCommand.js
var DescribeTableReplicaAutoScalingCommand = function(_super) {
  __extends(DescribeTableReplicaAutoScalingCommand2, _super);
  function DescribeTableReplicaAutoScalingCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeTableReplicaAutoScalingCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DescribeTableReplicaAutoScalingCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeTableReplicaAutoScalingInput.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeTableReplicaAutoScalingOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeTableReplicaAutoScalingCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DescribeTableReplicaAutoScalingCommand(input, context);
  };
  DescribeTableReplicaAutoScalingCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand(output, context);
  };
  return DescribeTableReplicaAutoScalingCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeTimeToLiveCommand.js
var DescribeTimeToLiveCommand = function(_super) {
  __extends(DescribeTimeToLiveCommand2, _super);
  function DescribeTimeToLiveCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeTimeToLiveCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DescribeTimeToLiveCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeTimeToLiveInput.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeTimeToLiveOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeTimeToLiveCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DescribeTimeToLiveCommand(input, context);
  };
  DescribeTimeToLiveCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DescribeTimeToLiveCommand(output, context);
  };
  return DescribeTimeToLiveCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DisableKinesisStreamingDestinationCommand.js
var DisableKinesisStreamingDestinationCommand = function(_super) {
  __extends(DisableKinesisStreamingDestinationCommand2, _super);
  function DisableKinesisStreamingDestinationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DisableKinesisStreamingDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "DisableKinesisStreamingDestinationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: KinesisStreamingDestinationInput.filterSensitiveLog,
      outputFilterSensitiveLog: KinesisStreamingDestinationOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DisableKinesisStreamingDestinationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0DisableKinesisStreamingDestinationCommand(input, context);
  };
  DisableKinesisStreamingDestinationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0DisableKinesisStreamingDestinationCommand(output, context);
  };
  return DisableKinesisStreamingDestinationCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/EnableKinesisStreamingDestinationCommand.js
var EnableKinesisStreamingDestinationCommand = function(_super) {
  __extends(EnableKinesisStreamingDestinationCommand2, _super);
  function EnableKinesisStreamingDestinationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  EnableKinesisStreamingDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "EnableKinesisStreamingDestinationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: KinesisStreamingDestinationInput.filterSensitiveLog,
      outputFilterSensitiveLog: KinesisStreamingDestinationOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  EnableKinesisStreamingDestinationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0EnableKinesisStreamingDestinationCommand(input, context);
  };
  EnableKinesisStreamingDestinationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0EnableKinesisStreamingDestinationCommand(output, context);
  };
  return EnableKinesisStreamingDestinationCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ExecuteStatementCommand.js
var ExecuteStatementCommand = function(_super) {
  __extends(ExecuteStatementCommand2, _super);
  function ExecuteStatementCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ExecuteStatementCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "ExecuteStatementCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ExecuteStatementInput.filterSensitiveLog,
      outputFilterSensitiveLog: ExecuteStatementOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ExecuteStatementCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0ExecuteStatementCommand(input, context);
  };
  ExecuteStatementCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0ExecuteStatementCommand(output, context);
  };
  return ExecuteStatementCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ExecuteTransactionCommand.js
var ExecuteTransactionCommand = function(_super) {
  __extends(ExecuteTransactionCommand2, _super);
  function ExecuteTransactionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ExecuteTransactionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "ExecuteTransactionCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ExecuteTransactionInput.filterSensitiveLog,
      outputFilterSensitiveLog: ExecuteTransactionOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ExecuteTransactionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0ExecuteTransactionCommand(input, context);
  };
  ExecuteTransactionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0ExecuteTransactionCommand(output, context);
  };
  return ExecuteTransactionCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ExportTableToPointInTimeCommand.js
var ExportTableToPointInTimeCommand = function(_super) {
  __extends(ExportTableToPointInTimeCommand2, _super);
  function ExportTableToPointInTimeCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ExportTableToPointInTimeCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "ExportTableToPointInTimeCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ExportTableToPointInTimeInput.filterSensitiveLog,
      outputFilterSensitiveLog: ExportTableToPointInTimeOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ExportTableToPointInTimeCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0ExportTableToPointInTimeCommand(input, context);
  };
  ExportTableToPointInTimeCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0ExportTableToPointInTimeCommand(output, context);
  };
  return ExportTableToPointInTimeCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/GetItemCommand.js
var GetItemCommand = function(_super) {
  __extends(GetItemCommand2, _super);
  function GetItemCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetItemCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "GetItemCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetItemInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetItemOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetItemCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0GetItemCommand(input, context);
  };
  GetItemCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0GetItemCommand(output, context);
  };
  return GetItemCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ListBackupsCommand.js
var ListBackupsCommand = function(_super) {
  __extends(ListBackupsCommand2, _super);
  function ListBackupsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListBackupsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "ListBackupsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListBackupsInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListBackupsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListBackupsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0ListBackupsCommand(input, context);
  };
  ListBackupsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0ListBackupsCommand(output, context);
  };
  return ListBackupsCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ListContributorInsightsCommand.js
var ListContributorInsightsCommand = function(_super) {
  __extends(ListContributorInsightsCommand2, _super);
  function ListContributorInsightsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListContributorInsightsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "ListContributorInsightsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListContributorInsightsInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListContributorInsightsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListContributorInsightsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0ListContributorInsightsCommand(input, context);
  };
  ListContributorInsightsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0ListContributorInsightsCommand(output, context);
  };
  return ListContributorInsightsCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ListExportsCommand.js
var ListExportsCommand = function(_super) {
  __extends(ListExportsCommand2, _super);
  function ListExportsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListExportsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "ListExportsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListExportsInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListExportsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListExportsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0ListExportsCommand(input, context);
  };
  ListExportsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0ListExportsCommand(output, context);
  };
  return ListExportsCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ListGlobalTablesCommand.js
var ListGlobalTablesCommand = function(_super) {
  __extends(ListGlobalTablesCommand2, _super);
  function ListGlobalTablesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListGlobalTablesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "ListGlobalTablesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListGlobalTablesInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListGlobalTablesOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListGlobalTablesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0ListGlobalTablesCommand(input, context);
  };
  ListGlobalTablesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0ListGlobalTablesCommand(output, context);
  };
  return ListGlobalTablesCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ListTablesCommand.js
var ListTablesCommand = function(_super) {
  __extends(ListTablesCommand2, _super);
  function ListTablesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListTablesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "ListTablesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListTablesInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListTablesOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListTablesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0ListTablesCommand(input, context);
  };
  ListTablesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0ListTablesCommand(output, context);
  };
  return ListTablesCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ListTagsOfResourceCommand.js
var ListTagsOfResourceCommand = function(_super) {
  __extends(ListTagsOfResourceCommand2, _super);
  function ListTagsOfResourceCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListTagsOfResourceCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "ListTagsOfResourceCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListTagsOfResourceInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListTagsOfResourceOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListTagsOfResourceCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0ListTagsOfResourceCommand(input, context);
  };
  ListTagsOfResourceCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0ListTagsOfResourceCommand(output, context);
  };
  return ListTagsOfResourceCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/PutItemCommand.js
var PutItemCommand = function(_super) {
  __extends(PutItemCommand2, _super);
  function PutItemCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutItemCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "PutItemCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutItemInput.filterSensitiveLog,
      outputFilterSensitiveLog: PutItemOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutItemCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0PutItemCommand(input, context);
  };
  PutItemCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0PutItemCommand(output, context);
  };
  return PutItemCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/QueryCommand.js
var QueryCommand = function(_super) {
  __extends(QueryCommand2, _super);
  function QueryCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  QueryCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "QueryCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: QueryInput.filterSensitiveLog,
      outputFilterSensitiveLog: QueryOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  QueryCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0QueryCommand(input, context);
  };
  QueryCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0QueryCommand(output, context);
  };
  return QueryCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/RestoreTableFromBackupCommand.js
var RestoreTableFromBackupCommand = function(_super) {
  __extends(RestoreTableFromBackupCommand2, _super);
  function RestoreTableFromBackupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  RestoreTableFromBackupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "RestoreTableFromBackupCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: RestoreTableFromBackupInput.filterSensitiveLog,
      outputFilterSensitiveLog: RestoreTableFromBackupOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  RestoreTableFromBackupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0RestoreTableFromBackupCommand(input, context);
  };
  RestoreTableFromBackupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0RestoreTableFromBackupCommand(output, context);
  };
  return RestoreTableFromBackupCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/RestoreTableToPointInTimeCommand.js
var RestoreTableToPointInTimeCommand = function(_super) {
  __extends(RestoreTableToPointInTimeCommand2, _super);
  function RestoreTableToPointInTimeCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  RestoreTableToPointInTimeCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "RestoreTableToPointInTimeCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: RestoreTableToPointInTimeInput.filterSensitiveLog,
      outputFilterSensitiveLog: RestoreTableToPointInTimeOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  RestoreTableToPointInTimeCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0RestoreTableToPointInTimeCommand(input, context);
  };
  RestoreTableToPointInTimeCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0RestoreTableToPointInTimeCommand(output, context);
  };
  return RestoreTableToPointInTimeCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ScanCommand.js
var ScanCommand = function(_super) {
  __extends(ScanCommand2, _super);
  function ScanCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ScanCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "ScanCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ScanInput.filterSensitiveLog,
      outputFilterSensitiveLog: ScanOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ScanCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0ScanCommand(input, context);
  };
  ScanCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0ScanCommand(output, context);
  };
  return ScanCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/TagResourceCommand.js
var TagResourceCommand = function(_super) {
  __extends(TagResourceCommand3, _super);
  function TagResourceCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TagResourceCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "TagResourceCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: TagResourceInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TagResourceCommand3.prototype.serialize = function(input, context) {
    return serializeAws_json1_0TagResourceCommand(input, context);
  };
  TagResourceCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0TagResourceCommand(output, context);
  };
  return TagResourceCommand3;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/TransactGetItemsCommand.js
var TransactGetItemsCommand = function(_super) {
  __extends(TransactGetItemsCommand2, _super);
  function TransactGetItemsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TransactGetItemsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "TransactGetItemsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: TransactGetItemsInput.filterSensitiveLog,
      outputFilterSensitiveLog: TransactGetItemsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TransactGetItemsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0TransactGetItemsCommand(input, context);
  };
  TransactGetItemsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0TransactGetItemsCommand(output, context);
  };
  return TransactGetItemsCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/TransactWriteItemsCommand.js
var TransactWriteItemsCommand = function(_super) {
  __extends(TransactWriteItemsCommand2, _super);
  function TransactWriteItemsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TransactWriteItemsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "TransactWriteItemsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: TransactWriteItemsInput.filterSensitiveLog,
      outputFilterSensitiveLog: TransactWriteItemsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TransactWriteItemsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0TransactWriteItemsCommand(input, context);
  };
  TransactWriteItemsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0TransactWriteItemsCommand(output, context);
  };
  return TransactWriteItemsCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UntagResourceCommand.js
var UntagResourceCommand = function(_super) {
  __extends(UntagResourceCommand3, _super);
  function UntagResourceCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UntagResourceCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "UntagResourceCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UntagResourceInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UntagResourceCommand3.prototype.serialize = function(input, context) {
    return serializeAws_json1_0UntagResourceCommand(input, context);
  };
  UntagResourceCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0UntagResourceCommand(output, context);
  };
  return UntagResourceCommand3;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateContinuousBackupsCommand.js
var UpdateContinuousBackupsCommand = function(_super) {
  __extends(UpdateContinuousBackupsCommand2, _super);
  function UpdateContinuousBackupsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateContinuousBackupsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "UpdateContinuousBackupsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateContinuousBackupsInput.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateContinuousBackupsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateContinuousBackupsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0UpdateContinuousBackupsCommand(input, context);
  };
  UpdateContinuousBackupsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0UpdateContinuousBackupsCommand(output, context);
  };
  return UpdateContinuousBackupsCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateContributorInsightsCommand.js
var UpdateContributorInsightsCommand = function(_super) {
  __extends(UpdateContributorInsightsCommand2, _super);
  function UpdateContributorInsightsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateContributorInsightsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "UpdateContributorInsightsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateContributorInsightsInput.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateContributorInsightsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateContributorInsightsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0UpdateContributorInsightsCommand(input, context);
  };
  UpdateContributorInsightsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0UpdateContributorInsightsCommand(output, context);
  };
  return UpdateContributorInsightsCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateGlobalTableCommand.js
var UpdateGlobalTableCommand = function(_super) {
  __extends(UpdateGlobalTableCommand2, _super);
  function UpdateGlobalTableCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateGlobalTableCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "UpdateGlobalTableCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateGlobalTableInput.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateGlobalTableOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateGlobalTableCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0UpdateGlobalTableCommand(input, context);
  };
  UpdateGlobalTableCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0UpdateGlobalTableCommand(output, context);
  };
  return UpdateGlobalTableCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateGlobalTableSettingsCommand.js
var UpdateGlobalTableSettingsCommand = function(_super) {
  __extends(UpdateGlobalTableSettingsCommand2, _super);
  function UpdateGlobalTableSettingsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateGlobalTableSettingsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "UpdateGlobalTableSettingsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateGlobalTableSettingsInput.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateGlobalTableSettingsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateGlobalTableSettingsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0UpdateGlobalTableSettingsCommand(input, context);
  };
  UpdateGlobalTableSettingsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0UpdateGlobalTableSettingsCommand(output, context);
  };
  return UpdateGlobalTableSettingsCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateItemCommand.js
var UpdateItemCommand = function(_super) {
  __extends(UpdateItemCommand2, _super);
  function UpdateItemCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateItemCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "UpdateItemCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateItemInput.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateItemOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateItemCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0UpdateItemCommand(input, context);
  };
  UpdateItemCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0UpdateItemCommand(output, context);
  };
  return UpdateItemCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateTableCommand.js
var UpdateTableCommand = function(_super) {
  __extends(UpdateTableCommand2, _super);
  function UpdateTableCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateTableCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "UpdateTableCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateTableInput.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateTableOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateTableCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0UpdateTableCommand(input, context);
  };
  UpdateTableCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0UpdateTableCommand(output, context);
  };
  return UpdateTableCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateTableReplicaAutoScalingCommand.js
var UpdateTableReplicaAutoScalingCommand = function(_super) {
  __extends(UpdateTableReplicaAutoScalingCommand2, _super);
  function UpdateTableReplicaAutoScalingCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateTableReplicaAutoScalingCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "UpdateTableReplicaAutoScalingCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateTableReplicaAutoScalingInput.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateTableReplicaAutoScalingOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateTableReplicaAutoScalingCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0UpdateTableReplicaAutoScalingCommand(input, context);
  };
  UpdateTableReplicaAutoScalingCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand(output, context);
  };
  return UpdateTableReplicaAutoScalingCommand2;
}(Command);

// node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateTimeToLiveCommand.js
var UpdateTimeToLiveCommand = function(_super) {
  __extends(UpdateTimeToLiveCommand2, _super);
  function UpdateTimeToLiveCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateTimeToLiveCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "DynamoDBClient";
    var commandName = "UpdateTimeToLiveCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateTimeToLiveInput.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateTimeToLiveOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateTimeToLiveCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_0UpdateTimeToLiveCommand(input, context);
  };
  UpdateTimeToLiveCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_0UpdateTimeToLiveCommand(output, context);
  };
  return UpdateTimeToLiveCommand2;
}(Command);

// node_modules/@aws-sdk/util-config-provider/dist-es/booleanSelector.js
var SelectorType;
(function(SelectorType2) {
  SelectorType2["ENV"] = "env";
  SelectorType2["CONFIG"] = "shared config entry";
})(SelectorType || (SelectorType = {}));

// node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var DEFAULT_USE_DUALSTACK_ENDPOINT = false;

// node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var DEFAULT_USE_FIPS_ENDPOINT = false;

// node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/normalizeBoolean.js
var normalizeBoolean = function(value) {
  if (typeof value === "boolean") {
    var promisified_1 = Promise.resolve(value);
    return function() {
      return promisified_1;
    };
  }
  return value;
};

// node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/normalizeEndpoint.js
var normalizeEndpoint = function(_a) {
  var endpoint = _a.endpoint, urlParser = _a.urlParser;
  if (typeof endpoint === "string") {
    var promisified_1 = Promise.resolve(urlParser(endpoint));
    return function() {
      return promisified_1;
    };
  } else if (typeof endpoint === "object") {
    var promisified_2 = Promise.resolve(endpoint);
    return function() {
      return promisified_2;
    };
  }
  return endpoint;
};

// node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js
var getEndpointFromRegion = function(input) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, tls, region, dnsHostRegex, useDualstackEndpoint, useFipsEndpoint, hostname;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = input.tls, tls = _a === void 0 ? true : _a;
          return [4, input.region()];
        case 1:
          region = _c.sent();
          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
          if (!dnsHostRegex.test(region)) {
            throw new Error("Invalid region in client config");
          }
          return [4, input.useDualstackEndpoint()];
        case 2:
          useDualstackEndpoint = _c.sent();
          return [4, input.useFipsEndpoint()];
        case 3:
          useFipsEndpoint = _c.sent();
          return [4, input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })];
        case 4:
          hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;
          if (!hostname) {
            throw new Error("Cannot resolve hostname from client config");
          }
          return [2, input.urlParser((tls ? "https:" : "http:") + "//" + hostname)];
      }
    });
  });
};

// node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js
var resolveEndpointsConfig = function(input) {
  var _a;
  var useDualstackEndpoint = normalizeBoolean(input.useDualstackEndpoint);
  var endpoint = input.endpoint, useFipsEndpoint = input.useFipsEndpoint;
  return __assign(__assign({}, input), { tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true, endpoint: endpoint ? normalizeEndpoint(__assign(__assign({}, input), { endpoint })) : function() {
    return getEndpointFromRegion(__assign(__assign({}, input), { useDualstackEndpoint, useFipsEndpoint }));
  }, isCustomEndpoint: endpoint ? true : false, useDualstackEndpoint });
};

// node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/isFipsRegion.js
var isFipsRegion = function(region) {
  return typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
};

// node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/getRealRegion.js
var getRealRegion = function(region) {
  return isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
};

// node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/resolveRegionConfig.js
var resolveRegionConfig = function(input) {
  var region = input.region, useFipsEndpoint = input.useFipsEndpoint;
  if (!region) {
    throw new Error("Region is missing");
  }
  return __assign(__assign({}, input), { region: function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var providedRegion;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (typeof region === "string") {
              return [2, getRealRegion(region)];
            }
            return [4, region()];
          case 1:
            providedRegion = _a.sent();
            return [2, getRealRegion(providedRegion)];
        }
      });
    });
  }, useFipsEndpoint: function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var providedRegion, _a;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (!(typeof region === "string"))
              return [3, 1];
            _a = region;
            return [3, 3];
          case 1:
            return [4, region()];
          case 2:
            _a = _b.sent();
            _b.label = 3;
          case 3:
            providedRegion = _a;
            if (isFipsRegion(providedRegion)) {
              return [2, true];
            }
            return [2, typeof useFipsEndpoint === "boolean" ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint()];
        }
      });
    });
  } });
};

// node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getHostnameFromVariants.js
var getHostnameFromVariants = function(variants, _a) {
  var _b;
  if (variants === void 0) {
    variants = [];
  }
  var useFipsEndpoint = _a.useFipsEndpoint, useDualstackEndpoint = _a.useDualstackEndpoint;
  return (_b = variants.find(function(_a2) {
    var tags = _a2.tags;
    return useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack");
  })) === null || _b === void 0 ? void 0 : _b.hostname;
};

// node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedHostname.js
var getResolvedHostname = function(resolvedRegion, _a) {
  var regionHostname = _a.regionHostname, partitionHostname = _a.partitionHostname;
  return regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0;
};

// node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedPartition.js
var getResolvedPartition = function(region, _a) {
  var _b;
  var partitionHash7 = _a.partitionHash;
  return (_b = Object.keys(partitionHash7 || {}).find(function(key) {
    return partitionHash7[key].regions.includes(region);
  })) !== null && _b !== void 0 ? _b : "aws";
};

// node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedSigningRegion.js
var getResolvedSigningRegion = function(hostname, _a) {
  var signingRegion = _a.signingRegion, regionRegex = _a.regionRegex, useFipsEndpoint = _a.useFipsEndpoint;
  if (signingRegion) {
    return signingRegion;
  } else if (useFipsEndpoint) {
    var regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
    var regionRegexmatchArray = hostname.match(regionRegexJs);
    if (regionRegexmatchArray) {
      return regionRegexmatchArray[0].slice(1, -1);
    }
  }
};

// node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getRegionInfo.js
var getRegionInfo = function(region, _a) {
  var _b, _c, _d, _e, _f, _g;
  var _h = _a.useFipsEndpoint, useFipsEndpoint = _h === void 0 ? false : _h, _j = _a.useDualstackEndpoint, useDualstackEndpoint = _j === void 0 ? false : _j, signingService = _a.signingService, regionHash7 = _a.regionHash, partitionHash7 = _a.partitionHash;
  var partition = getResolvedPartition(region, { partitionHash: partitionHash7 });
  var resolvedRegion = region in regionHash7 ? region : (_c = (_b = partitionHash7[partition]) === null || _b === void 0 ? void 0 : _b.endpoint) !== null && _c !== void 0 ? _c : region;
  var hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
  var regionHostname = getHostnameFromVariants((_d = regionHash7[resolvedRegion]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
  var partitionHostname = getHostnameFromVariants((_e = partitionHash7[partition]) === null || _e === void 0 ? void 0 : _e.variants, hostnameOptions);
  var hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });
  if (hostname === void 0) {
    throw new Error("Endpoint resolution failed for: " + { resolvedRegion, useFipsEndpoint, useDualstackEndpoint });
  }
  var signingRegion = getResolvedSigningRegion(hostname, {
    signingRegion: (_f = regionHash7[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingRegion,
    regionRegex: partitionHash7[partition].regionRegex,
    useFipsEndpoint
  });
  return __assign(__assign({ partition, signingService, hostname }, signingRegion && { signingRegion }), ((_g = regionHash7[resolvedRegion]) === null || _g === void 0 ? void 0 : _g.signingService) && {
    signingService: regionHash7[resolvedRegion].signingService
  });
};

// node_modules/@aws-sdk/middleware-content-length/dist-es/index.js
var CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
  var _this = this;
  return function(next) {
    return function(args) {
      return __awaiter(_this, void 0, void 0, function() {
        var request, body, headers, length;
        var _a;
        return __generator(this, function(_b) {
          request = args.request;
          if (HttpRequest.isInstance(request)) {
            body = request.body, headers = request.headers;
            if (body && Object.keys(headers).map(function(str) {
              return str.toLowerCase();
            }).indexOf(CONTENT_LENGTH_HEADER) === -1) {
              length = bodyLengthChecker(body);
              if (length !== void 0) {
                request.headers = __assign(__assign({}, request.headers), (_a = {}, _a[CONTENT_LENGTH_HEADER] = String(length), _a));
              }
            }
          }
          return [2, next(__assign(__assign({}, args), { request }))];
        });
      });
    };
  };
}
var contentLengthMiddlewareOptions = {
  step: "build",
  tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
  name: "contentLengthMiddleware",
  override: true
};
var getContentLengthPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/endpoint-cache/dist-es/EndpointCache.js
var import_lru_cache = __toModule(require_lru_cache());
var EndpointCache = function() {
  function EndpointCache2(capacity) {
    this.cache = new import_lru_cache.default(capacity);
  }
  EndpointCache2.prototype.getEndpoint = function(key) {
    var endpointsWithExpiry = this.get(key);
    if (!endpointsWithExpiry || endpointsWithExpiry.length === 0) {
      return void 0;
    }
    var endpoints = endpointsWithExpiry.map(function(endpoint) {
      return endpoint.Address;
    });
    return endpoints[Math.floor(Math.random() * endpoints.length)];
  };
  EndpointCache2.prototype.get = function(key) {
    if (!this.has(key)) {
      return;
    }
    var value = this.cache.get(key);
    if (!value) {
      return;
    }
    var now = Date.now();
    var endpointsWithExpiry = value.filter(function(endpoint) {
      return now < endpoint.Expires;
    });
    if (endpointsWithExpiry.length === 0) {
      this.delete(key);
      return void 0;
    }
    return endpointsWithExpiry;
  };
  EndpointCache2.prototype.set = function(key, endpoints) {
    var now = Date.now();
    this.cache.set(key, endpoints.map(function(_a) {
      var Address = _a.Address, CachePeriodInMinutes = _a.CachePeriodInMinutes;
      return {
        Address,
        Expires: now + CachePeriodInMinutes * 60 * 1e3
      };
    }));
  };
  EndpointCache2.prototype.delete = function(key) {
    this.cache.set(key, []);
  };
  EndpointCache2.prototype.has = function(key) {
    if (!this.cache.has(key)) {
      return false;
    }
    var endpoints = this.cache.peek(key);
    if (!endpoints) {
      return false;
    }
    return endpoints.length > 0;
  };
  EndpointCache2.prototype.clear = function() {
    this.cache.clear();
  };
  return EndpointCache2;
}();

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-es/resolveEndpointDiscoveryConfig.js
var resolveEndpointDiscoveryConfig = function(input, _a) {
  var _b;
  var endpointDiscoveryCommandCtor = _a.endpointDiscoveryCommandCtor;
  return __assign(__assign({}, input), { endpointDiscoveryCommandCtor, endpointCache: new EndpointCache((_b = input.endpointCacheSize) !== null && _b !== void 0 ? _b : 1e3), endpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== void 0 ? function() {
    return Promise.resolve(input.endpointDiscoveryEnabled);
  } : input.endpointDiscoveryEnabledProvider, isClientEndpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== void 0 });
};

// node_modules/@aws-sdk/middleware-host-header/dist-es/index.js
function resolveHostHeaderConfig(input) {
  return input;
}
var hostHeaderMiddleware = function(options) {
  return function(next) {
    return function(args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var request, _a, handlerProtocol;
        return __generator(this, function(_b) {
          if (!HttpRequest.isInstance(args.request))
            return [2, next(args)];
          request = args.request;
          _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? "" : _a;
          if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
            delete request.headers["host"];
            request.headers[":authority"] = "";
          } else if (!request.headers["host"]) {
            request.headers["host"] = request.hostname;
          }
          return [2, next(args)];
        });
      });
    };
  };
};
var hostHeaderMiddlewareOptions = {
  name: "hostHeaderMiddleware",
  step: "build",
  priority: "low",
  tags: ["HOST"],
  override: true
};
var getHostHeaderPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js
var loggerMiddleware = function() {
  return function(next, context) {
    return function(args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;
              return [4, next(args)];
            case 1:
              response = _b.sent();
              if (!logger) {
                return [2, response];
              }
              if (typeof logger.info === "function") {
                _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest(_a, ["$metadata"]);
                logger.info({
                  clientName,
                  commandName,
                  input: inputFilterSensitiveLog(args.input),
                  output: outputFilterSensitiveLog(outputWithoutMetadata),
                  metadata: $metadata
                });
              }
              return [2, response];
          }
        });
      });
    };
  };
};
var loggerMiddlewareOptions = {
  name: "loggerMiddleware",
  tags: ["LOGGER"],
  step: "initialize",
  override: true
};
var getLoggerPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-retry/dist-es/config.js
var RETRY_MODES;
(function(RETRY_MODES2) {
  RETRY_MODES2["STANDARD"] = "standard";
  RETRY_MODES2["ADAPTIVE"] = "adaptive";
})(RETRY_MODES || (RETRY_MODES = {}));
var DEFAULT_MAX_ATTEMPTS = 3;
var DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;

// node_modules/@aws-sdk/service-error-classification/dist-es/constants.js
var CLOCK_SKEW_ERROR_CODES = [
  "AuthFailure",
  "InvalidSignatureException",
  "RequestExpired",
  "RequestInTheFuture",
  "RequestTimeTooSkewed",
  "SignatureDoesNotMatch"
];
var THROTTLING_ERROR_CODES = [
  "BandwidthLimitExceeded",
  "EC2ThrottledException",
  "LimitExceededException",
  "PriorRequestNotComplete",
  "ProvisionedThroughputExceededException",
  "RequestLimitExceeded",
  "RequestThrottled",
  "RequestThrottledException",
  "SlowDown",
  "ThrottledException",
  "Throttling",
  "ThrottlingException",
  "TooManyRequestsException",
  "TransactionInProgressException"
];
var TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];

// node_modules/@aws-sdk/service-error-classification/dist-es/index.js
var isRetryableByTrait = function(error) {
  return error.$retryable !== void 0;
};
var isClockSkewError = function(error) {
  return CLOCK_SKEW_ERROR_CODES.includes(error.name);
};
var isThrottlingError = function(error) {
  var _a, _b;
  return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
};
var isTransientError = function(error) {
  var _a;
  return TRANSIENT_ERROR_CODES.includes(error.name) || TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
};

// node_modules/@aws-sdk/middleware-retry/dist-es/DefaultRateLimiter.js
var DefaultRateLimiter = function() {
  function DefaultRateLimiter2(options) {
    var _a, _b, _c, _d, _e;
    this.currentCapacity = 0;
    this.enabled = false;
    this.lastMaxRate = 0;
    this.measuredTxRate = 0;
    this.requestCount = 0;
    this.lastTimestamp = 0;
    this.timeWindow = 0;
    this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
    this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
    this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
    this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
    this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
    var currentTimeInSeconds = this.getCurrentTimeInSeconds();
    this.lastThrottleTime = currentTimeInSeconds;
    this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
    this.fillRate = this.minFillRate;
    this.maxCapacity = this.minCapacity;
  }
  DefaultRateLimiter2.prototype.getCurrentTimeInSeconds = function() {
    return Date.now() / 1e3;
  };
  DefaultRateLimiter2.prototype.getSendToken = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        return [2, this.acquireTokenBucket(1)];
      });
    });
  };
  DefaultRateLimiter2.prototype.acquireTokenBucket = function(amount) {
    return __awaiter(this, void 0, void 0, function() {
      var delay_1;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!this.enabled) {
              return [2];
            }
            this.refillTokenBucket();
            if (!(amount > this.currentCapacity))
              return [3, 2];
            delay_1 = (amount - this.currentCapacity) / this.fillRate * 1e3;
            return [4, new Promise(function(resolve) {
              return setTimeout(resolve, delay_1);
            })];
          case 1:
            _a.sent();
            _a.label = 2;
          case 2:
            this.currentCapacity = this.currentCapacity - amount;
            return [2];
        }
      });
    });
  };
  DefaultRateLimiter2.prototype.refillTokenBucket = function() {
    var timestamp = this.getCurrentTimeInSeconds();
    if (!this.lastTimestamp) {
      this.lastTimestamp = timestamp;
      return;
    }
    var fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
    this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
    this.lastTimestamp = timestamp;
  };
  DefaultRateLimiter2.prototype.updateClientSendingRate = function(response) {
    var calculatedRate;
    this.updateMeasuredRate();
    if (isThrottlingError(response)) {
      var rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
      this.lastMaxRate = rateToUse;
      this.calculateTimeWindow();
      this.lastThrottleTime = this.getCurrentTimeInSeconds();
      calculatedRate = this.cubicThrottle(rateToUse);
      this.enableTokenBucket();
    } else {
      this.calculateTimeWindow();
      calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
    }
    var newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
    this.updateTokenBucketRate(newRate);
  };
  DefaultRateLimiter2.prototype.calculateTimeWindow = function() {
    this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
  };
  DefaultRateLimiter2.prototype.cubicThrottle = function(rateToUse) {
    return this.getPrecise(rateToUse * this.beta);
  };
  DefaultRateLimiter2.prototype.cubicSuccess = function(timestamp) {
    return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
  };
  DefaultRateLimiter2.prototype.enableTokenBucket = function() {
    this.enabled = true;
  };
  DefaultRateLimiter2.prototype.updateTokenBucketRate = function(newRate) {
    this.refillTokenBucket();
    this.fillRate = Math.max(newRate, this.minFillRate);
    this.maxCapacity = Math.max(newRate, this.minCapacity);
    this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
  };
  DefaultRateLimiter2.prototype.updateMeasuredRate = function() {
    var t = this.getCurrentTimeInSeconds();
    var timeBucket = Math.floor(t * 2) / 2;
    this.requestCount++;
    if (timeBucket > this.lastTxRateBucket) {
      var currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
      this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
      this.requestCount = 0;
      this.lastTxRateBucket = timeBucket;
    }
  };
  DefaultRateLimiter2.prototype.getPrecise = function(num) {
    return parseFloat(num.toFixed(8));
  };
  return DefaultRateLimiter2;
}();

// node_modules/@aws-sdk/middleware-retry/dist-es/constants.js
var DEFAULT_RETRY_DELAY_BASE = 100;
var MAXIMUM_RETRY_DELAY = 20 * 1e3;
var THROTTLING_RETRY_DELAY_BASE = 500;
var INITIAL_RETRY_TOKENS = 500;
var RETRY_COST = 5;
var TIMEOUT_RETRY_COST = 10;
var NO_RETRY_INCREMENT = 1;
var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
var REQUEST_HEADER = "amz-sdk-request";

// node_modules/@aws-sdk/middleware-retry/dist-es/defaultRetryQuota.js
var getDefaultRetryQuota = function(initialRetryTokens, options) {
  var _a, _b, _c;
  var MAX_CAPACITY = initialRetryTokens;
  var noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : NO_RETRY_INCREMENT;
  var retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : RETRY_COST;
  var timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : TIMEOUT_RETRY_COST;
  var availableCapacity = initialRetryTokens;
  var getCapacityAmount = function(error) {
    return error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
  };
  var hasRetryTokens = function(error) {
    return getCapacityAmount(error) <= availableCapacity;
  };
  var retrieveRetryTokens = function(error) {
    if (!hasRetryTokens(error)) {
      throw new Error("No retry token available");
    }
    var capacityAmount = getCapacityAmount(error);
    availableCapacity -= capacityAmount;
    return capacityAmount;
  };
  var releaseRetryTokens = function(capacityReleaseAmount) {
    availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
  };
  return Object.freeze({
    hasRetryTokens,
    retrieveRetryTokens,
    releaseRetryTokens
  });
};

// node_modules/@aws-sdk/middleware-retry/dist-es/delayDecider.js
var defaultDelayDecider = function(delayBase, attempts) {
  return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase));
};

// node_modules/@aws-sdk/middleware-retry/dist-es/retryDecider.js
var defaultRetryDecider = function(error) {
  if (!error) {
    return false;
  }
  return isRetryableByTrait(error) || isClockSkewError(error) || isThrottlingError(error) || isTransientError(error);
};

// node_modules/@aws-sdk/middleware-retry/dist-es/StandardRetryStrategy.js
var StandardRetryStrategy = function() {
  function StandardRetryStrategy2(maxAttemptsProvider, options) {
    var _a, _b, _c;
    this.maxAttemptsProvider = maxAttemptsProvider;
    this.mode = RETRY_MODES.STANDARD;
    this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : defaultRetryDecider;
    this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : defaultDelayDecider;
    this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : getDefaultRetryQuota(INITIAL_RETRY_TOKENS);
  }
  StandardRetryStrategy2.prototype.shouldRetry = function(error, attempts, maxAttempts) {
    return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
  };
  StandardRetryStrategy2.prototype.getMaxAttempts = function() {
    return __awaiter(this, void 0, void 0, function() {
      var maxAttempts, error_1;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4, this.maxAttemptsProvider()];
          case 1:
            maxAttempts = _a.sent();
            return [3, 3];
          case 2:
            error_1 = _a.sent();
            maxAttempts = DEFAULT_MAX_ATTEMPTS;
            return [3, 3];
          case 3:
            return [2, maxAttempts];
        }
      });
    });
  };
  StandardRetryStrategy2.prototype.retry = function(next, args, options) {
    return __awaiter(this, void 0, void 0, function() {
      var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            attempts = 0;
            totalDelay = 0;
            return [4, this.getMaxAttempts()];
          case 1:
            maxAttempts = _a.sent();
            request = args.request;
            if (HttpRequest.isInstance(request)) {
              request.headers[INVOCATION_ID_HEADER] = v4_default();
            }
            _loop_1 = function() {
              var _b, response, output, e_1, err, delay_1;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    _c.trys.push([0, 4, , 7]);
                    if (HttpRequest.isInstance(request)) {
                      request.headers[REQUEST_HEADER] = "attempt=" + (attempts + 1) + "; max=" + maxAttempts;
                    }
                    if (!(options === null || options === void 0 ? void 0 : options.beforeRequest))
                      return [3, 2];
                    return [4, options.beforeRequest()];
                  case 1:
                    _c.sent();
                    _c.label = 2;
                  case 2:
                    return [4, next(args)];
                  case 3:
                    _b = _c.sent(), response = _b.response, output = _b.output;
                    if (options === null || options === void 0 ? void 0 : options.afterRequest) {
                      options.afterRequest(response);
                    }
                    this_1.retryQuota.releaseRetryTokens(retryTokenAmount);
                    output.$metadata.attempts = attempts + 1;
                    output.$metadata.totalRetryDelay = totalDelay;
                    return [2, { value: { response, output } }];
                  case 4:
                    e_1 = _c.sent();
                    err = asSdkError(e_1);
                    attempts++;
                    if (!this_1.shouldRetry(err, attempts, maxAttempts))
                      return [3, 6];
                    retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err);
                    delay_1 = this_1.delayDecider(isThrottlingError(err) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE, attempts);
                    totalDelay += delay_1;
                    return [4, new Promise(function(resolve) {
                      return setTimeout(resolve, delay_1);
                    })];
                  case 5:
                    _c.sent();
                    return [2, "continue"];
                  case 6:
                    if (!err.$metadata) {
                      err.$metadata = {};
                    }
                    err.$metadata.attempts = attempts;
                    err.$metadata.totalRetryDelay = totalDelay;
                    throw err;
                  case 7:
                    return [2];
                }
              });
            };
            this_1 = this;
            _a.label = 2;
          case 2:
            if (false)
              return [3, 4];
            return [5, _loop_1()];
          case 3:
            state_1 = _a.sent();
            if (typeof state_1 === "object")
              return [2, state_1.value];
            return [3, 2];
          case 4:
            return [2];
        }
      });
    });
  };
  return StandardRetryStrategy2;
}();
var asSdkError = function(error) {
  if (error instanceof Error)
    return error;
  if (error instanceof Object)
    return Object.assign(new Error(), error);
  if (typeof error === "string")
    return new Error(error);
  return new Error("AWS SDK error wrapper for " + error);
};

// node_modules/@aws-sdk/middleware-retry/dist-es/AdaptiveRetryStrategy.js
var AdaptiveRetryStrategy = function(_super) {
  __extends(AdaptiveRetryStrategy2, _super);
  function AdaptiveRetryStrategy2(maxAttemptsProvider, options) {
    var _this = this;
    var _a = options !== null && options !== void 0 ? options : {}, rateLimiter = _a.rateLimiter, superOptions = __rest(_a, ["rateLimiter"]);
    _this = _super.call(this, maxAttemptsProvider, superOptions) || this;
    _this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter();
    _this.mode = RETRY_MODES.ADAPTIVE;
    return _this;
  }
  AdaptiveRetryStrategy2.prototype.retry = function(next, args) {
    return __awaiter(this, void 0, void 0, function() {
      var _this = this;
      return __generator(this, function(_a) {
        return [2, _super.prototype.retry.call(this, next, args, {
          beforeRequest: function() {
            return __awaiter(_this, void 0, void 0, function() {
              return __generator(this, function(_a2) {
                return [2, this.rateLimiter.getSendToken()];
              });
            });
          },
          afterRequest: function(response) {
            _this.rateLimiter.updateClientSendingRate(response);
          }
        })];
      });
    });
  };
  return AdaptiveRetryStrategy2;
}(StandardRetryStrategy);

// node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js
var resolveRetryConfig = function(input) {
  var maxAttempts = normalizeMaxAttempts(input.maxAttempts);
  return __assign(__assign({}, input), { maxAttempts, retryStrategy: function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var retryMode;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (input.retryStrategy) {
              return [2, input.retryStrategy];
            }
            return [4, getRetryMode(input.retryMode)];
          case 1:
            retryMode = _a.sent();
            if (retryMode === RETRY_MODES.ADAPTIVE) {
              return [2, new AdaptiveRetryStrategy(maxAttempts)];
            }
            return [2, new StandardRetryStrategy(maxAttempts)];
        }
      });
    });
  } });
};
var getRetryMode = function(retryMode) {
  return __awaiter(void 0, void 0, void 0, function() {
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (typeof retryMode === "string") {
            return [2, retryMode];
          }
          return [4, retryMode()];
        case 1:
          return [2, _a.sent()];
      }
    });
  });
};
var normalizeMaxAttempts = function(maxAttempts) {
  if (maxAttempts === void 0) {
    maxAttempts = DEFAULT_MAX_ATTEMPTS;
  }
  if (typeof maxAttempts === "number") {
    var promisified_1 = Promise.resolve(maxAttempts);
    return function() {
      return promisified_1;
    };
  }
  return maxAttempts;
};

// node_modules/@aws-sdk/middleware-retry/dist-es/retryMiddleware.js
var retryMiddleware = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var retryStrategy;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, options.retryStrategy()];
            case 1:
              retryStrategy = _a.sent();
              if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
                context.userAgent = __spreadArray(__spreadArray([], __read(context.userAgent || [])), [["cfg/retry-mode", retryStrategy.mode]]);
              return [2, retryStrategy.retry(next, args)];
          }
        });
      });
    };
  };
};
var retryMiddlewareOptions = {
  name: "retryMiddleware",
  tags: ["RETRY"],
  step: "finalizeRequest",
  priority: "high",
  override: true
};
var getRetryPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js
var ProviderError = function(_super) {
  __extends(ProviderError2, _super);
  function ProviderError2(message, tryNextLink) {
    if (tryNextLink === void 0) {
      tryNextLink = true;
    }
    var _this = _super.call(this, message) || this;
    _this.tryNextLink = tryNextLink;
    return _this;
  }
  ProviderError2.from = function(error, tryNextLink) {
    if (tryNextLink === void 0) {
      tryNextLink = true;
    }
    Object.defineProperty(error, "tryNextLink", {
      value: tryNextLink,
      configurable: false,
      enumerable: false,
      writable: false
    });
    return error;
  };
  return ProviderError2;
}(Error);
var CredentialsProviderError = function(_super) {
  __extends(CredentialsProviderError2, _super);
  function CredentialsProviderError2(message, tryNextLink) {
    if (tryNextLink === void 0) {
      tryNextLink = true;
    }
    var _this = _super.call(this, message) || this;
    _this.tryNextLink = tryNextLink;
    _this.name = "CredentialsProviderError";
    return _this;
  }
  CredentialsProviderError2.from = function(error, tryNextLink) {
    if (tryNextLink === void 0) {
      tryNextLink = true;
    }
    Object.defineProperty(error, "tryNextLink", {
      value: tryNextLink,
      configurable: false,
      enumerable: false,
      writable: false
    });
    return error;
  };
  return CredentialsProviderError2;
}(Error);

// node_modules/@aws-sdk/property-provider/dist-es/memoize.js
var memoize = function(provider, isExpired, requiresRefresh) {
  var resolved;
  var pending;
  var hasResult;
  var coalesceProvider = function() {
    return __awaiter(void 0, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!pending) {
              pending = provider();
            }
            _a.label = 1;
          case 1:
            _a.trys.push([1, , 3, 4]);
            return [4, pending];
          case 2:
            resolved = _a.sent();
            hasResult = true;
            return [3, 4];
          case 3:
            pending = void 0;
            return [7];
          case 4:
            return [2, resolved];
        }
      });
    });
  };
  if (isExpired === void 0) {
    return function() {
      return __awaiter(void 0, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!!hasResult)
                return [3, 2];
              return [4, coalesceProvider()];
            case 1:
              resolved = _a.sent();
              _a.label = 2;
            case 2:
              return [2, resolved];
          }
        });
      });
    };
  }
  var isConstant = false;
  return function() {
    return __awaiter(void 0, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!!hasResult)
              return [3, 2];
            return [4, coalesceProvider()];
          case 1:
            resolved = _a.sent();
            _a.label = 2;
          case 2:
            if (isConstant) {
              return [2, resolved];
            }
            if (requiresRefresh && !requiresRefresh(resolved)) {
              isConstant = true;
              return [2, resolved];
            }
            if (!isExpired(resolved))
              return [3, 4];
            return [4, coalesceProvider()];
          case 3:
            _a.sent();
            return [2, resolved];
          case 4:
            return [2, resolved];
        }
      });
    });
  };
};

// node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js
var SHORT_TO_HEX = {};
var HEX_TO_SHORT = {};
for (i = 0; i < 256; i++) {
  encodedByte = i.toString(16).toLowerCase();
  if (encodedByte.length === 1) {
    encodedByte = "0" + encodedByte;
  }
  SHORT_TO_HEX[i] = encodedByte;
  HEX_TO_SHORT[encodedByte] = i;
}
var encodedByte;
var i;
function fromHex(encoded) {
  if (encoded.length % 2 !== 0) {
    throw new Error("Hex encoded strings must have an even number length");
  }
  var out = new Uint8Array(encoded.length / 2);
  for (var i = 0; i < encoded.length; i += 2) {
    var encodedByte = encoded.substr(i, 2).toLowerCase();
    if (encodedByte in HEX_TO_SHORT) {
      out[i / 2] = HEX_TO_SHORT[encodedByte];
    } else {
      throw new Error("Cannot decode unrecognized sequence " + encodedByte + " as hexadecimal");
    }
  }
  return out;
}
function toHex(bytes) {
  var out = "";
  for (var i = 0; i < bytes.byteLength; i++) {
    out += SHORT_TO_HEX[bytes[i]];
  }
  return out;
}

// node_modules/@aws-sdk/signature-v4/dist-es/constants.js
var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
var AUTH_HEADER = "authorization";
var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
var DATE_HEADER = "date";
var GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
var SHA256_HEADER = "x-amz-content-sha256";
var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
var ALWAYS_UNSIGNABLE_HEADERS = {
  authorization: true,
  "cache-control": true,
  connection: true,
  expect: true,
  from: true,
  "keep-alive": true,
  "max-forwards": true,
  pragma: true,
  referer: true,
  te: true,
  trailer: true,
  "transfer-encoding": true,
  upgrade: true,
  "user-agent": true,
  "x-amzn-trace-id": true
};
var PROXY_HEADER_PATTERN = /^proxy-/;
var SEC_HEADER_PATTERN = /^sec-/;
var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
var MAX_CACHE_SIZE = 50;
var KEY_TYPE_IDENTIFIER = "aws4_request";
var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;

// node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js
var signingKeyCache = {};
var cacheQueue = [];
var createScope = function(shortDate, region, service) {
  return shortDate + "/" + region + "/" + service + "/" + KEY_TYPE_IDENTIFIER;
};
var getSigningKey = function(sha256Constructor, credentials, shortDate, region, service) {
  return __awaiter(void 0, void 0, void 0, function() {
    var credsHash, cacheKey, key, _a, _b, signable, e_1_1;
    var e_1, _c;
    return __generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          return [4, hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];
        case 1:
          credsHash = _d.sent();
          cacheKey = shortDate + ":" + region + ":" + service + ":" + toHex(credsHash) + ":" + credentials.sessionToken;
          if (cacheKey in signingKeyCache) {
            return [2, signingKeyCache[cacheKey]];
          }
          cacheQueue.push(cacheKey);
          while (cacheQueue.length > MAX_CACHE_SIZE) {
            delete signingKeyCache[cacheQueue.shift()];
          }
          key = "AWS4" + credentials.secretAccessKey;
          _d.label = 2;
        case 2:
          _d.trys.push([2, 7, 8, 9]);
          _a = __values([shortDate, region, service, KEY_TYPE_IDENTIFIER]), _b = _a.next();
          _d.label = 3;
        case 3:
          if (!!_b.done)
            return [3, 6];
          signable = _b.value;
          return [4, hmac(sha256Constructor, key, signable)];
        case 4:
          key = _d.sent();
          _d.label = 5;
        case 5:
          _b = _a.next();
          return [3, 3];
        case 6:
          return [3, 9];
        case 7:
          e_1_1 = _d.sent();
          e_1 = { error: e_1_1 };
          return [3, 9];
        case 8:
          try {
            if (_b && !_b.done && (_c = _a.return))
              _c.call(_a);
          } finally {
            if (e_1)
              throw e_1.error;
          }
          return [7];
        case 9:
          return [2, signingKeyCache[cacheKey] = key];
      }
    });
  });
};
var hmac = function(ctor, secret, data) {
  var hash = new ctor(secret);
  hash.update(data);
  return hash.digest();
};

// node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js
var getCanonicalHeaders = function(_a, unsignableHeaders, signableHeaders) {
  var e_1, _b;
  var headers = _a.headers;
  var canonical = {};
  try {
    for (var _c = __values(Object.keys(headers).sort()), _d = _c.next(); !_d.done; _d = _c.next()) {
      var headerName = _d.value;
      var canonicalHeaderName = headerName.toLowerCase();
      if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
        if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
          continue;
        }
      }
      canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_d && !_d.done && (_b = _c.return))
        _b.call(_c);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return canonical;
};

// node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri.js
var escapeUri = function(uri) {
  return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
};
var hexEncode = function(c) {
  return "%" + c.charCodeAt(0).toString(16).toUpperCase();
};

// node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalQuery.js
var getCanonicalQuery = function(_a) {
  var e_1, _b;
  var _c = _a.query, query = _c === void 0 ? {} : _c;
  var keys = [];
  var serialized = {};
  var _loop_1 = function(key2) {
    if (key2.toLowerCase() === SIGNATURE_HEADER) {
      return "continue";
    }
    keys.push(key2);
    var value = query[key2];
    if (typeof value === "string") {
      serialized[key2] = escapeUri(key2) + "=" + escapeUri(value);
    } else if (Array.isArray(value)) {
      serialized[key2] = value.slice(0).sort().reduce(function(encoded, value2) {
        return encoded.concat([escapeUri(key2) + "=" + escapeUri(value2)]);
      }, []).join("&");
    }
  };
  try {
    for (var _d = __values(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {
      var key = _e.value;
      _loop_1(key);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_e && !_e.done && (_b = _d.return))
        _b.call(_d);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return keys.map(function(key2) {
    return serialized[key2];
  }).filter(function(serialized2) {
    return serialized2;
  }).join("&");
};

// node_modules/@aws-sdk/is-array-buffer/dist-es/index.js
var isArrayBuffer = function(arg) {
  return typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
};

// node_modules/@aws-sdk/signature-v4/dist-es/getPayloadHash.js
var getPayloadHash = function(_a, hashConstructor) {
  var headers = _a.headers, body = _a.body;
  return __awaiter(void 0, void 0, void 0, function() {
    var _b, _c, headerName, hashCtor, _d;
    var e_1, _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          try {
            for (_b = __values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
              headerName = _c.value;
              if (headerName.toLowerCase() === SHA256_HEADER) {
                return [2, headers[headerName]];
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_e = _b.return))
                _e.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          if (!(body == void 0))
            return [3, 1];
          return [2, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"];
        case 1:
          if (!(typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body)))
            return [3, 3];
          hashCtor = new hashConstructor();
          hashCtor.update(body);
          _d = toHex;
          return [4, hashCtor.digest()];
        case 2:
          return [2, _d.apply(void 0, [_f.sent()])];
        case 3:
          return [2, UNSIGNED_PAYLOAD];
      }
    });
  });
};

// node_modules/@aws-sdk/signature-v4/dist-es/headerUtil.js
var hasHeader = function(soughtHeader, headers) {
  var e_1, _a;
  soughtHeader = soughtHeader.toLowerCase();
  try {
    for (var _b = __values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return false;
};

// node_modules/@aws-sdk/signature-v4/dist-es/cloneRequest.js
var cloneRequest = function(_a) {
  var headers = _a.headers, query = _a.query, rest = __rest(_a, ["headers", "query"]);
  return __assign(__assign({}, rest), { headers: __assign({}, headers), query: query ? cloneQuery2(query) : void 0 });
};
var cloneQuery2 = function(query) {
  return Object.keys(query).reduce(function(carry, paramName) {
    var _a;
    var param = query[paramName];
    return __assign(__assign({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spreadArray([], __read(param)) : param, _a));
  }, {});
};

// node_modules/@aws-sdk/signature-v4/dist-es/moveHeadersToQuery.js
var moveHeadersToQuery = function(request, options) {
  var e_1, _a;
  var _b;
  if (options === void 0) {
    options = {};
  }
  var _c = typeof request.clone === "function" ? request.clone() : cloneRequest(request), headers = _c.headers, _d = _c.query, query = _d === void 0 ? {} : _d;
  try {
    for (var _e = __values(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()) {
      var name7 = _f.value;
      var lname = name7.toLowerCase();
      if (lname.substr(0, 6) === "x-amz-" && !((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))) {
        query[name7] = headers[name7];
        delete headers[name7];
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_f && !_f.done && (_a = _e.return))
        _a.call(_e);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return __assign(__assign({}, request), { headers, query });
};

// node_modules/@aws-sdk/signature-v4/dist-es/normalizeProvider.js
var normalizeRegionProvider = function(region) {
  if (typeof region === "string") {
    var promisified_1 = Promise.resolve(region);
    return function() {
      return promisified_1;
    };
  } else {
    return region;
  }
};
var normalizeCredentialsProvider = function(credentials) {
  if (typeof credentials === "object") {
    var promisified_2 = Promise.resolve(credentials);
    return function() {
      return promisified_2;
    };
  } else {
    return credentials;
  }
};

// node_modules/@aws-sdk/signature-v4/dist-es/prepareRequest.js
var prepareRequest = function(request) {
  var e_1, _a;
  request = typeof request.clone === "function" ? request.clone() : cloneRequest(request);
  try {
    for (var _b = __values(Object.keys(request.headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
        delete request.headers[headerName];
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return request;
};

// node_modules/@aws-sdk/signature-v4/dist-es/utilDate.js
var iso8601 = function(time) {
  return toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
};
var toDate = function(time) {
  if (typeof time === "number") {
    return new Date(time * 1e3);
  }
  if (typeof time === "string") {
    if (Number(time)) {
      return new Date(Number(time) * 1e3);
    }
    return new Date(time);
  }
  return time;
};

// node_modules/@aws-sdk/signature-v4/dist-es/SignatureV4.js
var SignatureV4 = function() {
  function SignatureV42(_a) {
    var applyChecksum = _a.applyChecksum, credentials = _a.credentials, region = _a.region, service = _a.service, sha256 = _a.sha256, _b = _a.uriEscapePath, uriEscapePath = _b === void 0 ? true : _b;
    this.service = service;
    this.sha256 = sha256;
    this.uriEscapePath = uriEscapePath;
    this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
    this.regionProvider = normalizeRegionProvider(region);
    this.credentialProvider = normalizeCredentialsProvider(credentials);
  }
  SignatureV42.prototype.presign = function(originalRequest, options) {
    if (options === void 0) {
      options = {};
    }
    return __awaiter(this, void 0, void 0, function() {
      var _a, signingDate, _b, expiresIn, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, credentials, region, _c, _d, longDate, shortDate, scope, request, canonicalHeaders, _e, _f, _g, _h, _j, _k;
      return __generator(this, function(_l) {
        switch (_l.label) {
          case 0:
            _a = options.signingDate, signingDate = _a === void 0 ? new Date() : _a, _b = options.expiresIn, expiresIn = _b === void 0 ? 3600 : _b, unsignableHeaders = options.unsignableHeaders, unhoistableHeaders = options.unhoistableHeaders, signableHeaders = options.signableHeaders, signingRegion = options.signingRegion, signingService = options.signingService;
            return [4, this.credentialProvider()];
          case 1:
            credentials = _l.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _c = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _c = _l.sent();
            _l.label = 4;
          case 4:
            region = _c;
            _d = formatDate(signingDate), longDate = _d.longDate, shortDate = _d.shortDate;
            if (expiresIn > MAX_PRESIGNED_TTL) {
              return [2, Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future")];
            }
            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });
            if (credentials.sessionToken) {
              request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
            }
            request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
            request.query[CREDENTIAL_QUERY_PARAM] = credentials.accessKeyId + "/" + scope;
            request.query[AMZ_DATE_QUERY_PARAM] = longDate;
            request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
            canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
            request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
            _e = request.query;
            _f = SIGNATURE_QUERY_PARAM;
            _g = this.getSignature;
            _h = [
              longDate,
              scope,
              this.getSigningKey(credentials, region, shortDate, signingService)
            ];
            _j = this.createCanonicalRequest;
            _k = [request, canonicalHeaders];
            return [4, getPayloadHash(originalRequest, this.sha256)];
          case 5:
            return [4, _g.apply(this, _h.concat([_j.apply(this, _k.concat([_l.sent()]))]))];
          case 6:
            _e[_f] = _l.sent();
            return [2, request];
        }
      });
    });
  };
  SignatureV42.prototype.sign = function(toSign, options) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        if (typeof toSign === "string") {
          return [2, this.signString(toSign, options)];
        } else if (toSign.headers && toSign.payload) {
          return [2, this.signEvent(toSign, options)];
        } else {
          return [2, this.signRequest(toSign, options)];
        }
        return [2];
      });
    });
  };
  SignatureV42.prototype.signEvent = function(_a, _b) {
    var headers = _a.headers, payload = _a.payload;
    var _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, priorSignature = _b.priorSignature, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter(this, void 0, void 0, function() {
      var region, _d, _e, shortDate, longDate, scope, hashedPayload, hash, hashedHeaders, _f, stringToSign;
      return __generator(this, function(_g) {
        switch (_g.label) {
          case 0:
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 1];
            _d = signingRegion;
            return [3, 3];
          case 1:
            return [4, this.regionProvider()];
          case 2:
            _d = _g.sent();
            _g.label = 3;
          case 3:
            region = _d;
            _e = formatDate(signingDate), shortDate = _e.shortDate, longDate = _e.longDate;
            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            return [4, getPayloadHash({ headers: {}, body: payload }, this.sha256)];
          case 4:
            hashedPayload = _g.sent();
            hash = new this.sha256();
            hash.update(headers);
            _f = toHex;
            return [4, hash.digest()];
          case 5:
            hashedHeaders = _f.apply(void 0, [_g.sent()]);
            stringToSign = [
              EVENT_ALGORITHM_IDENTIFIER,
              longDate,
              scope,
              priorSignature,
              hashedHeaders,
              hashedPayload
            ].join("\n");
            return [2, this.signString(stringToSign, { signingDate, signingRegion: region, signingService })];
        }
      });
    });
  };
  SignatureV42.prototype.signString = function(stringToSign, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter(this, void 0, void 0, function() {
      var credentials, region, _d, shortDate, hash, _e, _f, _g;
      return __generator(this, function(_h) {
        switch (_h.label) {
          case 0:
            return [4, this.credentialProvider()];
          case 1:
            credentials = _h.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _d = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _d = _h.sent();
            _h.label = 4;
          case 4:
            region = _d;
            shortDate = formatDate(signingDate).shortDate;
            _f = (_e = this.sha256).bind;
            return [4, this.getSigningKey(credentials, region, shortDate, signingService)];
          case 5:
            hash = new (_f.apply(_e, [void 0, _h.sent()]))();
            hash.update(stringToSign);
            _g = toHex;
            return [4, hash.digest()];
          case 6:
            return [2, _g.apply(void 0, [_h.sent()])];
        }
      });
    });
  };
  SignatureV42.prototype.signRequest = function(requestToSign, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signableHeaders = _b.signableHeaders, unsignableHeaders = _b.unsignableHeaders, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter(this, void 0, void 0, function() {
      var credentials, region, _d, request, _e, longDate, shortDate, scope, payloadHash, canonicalHeaders, signature;
      return __generator(this, function(_f) {
        switch (_f.label) {
          case 0:
            return [4, this.credentialProvider()];
          case 1:
            credentials = _f.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _d = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _d = _f.sent();
            _f.label = 4;
          case 4:
            region = _d;
            request = prepareRequest(requestToSign);
            _e = formatDate(signingDate), longDate = _e.longDate, shortDate = _e.shortDate;
            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            request.headers[AMZ_DATE_HEADER] = longDate;
            if (credentials.sessionToken) {
              request.headers[TOKEN_HEADER] = credentials.sessionToken;
            }
            return [4, getPayloadHash(request, this.sha256)];
          case 5:
            payloadHash = _f.sent();
            if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
              request.headers[SHA256_HEADER] = payloadHash;
            }
            canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
            return [4, this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash))];
          case 6:
            signature = _f.sent();
            request.headers[AUTH_HEADER] = ALGORITHM_IDENTIFIER + " " + ("Credential=" + credentials.accessKeyId + "/" + scope + ", ") + ("SignedHeaders=" + getCanonicalHeaderList(canonicalHeaders) + ", ") + ("Signature=" + signature);
            return [2, request];
        }
      });
    });
  };
  SignatureV42.prototype.createCanonicalRequest = function(request, canonicalHeaders, payloadHash) {
    var sortedHeaders = Object.keys(canonicalHeaders).sort();
    return request.method + "\n" + this.getCanonicalPath(request) + "\n" + getCanonicalQuery(request) + "\n" + sortedHeaders.map(function(name7) {
      return name7 + ":" + canonicalHeaders[name7];
    }).join("\n") + "\n\n" + sortedHeaders.join(";") + "\n" + payloadHash;
  };
  SignatureV42.prototype.createStringToSign = function(longDate, credentialScope, canonicalRequest) {
    return __awaiter(this, void 0, void 0, function() {
      var hash, hashedRequest;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            hash = new this.sha256();
            hash.update(canonicalRequest);
            return [4, hash.digest()];
          case 1:
            hashedRequest = _a.sent();
            return [2, ALGORITHM_IDENTIFIER + "\n" + longDate + "\n" + credentialScope + "\n" + toHex(hashedRequest)];
        }
      });
    });
  };
  SignatureV42.prototype.getCanonicalPath = function(_a) {
    var path = _a.path;
    if (this.uriEscapePath) {
      var doubleEncoded = encodeURIComponent(path.replace(/^\//, ""));
      return "/" + doubleEncoded.replace(/%2F/g, "/");
    }
    return path;
  };
  SignatureV42.prototype.getSignature = function(longDate, credentialScope, keyPromise, canonicalRequest) {
    return __awaiter(this, void 0, void 0, function() {
      var stringToSign, hash, _a, _b, _c;
      return __generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, this.createStringToSign(longDate, credentialScope, canonicalRequest)];
          case 1:
            stringToSign = _d.sent();
            _b = (_a = this.sha256).bind;
            return [4, keyPromise];
          case 2:
            hash = new (_b.apply(_a, [void 0, _d.sent()]))();
            hash.update(stringToSign);
            _c = toHex;
            return [4, hash.digest()];
          case 3:
            return [2, _c.apply(void 0, [_d.sent()])];
        }
      });
    });
  };
  SignatureV42.prototype.getSigningKey = function(credentials, region, shortDate, service) {
    return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
  };
  return SignatureV42;
}();
var formatDate = function(now) {
  var longDate = iso8601(now).replace(/[\-:]/g, "");
  return {
    longDate,
    shortDate: longDate.substr(0, 8)
  };
};
var getCanonicalHeaderList = function(headers) {
  return Object.keys(headers).sort().join(";");
};

// node_modules/@aws-sdk/middleware-signing/dist-es/configurations.js
var CREDENTIAL_EXPIRE_WINDOW = 3e5;
var resolveAwsAuthConfig = function(input) {
  var normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
  var _a = input.signingEscapePath, signingEscapePath = _a === void 0 ? true : _a, _b = input.systemClockOffset, systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b, sha256 = input.sha256;
  var signer;
  if (input.signer) {
    signer = normalizeProvider(input.signer);
  } else {
    signer = function() {
      return normalizeProvider(input.region)().then(function(region) {
        return __awaiter(void 0, void 0, void 0, function() {
          var _a2, _b2, _c;
          var _d;
          return __generator(this, function(_e) {
            switch (_e.label) {
              case 0:
                _b2 = (_a2 = input).regionInfoProvider;
                _c = [region];
                _d = {};
                return [4, input.useFipsEndpoint()];
              case 1:
                _d.useFipsEndpoint = _e.sent();
                return [4, input.useDualstackEndpoint()];
              case 2:
                return [4, _b2.apply(_a2, _c.concat([(_d.useDualstackEndpoint = _e.sent(), _d)]))];
              case 3:
                return [2, [
                  _e.sent() || {},
                  region
                ]];
            }
          });
        });
      }).then(function(_a2) {
        var _b2 = __read(_a2, 2), regionInfo = _b2[0], region = _b2[1];
        var signingRegion = regionInfo.signingRegion, signingService = regionInfo.signingService;
        input.signingRegion = input.signingRegion || signingRegion || region;
        input.signingName = input.signingName || signingService || input.serviceId;
        var params = __assign(__assign({}, input), { credentials: normalizedCreds, region: input.signingRegion, service: input.signingName, sha256, uriEscapePath: signingEscapePath });
        var signerConstructor = input.signerConstructor || SignatureV4;
        return new signerConstructor(params);
      });
    };
  }
  return __assign(__assign({}, input), { systemClockOffset, signingEscapePath, credentials: normalizedCreds, signer });
};
var normalizeProvider = function(input) {
  if (typeof input === "object") {
    var promisified_1 = Promise.resolve(input);
    return function() {
      return promisified_1;
    };
  }
  return input;
};
var normalizeCredentialProvider = function(credentials) {
  if (typeof credentials === "function") {
    return memoize(credentials, function(credentials2) {
      return credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW;
    }, function(credentials2) {
      return credentials2.expiration !== void 0;
    });
  }
  return normalizeProvider(credentials);
};

// node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate = function(systemClockOffset) {
  return new Date(Date.now() + systemClockOffset);
};

// node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js
var isClockSkewed = function(clockTime, systemClockOffset) {
  return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5;
};

// node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset = function(clockTime, currentSystemClockOffset) {
  var clockTimeInMs = Date.parse(clockTime);
  if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
    return clockTimeInMs - Date.now();
  }
  return currentSystemClockOffset;
};

// node_modules/@aws-sdk/middleware-signing/dist-es/middleware.js
var awsAuthMiddleware = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter(this, void 0, void 0, function() {
        var signer, output, _a, _b, headers, dateHeader;
        var _c;
        return __generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              if (!HttpRequest.isInstance(args.request))
                return [2, next(args)];
              return [4, options.signer()];
            case 1:
              signer = _d.sent();
              _a = next;
              _b = [__assign({}, args)];
              _c = {};
              return [4, signer.sign(args.request, {
                signingDate: getSkewCorrectedDate(options.systemClockOffset),
                signingRegion: context["signing_region"],
                signingService: context["signing_service"]
              })];
            case 2:
              return [4, _a.apply(void 0, [__assign.apply(void 0, _b.concat([(_c.request = _d.sent(), _c)]))]).catch(function(error) {
                if (error.ServerTime) {
                  options.systemClockOffset = getUpdatedSystemClockOffset(error.ServerTime, options.systemClockOffset);
                }
                throw error;
              })];
            case 3:
              output = _d.sent();
              headers = output.response.headers;
              dateHeader = headers && (headers.date || headers.Date);
              if (dateHeader) {
                options.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);
              }
              return [2, output];
          }
        });
      });
    };
  };
};
var awsAuthMiddlewareOptions = {
  name: "awsAuthMiddleware",
  tags: ["SIGNATURE", "AWSAUTH"],
  relation: "after",
  toMiddleware: "retryMiddleware",
  override: true
};
var getAwsAuthPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js
function resolveUserAgentConfig(input) {
  return __assign(__assign({}, input), { customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent });
}

// node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js
var USER_AGENT = "user-agent";
var X_AMZ_USER_AGENT = "x-amz-user-agent";
var SPACE = " ";
var UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;

// node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js
var userAgentMiddleware = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var request, headers, userAgent, defaultUserAgent2, customUserAgent, sdkUserAgentValue, normalUAValue;
        var _a, _b;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              request = args.request;
              if (!HttpRequest.isInstance(request))
                return [2, next(args)];
              headers = request.headers;
              userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
              return [4, options.defaultUserAgentProvider()];
            case 1:
              defaultUserAgent2 = _c.sent().map(escapeUserAgent);
              customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
              sdkUserAgentValue = __spreadArray(__spreadArray(__spreadArray([], __read(defaultUserAgent2)), __read(userAgent)), __read(customUserAgent)).join(SPACE);
              normalUAValue = __spreadArray(__spreadArray([], __read(defaultUserAgent2.filter(function(section) {
                return section.startsWith("aws-sdk-");
              }))), __read(customUserAgent)).join(SPACE);
              if (options.runtime !== "browser") {
                if (normalUAValue) {
                  headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? headers[USER_AGENT] + " " + normalUAValue : normalUAValue;
                }
                headers[USER_AGENT] = sdkUserAgentValue;
              } else {
                headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
              }
              return [2, next(__assign(__assign({}, args), { request }))];
          }
        });
      });
    };
  };
};
var escapeUserAgent = function(_a) {
  var _b = __read(_a, 2), name7 = _b[0], version7 = _b[1];
  var prefixSeparatorIndex = name7.indexOf("/");
  var prefix = name7.substring(0, prefixSeparatorIndex);
  var uaName = name7.substring(prefixSeparatorIndex + 1);
  if (prefix === "api") {
    uaName = uaName.toLowerCase();
  }
  return [prefix, uaName, version7].filter(function(item) {
    return item && item.length > 0;
  }).map(function(item) {
    return item === null || item === void 0 ? void 0 : item.replace(UA_ESCAPE_REGEX, "_");
  }).join("/");
};
var getUserAgentMiddlewareOptions = {
  name: "getUserAgentMiddleware",
  step: "build",
  priority: "low",
  tags: ["SET_USER_AGENT", "USER_AGENT"],
  override: true
};
var getUserAgentPlugin = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/client-dynamodb/package.json
var name = "@aws-sdk/client-dynamodb";
var description = "AWS SDK for JavaScript Dynamodb Client for Node.js, Browser and React Native";
var version = "3.42.0";
var scripts = {
  build: "yarn build:cjs && yarn build:es && yarn build:types",
  "build:cjs": "tsc -p tsconfig.json",
  "build:docs": "yarn clean:docs && typedoc ./",
  "build:es": "tsc -p tsconfig.es.json",
  "build:types": "tsc -p tsconfig.types.json",
  clean: "yarn clean:dist && yarn clean:docs",
  "clean:dist": "rimraf ./dist",
  "clean:docs": "rimraf ./docs",
  "downlevel-dts": "downlevel-dts dist-types dist-types/ts3.4",
  test: "exit 0"
};
var main = "./dist-cjs/index.js";
var types = "./dist-types/index.d.ts";
var module = "./dist-es/index.js";
var sideEffects = false;
var dependencies = {
  "@aws-crypto/sha256-browser": "2.0.0",
  "@aws-crypto/sha256-js": "2.0.0",
  "@aws-sdk/client-sts": "3.42.0",
  "@aws-sdk/config-resolver": "3.40.0",
  "@aws-sdk/credential-provider-node": "3.41.0",
  "@aws-sdk/fetch-http-handler": "3.40.0",
  "@aws-sdk/hash-node": "3.40.0",
  "@aws-sdk/invalid-dependency": "3.40.0",
  "@aws-sdk/middleware-content-length": "3.40.0",
  "@aws-sdk/middleware-endpoint-discovery": "3.40.0",
  "@aws-sdk/middleware-host-header": "3.40.0",
  "@aws-sdk/middleware-logger": "3.40.0",
  "@aws-sdk/middleware-retry": "3.40.0",
  "@aws-sdk/middleware-serde": "3.40.0",
  "@aws-sdk/middleware-signing": "3.40.0",
  "@aws-sdk/middleware-stack": "3.40.0",
  "@aws-sdk/middleware-user-agent": "3.40.0",
  "@aws-sdk/node-config-provider": "3.40.0",
  "@aws-sdk/node-http-handler": "3.40.0",
  "@aws-sdk/protocol-http": "3.40.0",
  "@aws-sdk/smithy-client": "3.41.0",
  "@aws-sdk/types": "3.40.0",
  "@aws-sdk/url-parser": "3.40.0",
  "@aws-sdk/util-base64-browser": "3.37.0",
  "@aws-sdk/util-base64-node": "3.37.0",
  "@aws-sdk/util-body-length-browser": "3.37.0",
  "@aws-sdk/util-body-length-node": "3.37.0",
  "@aws-sdk/util-user-agent-browser": "3.40.0",
  "@aws-sdk/util-user-agent-node": "3.40.0",
  "@aws-sdk/util-utf8-browser": "3.37.0",
  "@aws-sdk/util-utf8-node": "3.37.0",
  "@aws-sdk/util-waiter": "3.40.0",
  tslib: "^2.3.0",
  uuid: "^8.3.2"
};
var devDependencies = {
  "@aws-sdk/service-client-documentation-generator": "3.38.0",
  "@types/node": "^12.7.5",
  "@types/uuid": "^8.3.0",
  "downlevel-dts": "0.7.0",
  jest: "^26.1.0",
  rimraf: "^3.0.0",
  "ts-jest": "^26.4.1",
  typedoc: "^0.19.2",
  typescript: "~4.3.5"
};
var engines = {
  node: ">=10.0.0"
};
var typesVersions = {
  "<4.0": {
    "dist-types/*": [
      "dist-types/ts3.4/*"
    ]
  }
};
var files = [
  "dist-*"
];
var author = {
  name: "AWS SDK for JavaScript Team",
  url: "https://aws.amazon.com/javascript/"
};
var license = "Apache-2.0";
var browser = {
  "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
};
var react_native = {
  "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
};
var homepage = "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-dynamodb";
var repository = {
  type: "git",
  url: "https://github.com/aws/aws-sdk-js-v3.git",
  directory: "clients/client-dynamodb"
};
var package_default = {
  name,
  description,
  version,
  scripts,
  main,
  types,
  module,
  sideEffects,
  dependencies,
  devDependencies,
  engines,
  typesVersions,
  files,
  author,
  license,
  browser,
  "react-native": react_native,
  homepage,
  repository
};

// node_modules/@aws-sdk/client-dynamodb/dist-es/runtimeConfig.browser.js
var import_sha256_browser = __toModule(require_build5());

// node_modules/@aws-sdk/querystring-builder/dist-es/index.js
function buildQueryString(query) {
  var e_1, _a;
  var parts = [];
  try {
    for (var _b = __values(Object.keys(query).sort()), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var value = query[key];
      key = escapeUri(key);
      if (Array.isArray(value)) {
        for (var i = 0, iLen = value.length; i < iLen; i++) {
          parts.push(key + "=" + escapeUri(value[i]));
        }
      } else {
        var qsEntry = key;
        if (value || typeof value === "string") {
          qsEntry += "=" + escapeUri(value);
        }
        parts.push(qsEntry);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return parts.join("&");
}

// node_modules/@aws-sdk/fetch-http-handler/dist-es/request-timeout.js
function requestTimeout(timeoutInMs) {
  if (timeoutInMs === void 0) {
    timeoutInMs = 0;
  }
  return new Promise(function(resolve, reject) {
    if (timeoutInMs) {
      setTimeout(function() {
        var timeoutError = new Error("Request did not complete within " + timeoutInMs + " ms");
        timeoutError.name = "TimeoutError";
        reject(timeoutError);
      }, timeoutInMs);
    }
  });
}

// node_modules/@aws-sdk/fetch-http-handler/dist-es/fetch-http-handler.js
var FetchHttpHandler = function() {
  function FetchHttpHandler2(_a) {
    var _b = _a === void 0 ? {} : _a, requestTimeout2 = _b.requestTimeout;
    this.requestTimeout = requestTimeout2;
  }
  FetchHttpHandler2.prototype.destroy = function() {
  };
  FetchHttpHandler2.prototype.handle = function(request, _a) {
    var _b = _a === void 0 ? {} : _a, abortSignal = _b.abortSignal;
    var requestTimeoutInMs = this.requestTimeout;
    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
      var abortError = new Error("Request aborted");
      abortError.name = "AbortError";
      return Promise.reject(abortError);
    }
    var path = request.path;
    if (request.query) {
      var queryString = buildQueryString(request.query);
      if (queryString) {
        path += "?" + queryString;
      }
    }
    var port = request.port, method = request.method;
    var url = request.protocol + "//" + request.hostname + (port ? ":" + port : "") + path;
    var body = method === "GET" || method === "HEAD" ? void 0 : request.body;
    var requestOptions = {
      body,
      headers: new Headers(request.headers),
      method
    };
    if (typeof AbortController !== "undefined") {
      requestOptions["signal"] = abortSignal;
    }
    var fetchRequest = new Request(url, requestOptions);
    var raceOfPromises = [
      fetch(fetchRequest).then(function(response) {
        var e_1, _a2;
        var fetchHeaders = response.headers;
        var transformedHeaders = {};
        try {
          for (var _b2 = __values(fetchHeaders.entries()), _c = _b2.next(); !_c.done; _c = _b2.next()) {
            var pair = _c.value;
            transformedHeaders[pair[0]] = pair[1];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b2.return))
              _a2.call(_b2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        var hasReadableStream = response.body !== void 0;
        if (!hasReadableStream) {
          return response.blob().then(function(body2) {
            return {
              response: new HttpResponse({
                headers: transformedHeaders,
                statusCode: response.status,
                body: body2
              })
            };
          });
        }
        return {
          response: new HttpResponse({
            headers: transformedHeaders,
            statusCode: response.status,
            body: response.body
          })
        };
      }),
      requestTimeout(requestTimeoutInMs)
    ];
    if (abortSignal) {
      raceOfPromises.push(new Promise(function(resolve, reject) {
        abortSignal.onabort = function() {
          var abortError2 = new Error("Request aborted");
          abortError2.name = "AbortError";
          reject(abortError2);
        };
      }));
    }
    return Promise.race(raceOfPromises);
  };
  return FetchHttpHandler2;
}();

// node_modules/@aws-sdk/util-base64-browser/dist-es/index.js
var alphabetByEncoding = {};
var alphabetByValue = new Array(64);
for (i = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i + start <= limit; i++) {
  char = String.fromCharCode(i + start);
  alphabetByEncoding[char] = i;
  alphabetByValue[i] = char;
}
var char;
var i;
var start;
var limit;
for (i = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i + start <= limit; i++) {
  char = String.fromCharCode(i + start);
  index = i + 26;
  alphabetByEncoding[char] = index;
  alphabetByValue[index] = char;
}
var char;
var index;
var i;
var start;
var limit;
for (i = 0; i < 10; i++) {
  alphabetByEncoding[i.toString(10)] = i + 52;
  char = i.toString(10);
  index = i + 52;
  alphabetByEncoding[char] = index;
  alphabetByValue[index] = char;
}
var char;
var index;
var i;
alphabetByEncoding["+"] = 62;
alphabetByValue[62] = "+";
alphabetByEncoding["/"] = 63;
alphabetByValue[63] = "/";
var bitsPerLetter = 6;
var bitsPerByte = 8;
var maxLetterValue = 63;
function fromBase64(input) {
  var totalByteLength = input.length / 4 * 3;
  if (input.substr(-2) === "==") {
    totalByteLength -= 2;
  } else if (input.substr(-1) === "=") {
    totalByteLength--;
  }
  var out = new ArrayBuffer(totalByteLength);
  var dataView = new DataView(out);
  for (var i = 0; i < input.length; i += 4) {
    var bits = 0;
    var bitLength = 0;
    for (var j = i, limit = i + 3; j <= limit; j++) {
      if (input[j] !== "=") {
        if (!(input[j] in alphabetByEncoding)) {
          throw new TypeError("Invalid character " + input[j] + " in base64 string.");
        }
        bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;
        bitLength += bitsPerLetter;
      } else {
        bits >>= bitsPerLetter;
      }
    }
    var chunkOffset = i / 4 * 3;
    bits >>= bitLength % bitsPerByte;
    var byteLength = Math.floor(bitLength / bitsPerByte);
    for (var k = 0; k < byteLength; k++) {
      var offset = (byteLength - k - 1) * bitsPerByte;
      dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);
    }
  }
  return new Uint8Array(out);
}
function toBase64(input) {
  var str = "";
  for (var i = 0; i < input.length; i += 3) {
    var bits = 0;
    var bitLength = 0;
    for (var j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {
      bits |= input[j] << (limit - j - 1) * bitsPerByte;
      bitLength += bitsPerByte;
    }
    var bitClusterCount = Math.ceil(bitLength / bitsPerLetter);
    bits <<= bitClusterCount * bitsPerLetter - bitLength;
    for (var k = 1; k <= bitClusterCount; k++) {
      var offset = (bitClusterCount - k) * bitsPerLetter;
      str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];
    }
    str += "==".slice(0, 4 - bitClusterCount);
  }
  return str;
}

// node_modules/@aws-sdk/fetch-http-handler/dist-es/stream-collector.js
var streamCollector = function(stream) {
  if (typeof Blob === "function" && stream instanceof Blob) {
    return collectBlob(stream);
  }
  return collectStream(stream);
};
function collectBlob(blob) {
  return __awaiter(this, void 0, void 0, function() {
    var base64, arrayBuffer;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, readToBase64(blob)];
        case 1:
          base64 = _a.sent();
          arrayBuffer = fromBase64(base64);
          return [2, new Uint8Array(arrayBuffer)];
      }
    });
  });
}
function collectStream(stream) {
  return __awaiter(this, void 0, void 0, function() {
    var res, reader, isDone, _a, done, value, prior;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          res = new Uint8Array(0);
          reader = stream.getReader();
          isDone = false;
          _b.label = 1;
        case 1:
          if (!!isDone)
            return [3, 3];
          return [4, reader.read()];
        case 2:
          _a = _b.sent(), done = _a.done, value = _a.value;
          if (value) {
            prior = res;
            res = new Uint8Array(prior.length + value.length);
            res.set(prior);
            res.set(value, prior.length);
          }
          isDone = done;
          return [3, 1];
        case 3:
          return [2, res];
      }
    });
  });
}
function readToBase64(blob) {
  return new Promise(function(resolve, reject) {
    var reader = new FileReader();
    reader.onloadend = function() {
      var _a;
      if (reader.readyState !== 2) {
        return reject(new Error("Reader aborted too early"));
      }
      var result = (_a = reader.result) !== null && _a !== void 0 ? _a : "";
      var commaIndex = result.indexOf(",");
      var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
      resolve(result.substring(dataOffset));
    };
    reader.onabort = function() {
      return reject(new Error("Read aborted"));
    };
    reader.onerror = function() {
      return reject(reader.error);
    };
    reader.readAsDataURL(blob);
  });
}

// node_modules/@aws-sdk/invalid-dependency/dist-es/invalidProvider.js
var invalidProvider = function(message) {
  return function() {
    return Promise.reject(message);
  };
};

// node_modules/@aws-sdk/util-body-length-browser/dist-es/index.js
function calculateBodyLength(body) {
  if (typeof body === "string") {
    var len = body.length;
    for (var i = len - 1; i >= 0; i--) {
      var code = body.charCodeAt(i);
      if (code > 127 && code <= 2047)
        len++;
      else if (code > 2047 && code <= 65535)
        len += 2;
    }
    return len;
  } else if (typeof body.byteLength === "number") {
    return body.byteLength;
  } else if (typeof body.size === "number") {
    return body.size;
  }
}

// node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js
var import_bowser = __toModule(require_es5());
var defaultUserAgent = function(_a) {
  var serviceId = _a.serviceId, clientVersion = _a.clientVersion;
  return function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var parsedUA, sections;
      var _a2, _b, _c, _d, _e, _f, _g;
      return __generator(this, function(_h) {
        parsedUA = typeof window !== "undefined" && ((_a2 = window === null || window === void 0 ? void 0 : window.navigator) === null || _a2 === void 0 ? void 0 : _a2.userAgent) ? import_bowser.default.parse(window.navigator.userAgent) : void 0;
        sections = [
          ["aws-sdk-js", clientVersion],
          ["os/" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || "other"), (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version],
          ["lang/js"],
          ["md/browser", ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : "unknown") + "_" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : "unknown")]
        ];
        if (serviceId) {
          sections.push(["api/" + serviceId, clientVersion]);
        }
        return [2, sections];
      });
    });
  };
};

// node_modules/@aws-sdk/client-dynamodb/dist-es/runtimeConfig.browser.js
var import_util_utf8_browser = __toModule(require_dist_cjs());

// node_modules/@aws-sdk/querystring-parser/dist-es/index.js
function parseQueryString(querystring) {
  var e_1, _a;
  var query = {};
  querystring = querystring.replace(/^\?/, "");
  if (querystring) {
    try {
      for (var _b = __values(querystring.split("&")), _c = _b.next(); !_c.done; _c = _b.next()) {
        var pair = _c.value;
        var _d = __read(pair.split("="), 2), key = _d[0], _e = _d[1], value = _e === void 0 ? null : _e;
        key = decodeURIComponent(key);
        if (value) {
          value = decodeURIComponent(value);
        }
        if (!(key in query)) {
          query[key] = value;
        } else if (Array.isArray(query[key])) {
          query[key].push(value);
        } else {
          query[key] = [query[key], value];
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
  return query;
}

// node_modules/@aws-sdk/url-parser/dist-es/index.js
var parseUrl = function(url) {
  var _a = new URL(url), hostname = _a.hostname, pathname = _a.pathname, port = _a.port, protocol = _a.protocol, search = _a.search;
  var query;
  if (search) {
    query = parseQueryString(search);
  }
  return {
    hostname,
    port: port ? parseInt(port) : void 0,
    protocol,
    path: pathname,
    query
  };
};

// node_modules/@aws-sdk/client-dynamodb/dist-es/endpoints.js
var regionHash = {
  "ca-central-1": {
    variants: [
      {
        hostname: "dynamodb.ca-central-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "dynamodb-fips.ca-central-1.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  local: {
    variants: [
      {
        hostname: "localhost:8000",
        tags: []
      }
    ],
    signingRegion: "us-east-1"
  },
  "us-east-1": {
    variants: [
      {
        hostname: "dynamodb.us-east-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "dynamodb-fips.us-east-1.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  "us-east-2": {
    variants: [
      {
        hostname: "dynamodb.us-east-2.amazonaws.com",
        tags: []
      },
      {
        hostname: "dynamodb-fips.us-east-2.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  "us-gov-east-1": {
    variants: [
      {
        hostname: "dynamodb.us-gov-east-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "dynamodb.us-gov-east-1.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  "us-gov-west-1": {
    variants: [
      {
        hostname: "dynamodb.us-gov-west-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "dynamodb.us-gov-west-1.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  "us-west-1": {
    variants: [
      {
        hostname: "dynamodb.us-west-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "dynamodb-fips.us-west-1.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  "us-west-2": {
    variants: [
      {
        hostname: "dynamodb.us-west-2.amazonaws.com",
        tags: []
      },
      {
        hostname: "dynamodb-fips.us-west-2.amazonaws.com",
        tags: ["fips"]
      }
    ]
  }
};
var partitionHash = {
  aws: {
    regions: [
      "af-south-1",
      "ap-east-1",
      "ap-northeast-1",
      "ap-northeast-2",
      "ap-northeast-3",
      "ap-south-1",
      "ap-southeast-1",
      "ap-southeast-2",
      "ca-central-1",
      "ca-central-1-fips",
      "eu-central-1",
      "eu-north-1",
      "eu-south-1",
      "eu-west-1",
      "eu-west-2",
      "eu-west-3",
      "local",
      "me-south-1",
      "sa-east-1",
      "us-east-1",
      "us-east-1-fips",
      "us-east-2",
      "us-east-2-fips",
      "us-west-1",
      "us-west-1-fips",
      "us-west-2",
      "us-west-2-fips"
    ],
    regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "dynamodb.{region}.amazonaws.com",
        tags: []
      },
      {
        hostname: "dynamodb-fips.{region}.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "dynamodb-fips.{region}.api.aws",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "dynamodb.{region}.api.aws",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-cn": {
    regions: ["cn-north-1", "cn-northwest-1"],
    regionRegex: "^cn\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "dynamodb.{region}.amazonaws.com.cn",
        tags: []
      },
      {
        hostname: "dynamodb-fips.{region}.amazonaws.com.cn",
        tags: ["fips"]
      },
      {
        hostname: "dynamodb-fips.{region}.api.amazonwebservices.com.cn",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "dynamodb.{region}.api.amazonwebservices.com.cn",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-iso": {
    regions: ["us-iso-east-1", "us-iso-west-1"],
    regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "dynamodb.{region}.c2s.ic.gov",
        tags: []
      },
      {
        hostname: "dynamodb-fips.{region}.c2s.ic.gov",
        tags: ["fips"]
      }
    ]
  },
  "aws-iso-b": {
    regions: ["us-isob-east-1"],
    regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "dynamodb.{region}.sc2s.sgov.gov",
        tags: []
      },
      {
        hostname: "dynamodb-fips.{region}.sc2s.sgov.gov",
        tags: ["fips"]
      }
    ]
  },
  "aws-us-gov": {
    regions: ["us-gov-east-1", "us-gov-east-1-fips", "us-gov-west-1", "us-gov-west-1-fips"],
    regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "dynamodb.{region}.amazonaws.com",
        tags: []
      },
      {
        hostname: "dynamodb.{region}.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "dynamodb-fips.{region}.api.aws",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "dynamodb.{region}.api.aws",
        tags: ["dualstack"]
      }
    ]
  }
};
var defaultRegionInfoProvider = function(region, options) {
  return __awaiter(void 0, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, getRegionInfo(region, __assign(__assign({}, options), { signingService: "dynamodb", regionHash, partitionHash }))];
    });
  });
};

// node_modules/@aws-sdk/client-dynamodb/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = function(config) {
  var _a, _b, _c, _d, _e;
  return {
    apiVersion: "2012-08-10",
    disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
    logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
    regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : defaultRegionInfoProvider,
    serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "DynamoDB",
    urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : parseUrl
  };
};

// node_modules/@aws-sdk/client-dynamodb/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = function(config) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
  var clientSharedValues = getRuntimeConfig(config);
  return __assign(__assign(__assign({}, clientSharedValues), config), { runtime: "browser", base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : fromBase64, base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : toBase64, bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : calculateBodyLength, credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : function(_) {
    return function() {
      return Promise.reject(new Error("Credential is missing"));
    };
  }, defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }), endpointDiscoveryEnabledProvider: (_f = config === null || config === void 0 ? void 0 : config.endpointDiscoveryEnabledProvider) !== null && _f !== void 0 ? _f : function() {
    return Promise.resolve(void 0);
  }, maxAttempts: (_g = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _g !== void 0 ? _g : DEFAULT_MAX_ATTEMPTS, region: (_h = config === null || config === void 0 ? void 0 : config.region) !== null && _h !== void 0 ? _h : invalidProvider("Region is missing"), requestHandler: (_j = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _j !== void 0 ? _j : new FetchHttpHandler(), retryMode: (_k = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _k !== void 0 ? _k : function() {
    return Promise.resolve(DEFAULT_RETRY_MODE);
  }, sha256: (_l = config === null || config === void 0 ? void 0 : config.sha256) !== null && _l !== void 0 ? _l : import_sha256_browser.Sha256, streamCollector: (_m = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _m !== void 0 ? _m : streamCollector, useDualstackEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _o !== void 0 ? _o : function() {
    return Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT);
  }, useFipsEndpoint: (_p = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _p !== void 0 ? _p : function() {
    return Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT);
  }, utf8Decoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _q !== void 0 ? _q : import_util_utf8_browser.fromUtf8, utf8Encoder: (_r = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _r !== void 0 ? _r : import_util_utf8_browser.toUtf8 });
};

// node_modules/@aws-sdk/client-dynamodb/dist-es/DynamoDBClient.js
var DynamoDBClient = function(_super) {
  __extends(DynamoDBClient2, _super);
  function DynamoDBClient2(configuration) {
    var _this = this;
    var _config_0 = getRuntimeConfig2(configuration);
    var _config_1 = resolveRegionConfig(_config_0);
    var _config_2 = resolveEndpointsConfig(_config_1);
    var _config_3 = resolveRetryConfig(_config_2);
    var _config_4 = resolveHostHeaderConfig(_config_3);
    var _config_5 = resolveAwsAuthConfig(_config_4);
    var _config_6 = resolveUserAgentConfig(_config_5);
    var _config_7 = resolveEndpointDiscoveryConfig(_config_6, {
      endpointDiscoveryCommandCtor: DescribeEndpointsCommand
    });
    _this = _super.call(this, _config_7) || this;
    _this.config = _config_7;
    _this.middlewareStack.use(getRetryPlugin(_this.config));
    _this.middlewareStack.use(getContentLengthPlugin(_this.config));
    _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
    _this.middlewareStack.use(getLoggerPlugin(_this.config));
    _this.middlewareStack.use(getAwsAuthPlugin(_this.config));
    _this.middlewareStack.use(getUserAgentPlugin(_this.config));
    return _this;
  }
  DynamoDBClient2.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
  };
  return DynamoDBClient2;
}(Client);

// node_modules/@aws-sdk/client-dynamodb/dist-es/DynamoDB.js
var DynamoDB = function(_super) {
  __extends(DynamoDB2, _super);
  function DynamoDB2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  DynamoDB2.prototype.batchExecuteStatement = function(args, optionsOrCb, cb) {
    var command = new BatchExecuteStatementCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.batchGetItem = function(args, optionsOrCb, cb) {
    var command = new BatchGetItemCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.batchWriteItem = function(args, optionsOrCb, cb) {
    var command = new BatchWriteItemCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.createBackup = function(args, optionsOrCb, cb) {
    var command = new CreateBackupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.createGlobalTable = function(args, optionsOrCb, cb) {
    var command = new CreateGlobalTableCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.createTable = function(args, optionsOrCb, cb) {
    var command = new CreateTableCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.deleteBackup = function(args, optionsOrCb, cb) {
    var command = new DeleteBackupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.deleteItem = function(args, optionsOrCb, cb) {
    var command = new DeleteItemCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.deleteTable = function(args, optionsOrCb, cb) {
    var command = new DeleteTableCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.describeBackup = function(args, optionsOrCb, cb) {
    var command = new DescribeBackupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.describeContinuousBackups = function(args, optionsOrCb, cb) {
    var command = new DescribeContinuousBackupsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.describeContributorInsights = function(args, optionsOrCb, cb) {
    var command = new DescribeContributorInsightsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.describeEndpoints = function(args, optionsOrCb, cb) {
    var command = new DescribeEndpointsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.describeExport = function(args, optionsOrCb, cb) {
    var command = new DescribeExportCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.describeGlobalTable = function(args, optionsOrCb, cb) {
    var command = new DescribeGlobalTableCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.describeGlobalTableSettings = function(args, optionsOrCb, cb) {
    var command = new DescribeGlobalTableSettingsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.describeKinesisStreamingDestination = function(args, optionsOrCb, cb) {
    var command = new DescribeKinesisStreamingDestinationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.describeLimits = function(args, optionsOrCb, cb) {
    var command = new DescribeLimitsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.describeTable = function(args, optionsOrCb, cb) {
    var command = new DescribeTableCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.describeTableReplicaAutoScaling = function(args, optionsOrCb, cb) {
    var command = new DescribeTableReplicaAutoScalingCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.describeTimeToLive = function(args, optionsOrCb, cb) {
    var command = new DescribeTimeToLiveCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.disableKinesisStreamingDestination = function(args, optionsOrCb, cb) {
    var command = new DisableKinesisStreamingDestinationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.enableKinesisStreamingDestination = function(args, optionsOrCb, cb) {
    var command = new EnableKinesisStreamingDestinationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.executeStatement = function(args, optionsOrCb, cb) {
    var command = new ExecuteStatementCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.executeTransaction = function(args, optionsOrCb, cb) {
    var command = new ExecuteTransactionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.exportTableToPointInTime = function(args, optionsOrCb, cb) {
    var command = new ExportTableToPointInTimeCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.getItem = function(args, optionsOrCb, cb) {
    var command = new GetItemCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.listBackups = function(args, optionsOrCb, cb) {
    var command = new ListBackupsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.listContributorInsights = function(args, optionsOrCb, cb) {
    var command = new ListContributorInsightsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.listExports = function(args, optionsOrCb, cb) {
    var command = new ListExportsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.listGlobalTables = function(args, optionsOrCb, cb) {
    var command = new ListGlobalTablesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.listTables = function(args, optionsOrCb, cb) {
    var command = new ListTablesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.listTagsOfResource = function(args, optionsOrCb, cb) {
    var command = new ListTagsOfResourceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.putItem = function(args, optionsOrCb, cb) {
    var command = new PutItemCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.query = function(args, optionsOrCb, cb) {
    var command = new QueryCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.restoreTableFromBackup = function(args, optionsOrCb, cb) {
    var command = new RestoreTableFromBackupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.restoreTableToPointInTime = function(args, optionsOrCb, cb) {
    var command = new RestoreTableToPointInTimeCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.scan = function(args, optionsOrCb, cb) {
    var command = new ScanCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.tagResource = function(args, optionsOrCb, cb) {
    var command = new TagResourceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.transactGetItems = function(args, optionsOrCb, cb) {
    var command = new TransactGetItemsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.transactWriteItems = function(args, optionsOrCb, cb) {
    var command = new TransactWriteItemsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.untagResource = function(args, optionsOrCb, cb) {
    var command = new UntagResourceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.updateContinuousBackups = function(args, optionsOrCb, cb) {
    var command = new UpdateContinuousBackupsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.updateContributorInsights = function(args, optionsOrCb, cb) {
    var command = new UpdateContributorInsightsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.updateGlobalTable = function(args, optionsOrCb, cb) {
    var command = new UpdateGlobalTableCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.updateGlobalTableSettings = function(args, optionsOrCb, cb) {
    var command = new UpdateGlobalTableSettingsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.updateItem = function(args, optionsOrCb, cb) {
    var command = new UpdateItemCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.updateTable = function(args, optionsOrCb, cb) {
    var command = new UpdateTableCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.updateTableReplicaAutoScaling = function(args, optionsOrCb, cb) {
    var command = new UpdateTableReplicaAutoScalingCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  DynamoDB2.prototype.updateTimeToLive = function(args, optionsOrCb, cb) {
    var command = new UpdateTimeToLiveCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  return DynamoDB2;
}(DynamoDBClient);

// node_modules/@aws-sdk/client-kinesis/dist-es/models/models_0.js
var AddTagsToStreamInput;
(function(AddTagsToStreamInput2) {
  AddTagsToStreamInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AddTagsToStreamInput || (AddTagsToStreamInput = {}));
var InvalidArgumentException;
(function(InvalidArgumentException2) {
  InvalidArgumentException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidArgumentException || (InvalidArgumentException = {}));
var LimitExceededException2;
(function(LimitExceededException4) {
  LimitExceededException4.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LimitExceededException2 || (LimitExceededException2 = {}));
var ResourceInUseException2;
(function(ResourceInUseException3) {
  ResourceInUseException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ResourceInUseException2 || (ResourceInUseException2 = {}));
var ResourceNotFoundException2;
(function(ResourceNotFoundException4) {
  ResourceNotFoundException4.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ResourceNotFoundException2 || (ResourceNotFoundException2 = {}));
var HashKeyRange;
(function(HashKeyRange2) {
  HashKeyRange2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(HashKeyRange || (HashKeyRange = {}));
var ChildShard;
(function(ChildShard2) {
  ChildShard2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ChildShard || (ChildShard = {}));
var ConsumerStatus;
(function(ConsumerStatus2) {
  ConsumerStatus2["ACTIVE"] = "ACTIVE";
  ConsumerStatus2["CREATING"] = "CREATING";
  ConsumerStatus2["DELETING"] = "DELETING";
})(ConsumerStatus || (ConsumerStatus = {}));
var Consumer;
(function(Consumer2) {
  Consumer2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Consumer || (Consumer = {}));
var ConsumerDescription;
(function(ConsumerDescription2) {
  ConsumerDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ConsumerDescription || (ConsumerDescription = {}));
var CreateStreamInput;
(function(CreateStreamInput2) {
  CreateStreamInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateStreamInput || (CreateStreamInput = {}));
var DecreaseStreamRetentionPeriodInput;
(function(DecreaseStreamRetentionPeriodInput2) {
  DecreaseStreamRetentionPeriodInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DecreaseStreamRetentionPeriodInput || (DecreaseStreamRetentionPeriodInput = {}));
var DeleteStreamInput;
(function(DeleteStreamInput2) {
  DeleteStreamInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteStreamInput || (DeleteStreamInput = {}));
var DeregisterStreamConsumerInput;
(function(DeregisterStreamConsumerInput2) {
  DeregisterStreamConsumerInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeregisterStreamConsumerInput || (DeregisterStreamConsumerInput = {}));
var DescribeLimitsInput2;
(function(DescribeLimitsInput3) {
  DescribeLimitsInput3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeLimitsInput2 || (DescribeLimitsInput2 = {}));
var DescribeLimitsOutput2;
(function(DescribeLimitsOutput3) {
  DescribeLimitsOutput3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeLimitsOutput2 || (DescribeLimitsOutput2 = {}));
var DescribeStreamInput;
(function(DescribeStreamInput2) {
  DescribeStreamInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeStreamInput || (DescribeStreamInput = {}));
var EncryptionType;
(function(EncryptionType2) {
  EncryptionType2["KMS"] = "KMS";
  EncryptionType2["NONE"] = "NONE";
})(EncryptionType || (EncryptionType = {}));
var MetricsName;
(function(MetricsName2) {
  MetricsName2["ALL"] = "ALL";
  MetricsName2["INCOMING_BYTES"] = "IncomingBytes";
  MetricsName2["INCOMING_RECORDS"] = "IncomingRecords";
  MetricsName2["ITERATOR_AGE_MILLISECONDS"] = "IteratorAgeMilliseconds";
  MetricsName2["OUTGOING_BYTES"] = "OutgoingBytes";
  MetricsName2["OUTGOING_RECORDS"] = "OutgoingRecords";
  MetricsName2["READ_PROVISIONED_THROUGHPUT_EXCEEDED"] = "ReadProvisionedThroughputExceeded";
  MetricsName2["WRITE_PROVISIONED_THROUGHPUT_EXCEEDED"] = "WriteProvisionedThroughputExceeded";
})(MetricsName || (MetricsName = {}));
var EnhancedMetrics;
(function(EnhancedMetrics2) {
  EnhancedMetrics2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(EnhancedMetrics || (EnhancedMetrics = {}));
var SequenceNumberRange;
(function(SequenceNumberRange2) {
  SequenceNumberRange2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SequenceNumberRange || (SequenceNumberRange = {}));
var Shard;
(function(Shard2) {
  Shard2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Shard || (Shard = {}));
var StreamStatus;
(function(StreamStatus2) {
  StreamStatus2["ACTIVE"] = "ACTIVE";
  StreamStatus2["CREATING"] = "CREATING";
  StreamStatus2["DELETING"] = "DELETING";
  StreamStatus2["UPDATING"] = "UPDATING";
})(StreamStatus || (StreamStatus = {}));
var StreamDescription;
(function(StreamDescription2) {
  StreamDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StreamDescription || (StreamDescription = {}));
var DescribeStreamOutput;
(function(DescribeStreamOutput2) {
  DescribeStreamOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeStreamOutput || (DescribeStreamOutput = {}));
var DescribeStreamConsumerInput;
(function(DescribeStreamConsumerInput2) {
  DescribeStreamConsumerInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeStreamConsumerInput || (DescribeStreamConsumerInput = {}));
var DescribeStreamConsumerOutput;
(function(DescribeStreamConsumerOutput2) {
  DescribeStreamConsumerOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeStreamConsumerOutput || (DescribeStreamConsumerOutput = {}));
var DescribeStreamSummaryInput;
(function(DescribeStreamSummaryInput2) {
  DescribeStreamSummaryInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeStreamSummaryInput || (DescribeStreamSummaryInput = {}));
var StreamDescriptionSummary;
(function(StreamDescriptionSummary2) {
  StreamDescriptionSummary2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StreamDescriptionSummary || (StreamDescriptionSummary = {}));
var DescribeStreamSummaryOutput;
(function(DescribeStreamSummaryOutput2) {
  DescribeStreamSummaryOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeStreamSummaryOutput || (DescribeStreamSummaryOutput = {}));
var DisableEnhancedMonitoringInput;
(function(DisableEnhancedMonitoringInput2) {
  DisableEnhancedMonitoringInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DisableEnhancedMonitoringInput || (DisableEnhancedMonitoringInput = {}));
var EnhancedMonitoringOutput;
(function(EnhancedMonitoringOutput2) {
  EnhancedMonitoringOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(EnhancedMonitoringOutput || (EnhancedMonitoringOutput = {}));
var EnableEnhancedMonitoringInput;
(function(EnableEnhancedMonitoringInput2) {
  EnableEnhancedMonitoringInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(EnableEnhancedMonitoringInput || (EnableEnhancedMonitoringInput = {}));
var ExpiredIteratorException;
(function(ExpiredIteratorException2) {
  ExpiredIteratorException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ExpiredIteratorException || (ExpiredIteratorException = {}));
var ExpiredNextTokenException;
(function(ExpiredNextTokenException2) {
  ExpiredNextTokenException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ExpiredNextTokenException || (ExpiredNextTokenException = {}));
var GetRecordsInput;
(function(GetRecordsInput2) {
  GetRecordsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetRecordsInput || (GetRecordsInput = {}));
var _Record;
(function(_Record2) {
  _Record2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(_Record || (_Record = {}));
var GetRecordsOutput;
(function(GetRecordsOutput2) {
  GetRecordsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetRecordsOutput || (GetRecordsOutput = {}));
var KMSAccessDeniedException;
(function(KMSAccessDeniedException3) {
  KMSAccessDeniedException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KMSAccessDeniedException || (KMSAccessDeniedException = {}));
var KMSDisabledException;
(function(KMSDisabledException3) {
  KMSDisabledException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KMSDisabledException || (KMSDisabledException = {}));
var KMSInvalidStateException;
(function(KMSInvalidStateException3) {
  KMSInvalidStateException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KMSInvalidStateException || (KMSInvalidStateException = {}));
var KMSNotFoundException;
(function(KMSNotFoundException3) {
  KMSNotFoundException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KMSNotFoundException || (KMSNotFoundException = {}));
var KMSOptInRequired;
(function(KMSOptInRequired3) {
  KMSOptInRequired3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KMSOptInRequired || (KMSOptInRequired = {}));
var KMSThrottlingException;
(function(KMSThrottlingException3) {
  KMSThrottlingException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KMSThrottlingException || (KMSThrottlingException = {}));
var ProvisionedThroughputExceededException2;
(function(ProvisionedThroughputExceededException3) {
  ProvisionedThroughputExceededException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ProvisionedThroughputExceededException2 || (ProvisionedThroughputExceededException2 = {}));
var ShardIteratorType;
(function(ShardIteratorType2) {
  ShardIteratorType2["AFTER_SEQUENCE_NUMBER"] = "AFTER_SEQUENCE_NUMBER";
  ShardIteratorType2["AT_SEQUENCE_NUMBER"] = "AT_SEQUENCE_NUMBER";
  ShardIteratorType2["AT_TIMESTAMP"] = "AT_TIMESTAMP";
  ShardIteratorType2["LATEST"] = "LATEST";
  ShardIteratorType2["TRIM_HORIZON"] = "TRIM_HORIZON";
})(ShardIteratorType || (ShardIteratorType = {}));
var GetShardIteratorInput;
(function(GetShardIteratorInput2) {
  GetShardIteratorInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetShardIteratorInput || (GetShardIteratorInput = {}));
var GetShardIteratorOutput;
(function(GetShardIteratorOutput2) {
  GetShardIteratorOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetShardIteratorOutput || (GetShardIteratorOutput = {}));
var IncreaseStreamRetentionPeriodInput;
(function(IncreaseStreamRetentionPeriodInput2) {
  IncreaseStreamRetentionPeriodInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(IncreaseStreamRetentionPeriodInput || (IncreaseStreamRetentionPeriodInput = {}));
var InternalFailureException;
(function(InternalFailureException2) {
  InternalFailureException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InternalFailureException || (InternalFailureException = {}));
var ShardFilterType;
(function(ShardFilterType2) {
  ShardFilterType2["AFTER_SHARD_ID"] = "AFTER_SHARD_ID";
  ShardFilterType2["AT_LATEST"] = "AT_LATEST";
  ShardFilterType2["AT_TIMESTAMP"] = "AT_TIMESTAMP";
  ShardFilterType2["AT_TRIM_HORIZON"] = "AT_TRIM_HORIZON";
  ShardFilterType2["FROM_TIMESTAMP"] = "FROM_TIMESTAMP";
  ShardFilterType2["FROM_TRIM_HORIZON"] = "FROM_TRIM_HORIZON";
})(ShardFilterType || (ShardFilterType = {}));
var ShardFilter;
(function(ShardFilter2) {
  ShardFilter2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ShardFilter || (ShardFilter = {}));
var ListShardsInput;
(function(ListShardsInput2) {
  ListShardsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListShardsInput || (ListShardsInput = {}));
var ListShardsOutput;
(function(ListShardsOutput2) {
  ListShardsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListShardsOutput || (ListShardsOutput = {}));
var ListStreamConsumersInput;
(function(ListStreamConsumersInput2) {
  ListStreamConsumersInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListStreamConsumersInput || (ListStreamConsumersInput = {}));
var ListStreamConsumersOutput;
(function(ListStreamConsumersOutput2) {
  ListStreamConsumersOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListStreamConsumersOutput || (ListStreamConsumersOutput = {}));
var ListStreamsInput;
(function(ListStreamsInput2) {
  ListStreamsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListStreamsInput || (ListStreamsInput = {}));
var ListStreamsOutput;
(function(ListStreamsOutput2) {
  ListStreamsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListStreamsOutput || (ListStreamsOutput = {}));
var ListTagsForStreamInput;
(function(ListTagsForStreamInput2) {
  ListTagsForStreamInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTagsForStreamInput || (ListTagsForStreamInput = {}));
var Tag2;
(function(Tag5) {
  Tag5.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Tag2 || (Tag2 = {}));
var ListTagsForStreamOutput;
(function(ListTagsForStreamOutput2) {
  ListTagsForStreamOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTagsForStreamOutput || (ListTagsForStreamOutput = {}));
var MergeShardsInput;
(function(MergeShardsInput2) {
  MergeShardsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MergeShardsInput || (MergeShardsInput = {}));
var PutRecordInput;
(function(PutRecordInput2) {
  PutRecordInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutRecordInput || (PutRecordInput = {}));
var PutRecordOutput;
(function(PutRecordOutput2) {
  PutRecordOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutRecordOutput || (PutRecordOutput = {}));
var PutRecordsRequestEntry;
(function(PutRecordsRequestEntry2) {
  PutRecordsRequestEntry2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutRecordsRequestEntry || (PutRecordsRequestEntry = {}));
var PutRecordsInput;
(function(PutRecordsInput2) {
  PutRecordsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutRecordsInput || (PutRecordsInput = {}));
var PutRecordsResultEntry;
(function(PutRecordsResultEntry2) {
  PutRecordsResultEntry2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutRecordsResultEntry || (PutRecordsResultEntry = {}));
var PutRecordsOutput;
(function(PutRecordsOutput2) {
  PutRecordsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutRecordsOutput || (PutRecordsOutput = {}));
var RegisterStreamConsumerInput;
(function(RegisterStreamConsumerInput2) {
  RegisterStreamConsumerInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RegisterStreamConsumerInput || (RegisterStreamConsumerInput = {}));
var RegisterStreamConsumerOutput;
(function(RegisterStreamConsumerOutput2) {
  RegisterStreamConsumerOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RegisterStreamConsumerOutput || (RegisterStreamConsumerOutput = {}));
var RemoveTagsFromStreamInput;
(function(RemoveTagsFromStreamInput2) {
  RemoveTagsFromStreamInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RemoveTagsFromStreamInput || (RemoveTagsFromStreamInput = {}));
var SplitShardInput;
(function(SplitShardInput2) {
  SplitShardInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SplitShardInput || (SplitShardInput = {}));
var StartStreamEncryptionInput;
(function(StartStreamEncryptionInput2) {
  StartStreamEncryptionInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StartStreamEncryptionInput || (StartStreamEncryptionInput = {}));
var StopStreamEncryptionInput;
(function(StopStreamEncryptionInput2) {
  StopStreamEncryptionInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StopStreamEncryptionInput || (StopStreamEncryptionInput = {}));
var StartingPosition;
(function(StartingPosition2) {
  StartingPosition2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StartingPosition || (StartingPosition = {}));
var SubscribeToShardInput;
(function(SubscribeToShardInput2) {
  SubscribeToShardInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SubscribeToShardInput || (SubscribeToShardInput = {}));
var SubscribeToShardEvent;
(function(SubscribeToShardEvent2) {
  SubscribeToShardEvent2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SubscribeToShardEvent || (SubscribeToShardEvent = {}));
var SubscribeToShardEventStream;
(function(SubscribeToShardEventStream2) {
  SubscribeToShardEventStream2.visit = function(value, visitor) {
    if (value.SubscribeToShardEvent !== void 0)
      return visitor.SubscribeToShardEvent(value.SubscribeToShardEvent);
    if (value.ResourceNotFoundException !== void 0)
      return visitor.ResourceNotFoundException(value.ResourceNotFoundException);
    if (value.ResourceInUseException !== void 0)
      return visitor.ResourceInUseException(value.ResourceInUseException);
    if (value.KMSDisabledException !== void 0)
      return visitor.KMSDisabledException(value.KMSDisabledException);
    if (value.KMSInvalidStateException !== void 0)
      return visitor.KMSInvalidStateException(value.KMSInvalidStateException);
    if (value.KMSAccessDeniedException !== void 0)
      return visitor.KMSAccessDeniedException(value.KMSAccessDeniedException);
    if (value.KMSNotFoundException !== void 0)
      return visitor.KMSNotFoundException(value.KMSNotFoundException);
    if (value.KMSOptInRequired !== void 0)
      return visitor.KMSOptInRequired(value.KMSOptInRequired);
    if (value.KMSThrottlingException !== void 0)
      return visitor.KMSThrottlingException(value.KMSThrottlingException);
    if (value.InternalFailureException !== void 0)
      return visitor.InternalFailureException(value.InternalFailureException);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
  SubscribeToShardEventStream2.filterSensitiveLog = function(obj) {
    var _a;
    if (obj.SubscribeToShardEvent !== void 0)
      return { SubscribeToShardEvent: SubscribeToShardEvent.filterSensitiveLog(obj.SubscribeToShardEvent) };
    if (obj.ResourceNotFoundException !== void 0)
      return { ResourceNotFoundException: ResourceNotFoundException2.filterSensitiveLog(obj.ResourceNotFoundException) };
    if (obj.ResourceInUseException !== void 0)
      return { ResourceInUseException: ResourceInUseException2.filterSensitiveLog(obj.ResourceInUseException) };
    if (obj.KMSDisabledException !== void 0)
      return { KMSDisabledException: KMSDisabledException.filterSensitiveLog(obj.KMSDisabledException) };
    if (obj.KMSInvalidStateException !== void 0)
      return { KMSInvalidStateException: KMSInvalidStateException.filterSensitiveLog(obj.KMSInvalidStateException) };
    if (obj.KMSAccessDeniedException !== void 0)
      return { KMSAccessDeniedException: KMSAccessDeniedException.filterSensitiveLog(obj.KMSAccessDeniedException) };
    if (obj.KMSNotFoundException !== void 0)
      return { KMSNotFoundException: KMSNotFoundException.filterSensitiveLog(obj.KMSNotFoundException) };
    if (obj.KMSOptInRequired !== void 0)
      return { KMSOptInRequired: KMSOptInRequired.filterSensitiveLog(obj.KMSOptInRequired) };
    if (obj.KMSThrottlingException !== void 0)
      return { KMSThrottlingException: KMSThrottlingException.filterSensitiveLog(obj.KMSThrottlingException) };
    if (obj.InternalFailureException !== void 0)
      return { InternalFailureException: InternalFailureException.filterSensitiveLog(obj.InternalFailureException) };
    if (obj.$unknown !== void 0)
      return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
  };
})(SubscribeToShardEventStream || (SubscribeToShardEventStream = {}));
var SubscribeToShardOutput;
(function(SubscribeToShardOutput2) {
  SubscribeToShardOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.EventStream && { EventStream: "STREAMING_CONTENT" });
  };
})(SubscribeToShardOutput || (SubscribeToShardOutput = {}));
var ScalingType;
(function(ScalingType2) {
  ScalingType2["UNIFORM_SCALING"] = "UNIFORM_SCALING";
})(ScalingType || (ScalingType = {}));
var UpdateShardCountInput;
(function(UpdateShardCountInput2) {
  UpdateShardCountInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateShardCountInput || (UpdateShardCountInput = {}));
var UpdateShardCountOutput;
(function(UpdateShardCountOutput2) {
  UpdateShardCountOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateShardCountOutput || (UpdateShardCountOutput = {}));

// node_modules/@aws-sdk/client-kinesis/dist-es/protocols/Aws_json1_1.js
var serializeAws_json1_1AddTagsToStreamCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.AddTagsToStream"
      };
      body = JSON.stringify(serializeAws_json1_1AddTagsToStreamInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateStreamCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.CreateStream"
      };
      body = JSON.stringify(serializeAws_json1_1CreateStreamInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DecreaseStreamRetentionPeriodCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DecreaseStreamRetentionPeriod"
      };
      body = JSON.stringify(serializeAws_json1_1DecreaseStreamRetentionPeriodInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteStreamCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DeleteStream"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteStreamInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeregisterStreamConsumerCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DeregisterStreamConsumer"
      };
      body = JSON.stringify(serializeAws_json1_1DeregisterStreamConsumerInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeLimitsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DescribeLimits"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeLimitsInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeStreamCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DescribeStream"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeStreamInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeStreamConsumerCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DescribeStreamConsumer"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeStreamConsumerInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeStreamSummaryCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DescribeStreamSummary"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeStreamSummaryInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DisableEnhancedMonitoringCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DisableEnhancedMonitoring"
      };
      body = JSON.stringify(serializeAws_json1_1DisableEnhancedMonitoringInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1EnableEnhancedMonitoringCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.EnableEnhancedMonitoring"
      };
      body = JSON.stringify(serializeAws_json1_1EnableEnhancedMonitoringInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetRecordsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.GetRecords"
      };
      body = JSON.stringify(serializeAws_json1_1GetRecordsInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetShardIteratorCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.GetShardIterator"
      };
      body = JSON.stringify(serializeAws_json1_1GetShardIteratorInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1IncreaseStreamRetentionPeriodCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.IncreaseStreamRetentionPeriod"
      };
      body = JSON.stringify(serializeAws_json1_1IncreaseStreamRetentionPeriodInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListShardsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.ListShards"
      };
      body = JSON.stringify(serializeAws_json1_1ListShardsInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListStreamConsumersCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.ListStreamConsumers"
      };
      body = JSON.stringify(serializeAws_json1_1ListStreamConsumersInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListStreamsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.ListStreams"
      };
      body = JSON.stringify(serializeAws_json1_1ListStreamsInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListTagsForStreamCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.ListTagsForStream"
      };
      body = JSON.stringify(serializeAws_json1_1ListTagsForStreamInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1MergeShardsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.MergeShards"
      };
      body = JSON.stringify(serializeAws_json1_1MergeShardsInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutRecordCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.PutRecord"
      };
      body = JSON.stringify(serializeAws_json1_1PutRecordInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutRecordsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.PutRecords"
      };
      body = JSON.stringify(serializeAws_json1_1PutRecordsInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1RegisterStreamConsumerCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.RegisterStreamConsumer"
      };
      body = JSON.stringify(serializeAws_json1_1RegisterStreamConsumerInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1RemoveTagsFromStreamCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.RemoveTagsFromStream"
      };
      body = JSON.stringify(serializeAws_json1_1RemoveTagsFromStreamInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1SplitShardCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.SplitShard"
      };
      body = JSON.stringify(serializeAws_json1_1SplitShardInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1StartStreamEncryptionCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.StartStreamEncryption"
      };
      body = JSON.stringify(serializeAws_json1_1StartStreamEncryptionInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1StopStreamEncryptionCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.StopStreamEncryption"
      };
      body = JSON.stringify(serializeAws_json1_1StopStreamEncryptionInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1SubscribeToShardCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.SubscribeToShard"
      };
      body = JSON.stringify(serializeAws_json1_1SubscribeToShardInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UpdateShardCountCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.UpdateShardCount"
      };
      body = JSON.stringify(serializeAws_json1_1UpdateShardCountInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var deserializeAws_json1_1AddTagsToStreamCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1AddTagsToStreamCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1AddTagsToStreamCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceInUseException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateStreamCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateStreamCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateStreamCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceInUseException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DecreaseStreamRetentionPeriodCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DecreaseStreamRetentionPeriodCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DecreaseStreamRetentionPeriodCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceInUseException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteStreamCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteStreamCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteStreamCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "LimitExceededException":
              return [3, 2];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 2];
            case "ResourceInUseException":
              return [3, 4];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeregisterStreamConsumerCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeregisterStreamConsumerCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeregisterStreamConsumerCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLimitsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeLimitsCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeLimitsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLimitsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "LimitExceededException":
              return [3, 2];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeStreamCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeStreamCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeStreamOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeStreamCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "LimitExceededException":
              return [3, 2];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeStreamConsumerCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeStreamConsumerCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeStreamConsumerOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeStreamConsumerCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeStreamSummaryCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeStreamSummaryCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeStreamSummaryOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeStreamSummaryCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "LimitExceededException":
              return [3, 2];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DisableEnhancedMonitoringCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DisableEnhancedMonitoringCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1EnhancedMonitoringOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DisableEnhancedMonitoringCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceInUseException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1EnableEnhancedMonitoringCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1EnableEnhancedMonitoringCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1EnhancedMonitoringOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1EnableEnhancedMonitoringCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceInUseException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetRecordsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetRecordsCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetRecordsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetRecordsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;
    var _o;
    return __generator(this, function(_p) {
      switch (_p.label) {
        case 0:
          _a = [__assign({}, output)];
          _o = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_o.body = _p.sent(), _o)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExpiredIteratorException":
              return [3, 2];
            case "com.amazonaws.kinesis#ExpiredIteratorException":
              return [3, 2];
            case "InvalidArgumentException":
              return [3, 4];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 4];
            case "KMSAccessDeniedException":
              return [3, 6];
            case "com.amazonaws.kinesis#KMSAccessDeniedException":
              return [3, 6];
            case "KMSDisabledException":
              return [3, 8];
            case "com.amazonaws.kinesis#KMSDisabledException":
              return [3, 8];
            case "KMSInvalidStateException":
              return [3, 10];
            case "com.amazonaws.kinesis#KMSInvalidStateException":
              return [3, 10];
            case "KMSNotFoundException":
              return [3, 12];
            case "com.amazonaws.kinesis#KMSNotFoundException":
              return [3, 12];
            case "KMSOptInRequired":
              return [3, 14];
            case "com.amazonaws.kinesis#KMSOptInRequired":
              return [3, 14];
            case "KMSThrottlingException":
              return [3, 16];
            case "com.amazonaws.kinesis#KMSThrottlingException":
              return [3, 16];
            case "ProvisionedThroughputExceededException":
              return [3, 18];
            case "com.amazonaws.kinesis#ProvisionedThroughputExceededException":
              return [3, 18];
            case "ResourceNotFoundException":
              return [3, 20];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 20];
          }
          return [3, 22];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExpiredIteratorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1KMSAccessDeniedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1KMSDisabledExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1KMSNotFoundExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1KMSOptInRequiredResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_1KMSThrottlingExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 18:
          _l = [{}];
          return [4, deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 19:
          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 20:
          _m = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 21:
          response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 22:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _p.label = 23;
        case 23:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetShardIteratorCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetShardIteratorCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetShardIteratorOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetShardIteratorCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "ProvisionedThroughputExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#ProvisionedThroughputExceededException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1IncreaseStreamRetentionPeriodCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1IncreaseStreamRetentionPeriodCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceInUseException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListShardsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListShardsCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListShardsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListShardsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExpiredNextTokenException":
              return [3, 2];
            case "com.amazonaws.kinesis#ExpiredNextTokenException":
              return [3, 2];
            case "InvalidArgumentException":
              return [3, 4];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 6];
            case "ResourceInUseException":
              return [3, 8];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExpiredNextTokenExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListStreamConsumersCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListStreamConsumersCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListStreamConsumersOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListStreamConsumersCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExpiredNextTokenException":
              return [3, 2];
            case "com.amazonaws.kinesis#ExpiredNextTokenException":
              return [3, 2];
            case "InvalidArgumentException":
              return [3, 4];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 6];
            case "ResourceInUseException":
              return [3, 8];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExpiredNextTokenExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListStreamsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListStreamsCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListStreamsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListStreamsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "LimitExceededException":
              return [3, 2];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsForStreamCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListTagsForStreamCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListTagsForStreamOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsForStreamCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1MergeShardsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1MergeShardsCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1MergeShardsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceInUseException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutRecordCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutRecordCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutRecordOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutRecordCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
    var _m;
    return __generator(this, function(_o) {
      switch (_o.label) {
        case 0:
          _a = [__assign({}, output)];
          _m = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_m.body = _o.sent(), _m)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "KMSAccessDeniedException":
              return [3, 4];
            case "com.amazonaws.kinesis#KMSAccessDeniedException":
              return [3, 4];
            case "KMSDisabledException":
              return [3, 6];
            case "com.amazonaws.kinesis#KMSDisabledException":
              return [3, 6];
            case "KMSInvalidStateException":
              return [3, 8];
            case "com.amazonaws.kinesis#KMSInvalidStateException":
              return [3, 8];
            case "KMSNotFoundException":
              return [3, 10];
            case "com.amazonaws.kinesis#KMSNotFoundException":
              return [3, 10];
            case "KMSOptInRequired":
              return [3, 12];
            case "com.amazonaws.kinesis#KMSOptInRequired":
              return [3, 12];
            case "KMSThrottlingException":
              return [3, 14];
            case "com.amazonaws.kinesis#KMSThrottlingException":
              return [3, 14];
            case "ProvisionedThroughputExceededException":
              return [3, 16];
            case "com.amazonaws.kinesis#ProvisionedThroughputExceededException":
              return [3, 16];
            case "ResourceNotFoundException":
              return [3, 18];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 18];
          }
          return [3, 20];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1KMSAccessDeniedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1KMSDisabledExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1KMSNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1KMSOptInRequiredResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1KMSThrottlingExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 18:
          _l = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 19:
          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 20:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _o.label = 21;
        case 21:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutRecordsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutRecordsCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutRecordsOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutRecordsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
    var _m;
    return __generator(this, function(_o) {
      switch (_o.label) {
        case 0:
          _a = [__assign({}, output)];
          _m = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_m.body = _o.sent(), _m)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "KMSAccessDeniedException":
              return [3, 4];
            case "com.amazonaws.kinesis#KMSAccessDeniedException":
              return [3, 4];
            case "KMSDisabledException":
              return [3, 6];
            case "com.amazonaws.kinesis#KMSDisabledException":
              return [3, 6];
            case "KMSInvalidStateException":
              return [3, 8];
            case "com.amazonaws.kinesis#KMSInvalidStateException":
              return [3, 8];
            case "KMSNotFoundException":
              return [3, 10];
            case "com.amazonaws.kinesis#KMSNotFoundException":
              return [3, 10];
            case "KMSOptInRequired":
              return [3, 12];
            case "com.amazonaws.kinesis#KMSOptInRequired":
              return [3, 12];
            case "KMSThrottlingException":
              return [3, 14];
            case "com.amazonaws.kinesis#KMSThrottlingException":
              return [3, 14];
            case "ProvisionedThroughputExceededException":
              return [3, 16];
            case "com.amazonaws.kinesis#ProvisionedThroughputExceededException":
              return [3, 16];
            case "ResourceNotFoundException":
              return [3, 18];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 18];
          }
          return [3, 20];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1KMSAccessDeniedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1KMSDisabledExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1KMSNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1KMSOptInRequiredResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1KMSThrottlingExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 18:
          _l = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 19:
          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 21];
        case 20:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _o.label = 21;
        case 21:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1RegisterStreamConsumerCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1RegisterStreamConsumerCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1RegisterStreamConsumerOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1RegisterStreamConsumerCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceInUseException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1RemoveTagsFromStreamCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1RemoveTagsFromStreamCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1RemoveTagsFromStreamCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceInUseException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1SplitShardCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1SplitShardCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1SplitShardCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceInUseException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1StartStreamEncryptionCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1StartStreamEncryptionCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1StartStreamEncryptionCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;
    var _o;
    return __generator(this, function(_p) {
      switch (_p.label) {
        case 0:
          _a = [__assign({}, output)];
          _o = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_o.body = _p.sent(), _o)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "KMSAccessDeniedException":
              return [3, 4];
            case "com.amazonaws.kinesis#KMSAccessDeniedException":
              return [3, 4];
            case "KMSDisabledException":
              return [3, 6];
            case "com.amazonaws.kinesis#KMSDisabledException":
              return [3, 6];
            case "KMSInvalidStateException":
              return [3, 8];
            case "com.amazonaws.kinesis#KMSInvalidStateException":
              return [3, 8];
            case "KMSNotFoundException":
              return [3, 10];
            case "com.amazonaws.kinesis#KMSNotFoundException":
              return [3, 10];
            case "KMSOptInRequired":
              return [3, 12];
            case "com.amazonaws.kinesis#KMSOptInRequired":
              return [3, 12];
            case "KMSThrottlingException":
              return [3, 14];
            case "com.amazonaws.kinesis#KMSThrottlingException":
              return [3, 14];
            case "LimitExceededException":
              return [3, 16];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 16];
            case "ResourceInUseException":
              return [3, 18];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 18];
            case "ResourceNotFoundException":
              return [3, 20];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 20];
          }
          return [3, 22];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1KMSAccessDeniedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1KMSDisabledExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1KMSNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1KMSOptInRequiredResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1KMSThrottlingExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 18:
          _l = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 19:
          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 20:
          _m = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 21:
          response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([_p.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 23];
        case 22:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _p.label = 23;
        case 23:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1StopStreamEncryptionCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1StopStreamEncryptionCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1StopStreamEncryptionCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceInUseException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1SubscribeToShardCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1SubscribeToShardCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1SubscribeToShardOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1SubscribeToShardCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceInUseException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UpdateShardCountCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UpdateShardCountCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1UpdateShardCountOutput(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UpdateShardCountCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidArgumentException":
              return [3, 2];
            case "com.amazonaws.kinesis#InvalidArgumentException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.kinesis#LimitExceededException":
              return [3, 4];
            case "ResourceInUseException":
              return [3, 6];
            case "com.amazonaws.kinesis#ResourceInUseException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.kinesis#ResourceNotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ExpiredIteratorExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ExpiredIteratorException(body, context);
      contents = __assign({ name: "ExpiredIteratorException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ExpiredNextTokenExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ExpiredNextTokenException(body, context);
      contents = __assign({ name: "ExpiredNextTokenException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidArgumentExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidArgumentException(body, context);
      contents = __assign({ name: "InvalidArgumentException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1KMSAccessDeniedExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1KMSAccessDeniedException(body, context);
      contents = __assign({ name: "KMSAccessDeniedException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1KMSDisabledExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1KMSDisabledException(body, context);
      contents = __assign({ name: "KMSDisabledException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1KMSInvalidStateExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1KMSInvalidStateException(body, context);
      contents = __assign({ name: "KMSInvalidStateException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1KMSNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1KMSNotFoundException(body, context);
      contents = __assign({ name: "KMSNotFoundException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1KMSOptInRequiredResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1KMSOptInRequired(body, context);
      contents = __assign({ name: "KMSOptInRequired", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1KMSThrottlingExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1KMSThrottlingException(body, context);
      contents = __assign({ name: "KMSThrottlingException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1LimitExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1LimitExceededException(body, context);
      contents = __assign({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ProvisionedThroughputExceededException(body, context);
      contents = __assign({ name: "ProvisionedThroughputExceededException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceInUseExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceInUseException(body, context);
      contents = __assign({ name: "ResourceInUseException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
      contents = __assign({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var serializeAws_json1_1AddTagsToStreamInput = function(input, context) {
  return __assign(__assign({}, input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName }), input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1TagMap(input.Tags, context) });
};
var serializeAws_json1_1CreateStreamInput = function(input, context) {
  return __assign(__assign({}, input.ShardCount !== void 0 && input.ShardCount !== null && { ShardCount: input.ShardCount }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1DecreaseStreamRetentionPeriodInput = function(input, context) {
  return __assign(__assign({}, input.RetentionPeriodHours !== void 0 && input.RetentionPeriodHours !== null && { RetentionPeriodHours: input.RetentionPeriodHours }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1DeleteStreamInput = function(input, context) {
  return __assign(__assign({}, input.EnforceConsumerDeletion !== void 0 && input.EnforceConsumerDeletion !== null && { EnforceConsumerDeletion: input.EnforceConsumerDeletion }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1DeregisterStreamConsumerInput = function(input, context) {
  return __assign(__assign(__assign({}, input.ConsumerARN !== void 0 && input.ConsumerARN !== null && { ConsumerARN: input.ConsumerARN }), input.ConsumerName !== void 0 && input.ConsumerName !== null && { ConsumerName: input.ConsumerName }), input.StreamARN !== void 0 && input.StreamARN !== null && { StreamARN: input.StreamARN });
};
var serializeAws_json1_1DescribeLimitsInput = function(input, context) {
  return {};
};
var serializeAws_json1_1DescribeStreamConsumerInput = function(input, context) {
  return __assign(__assign(__assign({}, input.ConsumerARN !== void 0 && input.ConsumerARN !== null && { ConsumerARN: input.ConsumerARN }), input.ConsumerName !== void 0 && input.ConsumerName !== null && { ConsumerName: input.ConsumerName }), input.StreamARN !== void 0 && input.StreamARN !== null && { StreamARN: input.StreamARN });
};
var serializeAws_json1_1DescribeStreamInput = function(input, context) {
  return __assign(__assign(__assign({}, input.ExclusiveStartShardId !== void 0 && input.ExclusiveStartShardId !== null && { ExclusiveStartShardId: input.ExclusiveStartShardId }), input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1DescribeStreamSummaryInput = function(input, context) {
  return __assign({}, input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1DisableEnhancedMonitoringInput = function(input, context) {
  return __assign(__assign({}, input.ShardLevelMetrics !== void 0 && input.ShardLevelMetrics !== null && {
    ShardLevelMetrics: serializeAws_json1_1MetricsNameList(input.ShardLevelMetrics, context)
  }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1EnableEnhancedMonitoringInput = function(input, context) {
  return __assign(__assign({}, input.ShardLevelMetrics !== void 0 && input.ShardLevelMetrics !== null && {
    ShardLevelMetrics: serializeAws_json1_1MetricsNameList(input.ShardLevelMetrics, context)
  }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1GetRecordsInput = function(input, context) {
  return __assign(__assign({}, input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit }), input.ShardIterator !== void 0 && input.ShardIterator !== null && { ShardIterator: input.ShardIterator });
};
var serializeAws_json1_1GetShardIteratorInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign({}, input.ShardId !== void 0 && input.ShardId !== null && { ShardId: input.ShardId }), input.ShardIteratorType !== void 0 && input.ShardIteratorType !== null && { ShardIteratorType: input.ShardIteratorType }), input.StartingSequenceNumber !== void 0 && input.StartingSequenceNumber !== null && { StartingSequenceNumber: input.StartingSequenceNumber }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName }), input.Timestamp !== void 0 && input.Timestamp !== null && { Timestamp: Math.round(input.Timestamp.getTime() / 1e3) });
};
var serializeAws_json1_1IncreaseStreamRetentionPeriodInput = function(input, context) {
  return __assign(__assign({}, input.RetentionPeriodHours !== void 0 && input.RetentionPeriodHours !== null && { RetentionPeriodHours: input.RetentionPeriodHours }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1ListShardsInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign({}, input.ExclusiveStartShardId !== void 0 && input.ExclusiveStartShardId !== null && { ExclusiveStartShardId: input.ExclusiveStartShardId }), input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }), input.ShardFilter !== void 0 && input.ShardFilter !== null && { ShardFilter: serializeAws_json1_1ShardFilter(input.ShardFilter, context) }), input.StreamCreationTimestamp !== void 0 && input.StreamCreationTimestamp !== null && {
    StreamCreationTimestamp: Math.round(input.StreamCreationTimestamp.getTime() / 1e3)
  }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1ListStreamConsumersInput = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }), input.StreamARN !== void 0 && input.StreamARN !== null && { StreamARN: input.StreamARN }), input.StreamCreationTimestamp !== void 0 && input.StreamCreationTimestamp !== null && {
    StreamCreationTimestamp: Math.round(input.StreamCreationTimestamp.getTime() / 1e3)
  });
};
var serializeAws_json1_1ListStreamsInput = function(input, context) {
  return __assign(__assign({}, input.ExclusiveStartStreamName !== void 0 && input.ExclusiveStartStreamName !== null && { ExclusiveStartStreamName: input.ExclusiveStartStreamName }), input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit });
};
var serializeAws_json1_1ListTagsForStreamInput = function(input, context) {
  return __assign(__assign(__assign({}, input.ExclusiveStartTagKey !== void 0 && input.ExclusiveStartTagKey !== null && { ExclusiveStartTagKey: input.ExclusiveStartTagKey }), input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1MergeShardsInput = function(input, context) {
  return __assign(__assign(__assign({}, input.AdjacentShardToMerge !== void 0 && input.AdjacentShardToMerge !== null && { AdjacentShardToMerge: input.AdjacentShardToMerge }), input.ShardToMerge !== void 0 && input.ShardToMerge !== null && { ShardToMerge: input.ShardToMerge }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1MetricsNameList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1PutRecordInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign({}, input.Data !== void 0 && input.Data !== null && { Data: context.base64Encoder(input.Data) }), input.ExplicitHashKey !== void 0 && input.ExplicitHashKey !== null && { ExplicitHashKey: input.ExplicitHashKey }), input.PartitionKey !== void 0 && input.PartitionKey !== null && { PartitionKey: input.PartitionKey }), input.SequenceNumberForOrdering !== void 0 && input.SequenceNumberForOrdering !== null && { SequenceNumberForOrdering: input.SequenceNumberForOrdering }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1PutRecordsInput = function(input, context) {
  return __assign(__assign({}, input.Records !== void 0 && input.Records !== null && { Records: serializeAws_json1_1PutRecordsRequestEntryList(input.Records, context) }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1PutRecordsRequestEntry = function(input, context) {
  return __assign(__assign(__assign({}, input.Data !== void 0 && input.Data !== null && { Data: context.base64Encoder(input.Data) }), input.ExplicitHashKey !== void 0 && input.ExplicitHashKey !== null && { ExplicitHashKey: input.ExplicitHashKey }), input.PartitionKey !== void 0 && input.PartitionKey !== null && { PartitionKey: input.PartitionKey });
};
var serializeAws_json1_1PutRecordsRequestEntryList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1PutRecordsRequestEntry(entry, context);
  });
};
var serializeAws_json1_1RegisterStreamConsumerInput = function(input, context) {
  return __assign(__assign({}, input.ConsumerName !== void 0 && input.ConsumerName !== null && { ConsumerName: input.ConsumerName }), input.StreamARN !== void 0 && input.StreamARN !== null && { StreamARN: input.StreamARN });
};
var serializeAws_json1_1RemoveTagsFromStreamInput = function(input, context) {
  return __assign(__assign({}, input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName }), input.TagKeys !== void 0 && input.TagKeys !== null && { TagKeys: serializeAws_json1_1TagKeyList(input.TagKeys, context) });
};
var serializeAws_json1_1ShardFilter = function(input, context) {
  return __assign(__assign(__assign({}, input.ShardId !== void 0 && input.ShardId !== null && { ShardId: input.ShardId }), input.Timestamp !== void 0 && input.Timestamp !== null && { Timestamp: Math.round(input.Timestamp.getTime() / 1e3) }), input.Type !== void 0 && input.Type !== null && { Type: input.Type });
};
var serializeAws_json1_1SplitShardInput = function(input, context) {
  return __assign(__assign(__assign({}, input.NewStartingHashKey !== void 0 && input.NewStartingHashKey !== null && { NewStartingHashKey: input.NewStartingHashKey }), input.ShardToSplit !== void 0 && input.ShardToSplit !== null && { ShardToSplit: input.ShardToSplit }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1StartingPosition = function(input, context) {
  return __assign(__assign(__assign({}, input.SequenceNumber !== void 0 && input.SequenceNumber !== null && { SequenceNumber: input.SequenceNumber }), input.Timestamp !== void 0 && input.Timestamp !== null && { Timestamp: Math.round(input.Timestamp.getTime() / 1e3) }), input.Type !== void 0 && input.Type !== null && { Type: input.Type });
};
var serializeAws_json1_1StartStreamEncryptionInput = function(input, context) {
  return __assign(__assign(__assign({}, input.EncryptionType !== void 0 && input.EncryptionType !== null && { EncryptionType: input.EncryptionType }), input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1StopStreamEncryptionInput = function(input, context) {
  return __assign(__assign(__assign({}, input.EncryptionType !== void 0 && input.EncryptionType !== null && { EncryptionType: input.EncryptionType }), input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName });
};
var serializeAws_json1_1SubscribeToShardInput = function(input, context) {
  return __assign(__assign(__assign({}, input.ConsumerARN !== void 0 && input.ConsumerARN !== null && { ConsumerARN: input.ConsumerARN }), input.ShardId !== void 0 && input.ShardId !== null && { ShardId: input.ShardId }), input.StartingPosition !== void 0 && input.StartingPosition !== null && {
    StartingPosition: serializeAws_json1_1StartingPosition(input.StartingPosition, context)
  });
};
var serializeAws_json1_1TagKeyList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1TagMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1UpdateShardCountInput = function(input, context) {
  return __assign(__assign(__assign({}, input.ScalingType !== void 0 && input.ScalingType !== null && { ScalingType: input.ScalingType }), input.StreamName !== void 0 && input.StreamName !== null && { StreamName: input.StreamName }), input.TargetShardCount !== void 0 && input.TargetShardCount !== null && { TargetShardCount: input.TargetShardCount });
};
var deserializeAws_json1_1ChildShard = function(output, context) {
  return {
    HashKeyRange: output.HashKeyRange !== void 0 && output.HashKeyRange !== null ? deserializeAws_json1_1HashKeyRange(output.HashKeyRange, context) : void 0,
    ParentShards: output.ParentShards !== void 0 && output.ParentShards !== null ? deserializeAws_json1_1ShardIdList(output.ParentShards, context) : void 0,
    ShardId: expectString(output.ShardId)
  };
};
var deserializeAws_json1_1ChildShardList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ChildShard(entry, context);
  });
};
var deserializeAws_json1_1Consumer = function(output, context) {
  return {
    ConsumerARN: expectString(output.ConsumerARN),
    ConsumerCreationTimestamp: output.ConsumerCreationTimestamp !== void 0 && output.ConsumerCreationTimestamp !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.ConsumerCreationTimestamp))) : void 0,
    ConsumerName: expectString(output.ConsumerName),
    ConsumerStatus: expectString(output.ConsumerStatus)
  };
};
var deserializeAws_json1_1ConsumerDescription = function(output, context) {
  return {
    ConsumerARN: expectString(output.ConsumerARN),
    ConsumerCreationTimestamp: output.ConsumerCreationTimestamp !== void 0 && output.ConsumerCreationTimestamp !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.ConsumerCreationTimestamp))) : void 0,
    ConsumerName: expectString(output.ConsumerName),
    ConsumerStatus: expectString(output.ConsumerStatus),
    StreamARN: expectString(output.StreamARN)
  };
};
var deserializeAws_json1_1ConsumerList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1Consumer(entry, context);
  });
};
var deserializeAws_json1_1DescribeLimitsOutput = function(output, context) {
  return {
    OpenShardCount: expectInt32(output.OpenShardCount),
    ShardLimit: expectInt32(output.ShardLimit)
  };
};
var deserializeAws_json1_1DescribeStreamConsumerOutput = function(output, context) {
  return {
    ConsumerDescription: output.ConsumerDescription !== void 0 && output.ConsumerDescription !== null ? deserializeAws_json1_1ConsumerDescription(output.ConsumerDescription, context) : void 0
  };
};
var deserializeAws_json1_1DescribeStreamOutput = function(output, context) {
  return {
    StreamDescription: output.StreamDescription !== void 0 && output.StreamDescription !== null ? deserializeAws_json1_1StreamDescription(output.StreamDescription, context) : void 0
  };
};
var deserializeAws_json1_1DescribeStreamSummaryOutput = function(output, context) {
  return {
    StreamDescriptionSummary: output.StreamDescriptionSummary !== void 0 && output.StreamDescriptionSummary !== null ? deserializeAws_json1_1StreamDescriptionSummary(output.StreamDescriptionSummary, context) : void 0
  };
};
var deserializeAws_json1_1EnhancedMetrics = function(output, context) {
  return {
    ShardLevelMetrics: output.ShardLevelMetrics !== void 0 && output.ShardLevelMetrics !== null ? deserializeAws_json1_1MetricsNameList(output.ShardLevelMetrics, context) : void 0
  };
};
var deserializeAws_json1_1EnhancedMonitoringList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1EnhancedMetrics(entry, context);
  });
};
var deserializeAws_json1_1EnhancedMonitoringOutput = function(output, context) {
  return {
    CurrentShardLevelMetrics: output.CurrentShardLevelMetrics !== void 0 && output.CurrentShardLevelMetrics !== null ? deserializeAws_json1_1MetricsNameList(output.CurrentShardLevelMetrics, context) : void 0,
    DesiredShardLevelMetrics: output.DesiredShardLevelMetrics !== void 0 && output.DesiredShardLevelMetrics !== null ? deserializeAws_json1_1MetricsNameList(output.DesiredShardLevelMetrics, context) : void 0,
    StreamName: expectString(output.StreamName)
  };
};
var deserializeAws_json1_1ExpiredIteratorException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_1ExpiredNextTokenException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_1GetRecordsOutput = function(output, context) {
  return {
    ChildShards: output.ChildShards !== void 0 && output.ChildShards !== null ? deserializeAws_json1_1ChildShardList(output.ChildShards, context) : void 0,
    MillisBehindLatest: expectLong(output.MillisBehindLatest),
    NextShardIterator: expectString(output.NextShardIterator),
    Records: output.Records !== void 0 && output.Records !== null ? deserializeAws_json1_1RecordList(output.Records, context) : void 0
  };
};
var deserializeAws_json1_1GetShardIteratorOutput = function(output, context) {
  return {
    ShardIterator: expectString(output.ShardIterator)
  };
};
var deserializeAws_json1_1HashKeyRange = function(output, context) {
  return {
    EndingHashKey: expectString(output.EndingHashKey),
    StartingHashKey: expectString(output.StartingHashKey)
  };
};
var deserializeAws_json1_1InternalFailureException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_1InvalidArgumentException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_1KMSAccessDeniedException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_1KMSDisabledException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_1KMSInvalidStateException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_1KMSNotFoundException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_1KMSOptInRequired = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_1KMSThrottlingException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_1LimitExceededException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_1ListShardsOutput = function(output, context) {
  return {
    NextToken: expectString(output.NextToken),
    Shards: output.Shards !== void 0 && output.Shards !== null ? deserializeAws_json1_1ShardList(output.Shards, context) : void 0
  };
};
var deserializeAws_json1_1ListStreamConsumersOutput = function(output, context) {
  return {
    Consumers: output.Consumers !== void 0 && output.Consumers !== null ? deserializeAws_json1_1ConsumerList(output.Consumers, context) : void 0,
    NextToken: expectString(output.NextToken)
  };
};
var deserializeAws_json1_1ListStreamsOutput = function(output, context) {
  return {
    HasMoreStreams: expectBoolean(output.HasMoreStreams),
    StreamNames: output.StreamNames !== void 0 && output.StreamNames !== null ? deserializeAws_json1_1StreamNameList(output.StreamNames, context) : void 0
  };
};
var deserializeAws_json1_1ListTagsForStreamOutput = function(output, context) {
  return {
    HasMoreTags: expectBoolean(output.HasMoreTags),
    Tags: output.Tags !== void 0 && output.Tags !== null ? deserializeAws_json1_1TagList(output.Tags, context) : void 0
  };
};
var deserializeAws_json1_1MetricsNameList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_json1_1ProvisionedThroughputExceededException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_1PutRecordOutput = function(output, context) {
  return {
    EncryptionType: expectString(output.EncryptionType),
    SequenceNumber: expectString(output.SequenceNumber),
    ShardId: expectString(output.ShardId)
  };
};
var deserializeAws_json1_1PutRecordsOutput = function(output, context) {
  return {
    EncryptionType: expectString(output.EncryptionType),
    FailedRecordCount: expectInt32(output.FailedRecordCount),
    Records: output.Records !== void 0 && output.Records !== null ? deserializeAws_json1_1PutRecordsResultEntryList(output.Records, context) : void 0
  };
};
var deserializeAws_json1_1PutRecordsResultEntry = function(output, context) {
  return {
    ErrorCode: expectString(output.ErrorCode),
    ErrorMessage: expectString(output.ErrorMessage),
    SequenceNumber: expectString(output.SequenceNumber),
    ShardId: expectString(output.ShardId)
  };
};
var deserializeAws_json1_1PutRecordsResultEntryList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1PutRecordsResultEntry(entry, context);
  });
};
var deserializeAws_json1_1_Record = function(output, context) {
  return {
    ApproximateArrivalTimestamp: output.ApproximateArrivalTimestamp !== void 0 && output.ApproximateArrivalTimestamp !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.ApproximateArrivalTimestamp))) : void 0,
    Data: output.Data !== void 0 && output.Data !== null ? context.base64Decoder(output.Data) : void 0,
    EncryptionType: expectString(output.EncryptionType),
    PartitionKey: expectString(output.PartitionKey),
    SequenceNumber: expectString(output.SequenceNumber)
  };
};
var deserializeAws_json1_1RecordList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1_Record(entry, context);
  });
};
var deserializeAws_json1_1RegisterStreamConsumerOutput = function(output, context) {
  return {
    Consumer: output.Consumer !== void 0 && output.Consumer !== null ? deserializeAws_json1_1Consumer(output.Consumer, context) : void 0
  };
};
var deserializeAws_json1_1ResourceInUseException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_1ResourceNotFoundException = function(output, context) {
  return {
    message: expectString(output.message)
  };
};
var deserializeAws_json1_1SequenceNumberRange = function(output, context) {
  return {
    EndingSequenceNumber: expectString(output.EndingSequenceNumber),
    StartingSequenceNumber: expectString(output.StartingSequenceNumber)
  };
};
var deserializeAws_json1_1Shard = function(output, context) {
  return {
    AdjacentParentShardId: expectString(output.AdjacentParentShardId),
    HashKeyRange: output.HashKeyRange !== void 0 && output.HashKeyRange !== null ? deserializeAws_json1_1HashKeyRange(output.HashKeyRange, context) : void 0,
    ParentShardId: expectString(output.ParentShardId),
    SequenceNumberRange: output.SequenceNumberRange !== void 0 && output.SequenceNumberRange !== null ? deserializeAws_json1_1SequenceNumberRange(output.SequenceNumberRange, context) : void 0,
    ShardId: expectString(output.ShardId)
  };
};
var deserializeAws_json1_1ShardIdList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_json1_1ShardList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1Shard(entry, context);
  });
};
var deserializeAws_json1_1StreamDescription = function(output, context) {
  return {
    EncryptionType: expectString(output.EncryptionType),
    EnhancedMonitoring: output.EnhancedMonitoring !== void 0 && output.EnhancedMonitoring !== null ? deserializeAws_json1_1EnhancedMonitoringList(output.EnhancedMonitoring, context) : void 0,
    HasMoreShards: expectBoolean(output.HasMoreShards),
    KeyId: expectString(output.KeyId),
    RetentionPeriodHours: expectInt32(output.RetentionPeriodHours),
    Shards: output.Shards !== void 0 && output.Shards !== null ? deserializeAws_json1_1ShardList(output.Shards, context) : void 0,
    StreamARN: expectString(output.StreamARN),
    StreamCreationTimestamp: output.StreamCreationTimestamp !== void 0 && output.StreamCreationTimestamp !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.StreamCreationTimestamp))) : void 0,
    StreamName: expectString(output.StreamName),
    StreamStatus: expectString(output.StreamStatus)
  };
};
var deserializeAws_json1_1StreamDescriptionSummary = function(output, context) {
  return {
    ConsumerCount: expectInt32(output.ConsumerCount),
    EncryptionType: expectString(output.EncryptionType),
    EnhancedMonitoring: output.EnhancedMonitoring !== void 0 && output.EnhancedMonitoring !== null ? deserializeAws_json1_1EnhancedMonitoringList(output.EnhancedMonitoring, context) : void 0,
    KeyId: expectString(output.KeyId),
    OpenShardCount: expectInt32(output.OpenShardCount),
    RetentionPeriodHours: expectInt32(output.RetentionPeriodHours),
    StreamARN: expectString(output.StreamARN),
    StreamCreationTimestamp: output.StreamCreationTimestamp !== void 0 && output.StreamCreationTimestamp !== null ? expectNonNull(parseEpochTimestamp(expectNumber(output.StreamCreationTimestamp))) : void 0,
    StreamName: expectString(output.StreamName),
    StreamStatus: expectString(output.StreamStatus)
  };
};
var deserializeAws_json1_1StreamNameList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_json1_1SubscribeToShardEvent = function(output, context) {
  return {
    ChildShards: output.ChildShards !== void 0 && output.ChildShards !== null ? deserializeAws_json1_1ChildShardList(output.ChildShards, context) : void 0,
    ContinuationSequenceNumber: expectString(output.ContinuationSequenceNumber),
    MillisBehindLatest: expectLong(output.MillisBehindLatest),
    Records: output.Records !== void 0 && output.Records !== null ? deserializeAws_json1_1RecordList(output.Records, context) : void 0
  };
};
var deserializeAws_json1_1SubscribeToShardEventStream = function(output, context) {
  if (output.InternalFailureException !== void 0 && output.InternalFailureException !== null) {
    return {
      InternalFailureException: deserializeAws_json1_1InternalFailureException(output.InternalFailureException, context)
    };
  }
  if (output.KMSAccessDeniedException !== void 0 && output.KMSAccessDeniedException !== null) {
    return {
      KMSAccessDeniedException: deserializeAws_json1_1KMSAccessDeniedException(output.KMSAccessDeniedException, context)
    };
  }
  if (output.KMSDisabledException !== void 0 && output.KMSDisabledException !== null) {
    return {
      KMSDisabledException: deserializeAws_json1_1KMSDisabledException(output.KMSDisabledException, context)
    };
  }
  if (output.KMSInvalidStateException !== void 0 && output.KMSInvalidStateException !== null) {
    return {
      KMSInvalidStateException: deserializeAws_json1_1KMSInvalidStateException(output.KMSInvalidStateException, context)
    };
  }
  if (output.KMSNotFoundException !== void 0 && output.KMSNotFoundException !== null) {
    return {
      KMSNotFoundException: deserializeAws_json1_1KMSNotFoundException(output.KMSNotFoundException, context)
    };
  }
  if (output.KMSOptInRequired !== void 0 && output.KMSOptInRequired !== null) {
    return {
      KMSOptInRequired: deserializeAws_json1_1KMSOptInRequired(output.KMSOptInRequired, context)
    };
  }
  if (output.KMSThrottlingException !== void 0 && output.KMSThrottlingException !== null) {
    return {
      KMSThrottlingException: deserializeAws_json1_1KMSThrottlingException(output.KMSThrottlingException, context)
    };
  }
  if (output.ResourceInUseException !== void 0 && output.ResourceInUseException !== null) {
    return {
      ResourceInUseException: deserializeAws_json1_1ResourceInUseException(output.ResourceInUseException, context)
    };
  }
  if (output.ResourceNotFoundException !== void 0 && output.ResourceNotFoundException !== null) {
    return {
      ResourceNotFoundException: deserializeAws_json1_1ResourceNotFoundException(output.ResourceNotFoundException, context)
    };
  }
  if (output.SubscribeToShardEvent !== void 0 && output.SubscribeToShardEvent !== null) {
    return {
      SubscribeToShardEvent: deserializeAws_json1_1SubscribeToShardEvent(output.SubscribeToShardEvent, context)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var deserializeAws_json1_1SubscribeToShardOutput = function(output, context) {
  return {
    EventStream: output.EventStream !== void 0 && output.EventStream !== null ? deserializeAws_json1_1SubscribeToShardEventStream(expectUnion(output.EventStream), context) : void 0
  };
};
var deserializeAws_json1_1Tag = function(output, context) {
  return {
    Key: expectString(output.Key),
    Value: expectString(output.Value)
  };
};
var deserializeAws_json1_1TagList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1Tag(entry, context);
  });
};
var deserializeAws_json1_1UpdateShardCountOutput = function(output, context) {
  return {
    CurrentShardCount: expectInt32(output.CurrentShardCount),
    StreamName: expectString(output.StreamName),
    TargetShardCount: expectInt32(output.TargetShardCount)
  };
};
var deserializeMetadata2 = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody2 = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString2 = function(streamBody, context) {
  return collectBody2(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var buildHttpRpcRequest2 = function(context, headers, path, resolvedHostname, body) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          contents = {
            protocol,
            hostname,
            port,
            method: "POST",
            path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
            headers
          };
          if (resolvedHostname !== void 0) {
            contents.hostname = resolvedHostname;
          }
          if (body !== void 0) {
            contents.body = body;
          }
          return [2, new HttpRequest(contents)];
      }
    });
  });
};
var parseBody2 = function(streamBody, context) {
  return collectBodyString2(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });
};
var loadRestJsonErrorCode2 = function(output, data) {
  var findKey = function(object, key) {
    return Object.keys(object).find(function(k) {
      return k.toLowerCase() === key.toLowerCase();
    });
  };
  var sanitizeErrorCode = function(rawValue) {
    var cleanValue = rawValue;
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  var headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
  return "";
};

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/AddTagsToStreamCommand.js
var AddTagsToStreamCommand = function(_super) {
  __extends(AddTagsToStreamCommand2, _super);
  function AddTagsToStreamCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  AddTagsToStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "AddTagsToStreamCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: AddTagsToStreamInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  AddTagsToStreamCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1AddTagsToStreamCommand(input, context);
  };
  AddTagsToStreamCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1AddTagsToStreamCommand(output, context);
  };
  return AddTagsToStreamCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/CreateStreamCommand.js
var CreateStreamCommand = function(_super) {
  __extends(CreateStreamCommand2, _super);
  function CreateStreamCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "CreateStreamCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateStreamInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateStreamCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CreateStreamCommand(input, context);
  };
  CreateStreamCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CreateStreamCommand(output, context);
  };
  return CreateStreamCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/DecreaseStreamRetentionPeriodCommand.js
var DecreaseStreamRetentionPeriodCommand = function(_super) {
  __extends(DecreaseStreamRetentionPeriodCommand2, _super);
  function DecreaseStreamRetentionPeriodCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DecreaseStreamRetentionPeriodCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "DecreaseStreamRetentionPeriodCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DecreaseStreamRetentionPeriodInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DecreaseStreamRetentionPeriodCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DecreaseStreamRetentionPeriodCommand(input, context);
  };
  DecreaseStreamRetentionPeriodCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DecreaseStreamRetentionPeriodCommand(output, context);
  };
  return DecreaseStreamRetentionPeriodCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/DeleteStreamCommand.js
var DeleteStreamCommand = function(_super) {
  __extends(DeleteStreamCommand2, _super);
  function DeleteStreamCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "DeleteStreamCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteStreamInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteStreamCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteStreamCommand(input, context);
  };
  DeleteStreamCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteStreamCommand(output, context);
  };
  return DeleteStreamCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/DeregisterStreamConsumerCommand.js
var DeregisterStreamConsumerCommand = function(_super) {
  __extends(DeregisterStreamConsumerCommand2, _super);
  function DeregisterStreamConsumerCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeregisterStreamConsumerCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "DeregisterStreamConsumerCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeregisterStreamConsumerInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeregisterStreamConsumerCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeregisterStreamConsumerCommand(input, context);
  };
  DeregisterStreamConsumerCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeregisterStreamConsumerCommand(output, context);
  };
  return DeregisterStreamConsumerCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/DescribeLimitsCommand.js
var DescribeLimitsCommand2 = function(_super) {
  __extends(DescribeLimitsCommand3, _super);
  function DescribeLimitsCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeLimitsCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "DescribeLimitsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeLimitsInput2.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeLimitsOutput2.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeLimitsCommand3.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeLimitsCommand(input, context);
  };
  DescribeLimitsCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeLimitsCommand(output, context);
  };
  return DescribeLimitsCommand3;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/DescribeStreamCommand.js
var DescribeStreamCommand = function(_super) {
  __extends(DescribeStreamCommand2, _super);
  function DescribeStreamCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "DescribeStreamCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeStreamInput.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeStreamOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeStreamCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeStreamCommand(input, context);
  };
  DescribeStreamCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeStreamCommand(output, context);
  };
  return DescribeStreamCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/DescribeStreamConsumerCommand.js
var DescribeStreamConsumerCommand = function(_super) {
  __extends(DescribeStreamConsumerCommand2, _super);
  function DescribeStreamConsumerCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeStreamConsumerCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "DescribeStreamConsumerCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeStreamConsumerInput.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeStreamConsumerOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeStreamConsumerCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeStreamConsumerCommand(input, context);
  };
  DescribeStreamConsumerCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeStreamConsumerCommand(output, context);
  };
  return DescribeStreamConsumerCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/DescribeStreamSummaryCommand.js
var DescribeStreamSummaryCommand = function(_super) {
  __extends(DescribeStreamSummaryCommand2, _super);
  function DescribeStreamSummaryCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeStreamSummaryCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "DescribeStreamSummaryCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeStreamSummaryInput.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeStreamSummaryOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeStreamSummaryCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeStreamSummaryCommand(input, context);
  };
  DescribeStreamSummaryCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeStreamSummaryCommand(output, context);
  };
  return DescribeStreamSummaryCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/DisableEnhancedMonitoringCommand.js
var DisableEnhancedMonitoringCommand = function(_super) {
  __extends(DisableEnhancedMonitoringCommand2, _super);
  function DisableEnhancedMonitoringCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DisableEnhancedMonitoringCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "DisableEnhancedMonitoringCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DisableEnhancedMonitoringInput.filterSensitiveLog,
      outputFilterSensitiveLog: EnhancedMonitoringOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DisableEnhancedMonitoringCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DisableEnhancedMonitoringCommand(input, context);
  };
  DisableEnhancedMonitoringCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DisableEnhancedMonitoringCommand(output, context);
  };
  return DisableEnhancedMonitoringCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/EnableEnhancedMonitoringCommand.js
var EnableEnhancedMonitoringCommand = function(_super) {
  __extends(EnableEnhancedMonitoringCommand2, _super);
  function EnableEnhancedMonitoringCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  EnableEnhancedMonitoringCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "EnableEnhancedMonitoringCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: EnableEnhancedMonitoringInput.filterSensitiveLog,
      outputFilterSensitiveLog: EnhancedMonitoringOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  EnableEnhancedMonitoringCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1EnableEnhancedMonitoringCommand(input, context);
  };
  EnableEnhancedMonitoringCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1EnableEnhancedMonitoringCommand(output, context);
  };
  return EnableEnhancedMonitoringCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/GetRecordsCommand.js
var GetRecordsCommand = function(_super) {
  __extends(GetRecordsCommand2, _super);
  function GetRecordsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetRecordsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "GetRecordsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetRecordsInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetRecordsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetRecordsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetRecordsCommand(input, context);
  };
  GetRecordsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetRecordsCommand(output, context);
  };
  return GetRecordsCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/GetShardIteratorCommand.js
var GetShardIteratorCommand = function(_super) {
  __extends(GetShardIteratorCommand2, _super);
  function GetShardIteratorCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetShardIteratorCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "GetShardIteratorCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetShardIteratorInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetShardIteratorOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetShardIteratorCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetShardIteratorCommand(input, context);
  };
  GetShardIteratorCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetShardIteratorCommand(output, context);
  };
  return GetShardIteratorCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/IncreaseStreamRetentionPeriodCommand.js
var IncreaseStreamRetentionPeriodCommand = function(_super) {
  __extends(IncreaseStreamRetentionPeriodCommand2, _super);
  function IncreaseStreamRetentionPeriodCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  IncreaseStreamRetentionPeriodCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "IncreaseStreamRetentionPeriodCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: IncreaseStreamRetentionPeriodInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  IncreaseStreamRetentionPeriodCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1IncreaseStreamRetentionPeriodCommand(input, context);
  };
  IncreaseStreamRetentionPeriodCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand(output, context);
  };
  return IncreaseStreamRetentionPeriodCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/ListShardsCommand.js
var ListShardsCommand = function(_super) {
  __extends(ListShardsCommand2, _super);
  function ListShardsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListShardsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "ListShardsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListShardsInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListShardsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListShardsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1ListShardsCommand(input, context);
  };
  ListShardsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1ListShardsCommand(output, context);
  };
  return ListShardsCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/ListStreamConsumersCommand.js
var ListStreamConsumersCommand = function(_super) {
  __extends(ListStreamConsumersCommand2, _super);
  function ListStreamConsumersCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListStreamConsumersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "ListStreamConsumersCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListStreamConsumersInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListStreamConsumersOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListStreamConsumersCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1ListStreamConsumersCommand(input, context);
  };
  ListStreamConsumersCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1ListStreamConsumersCommand(output, context);
  };
  return ListStreamConsumersCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/ListStreamsCommand.js
var ListStreamsCommand = function(_super) {
  __extends(ListStreamsCommand2, _super);
  function ListStreamsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListStreamsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "ListStreamsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListStreamsInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListStreamsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListStreamsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1ListStreamsCommand(input, context);
  };
  ListStreamsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1ListStreamsCommand(output, context);
  };
  return ListStreamsCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/ListTagsForStreamCommand.js
var ListTagsForStreamCommand = function(_super) {
  __extends(ListTagsForStreamCommand2, _super);
  function ListTagsForStreamCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListTagsForStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "ListTagsForStreamCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListTagsForStreamInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListTagsForStreamOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListTagsForStreamCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1ListTagsForStreamCommand(input, context);
  };
  ListTagsForStreamCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1ListTagsForStreamCommand(output, context);
  };
  return ListTagsForStreamCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/MergeShardsCommand.js
var MergeShardsCommand = function(_super) {
  __extends(MergeShardsCommand2, _super);
  function MergeShardsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  MergeShardsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "MergeShardsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: MergeShardsInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  MergeShardsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1MergeShardsCommand(input, context);
  };
  MergeShardsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1MergeShardsCommand(output, context);
  };
  return MergeShardsCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/PutRecordCommand.js
var PutRecordCommand = function(_super) {
  __extends(PutRecordCommand2, _super);
  function PutRecordCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutRecordCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "PutRecordCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutRecordInput.filterSensitiveLog,
      outputFilterSensitiveLog: PutRecordOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutRecordCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutRecordCommand(input, context);
  };
  PutRecordCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutRecordCommand(output, context);
  };
  return PutRecordCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/PutRecordsCommand.js
var PutRecordsCommand = function(_super) {
  __extends(PutRecordsCommand2, _super);
  function PutRecordsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutRecordsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "PutRecordsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutRecordsInput.filterSensitiveLog,
      outputFilterSensitiveLog: PutRecordsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutRecordsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutRecordsCommand(input, context);
  };
  PutRecordsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutRecordsCommand(output, context);
  };
  return PutRecordsCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/RegisterStreamConsumerCommand.js
var RegisterStreamConsumerCommand = function(_super) {
  __extends(RegisterStreamConsumerCommand2, _super);
  function RegisterStreamConsumerCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  RegisterStreamConsumerCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "RegisterStreamConsumerCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: RegisterStreamConsumerInput.filterSensitiveLog,
      outputFilterSensitiveLog: RegisterStreamConsumerOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  RegisterStreamConsumerCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1RegisterStreamConsumerCommand(input, context);
  };
  RegisterStreamConsumerCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1RegisterStreamConsumerCommand(output, context);
  };
  return RegisterStreamConsumerCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/RemoveTagsFromStreamCommand.js
var RemoveTagsFromStreamCommand = function(_super) {
  __extends(RemoveTagsFromStreamCommand2, _super);
  function RemoveTagsFromStreamCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  RemoveTagsFromStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "RemoveTagsFromStreamCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: RemoveTagsFromStreamInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  RemoveTagsFromStreamCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1RemoveTagsFromStreamCommand(input, context);
  };
  RemoveTagsFromStreamCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1RemoveTagsFromStreamCommand(output, context);
  };
  return RemoveTagsFromStreamCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/SplitShardCommand.js
var SplitShardCommand = function(_super) {
  __extends(SplitShardCommand2, _super);
  function SplitShardCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SplitShardCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "SplitShardCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SplitShardInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SplitShardCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1SplitShardCommand(input, context);
  };
  SplitShardCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1SplitShardCommand(output, context);
  };
  return SplitShardCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/StartStreamEncryptionCommand.js
var StartStreamEncryptionCommand = function(_super) {
  __extends(StartStreamEncryptionCommand2, _super);
  function StartStreamEncryptionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  StartStreamEncryptionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "StartStreamEncryptionCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: StartStreamEncryptionInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  StartStreamEncryptionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1StartStreamEncryptionCommand(input, context);
  };
  StartStreamEncryptionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1StartStreamEncryptionCommand(output, context);
  };
  return StartStreamEncryptionCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/StopStreamEncryptionCommand.js
var StopStreamEncryptionCommand = function(_super) {
  __extends(StopStreamEncryptionCommand2, _super);
  function StopStreamEncryptionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  StopStreamEncryptionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "StopStreamEncryptionCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: StopStreamEncryptionInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  StopStreamEncryptionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1StopStreamEncryptionCommand(input, context);
  };
  StopStreamEncryptionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1StopStreamEncryptionCommand(output, context);
  };
  return StopStreamEncryptionCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/SubscribeToShardCommand.js
var SubscribeToShardCommand = function(_super) {
  __extends(SubscribeToShardCommand2, _super);
  function SubscribeToShardCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SubscribeToShardCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "SubscribeToShardCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SubscribeToShardInput.filterSensitiveLog,
      outputFilterSensitiveLog: SubscribeToShardOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SubscribeToShardCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1SubscribeToShardCommand(input, context);
  };
  SubscribeToShardCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1SubscribeToShardCommand(output, context);
  };
  return SubscribeToShardCommand2;
}(Command);

// node_modules/@aws-sdk/client-kinesis/dist-es/commands/UpdateShardCountCommand.js
var UpdateShardCountCommand = function(_super) {
  __extends(UpdateShardCountCommand2, _super);
  function UpdateShardCountCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateShardCountCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "KinesisClient";
    var commandName = "UpdateShardCountCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateShardCountInput.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateShardCountOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateShardCountCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1UpdateShardCountCommand(input, context);
  };
  UpdateShardCountCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1UpdateShardCountCommand(output, context);
  };
  return UpdateShardCountCommand2;
}(Command);

// node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js
var resolveEventStreamSerdeConfig = function(input) {
  return __assign(__assign({}, input), { eventStreamMarshaller: input.eventStreamSerdeProvider(input) });
};

// node_modules/@aws-sdk/client-kinesis/package.json
var name2 = "@aws-sdk/client-kinesis";
var description2 = "AWS SDK for JavaScript Kinesis Client for Node.js, Browser and React Native";
var version2 = "3.42.0";
var scripts2 = {
  build: "yarn build:cjs && yarn build:es && yarn build:types",
  "build:cjs": "tsc -p tsconfig.json",
  "build:docs": "yarn clean:docs && typedoc ./",
  "build:es": "tsc -p tsconfig.es.json",
  "build:types": "tsc -p tsconfig.types.json",
  clean: "yarn clean:dist && yarn clean:docs",
  "clean:dist": "rimraf ./dist",
  "clean:docs": "rimraf ./docs",
  "downlevel-dts": "downlevel-dts dist-types dist-types/ts3.4",
  test: "exit 0"
};
var main2 = "./dist-cjs/index.js";
var types2 = "./dist-types/index.d.ts";
var module2 = "./dist-es/index.js";
var sideEffects2 = false;
var dependencies2 = {
  "@aws-crypto/sha256-browser": "2.0.0",
  "@aws-crypto/sha256-js": "2.0.0",
  "@aws-sdk/client-sts": "3.42.0",
  "@aws-sdk/config-resolver": "3.40.0",
  "@aws-sdk/credential-provider-node": "3.41.0",
  "@aws-sdk/eventstream-serde-browser": "3.40.0",
  "@aws-sdk/eventstream-serde-config-resolver": "3.40.0",
  "@aws-sdk/eventstream-serde-node": "3.40.0",
  "@aws-sdk/fetch-http-handler": "3.40.0",
  "@aws-sdk/hash-node": "3.40.0",
  "@aws-sdk/invalid-dependency": "3.40.0",
  "@aws-sdk/middleware-content-length": "3.40.0",
  "@aws-sdk/middleware-host-header": "3.40.0",
  "@aws-sdk/middleware-logger": "3.40.0",
  "@aws-sdk/middleware-retry": "3.40.0",
  "@aws-sdk/middleware-serde": "3.40.0",
  "@aws-sdk/middleware-signing": "3.40.0",
  "@aws-sdk/middleware-stack": "3.40.0",
  "@aws-sdk/middleware-user-agent": "3.40.0",
  "@aws-sdk/node-config-provider": "3.40.0",
  "@aws-sdk/node-http-handler": "3.40.0",
  "@aws-sdk/protocol-http": "3.40.0",
  "@aws-sdk/smithy-client": "3.41.0",
  "@aws-sdk/types": "3.40.0",
  "@aws-sdk/url-parser": "3.40.0",
  "@aws-sdk/util-base64-browser": "3.37.0",
  "@aws-sdk/util-base64-node": "3.37.0",
  "@aws-sdk/util-body-length-browser": "3.37.0",
  "@aws-sdk/util-body-length-node": "3.37.0",
  "@aws-sdk/util-user-agent-browser": "3.40.0",
  "@aws-sdk/util-user-agent-node": "3.40.0",
  "@aws-sdk/util-utf8-browser": "3.37.0",
  "@aws-sdk/util-utf8-node": "3.37.0",
  "@aws-sdk/util-waiter": "3.40.0",
  tslib: "^2.3.0"
};
var devDependencies2 = {
  "@aws-sdk/service-client-documentation-generator": "3.38.0",
  "@types/node": "^12.7.5",
  "downlevel-dts": "0.7.0",
  jest: "^26.1.0",
  rimraf: "^3.0.0",
  "ts-jest": "^26.4.1",
  typedoc: "^0.19.2",
  typescript: "~4.3.5"
};
var engines2 = {
  node: ">=10.0.0"
};
var typesVersions2 = {
  "<4.0": {
    "dist-types/*": [
      "dist-types/ts3.4/*"
    ]
  }
};
var files2 = [
  "dist-*"
];
var author2 = {
  name: "AWS SDK for JavaScript Team",
  url: "https://aws.amazon.com/javascript/"
};
var license2 = "Apache-2.0";
var browser2 = {
  "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
};
var react_native2 = {
  "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
};
var homepage2 = "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-kinesis";
var repository2 = {
  type: "git",
  url: "https://github.com/aws/aws-sdk-js-v3.git",
  directory: "clients/client-kinesis"
};
var package_default2 = {
  name: name2,
  description: description2,
  version: version2,
  scripts: scripts2,
  main: main2,
  types: types2,
  module: module2,
  sideEffects: sideEffects2,
  dependencies: dependencies2,
  devDependencies: devDependencies2,
  engines: engines2,
  typesVersions: typesVersions2,
  files: files2,
  author: author2,
  license: license2,
  browser: browser2,
  "react-native": react_native2,
  homepage: homepage2,
  repository: repository2
};

// node_modules/@aws-sdk/client-kinesis/dist-es/runtimeConfig.browser.js
var import_sha256_browser2 = __toModule(require_build5());

// node_modules/@aws-sdk/eventstream-marshaller/dist-es/EventStreamMarshaller.js
var import_crc322 = __toModule(require_build6());

// node_modules/@aws-sdk/eventstream-marshaller/dist-es/Int64.js
var Int64 = function() {
  function Int642(bytes) {
    this.bytes = bytes;
    if (bytes.byteLength !== 8) {
      throw new Error("Int64 buffers must be exactly 8 bytes");
    }
  }
  Int642.fromNumber = function(number) {
    if (number > 9223372036854776e3 || number < -9223372036854776e3) {
      throw new Error(number + " is too large (or, if negative, too small) to represent as an Int64");
    }
    var bytes = new Uint8Array(8);
    for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
      bytes[i] = remaining;
    }
    if (number < 0) {
      negate(bytes);
    }
    return new Int642(bytes);
  };
  Int642.prototype.valueOf = function() {
    var bytes = this.bytes.slice(0);
    var negative = bytes[0] & 128;
    if (negative) {
      negate(bytes);
    }
    return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);
  };
  Int642.prototype.toString = function() {
    return String(this.valueOf());
  };
  return Int642;
}();
function negate(bytes) {
  for (var i = 0; i < 8; i++) {
    bytes[i] ^= 255;
  }
  for (var i = 7; i > -1; i--) {
    bytes[i]++;
    if (bytes[i] !== 0)
      break;
  }
}

// node_modules/@aws-sdk/eventstream-marshaller/dist-es/HeaderMarshaller.js
var HeaderMarshaller = function() {
  function HeaderMarshaller2(toUtf87, fromUtf88) {
    this.toUtf8 = toUtf87;
    this.fromUtf8 = fromUtf88;
  }
  HeaderMarshaller2.prototype.format = function(headers) {
    var e_1, _a, e_2, _b;
    var chunks = [];
    try {
      for (var _c = __values(Object.keys(headers)), _d = _c.next(); !_d.done; _d = _c.next()) {
        var headerName = _d.value;
        var bytes = this.fromUtf8(headerName);
        chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_d && !_d.done && (_a = _c.return))
          _a.call(_c);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    var out = new Uint8Array(chunks.reduce(function(carry, bytes2) {
      return carry + bytes2.byteLength;
    }, 0));
    var position = 0;
    try {
      for (var chunks_1 = __values(chunks), chunks_1_1 = chunks_1.next(); !chunks_1_1.done; chunks_1_1 = chunks_1.next()) {
        var chunk = chunks_1_1.value;
        out.set(chunk, position);
        position += chunk.byteLength;
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (chunks_1_1 && !chunks_1_1.done && (_b = chunks_1.return))
          _b.call(chunks_1);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    return out;
  };
  HeaderMarshaller2.prototype.formatHeaderValue = function(header) {
    switch (header.type) {
      case "boolean":
        return Uint8Array.from([header.value ? 0 : 1]);
      case "byte":
        return Uint8Array.from([2, header.value]);
      case "short":
        var shortView = new DataView(new ArrayBuffer(3));
        shortView.setUint8(0, 3);
        shortView.setInt16(1, header.value, false);
        return new Uint8Array(shortView.buffer);
      case "integer":
        var intView = new DataView(new ArrayBuffer(5));
        intView.setUint8(0, 4);
        intView.setInt32(1, header.value, false);
        return new Uint8Array(intView.buffer);
      case "long":
        var longBytes = new Uint8Array(9);
        longBytes[0] = 5;
        longBytes.set(header.value.bytes, 1);
        return longBytes;
      case "binary":
        var binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
        binView.setUint8(0, 6);
        binView.setUint16(1, header.value.byteLength, false);
        var binBytes = new Uint8Array(binView.buffer);
        binBytes.set(header.value, 3);
        return binBytes;
      case "string":
        var utf8Bytes = this.fromUtf8(header.value);
        var strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
        strView.setUint8(0, 7);
        strView.setUint16(1, utf8Bytes.byteLength, false);
        var strBytes = new Uint8Array(strView.buffer);
        strBytes.set(utf8Bytes, 3);
        return strBytes;
      case "timestamp":
        var tsBytes = new Uint8Array(9);
        tsBytes[0] = 8;
        tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
        return tsBytes;
      case "uuid":
        if (!UUID_PATTERN.test(header.value)) {
          throw new Error("Invalid UUID received: " + header.value);
        }
        var uuidBytes = new Uint8Array(17);
        uuidBytes[0] = 9;
        uuidBytes.set(fromHex(header.value.replace(/\-/g, "")), 1);
        return uuidBytes;
    }
  };
  HeaderMarshaller2.prototype.parse = function(headers) {
    var out = {};
    var position = 0;
    while (position < headers.byteLength) {
      var nameLength = headers.getUint8(position++);
      var name7 = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
      position += nameLength;
      switch (headers.getUint8(position++)) {
        case 0:
          out[name7] = {
            type: BOOLEAN_TAG,
            value: true
          };
          break;
        case 1:
          out[name7] = {
            type: BOOLEAN_TAG,
            value: false
          };
          break;
        case 2:
          out[name7] = {
            type: BYTE_TAG,
            value: headers.getInt8(position++)
          };
          break;
        case 3:
          out[name7] = {
            type: SHORT_TAG,
            value: headers.getInt16(position, false)
          };
          position += 2;
          break;
        case 4:
          out[name7] = {
            type: INT_TAG,
            value: headers.getInt32(position, false)
          };
          position += 4;
          break;
        case 5:
          out[name7] = {
            type: LONG_TAG,
            value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
          };
          position += 8;
          break;
        case 6:
          var binaryLength = headers.getUint16(position, false);
          position += 2;
          out[name7] = {
            type: BINARY_TAG,
            value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
          };
          position += binaryLength;
          break;
        case 7:
          var stringLength = headers.getUint16(position, false);
          position += 2;
          out[name7] = {
            type: STRING_TAG,
            value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
          };
          position += stringLength;
          break;
        case 8:
          out[name7] = {
            type: TIMESTAMP_TAG,
            value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
          };
          position += 8;
          break;
        case 9:
          var uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
          position += 16;
          out[name7] = {
            type: UUID_TAG,
            value: toHex(uuidBytes.subarray(0, 4)) + "-" + toHex(uuidBytes.subarray(4, 6)) + "-" + toHex(uuidBytes.subarray(6, 8)) + "-" + toHex(uuidBytes.subarray(8, 10)) + "-" + toHex(uuidBytes.subarray(10))
          };
          break;
        default:
          throw new Error("Unrecognized header type tag");
      }
    }
    return out;
  };
  return HeaderMarshaller2;
}();
var HEADER_VALUE_TYPE;
(function(HEADER_VALUE_TYPE2) {
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolTrue"] = 0] = "boolTrue";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolFalse"] = 1] = "boolFalse";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byte"] = 2] = "byte";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["short"] = 3] = "short";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["integer"] = 4] = "integer";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["long"] = 5] = "long";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byteArray"] = 6] = "byteArray";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["string"] = 7] = "string";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["timestamp"] = 8] = "timestamp";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["uuid"] = 9] = "uuid";
})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
var BOOLEAN_TAG = "boolean";
var BYTE_TAG = "byte";
var SHORT_TAG = "short";
var INT_TAG = "integer";
var LONG_TAG = "long";
var BINARY_TAG = "binary";
var STRING_TAG = "string";
var TIMESTAMP_TAG = "timestamp";
var UUID_TAG = "uuid";
var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;

// node_modules/@aws-sdk/eventstream-marshaller/dist-es/splitMessage.js
var import_crc32 = __toModule(require_build6());
var PRELUDE_MEMBER_LENGTH = 4;
var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
var CHECKSUM_LENGTH = 4;
var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
function splitMessage(_a) {
  var byteLength = _a.byteLength, byteOffset = _a.byteOffset, buffer = _a.buffer;
  if (byteLength < MINIMUM_MESSAGE_LENGTH) {
    throw new Error("Provided message too short to accommodate event stream message overhead");
  }
  var view = new DataView(buffer, byteOffset, byteLength);
  var messageLength = view.getUint32(0, false);
  if (byteLength !== messageLength) {
    throw new Error("Reported message length does not match received message length");
  }
  var headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
  var expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
  var expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
  var checksummer = new import_crc32.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
  if (expectedPreludeChecksum !== checksummer.digest()) {
    throw new Error("The prelude checksum specified in the message (" + expectedPreludeChecksum + ") does not match the calculated CRC32 checksum (" + checksummer.digest() + ")");
  }
  checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
  if (expectedMessageChecksum !== checksummer.digest()) {
    throw new Error("The message checksum (" + checksummer.digest() + ") did not match the expected value of " + expectedMessageChecksum);
  }
  return {
    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
    body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
  };
}

// node_modules/@aws-sdk/eventstream-marshaller/dist-es/EventStreamMarshaller.js
var EventStreamMarshaller = function() {
  function EventStreamMarshaller4(toUtf87, fromUtf88) {
    this.headerMarshaller = new HeaderMarshaller(toUtf87, fromUtf88);
  }
  EventStreamMarshaller4.prototype.marshall = function(_a) {
    var rawHeaders = _a.headers, body = _a.body;
    var headers = this.headerMarshaller.format(rawHeaders);
    var length = headers.byteLength + body.byteLength + 16;
    var out = new Uint8Array(length);
    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
    var checksum = new import_crc322.Crc32();
    view.setUint32(0, length, false);
    view.setUint32(4, headers.byteLength, false);
    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
    out.set(headers, 12);
    out.set(body, headers.byteLength + 12);
    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
    return out;
  };
  EventStreamMarshaller4.prototype.unmarshall = function(message) {
    var _a = splitMessage(message), headers = _a.headers, body = _a.body;
    return { headers: this.headerMarshaller.parse(headers), body };
  };
  EventStreamMarshaller4.prototype.formatHeaders = function(rawHeaders) {
    return this.headerMarshaller.format(rawHeaders);
  };
  return EventStreamMarshaller4;
}();

// node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getChunkedStream.js
function getChunkedStream(source) {
  var _a;
  var currentMessageTotalLength = 0;
  var currentMessagePendingLength = 0;
  var currentMessage = null;
  var messageLengthBuffer = null;
  var allocateMessage = function(size) {
    if (typeof size !== "number") {
      throw new Error("Attempted to allocate an event message where size was not a number: " + size);
    }
    currentMessageTotalLength = size;
    currentMessagePendingLength = 4;
    currentMessage = new Uint8Array(size);
    var currentMessageView = new DataView(currentMessage.buffer);
    currentMessageView.setUint32(0, size, false);
  };
  var iterator = function() {
    return __asyncGenerator(this, arguments, function() {
      var sourceIterator, _a2, value, done, chunkLength, currentOffset, bytesRemaining, numBytesForTotal, numBytesToWrite;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            sourceIterator = source[Symbol.asyncIterator]();
            _b.label = 1;
          case 1:
            if (false)
              return [3, 16];
            return [4, __await(sourceIterator.next())];
          case 2:
            _a2 = _b.sent(), value = _a2.value, done = _a2.done;
            if (!done)
              return [3, 10];
            if (!!currentMessageTotalLength)
              return [3, 4];
            return [4, __await(void 0)];
          case 3:
            return [2, _b.sent()];
          case 4:
            if (!(currentMessageTotalLength === currentMessagePendingLength))
              return [3, 7];
            return [4, __await(currentMessage)];
          case 5:
            return [4, _b.sent()];
          case 6:
            _b.sent();
            return [3, 8];
          case 7:
            throw new Error("Truncated event message received.");
          case 8:
            return [4, __await(void 0)];
          case 9:
            return [2, _b.sent()];
          case 10:
            chunkLength = value.length;
            currentOffset = 0;
            _b.label = 11;
          case 11:
            if (!(currentOffset < chunkLength))
              return [3, 15];
            if (!currentMessage) {
              bytesRemaining = chunkLength - currentOffset;
              if (!messageLengthBuffer) {
                messageLengthBuffer = new Uint8Array(4);
              }
              numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
              messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
              currentMessagePendingLength += numBytesForTotal;
              currentOffset += numBytesForTotal;
              if (currentMessagePendingLength < 4) {
                return [3, 15];
              }
              allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
              messageLengthBuffer = null;
            }
            numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);
            currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
            currentMessagePendingLength += numBytesToWrite;
            currentOffset += numBytesToWrite;
            if (!(currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength))
              return [3, 14];
            return [4, __await(currentMessage)];
          case 12:
            return [4, _b.sent()];
          case 13:
            _b.sent();
            currentMessage = null;
            currentMessageTotalLength = 0;
            currentMessagePendingLength = 0;
            _b.label = 14;
          case 14:
            return [3, 11];
          case 15:
            return [3, 1];
          case 16:
            return [2];
        }
      });
    });
  };
  return _a = {}, _a[Symbol.asyncIterator] = iterator, _a;
}

// node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getUnmarshalledStream.js
function getUnmarshalledStream(source, options) {
  var _a;
  return _a = {}, _a[Symbol.asyncIterator] = function() {
    return __asyncGenerator(this, arguments, function() {
      var source_1, source_1_1, chunk, message, messageType, unmodeledError, code, exception, deserializedException, error, event, deserialized, e_1_1;
      var _a2, _b;
      var e_1, _c;
      return __generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            _d.trys.push([0, 12, 13, 18]);
            source_1 = __asyncValues(source);
            _d.label = 1;
          case 1:
            return [4, __await(source_1.next())];
          case 2:
            if (!(source_1_1 = _d.sent(), !source_1_1.done))
              return [3, 11];
            chunk = source_1_1.value;
            message = options.eventMarshaller.unmarshall(chunk);
            messageType = message.headers[":message-type"].value;
            if (!(messageType === "error"))
              return [3, 3];
            unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
            unmodeledError.name = message.headers[":error-code"].value;
            throw unmodeledError;
          case 3:
            if (!(messageType === "exception"))
              return [3, 5];
            code = message.headers[":exception-type"].value;
            exception = (_a2 = {}, _a2[code] = message, _a2);
            return [4, __await(options.deserializer(exception))];
          case 4:
            deserializedException = _d.sent();
            if (deserializedException.$unknown) {
              error = new Error(options.toUtf8(message.body));
              error.name = code;
              throw error;
            }
            throw deserializedException[code];
          case 5:
            if (!(messageType === "event"))
              return [3, 9];
            event = (_b = {}, _b[message.headers[":event-type"].value] = message, _b);
            return [4, __await(options.deserializer(event))];
          case 6:
            deserialized = _d.sent();
            if (deserialized.$unknown)
              return [3, 10];
            return [4, __await(deserialized)];
          case 7:
            return [4, _d.sent()];
          case 8:
            _d.sent();
            return [3, 10];
          case 9:
            throw Error("Unrecognizable event type: " + message.headers[":event-type"].value);
          case 10:
            return [3, 1];
          case 11:
            return [3, 18];
          case 12:
            e_1_1 = _d.sent();
            e_1 = { error: e_1_1 };
            return [3, 18];
          case 13:
            _d.trys.push([13, , 16, 17]);
            if (!(source_1_1 && !source_1_1.done && (_c = source_1.return)))
              return [3, 15];
            return [4, __await(_c.call(source_1))];
          case 14:
            _d.sent();
            _d.label = 15;
          case 15:
            return [3, 17];
          case 16:
            if (e_1)
              throw e_1.error;
            return [7];
          case 17:
            return [7];
          case 18:
            return [2];
        }
      });
    });
  }, _a;
}

// node_modules/@aws-sdk/eventstream-serde-universal/dist-es/EventStreamMarshaller.js
var EventStreamMarshaller2 = function() {
  function EventStreamMarshaller4(_a) {
    var utf8Encoder = _a.utf8Encoder, utf8Decoder = _a.utf8Decoder;
    this.eventMarshaller = new EventStreamMarshaller(utf8Encoder, utf8Decoder);
    this.utfEncoder = utf8Encoder;
  }
  EventStreamMarshaller4.prototype.deserialize = function(body, deserializer) {
    var chunkedStream = getChunkedStream(body);
    var unmarshalledStream = getUnmarshalledStream(chunkedStream, {
      eventMarshaller: this.eventMarshaller,
      deserializer,
      toUtf8: this.utfEncoder
    });
    return unmarshalledStream;
  };
  EventStreamMarshaller4.prototype.serialize = function(input, serializer) {
    var _a;
    var self2 = this;
    var serializedIterator = function() {
      return __asyncGenerator(this, arguments, function() {
        var input_1, input_1_1, chunk, payloadBuf, e_1_1;
        var e_1, _a2;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _b.trys.push([0, 7, 8, 13]);
              input_1 = __asyncValues(input);
              _b.label = 1;
            case 1:
              return [4, __await(input_1.next())];
            case 2:
              if (!(input_1_1 = _b.sent(), !input_1_1.done))
                return [3, 6];
              chunk = input_1_1.value;
              payloadBuf = self2.eventMarshaller.marshall(serializer(chunk));
              return [4, __await(payloadBuf)];
            case 3:
              return [4, _b.sent()];
            case 4:
              _b.sent();
              _b.label = 5;
            case 5:
              return [3, 1];
            case 6:
              return [3, 13];
            case 7:
              e_1_1 = _b.sent();
              e_1 = { error: e_1_1 };
              return [3, 13];
            case 8:
              _b.trys.push([8, , 11, 12]);
              if (!(input_1_1 && !input_1_1.done && (_a2 = input_1.return)))
                return [3, 10];
              return [4, __await(_a2.call(input_1))];
            case 9:
              _b.sent();
              _b.label = 10;
            case 10:
              return [3, 12];
            case 11:
              if (e_1)
                throw e_1.error;
              return [7];
            case 12:
              return [7];
            case 13:
              return [4, __await(new Uint8Array(0))];
            case 14:
              return [4, _b.sent()];
            case 15:
              _b.sent();
              return [2];
          }
        });
      });
    };
    return _a = {}, _a[Symbol.asyncIterator] = serializedIterator, _a;
  };
  return EventStreamMarshaller4;
}();

// node_modules/@aws-sdk/eventstream-serde-browser/dist-es/utils.js
var readableStreamtoIterable = function(readableStream) {
  var _a;
  return _a = {}, _a[Symbol.asyncIterator] = function() {
    return __asyncGenerator(this, arguments, function() {
      var reader, _a2, done, value;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            reader = readableStream.getReader();
            _b.label = 1;
          case 1:
            _b.trys.push([1, , 9, 10]);
            _b.label = 2;
          case 2:
            if (false)
              return [3, 8];
            return [4, __await(reader.read())];
          case 3:
            _a2 = _b.sent(), done = _a2.done, value = _a2.value;
            if (!done)
              return [3, 5];
            return [4, __await(void 0)];
          case 4:
            return [2, _b.sent()];
          case 5:
            return [4, __await(value)];
          case 6:
            return [4, _b.sent()];
          case 7:
            _b.sent();
            return [3, 2];
          case 8:
            return [3, 10];
          case 9:
            reader.releaseLock();
            return [7];
          case 10:
            return [2];
        }
      });
    });
  }, _a;
};
var iterableToReadableStream = function(asyncIterable) {
  var iterator = asyncIterable[Symbol.asyncIterator]();
  return new ReadableStream({
    pull: function(controller) {
      return __awaiter(this, void 0, void 0, function() {
        var _a, done, value;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, iterator.next()];
            case 1:
              _a = _b.sent(), done = _a.done, value = _a.value;
              if (done) {
                return [2, controller.close()];
              }
              controller.enqueue(value);
              return [2];
          }
        });
      });
    }
  });
};

// node_modules/@aws-sdk/eventstream-serde-browser/dist-es/EventStreamMarshaller.js
var EventStreamMarshaller3 = function() {
  function EventStreamMarshaller4(_a) {
    var utf8Encoder = _a.utf8Encoder, utf8Decoder = _a.utf8Decoder;
    this.eventMarshaller = new EventStreamMarshaller(utf8Encoder, utf8Decoder);
    this.universalMarshaller = new EventStreamMarshaller2({
      utf8Decoder,
      utf8Encoder
    });
  }
  EventStreamMarshaller4.prototype.deserialize = function(body, deserializer) {
    var bodyIterable = isReadableStream(body) ? readableStreamtoIterable(body) : body;
    return this.universalMarshaller.deserialize(bodyIterable, deserializer);
  };
  EventStreamMarshaller4.prototype.serialize = function(input, serializer) {
    var serialziedIterable = this.universalMarshaller.serialize(input, serializer);
    return typeof ReadableStream === "function" ? iterableToReadableStream(serialziedIterable) : serialziedIterable;
  };
  return EventStreamMarshaller4;
}();
var isReadableStream = function(body) {
  return typeof ReadableStream === "function" && body instanceof ReadableStream;
};

// node_modules/@aws-sdk/eventstream-serde-browser/dist-es/provider.js
var eventStreamSerdeProvider = function(options) {
  return new EventStreamMarshaller3(options);
};

// node_modules/@aws-sdk/client-kinesis/dist-es/runtimeConfig.browser.js
var import_util_utf8_browser2 = __toModule(require_dist_cjs());

// node_modules/@aws-sdk/client-kinesis/dist-es/endpoints.js
var regionHash2 = {
  "us-east-1": {
    variants: [
      {
        hostname: "kinesis.us-east-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "kinesis-fips.us-east-1.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  "us-east-2": {
    variants: [
      {
        hostname: "kinesis.us-east-2.amazonaws.com",
        tags: []
      },
      {
        hostname: "kinesis-fips.us-east-2.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  "us-gov-east-1": {
    variants: [
      {
        hostname: "kinesis.us-gov-east-1.amazonaws.com",
        tags: []
      }
    ],
    signingRegion: "us-gov-east-1"
  },
  "us-gov-west-1": {
    variants: [
      {
        hostname: "kinesis.us-gov-west-1.amazonaws.com",
        tags: []
      }
    ],
    signingRegion: "us-gov-west-1"
  },
  "us-west-1": {
    variants: [
      {
        hostname: "kinesis.us-west-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "kinesis-fips.us-west-1.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  "us-west-2": {
    variants: [
      {
        hostname: "kinesis.us-west-2.amazonaws.com",
        tags: []
      },
      {
        hostname: "kinesis-fips.us-west-2.amazonaws.com",
        tags: ["fips"]
      }
    ]
  }
};
var partitionHash2 = {
  aws: {
    regions: [
      "af-south-1",
      "ap-east-1",
      "ap-northeast-1",
      "ap-northeast-2",
      "ap-northeast-3",
      "ap-south-1",
      "ap-southeast-1",
      "ap-southeast-2",
      "ca-central-1",
      "eu-central-1",
      "eu-north-1",
      "eu-south-1",
      "eu-west-1",
      "eu-west-2",
      "eu-west-3",
      "fips-us-east-1",
      "fips-us-east-2",
      "fips-us-west-1",
      "fips-us-west-2",
      "me-south-1",
      "sa-east-1",
      "us-east-1",
      "us-east-2",
      "us-west-1",
      "us-west-2"
    ],
    regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "kinesis.{region}.amazonaws.com",
        tags: []
      },
      {
        hostname: "kinesis-fips.{region}.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "kinesis-fips.{region}.api.aws",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "kinesis.{region}.api.aws",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-cn": {
    regions: ["cn-north-1", "cn-northwest-1"],
    regionRegex: "^cn\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "kinesis.{region}.amazonaws.com.cn",
        tags: []
      },
      {
        hostname: "kinesis-fips.{region}.amazonaws.com.cn",
        tags: ["fips"]
      },
      {
        hostname: "kinesis-fips.{region}.api.amazonwebservices.com.cn",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "kinesis.{region}.api.amazonwebservices.com.cn",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-iso": {
    regions: ["us-iso-east-1", "us-iso-west-1"],
    regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "kinesis.{region}.c2s.ic.gov",
        tags: []
      },
      {
        hostname: "kinesis-fips.{region}.c2s.ic.gov",
        tags: ["fips"]
      }
    ]
  },
  "aws-iso-b": {
    regions: ["us-isob-east-1"],
    regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "kinesis.{region}.sc2s.sgov.gov",
        tags: []
      },
      {
        hostname: "kinesis-fips.{region}.sc2s.sgov.gov",
        tags: ["fips"]
      }
    ]
  },
  "aws-us-gov": {
    regions: ["us-gov-east-1", "us-gov-west-1"],
    regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "kinesis.{region}.amazonaws.com",
        tags: []
      },
      {
        hostname: "kinesis-fips.{region}.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "kinesis-fips.{region}.api.aws",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "kinesis.{region}.api.aws",
        tags: ["dualstack"]
      }
    ]
  }
};
var defaultRegionInfoProvider2 = function(region, options) {
  return __awaiter(void 0, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, getRegionInfo(region, __assign(__assign({}, options), { signingService: "kinesis", regionHash: regionHash2, partitionHash: partitionHash2 }))];
    });
  });
};

// node_modules/@aws-sdk/client-kinesis/dist-es/runtimeConfig.shared.js
var getRuntimeConfig3 = function(config) {
  var _a, _b, _c, _d, _e;
  return {
    apiVersion: "2013-12-02",
    disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
    logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
    regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : defaultRegionInfoProvider2,
    serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "Kinesis",
    urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : parseUrl
  };
};

// node_modules/@aws-sdk/client-kinesis/dist-es/runtimeConfig.browser.js
var getRuntimeConfig4 = function(config) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
  var clientSharedValues = getRuntimeConfig3(config);
  return __assign(__assign(__assign({}, clientSharedValues), config), { runtime: "browser", base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : fromBase64, base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : toBase64, bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : calculateBodyLength, credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : function(_) {
    return function() {
      return Promise.reject(new Error("Credential is missing"));
    };
  }, defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default2.version }), eventStreamSerdeProvider: (_f = config === null || config === void 0 ? void 0 : config.eventStreamSerdeProvider) !== null && _f !== void 0 ? _f : eventStreamSerdeProvider, maxAttempts: (_g = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _g !== void 0 ? _g : DEFAULT_MAX_ATTEMPTS, region: (_h = config === null || config === void 0 ? void 0 : config.region) !== null && _h !== void 0 ? _h : invalidProvider("Region is missing"), requestHandler: (_j = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _j !== void 0 ? _j : new FetchHttpHandler(), retryMode: (_k = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _k !== void 0 ? _k : function() {
    return Promise.resolve(DEFAULT_RETRY_MODE);
  }, sha256: (_l = config === null || config === void 0 ? void 0 : config.sha256) !== null && _l !== void 0 ? _l : import_sha256_browser2.Sha256, streamCollector: (_m = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _m !== void 0 ? _m : streamCollector, useDualstackEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _o !== void 0 ? _o : function() {
    return Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT);
  }, useFipsEndpoint: (_p = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _p !== void 0 ? _p : function() {
    return Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT);
  }, utf8Decoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _q !== void 0 ? _q : import_util_utf8_browser2.fromUtf8, utf8Encoder: (_r = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _r !== void 0 ? _r : import_util_utf8_browser2.toUtf8 });
};

// node_modules/@aws-sdk/client-kinesis/dist-es/KinesisClient.js
var KinesisClient = function(_super) {
  __extends(KinesisClient2, _super);
  function KinesisClient2(configuration) {
    var _this = this;
    var _config_0 = getRuntimeConfig4(configuration);
    var _config_1 = resolveRegionConfig(_config_0);
    var _config_2 = resolveEndpointsConfig(_config_1);
    var _config_3 = resolveRetryConfig(_config_2);
    var _config_4 = resolveHostHeaderConfig(_config_3);
    var _config_5 = resolveAwsAuthConfig(_config_4);
    var _config_6 = resolveUserAgentConfig(_config_5);
    var _config_7 = resolveEventStreamSerdeConfig(_config_6);
    _this = _super.call(this, _config_7) || this;
    _this.config = _config_7;
    _this.middlewareStack.use(getRetryPlugin(_this.config));
    _this.middlewareStack.use(getContentLengthPlugin(_this.config));
    _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
    _this.middlewareStack.use(getLoggerPlugin(_this.config));
    _this.middlewareStack.use(getAwsAuthPlugin(_this.config));
    _this.middlewareStack.use(getUserAgentPlugin(_this.config));
    return _this;
  }
  KinesisClient2.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
  };
  return KinesisClient2;
}(Client);

// node_modules/@aws-sdk/client-kinesis/dist-es/Kinesis.js
var Kinesis = function(_super) {
  __extends(Kinesis2, _super);
  function Kinesis2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Kinesis2.prototype.addTagsToStream = function(args, optionsOrCb, cb) {
    var command = new AddTagsToStreamCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.createStream = function(args, optionsOrCb, cb) {
    var command = new CreateStreamCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.decreaseStreamRetentionPeriod = function(args, optionsOrCb, cb) {
    var command = new DecreaseStreamRetentionPeriodCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.deleteStream = function(args, optionsOrCb, cb) {
    var command = new DeleteStreamCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.deregisterStreamConsumer = function(args, optionsOrCb, cb) {
    var command = new DeregisterStreamConsumerCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.describeLimits = function(args, optionsOrCb, cb) {
    var command = new DescribeLimitsCommand2(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.describeStream = function(args, optionsOrCb, cb) {
    var command = new DescribeStreamCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.describeStreamConsumer = function(args, optionsOrCb, cb) {
    var command = new DescribeStreamConsumerCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.describeStreamSummary = function(args, optionsOrCb, cb) {
    var command = new DescribeStreamSummaryCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.disableEnhancedMonitoring = function(args, optionsOrCb, cb) {
    var command = new DisableEnhancedMonitoringCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.enableEnhancedMonitoring = function(args, optionsOrCb, cb) {
    var command = new EnableEnhancedMonitoringCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.getRecords = function(args, optionsOrCb, cb) {
    var command = new GetRecordsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.getShardIterator = function(args, optionsOrCb, cb) {
    var command = new GetShardIteratorCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.increaseStreamRetentionPeriod = function(args, optionsOrCb, cb) {
    var command = new IncreaseStreamRetentionPeriodCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.listShards = function(args, optionsOrCb, cb) {
    var command = new ListShardsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.listStreamConsumers = function(args, optionsOrCb, cb) {
    var command = new ListStreamConsumersCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.listStreams = function(args, optionsOrCb, cb) {
    var command = new ListStreamsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.listTagsForStream = function(args, optionsOrCb, cb) {
    var command = new ListTagsForStreamCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.mergeShards = function(args, optionsOrCb, cb) {
    var command = new MergeShardsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.putRecord = function(args, optionsOrCb, cb) {
    var command = new PutRecordCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.putRecords = function(args, optionsOrCb, cb) {
    var command = new PutRecordsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.registerStreamConsumer = function(args, optionsOrCb, cb) {
    var command = new RegisterStreamConsumerCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.removeTagsFromStream = function(args, optionsOrCb, cb) {
    var command = new RemoveTagsFromStreamCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.splitShard = function(args, optionsOrCb, cb) {
    var command = new SplitShardCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.startStreamEncryption = function(args, optionsOrCb, cb) {
    var command = new StartStreamEncryptionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.stopStreamEncryption = function(args, optionsOrCb, cb) {
    var command = new StopStreamEncryptionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.subscribeToShard = function(args, optionsOrCb, cb) {
    var command = new SubscribeToShardCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Kinesis2.prototype.updateShardCount = function(args, optionsOrCb, cb) {
    var command = new UpdateShardCountCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  return Kinesis2;
}(KinesisClient);

// node_modules/@aws-sdk/util-arn-parser/dist-es/index.js
var validate2 = function(str) {
  return typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6;
};
var parse = function(arn) {
  var segments = arn.split(":");
  if (segments.length < 6 || segments[0] !== "arn")
    throw new Error("Malformed ARN");
  var _a = __read(segments), partition = _a[1], service = _a[2], region = _a[3], accountId = _a[4], resource = _a.slice(5);
  return {
    partition,
    service,
    region,
    accountId,
    resource: resource.join(":")
  };
};

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostnameUtils.js
var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
var DOTS_PATTERN = /\.\./;
var DOT_PATTERN = /\./;
var S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
var S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\.amazonaws\.com$/;
var AWS_PARTITION_SUFFIX = "amazonaws.com";
var isBucketNameOptions = function(options) {
  return typeof options.bucketName === "string";
};
var isDnsCompatibleBucketName = function(bucketName) {
  return DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
};
var getRegionalSuffix = function(hostname) {
  var parts = hostname.match(S3_HOSTNAME_PATTERN);
  return [parts[4], hostname.replace(new RegExp("^" + parts[0]), "")];
};
var getSuffix = function(hostname) {
  return S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? ["us-east-1", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);
};
var getSuffixForArnEndpoint = function(hostname) {
  return S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [hostname.replace("." + AWS_PARTITION_SUFFIX, ""), AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);
};
var validateArnEndpointOptions = function(options) {
  if (options.pathStyleEndpoint) {
    throw new Error("Path-style S3 endpoint is not supported when bucket is an ARN");
  }
  if (options.accelerateEndpoint) {
    throw new Error("Accelerate endpoint is not supported when bucket is an ARN");
  }
  if (!options.tlsCompatible) {
    throw new Error("HTTPS is required when bucket is an ARN");
  }
};
var validateService = function(service) {
  if (service !== "s3" && service !== "s3-outposts" && service !== "s3-object-lambda") {
    throw new Error("Expect 's3' or 's3-outposts' or 's3-object-lambda' in ARN service component");
  }
};
var validateS3Service = function(service) {
  if (service !== "s3") {
    throw new Error("Expect 's3' in Accesspoint ARN service component");
  }
};
var validateOutpostService = function(service) {
  if (service !== "s3-outposts") {
    throw new Error("Expect 's3-posts' in Outpost ARN service component");
  }
};
var validatePartition = function(partition, options) {
  if (partition !== options.clientPartition) {
    throw new Error('Partition in ARN is incompatible, got "' + partition + '" but expected "' + options.clientPartition + '"');
  }
};
var validateRegion = function(region, options) {
  if (region === "") {
    throw new Error("ARN region is empty");
  }
  if (options.useFipsEndpoint) {
    if (!options.allowFipsRegion) {
      throw new Error("FIPS region is not supported");
    } else if (!isEqualRegions(region, options.clientRegion)) {
      throw new Error("Client FIPS region " + options.clientRegion + " doesn't match region " + region + " in ARN");
    }
  }
  if (!options.useArnRegion && !isEqualRegions(region, options.clientRegion || "") && !isEqualRegions(region, options.clientSigningRegion || "")) {
    throw new Error("Region in ARN is incompatible, got " + region + " but expected " + options.clientRegion);
  }
};
var validateRegionalClient = function(region) {
  if (["s3-external-1", "aws-global"].includes(region)) {
    throw new Error("Client region " + region + " is not regional");
  }
};
var isEqualRegions = function(regionA, regionB) {
  return regionA === regionB;
};
var validateAccountId = function(accountId) {
  if (!/[0-9]{12}/.exec(accountId)) {
    throw new Error("Access point ARN accountID does not match regex '[0-9]{12}'");
  }
};
var validateDNSHostLabel = function(label, options) {
  if (options === void 0) {
    options = { tlsCompatible: true };
  }
  if (label.length >= 64 || !/^[a-z0-9][a-z0-9.-]*[a-z0-9]$/.test(label) || /(\d+\.){3}\d+/.test(label) || /[.-]{2}/.test(label) || (options === null || options === void 0 ? void 0 : options.tlsCompatible) && DOT_PATTERN.test(label)) {
    throw new Error("Invalid DNS label " + label);
  }
};
var validateCustomEndpoint = function(options) {
  if (options.isCustomEndpoint) {
    if (options.dualstackEndpoint)
      throw new Error("Dualstack endpoint is not supported with custom endpoint");
    if (options.accelerateEndpoint)
      throw new Error("Accelerate endpoint is not supported with custom endpoint");
  }
};
var getArnResources = function(resource) {
  var delimiter = resource.includes(":") ? ":" : "/";
  var _a = __read(resource.split(delimiter)), resourceType = _a[0], rest = _a.slice(1);
  if (resourceType === "accesspoint") {
    if (rest.length !== 1 || rest[0] === "") {
      throw new Error("Access Point ARN should have one resource accesspoint" + delimiter + "{accesspointname}");
    }
    return { accesspointName: rest[0] };
  } else if (resourceType === "outpost") {
    if (!rest[0] || rest[1] !== "accesspoint" || !rest[2] || rest.length !== 3) {
      throw new Error("Outpost ARN should have resource outpost" + delimiter + "{outpostId}" + delimiter + "accesspoint" + delimiter + "{accesspointName}");
    }
    var _b = __read(rest, 3), outpostId = _b[0], _1 = _b[1], accesspointName = _b[2];
    return { outpostId, accesspointName };
  } else {
    throw new Error("ARN resource should begin with 'accesspoint" + delimiter + "' or 'outpost" + delimiter + "'");
  }
};
var validateNoDualstack = function(dualstackEndpoint) {
  if (dualstackEndpoint)
    throw new Error("Dualstack endpoint is not supported with Outpost or Multi-region Access Point ARN.");
};
var validateNoFIPS = function(useFipsEndpoint) {
  if (useFipsEndpoint)
    throw new Error("FIPS region is not supported with Outpost.");
};
var validateMrapAlias = function(name7) {
  try {
    name7.split(".").forEach(function(label) {
      validateDNSHostLabel(label);
    });
  } catch (e) {
    throw new Error('"' + name7 + '" is not a DNS compatible name.');
  }
};

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js
var bucketHostname = function(options) {
  validateCustomEndpoint(options);
  return isBucketNameOptions(options) ? getEndpointFromBucketName(options) : getEndpointFromArn(options);
};
var getEndpointFromBucketName = function(_a) {
  var _b = _a.accelerateEndpoint, accelerateEndpoint = _b === void 0 ? false : _b, region = _a.clientRegion, baseHostname = _a.baseHostname, bucketName = _a.bucketName, _c = _a.dualstackEndpoint, dualstackEndpoint = _c === void 0 ? false : _c, _d = _a.fipsEndpoint, fipsEndpoint = _d === void 0 ? false : _d, _e = _a.pathStyleEndpoint, pathStyleEndpoint = _e === void 0 ? false : _e, _f = _a.tlsCompatible, tlsCompatible = _f === void 0 ? true : _f, _g = _a.isCustomEndpoint, isCustomEndpoint = _g === void 0 ? false : _g;
  var _h = __read(isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname), 2), clientRegion = _h[0], hostnameSuffix = _h[1];
  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || tlsCompatible && DOT_PATTERN.test(bucketName)) {
    return {
      bucketEndpoint: false,
      hostname: dualstackEndpoint ? "s3.dualstack." + clientRegion + "." + hostnameSuffix : baseHostname
    };
  }
  if (accelerateEndpoint) {
    baseHostname = "s3-accelerate" + (dualstackEndpoint ? ".dualstack" : "") + "." + hostnameSuffix;
  } else if (dualstackEndpoint) {
    baseHostname = "s3.dualstack." + clientRegion + "." + hostnameSuffix;
  }
  return {
    bucketEndpoint: true,
    hostname: bucketName + "." + baseHostname
  };
};
var getEndpointFromArn = function(options) {
  var isCustomEndpoint = options.isCustomEndpoint, baseHostname = options.baseHostname, clientRegion = options.clientRegion;
  var hostnameSuffix = isCustomEndpoint ? baseHostname : getSuffixForArnEndpoint(baseHostname)[1];
  var pathStyleEndpoint = options.pathStyleEndpoint, _a = options.accelerateEndpoint, accelerateEndpoint = _a === void 0 ? false : _a, _b = options.fipsEndpoint, fipsEndpoint = _b === void 0 ? false : _b, _c = options.tlsCompatible, tlsCompatible = _c === void 0 ? true : _c, bucketName = options.bucketName, _d = options.clientPartition, clientPartition = _d === void 0 ? "aws" : _d;
  validateArnEndpointOptions({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });
  var service = bucketName.service, partition = bucketName.partition, accountId = bucketName.accountId, region = bucketName.region, resource = bucketName.resource;
  validateService(service);
  validatePartition(partition, { clientPartition });
  validateAccountId(accountId);
  var _e = getArnResources(resource), accesspointName = _e.accesspointName, outpostId = _e.outpostId;
  if (service === "s3-object-lambda") {
    return getEndpointFromObjectLambdaArn(__assign(__assign({}, options), { tlsCompatible, bucketName, accesspointName, hostnameSuffix }));
  }
  if (region === "") {
    return getEndpointFromMRAPArn(__assign(__assign({}, options), { clientRegion, mrapAlias: accesspointName, hostnameSuffix }));
  }
  if (outpostId) {
    return getEndpointFromOutpostArn(__assign(__assign({}, options), { clientRegion, outpostId, accesspointName, hostnameSuffix }));
  }
  return getEndpointFromAccessPointArn(__assign(__assign({}, options), { clientRegion, accesspointName, hostnameSuffix }));
};
var getEndpointFromObjectLambdaArn = function(_a) {
  var _b = _a.dualstackEndpoint, dualstackEndpoint = _b === void 0 ? false : _b, _c = _a.fipsEndpoint, fipsEndpoint = _c === void 0 ? false : _c, _d = _a.tlsCompatible, tlsCompatible = _d === void 0 ? true : _d, useArnRegion = _a.useArnRegion, clientRegion = _a.clientRegion, _e = _a.clientSigningRegion, clientSigningRegion = _e === void 0 ? clientRegion : _e, accesspointName = _a.accesspointName, bucketName = _a.bucketName, hostnameSuffix = _a.hostnameSuffix;
  var accountId = bucketName.accountId, region = bucketName.region, service = bucketName.service;
  validateRegionalClient(clientRegion);
  validateRegion(region, {
    useArnRegion,
    clientRegion,
    clientSigningRegion,
    allowFipsRegion: true,
    useFipsEndpoint: fipsEndpoint
  });
  validateNoDualstack(dualstackEndpoint);
  var DNSHostLabel = accesspointName + "-" + accountId;
  validateDNSHostLabel(DNSHostLabel, { tlsCompatible });
  var endpointRegion = useArnRegion ? region : clientRegion;
  var signingRegion = useArnRegion ? region : clientSigningRegion;
  return {
    bucketEndpoint: true,
    hostname: DNSHostLabel + "." + service + (fipsEndpoint ? "-fips" : "") + "." + endpointRegion + "." + hostnameSuffix,
    signingRegion,
    signingService: service
  };
};
var getEndpointFromMRAPArn = function(_a) {
  var disableMultiregionAccessPoints = _a.disableMultiregionAccessPoints, _b = _a.dualstackEndpoint, dualstackEndpoint = _b === void 0 ? false : _b, isCustomEndpoint = _a.isCustomEndpoint, mrapAlias = _a.mrapAlias, hostnameSuffix = _a.hostnameSuffix;
  if (disableMultiregionAccessPoints === true) {
    throw new Error("SDK is attempting to use a MRAP ARN. Please enable to feature.");
  }
  validateMrapAlias(mrapAlias);
  validateNoDualstack(dualstackEndpoint);
  return {
    bucketEndpoint: true,
    hostname: "" + mrapAlias + (isCustomEndpoint ? "" : ".accesspoint.s3-global") + "." + hostnameSuffix,
    signingRegion: "*"
  };
};
var getEndpointFromOutpostArn = function(_a) {
  var useArnRegion = _a.useArnRegion, clientRegion = _a.clientRegion, _b = _a.clientSigningRegion, clientSigningRegion = _b === void 0 ? clientRegion : _b, bucketName = _a.bucketName, outpostId = _a.outpostId, _c = _a.dualstackEndpoint, dualstackEndpoint = _c === void 0 ? false : _c, _d = _a.fipsEndpoint, fipsEndpoint = _d === void 0 ? false : _d, _e = _a.tlsCompatible, tlsCompatible = _e === void 0 ? true : _e, accesspointName = _a.accesspointName, isCustomEndpoint = _a.isCustomEndpoint, hostnameSuffix = _a.hostnameSuffix;
  validateRegionalClient(clientRegion);
  validateRegion(bucketName.region, { useArnRegion, clientRegion, clientSigningRegion, useFipsEndpoint: fipsEndpoint });
  var DNSHostLabel = accesspointName + "-" + bucketName.accountId;
  validateDNSHostLabel(DNSHostLabel, { tlsCompatible });
  var endpointRegion = useArnRegion ? bucketName.region : clientRegion;
  var signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;
  validateOutpostService(bucketName.service);
  validateDNSHostLabel(outpostId, { tlsCompatible });
  validateNoDualstack(dualstackEndpoint);
  validateNoFIPS(fipsEndpoint);
  var hostnamePrefix = DNSHostLabel + "." + outpostId;
  return {
    bucketEndpoint: true,
    hostname: "" + hostnamePrefix + (isCustomEndpoint ? "" : ".s3-outposts." + endpointRegion) + "." + hostnameSuffix,
    signingRegion,
    signingService: "s3-outposts"
  };
};
var getEndpointFromAccessPointArn = function(_a) {
  var useArnRegion = _a.useArnRegion, clientRegion = _a.clientRegion, _b = _a.clientSigningRegion, clientSigningRegion = _b === void 0 ? clientRegion : _b, bucketName = _a.bucketName, _c = _a.dualstackEndpoint, dualstackEndpoint = _c === void 0 ? false : _c, _d = _a.fipsEndpoint, fipsEndpoint = _d === void 0 ? false : _d, _e = _a.tlsCompatible, tlsCompatible = _e === void 0 ? true : _e, accesspointName = _a.accesspointName, isCustomEndpoint = _a.isCustomEndpoint, hostnameSuffix = _a.hostnameSuffix;
  validateRegionalClient(clientRegion);
  validateRegion(bucketName.region, {
    useArnRegion,
    clientRegion,
    clientSigningRegion,
    allowFipsRegion: true,
    useFipsEndpoint: fipsEndpoint
  });
  var hostnamePrefix = accesspointName + "-" + bucketName.accountId;
  validateDNSHostLabel(hostnamePrefix, { tlsCompatible });
  var endpointRegion = useArnRegion ? bucketName.region : clientRegion;
  var signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;
  validateS3Service(bucketName.service);
  return {
    bucketEndpoint: true,
    hostname: "" + hostnamePrefix + (isCustomEndpoint ? "" : ".s3-accesspoint" + (fipsEndpoint ? "-fips" : "") + (dualstackEndpoint ? ".dualstack" : "") + "." + endpointRegion) + "." + hostnameSuffix,
    signingRegion
  };
};

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketEndpointMiddleware.js
var bucketEndpointMiddleware = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var bucketName, replaceBucketInPath, request, bucketArn, clientRegion, useDualstackEndpoint, useFipsEndpoint, _a, partition, _b, signingRegion, useArnRegion, _c, hostname, bucketEndpoint, modifiedSigningRegion, signingService, _d, clientRegion, dualstackEndpoint, fipsEndpoint, _e, hostname, bucketEndpoint;
        var _f;
        return __generator(this, function(_g) {
          switch (_g.label) {
            case 0:
              bucketName = args.input.Bucket;
              replaceBucketInPath = options.bucketEndpoint;
              request = args.request;
              if (!HttpRequest.isInstance(request))
                return [3, 13];
              if (!options.bucketEndpoint)
                return [3, 1];
              request.hostname = bucketName;
              return [3, 12];
            case 1:
              if (!validate2(bucketName))
                return [3, 8];
              bucketArn = parse(bucketName);
              return [4, options.region()];
            case 2:
              clientRegion = _g.sent();
              return [4, options.useDualstackEndpoint()];
            case 3:
              useDualstackEndpoint = _g.sent();
              return [4, options.useFipsEndpoint()];
            case 4:
              useFipsEndpoint = _g.sent();
              return [4, options.regionInfoProvider(clientRegion, { useDualstackEndpoint, useFipsEndpoint })];
            case 5:
              _a = _g.sent() || {}, partition = _a.partition, _b = _a.signingRegion, signingRegion = _b === void 0 ? clientRegion : _b;
              return [4, options.useArnRegion()];
            case 6:
              useArnRegion = _g.sent();
              _d = bucketHostname;
              _f = {
                bucketName: bucketArn,
                baseHostname: request.hostname,
                accelerateEndpoint: options.useAccelerateEndpoint,
                dualstackEndpoint: useDualstackEndpoint,
                fipsEndpoint: useFipsEndpoint,
                pathStyleEndpoint: options.forcePathStyle,
                tlsCompatible: request.protocol === "https:",
                useArnRegion,
                clientPartition: partition,
                clientSigningRegion: signingRegion,
                clientRegion,
                isCustomEndpoint: options.isCustomEndpoint
              };
              return [4, options.disableMultiregionAccessPoints()];
            case 7:
              _c = _d.apply(void 0, [(_f.disableMultiregionAccessPoints = _g.sent(), _f)]), hostname = _c.hostname, bucketEndpoint = _c.bucketEndpoint, modifiedSigningRegion = _c.signingRegion, signingService = _c.signingService;
              if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {
                context["signing_region"] = modifiedSigningRegion;
              }
              if (signingService && signingService !== "s3") {
                context["signing_service"] = signingService;
              }
              request.hostname = hostname;
              replaceBucketInPath = bucketEndpoint;
              return [3, 12];
            case 8:
              return [4, options.region()];
            case 9:
              clientRegion = _g.sent();
              return [4, options.useDualstackEndpoint()];
            case 10:
              dualstackEndpoint = _g.sent();
              return [4, options.useFipsEndpoint()];
            case 11:
              fipsEndpoint = _g.sent();
              _e = bucketHostname({
                bucketName,
                clientRegion,
                baseHostname: request.hostname,
                accelerateEndpoint: options.useAccelerateEndpoint,
                dualstackEndpoint,
                fipsEndpoint,
                pathStyleEndpoint: options.forcePathStyle,
                tlsCompatible: request.protocol === "https:",
                isCustomEndpoint: options.isCustomEndpoint
              }), hostname = _e.hostname, bucketEndpoint = _e.bucketEndpoint;
              request.hostname = hostname;
              replaceBucketInPath = bucketEndpoint;
              _g.label = 12;
            case 12:
              if (replaceBucketInPath) {
                request.path = request.path.replace(/^(\/)?[^\/]+/, "");
                if (request.path === "") {
                  request.path = "/";
                }
              }
              _g.label = 13;
            case 13:
              return [2, next(__assign(__assign({}, args), { request }))];
          }
        });
      });
    };
  };
};
var bucketEndpointMiddlewareOptions = {
  tags: ["BUCKET_ENDPOINT"],
  name: "bucketEndpointMiddleware",
  relation: "before",
  toMiddleware: "hostHeaderMiddleware",
  override: true
};
var getBucketEndpointPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/configurations.js
function resolveBucketEndpointConfig(input) {
  var _a = input.bucketEndpoint, bucketEndpoint = _a === void 0 ? false : _a, _b = input.forcePathStyle, forcePathStyle = _b === void 0 ? false : _b, _c = input.useAccelerateEndpoint, useAccelerateEndpoint = _c === void 0 ? false : _c, _d = input.useArnRegion, useArnRegion = _d === void 0 ? false : _d, _e = input.disableMultiregionAccessPoints, disableMultiregionAccessPoints = _e === void 0 ? false : _e;
  return __assign(__assign({}, input), { bucketEndpoint, forcePathStyle, useAccelerateEndpoint, useArnRegion: typeof useArnRegion === "function" ? useArnRegion : function() {
    return Promise.resolve(useArnRegion);
  }, disableMultiregionAccessPoints: typeof disableMultiregionAccessPoints === "function" ? disableMultiregionAccessPoints : function() {
    return Promise.resolve(disableMultiregionAccessPoints);
  } });
}

// node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js
var AbortIncompleteMultipartUpload;
(function(AbortIncompleteMultipartUpload2) {
  AbortIncompleteMultipartUpload2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AbortIncompleteMultipartUpload || (AbortIncompleteMultipartUpload = {}));
var AbortMultipartUploadOutput;
(function(AbortMultipartUploadOutput2) {
  AbortMultipartUploadOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AbortMultipartUploadOutput || (AbortMultipartUploadOutput = {}));
var AbortMultipartUploadRequest;
(function(AbortMultipartUploadRequest2) {
  AbortMultipartUploadRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AbortMultipartUploadRequest || (AbortMultipartUploadRequest = {}));
var NoSuchUpload;
(function(NoSuchUpload2) {
  NoSuchUpload2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(NoSuchUpload || (NoSuchUpload = {}));
var AccelerateConfiguration;
(function(AccelerateConfiguration2) {
  AccelerateConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AccelerateConfiguration || (AccelerateConfiguration = {}));
var Grantee;
(function(Grantee2) {
  Grantee2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Grantee || (Grantee = {}));
var Grant;
(function(Grant2) {
  Grant2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Grant || (Grant = {}));
var Owner;
(function(Owner2) {
  Owner2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Owner || (Owner = {}));
var AccessControlPolicy;
(function(AccessControlPolicy2) {
  AccessControlPolicy2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AccessControlPolicy || (AccessControlPolicy = {}));
var AccessControlTranslation;
(function(AccessControlTranslation2) {
  AccessControlTranslation2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AccessControlTranslation || (AccessControlTranslation = {}));
var CompleteMultipartUploadOutput;
(function(CompleteMultipartUploadOutput2) {
  CompleteMultipartUploadOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING });
  };
})(CompleteMultipartUploadOutput || (CompleteMultipartUploadOutput = {}));
var CompletedPart;
(function(CompletedPart2) {
  CompletedPart2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CompletedPart || (CompletedPart = {}));
var CompletedMultipartUpload;
(function(CompletedMultipartUpload2) {
  CompletedMultipartUpload2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CompletedMultipartUpload || (CompletedMultipartUpload = {}));
var CompleteMultipartUploadRequest;
(function(CompleteMultipartUploadRequest2) {
  CompleteMultipartUploadRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CompleteMultipartUploadRequest || (CompleteMultipartUploadRequest = {}));
var CopyObjectResult;
(function(CopyObjectResult2) {
  CopyObjectResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CopyObjectResult || (CopyObjectResult = {}));
var CopyObjectOutput;
(function(CopyObjectOutput2) {
  CopyObjectOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }), obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING });
  };
})(CopyObjectOutput || (CopyObjectOutput = {}));
var CopyObjectRequest;
(function(CopyObjectRequest2) {
  CopyObjectRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign(__assign(__assign({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }), obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }), obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: SENSITIVE_STRING });
  };
})(CopyObjectRequest || (CopyObjectRequest = {}));
var ObjectNotInActiveTierError;
(function(ObjectNotInActiveTierError2) {
  ObjectNotInActiveTierError2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ObjectNotInActiveTierError || (ObjectNotInActiveTierError = {}));
var BucketAlreadyExists;
(function(BucketAlreadyExists2) {
  BucketAlreadyExists2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BucketAlreadyExists || (BucketAlreadyExists = {}));
var BucketAlreadyOwnedByYou;
(function(BucketAlreadyOwnedByYou2) {
  BucketAlreadyOwnedByYou2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BucketAlreadyOwnedByYou || (BucketAlreadyOwnedByYou = {}));
var CreateBucketOutput;
(function(CreateBucketOutput2) {
  CreateBucketOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateBucketOutput || (CreateBucketOutput = {}));
var CreateBucketConfiguration;
(function(CreateBucketConfiguration2) {
  CreateBucketConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateBucketConfiguration || (CreateBucketConfiguration = {}));
var CreateBucketRequest;
(function(CreateBucketRequest2) {
  CreateBucketRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateBucketRequest || (CreateBucketRequest = {}));
var CreateMultipartUploadOutput;
(function(CreateMultipartUploadOutput2) {
  CreateMultipartUploadOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }), obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING });
  };
})(CreateMultipartUploadOutput || (CreateMultipartUploadOutput = {}));
var CreateMultipartUploadRequest;
(function(CreateMultipartUploadRequest2) {
  CreateMultipartUploadRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign(__assign({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }), obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING });
  };
})(CreateMultipartUploadRequest || (CreateMultipartUploadRequest = {}));
var DeleteBucketRequest;
(function(DeleteBucketRequest2) {
  DeleteBucketRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBucketRequest || (DeleteBucketRequest = {}));
var DeleteBucketAnalyticsConfigurationRequest;
(function(DeleteBucketAnalyticsConfigurationRequest2) {
  DeleteBucketAnalyticsConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBucketAnalyticsConfigurationRequest || (DeleteBucketAnalyticsConfigurationRequest = {}));
var DeleteBucketCorsRequest;
(function(DeleteBucketCorsRequest2) {
  DeleteBucketCorsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBucketCorsRequest || (DeleteBucketCorsRequest = {}));
var DeleteBucketEncryptionRequest;
(function(DeleteBucketEncryptionRequest2) {
  DeleteBucketEncryptionRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBucketEncryptionRequest || (DeleteBucketEncryptionRequest = {}));
var DeleteBucketIntelligentTieringConfigurationRequest;
(function(DeleteBucketIntelligentTieringConfigurationRequest2) {
  DeleteBucketIntelligentTieringConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBucketIntelligentTieringConfigurationRequest || (DeleteBucketIntelligentTieringConfigurationRequest = {}));
var DeleteBucketInventoryConfigurationRequest;
(function(DeleteBucketInventoryConfigurationRequest2) {
  DeleteBucketInventoryConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBucketInventoryConfigurationRequest || (DeleteBucketInventoryConfigurationRequest = {}));
var DeleteBucketLifecycleRequest;
(function(DeleteBucketLifecycleRequest2) {
  DeleteBucketLifecycleRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBucketLifecycleRequest || (DeleteBucketLifecycleRequest = {}));
var DeleteBucketMetricsConfigurationRequest;
(function(DeleteBucketMetricsConfigurationRequest2) {
  DeleteBucketMetricsConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBucketMetricsConfigurationRequest || (DeleteBucketMetricsConfigurationRequest = {}));
var DeleteBucketOwnershipControlsRequest;
(function(DeleteBucketOwnershipControlsRequest2) {
  DeleteBucketOwnershipControlsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBucketOwnershipControlsRequest || (DeleteBucketOwnershipControlsRequest = {}));
var DeleteBucketPolicyRequest;
(function(DeleteBucketPolicyRequest2) {
  DeleteBucketPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBucketPolicyRequest || (DeleteBucketPolicyRequest = {}));
var DeleteBucketReplicationRequest;
(function(DeleteBucketReplicationRequest2) {
  DeleteBucketReplicationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBucketReplicationRequest || (DeleteBucketReplicationRequest = {}));
var DeleteBucketTaggingRequest;
(function(DeleteBucketTaggingRequest2) {
  DeleteBucketTaggingRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBucketTaggingRequest || (DeleteBucketTaggingRequest = {}));
var DeleteBucketWebsiteRequest;
(function(DeleteBucketWebsiteRequest2) {
  DeleteBucketWebsiteRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteBucketWebsiteRequest || (DeleteBucketWebsiteRequest = {}));
var DeleteObjectOutput;
(function(DeleteObjectOutput2) {
  DeleteObjectOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteObjectOutput || (DeleteObjectOutput = {}));
var DeleteObjectRequest;
(function(DeleteObjectRequest2) {
  DeleteObjectRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteObjectRequest || (DeleteObjectRequest = {}));
var DeletedObject;
(function(DeletedObject2) {
  DeletedObject2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeletedObject || (DeletedObject = {}));
var _Error;
(function(_Error2) {
  _Error2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(_Error || (_Error = {}));
var DeleteObjectsOutput;
(function(DeleteObjectsOutput2) {
  DeleteObjectsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteObjectsOutput || (DeleteObjectsOutput = {}));
var ObjectIdentifier;
(function(ObjectIdentifier2) {
  ObjectIdentifier2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ObjectIdentifier || (ObjectIdentifier = {}));
var Delete2;
(function(Delete3) {
  Delete3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Delete2 || (Delete2 = {}));
var DeleteObjectsRequest;
(function(DeleteObjectsRequest2) {
  DeleteObjectsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteObjectsRequest || (DeleteObjectsRequest = {}));
var DeleteObjectTaggingOutput;
(function(DeleteObjectTaggingOutput2) {
  DeleteObjectTaggingOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteObjectTaggingOutput || (DeleteObjectTaggingOutput = {}));
var DeleteObjectTaggingRequest;
(function(DeleteObjectTaggingRequest2) {
  DeleteObjectTaggingRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteObjectTaggingRequest || (DeleteObjectTaggingRequest = {}));
var DeletePublicAccessBlockRequest;
(function(DeletePublicAccessBlockRequest2) {
  DeletePublicAccessBlockRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeletePublicAccessBlockRequest || (DeletePublicAccessBlockRequest = {}));
var GetBucketAccelerateConfigurationOutput;
(function(GetBucketAccelerateConfigurationOutput2) {
  GetBucketAccelerateConfigurationOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketAccelerateConfigurationOutput || (GetBucketAccelerateConfigurationOutput = {}));
var GetBucketAccelerateConfigurationRequest;
(function(GetBucketAccelerateConfigurationRequest2) {
  GetBucketAccelerateConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketAccelerateConfigurationRequest || (GetBucketAccelerateConfigurationRequest = {}));
var GetBucketAclOutput;
(function(GetBucketAclOutput2) {
  GetBucketAclOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketAclOutput || (GetBucketAclOutput = {}));
var GetBucketAclRequest;
(function(GetBucketAclRequest2) {
  GetBucketAclRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketAclRequest || (GetBucketAclRequest = {}));
var Tag3;
(function(Tag5) {
  Tag5.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Tag3 || (Tag3 = {}));
var AnalyticsAndOperator;
(function(AnalyticsAndOperator2) {
  AnalyticsAndOperator2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AnalyticsAndOperator || (AnalyticsAndOperator = {}));
var AnalyticsFilter;
(function(AnalyticsFilter2) {
  AnalyticsFilter2.visit = function(value, visitor) {
    if (value.Prefix !== void 0)
      return visitor.Prefix(value.Prefix);
    if (value.Tag !== void 0)
      return visitor.Tag(value.Tag);
    if (value.And !== void 0)
      return visitor.And(value.And);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
  AnalyticsFilter2.filterSensitiveLog = function(obj) {
    var _a;
    if (obj.Prefix !== void 0)
      return { Prefix: obj.Prefix };
    if (obj.Tag !== void 0)
      return { Tag: Tag3.filterSensitiveLog(obj.Tag) };
    if (obj.And !== void 0)
      return { And: AnalyticsAndOperator.filterSensitiveLog(obj.And) };
    if (obj.$unknown !== void 0)
      return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
  };
})(AnalyticsFilter || (AnalyticsFilter = {}));
var AnalyticsS3BucketDestination;
(function(AnalyticsS3BucketDestination2) {
  AnalyticsS3BucketDestination2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AnalyticsS3BucketDestination || (AnalyticsS3BucketDestination = {}));
var AnalyticsExportDestination;
(function(AnalyticsExportDestination2) {
  AnalyticsExportDestination2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AnalyticsExportDestination || (AnalyticsExportDestination = {}));
var StorageClassAnalysisDataExport;
(function(StorageClassAnalysisDataExport2) {
  StorageClassAnalysisDataExport2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StorageClassAnalysisDataExport || (StorageClassAnalysisDataExport = {}));
var StorageClassAnalysis;
(function(StorageClassAnalysis2) {
  StorageClassAnalysis2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StorageClassAnalysis || (StorageClassAnalysis = {}));
var AnalyticsConfiguration;
(function(AnalyticsConfiguration2) {
  AnalyticsConfiguration2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Filter && { Filter: AnalyticsFilter.filterSensitiveLog(obj.Filter) });
  };
})(AnalyticsConfiguration || (AnalyticsConfiguration = {}));
var GetBucketAnalyticsConfigurationOutput;
(function(GetBucketAnalyticsConfigurationOutput2) {
  GetBucketAnalyticsConfigurationOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.AnalyticsConfiguration && {
      AnalyticsConfiguration: AnalyticsConfiguration.filterSensitiveLog(obj.AnalyticsConfiguration)
    });
  };
})(GetBucketAnalyticsConfigurationOutput || (GetBucketAnalyticsConfigurationOutput = {}));
var GetBucketAnalyticsConfigurationRequest;
(function(GetBucketAnalyticsConfigurationRequest2) {
  GetBucketAnalyticsConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketAnalyticsConfigurationRequest || (GetBucketAnalyticsConfigurationRequest = {}));
var CORSRule;
(function(CORSRule2) {
  CORSRule2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CORSRule || (CORSRule = {}));
var GetBucketCorsOutput;
(function(GetBucketCorsOutput2) {
  GetBucketCorsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketCorsOutput || (GetBucketCorsOutput = {}));
var GetBucketCorsRequest;
(function(GetBucketCorsRequest2) {
  GetBucketCorsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketCorsRequest || (GetBucketCorsRequest = {}));
var ServerSideEncryptionByDefault;
(function(ServerSideEncryptionByDefault2) {
  ServerSideEncryptionByDefault2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.KMSMasterKeyID && { KMSMasterKeyID: SENSITIVE_STRING });
  };
})(ServerSideEncryptionByDefault || (ServerSideEncryptionByDefault = {}));
var ServerSideEncryptionRule;
(function(ServerSideEncryptionRule2) {
  ServerSideEncryptionRule2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.ApplyServerSideEncryptionByDefault && {
      ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefault.filterSensitiveLog(obj.ApplyServerSideEncryptionByDefault)
    });
  };
})(ServerSideEncryptionRule || (ServerSideEncryptionRule = {}));
var ServerSideEncryptionConfiguration;
(function(ServerSideEncryptionConfiguration2) {
  ServerSideEncryptionConfiguration2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Rules && { Rules: obj.Rules.map(function(item) {
      return ServerSideEncryptionRule.filterSensitiveLog(item);
    }) });
  };
})(ServerSideEncryptionConfiguration || (ServerSideEncryptionConfiguration = {}));
var GetBucketEncryptionOutput;
(function(GetBucketEncryptionOutput2) {
  GetBucketEncryptionOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.ServerSideEncryptionConfiguration && {
      ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration.filterSensitiveLog(obj.ServerSideEncryptionConfiguration)
    });
  };
})(GetBucketEncryptionOutput || (GetBucketEncryptionOutput = {}));
var GetBucketEncryptionRequest;
(function(GetBucketEncryptionRequest2) {
  GetBucketEncryptionRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketEncryptionRequest || (GetBucketEncryptionRequest = {}));
var IntelligentTieringAndOperator;
(function(IntelligentTieringAndOperator2) {
  IntelligentTieringAndOperator2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(IntelligentTieringAndOperator || (IntelligentTieringAndOperator = {}));
var IntelligentTieringFilter;
(function(IntelligentTieringFilter2) {
  IntelligentTieringFilter2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(IntelligentTieringFilter || (IntelligentTieringFilter = {}));
var Tiering;
(function(Tiering2) {
  Tiering2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Tiering || (Tiering = {}));
var IntelligentTieringConfiguration;
(function(IntelligentTieringConfiguration2) {
  IntelligentTieringConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(IntelligentTieringConfiguration || (IntelligentTieringConfiguration = {}));
var GetBucketIntelligentTieringConfigurationOutput;
(function(GetBucketIntelligentTieringConfigurationOutput2) {
  GetBucketIntelligentTieringConfigurationOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketIntelligentTieringConfigurationOutput || (GetBucketIntelligentTieringConfigurationOutput = {}));
var GetBucketIntelligentTieringConfigurationRequest;
(function(GetBucketIntelligentTieringConfigurationRequest2) {
  GetBucketIntelligentTieringConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketIntelligentTieringConfigurationRequest || (GetBucketIntelligentTieringConfigurationRequest = {}));
var SSEKMS;
(function(SSEKMS2) {
  SSEKMS2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.KeyId && { KeyId: SENSITIVE_STRING });
  };
})(SSEKMS || (SSEKMS = {}));
var SSES3;
(function(SSES32) {
  SSES32.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SSES3 || (SSES3 = {}));
var InventoryEncryption;
(function(InventoryEncryption2) {
  InventoryEncryption2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.SSEKMS && { SSEKMS: SSEKMS.filterSensitiveLog(obj.SSEKMS) });
  };
})(InventoryEncryption || (InventoryEncryption = {}));
var InventoryS3BucketDestination;
(function(InventoryS3BucketDestination2) {
  InventoryS3BucketDestination2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Encryption && { Encryption: InventoryEncryption.filterSensitiveLog(obj.Encryption) });
  };
})(InventoryS3BucketDestination || (InventoryS3BucketDestination = {}));
var InventoryDestination;
(function(InventoryDestination2) {
  InventoryDestination2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.S3BucketDestination && {
      S3BucketDestination: InventoryS3BucketDestination.filterSensitiveLog(obj.S3BucketDestination)
    });
  };
})(InventoryDestination || (InventoryDestination = {}));
var InventoryFilter;
(function(InventoryFilter2) {
  InventoryFilter2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InventoryFilter || (InventoryFilter = {}));
var InventorySchedule;
(function(InventorySchedule2) {
  InventorySchedule2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InventorySchedule || (InventorySchedule = {}));
var InventoryConfiguration;
(function(InventoryConfiguration2) {
  InventoryConfiguration2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Destination && { Destination: InventoryDestination.filterSensitiveLog(obj.Destination) });
  };
})(InventoryConfiguration || (InventoryConfiguration = {}));
var GetBucketInventoryConfigurationOutput;
(function(GetBucketInventoryConfigurationOutput2) {
  GetBucketInventoryConfigurationOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.InventoryConfiguration && {
      InventoryConfiguration: InventoryConfiguration.filterSensitiveLog(obj.InventoryConfiguration)
    });
  };
})(GetBucketInventoryConfigurationOutput || (GetBucketInventoryConfigurationOutput = {}));
var GetBucketInventoryConfigurationRequest;
(function(GetBucketInventoryConfigurationRequest2) {
  GetBucketInventoryConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketInventoryConfigurationRequest || (GetBucketInventoryConfigurationRequest = {}));
var LifecycleExpiration;
(function(LifecycleExpiration2) {
  LifecycleExpiration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LifecycleExpiration || (LifecycleExpiration = {}));
var LifecycleRuleAndOperator;
(function(LifecycleRuleAndOperator2) {
  LifecycleRuleAndOperator2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LifecycleRuleAndOperator || (LifecycleRuleAndOperator = {}));
var LifecycleRuleFilter;
(function(LifecycleRuleFilter2) {
  LifecycleRuleFilter2.visit = function(value, visitor) {
    if (value.Prefix !== void 0)
      return visitor.Prefix(value.Prefix);
    if (value.Tag !== void 0)
      return visitor.Tag(value.Tag);
    if (value.And !== void 0)
      return visitor.And(value.And);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
  LifecycleRuleFilter2.filterSensitiveLog = function(obj) {
    var _a;
    if (obj.Prefix !== void 0)
      return { Prefix: obj.Prefix };
    if (obj.Tag !== void 0)
      return { Tag: Tag3.filterSensitiveLog(obj.Tag) };
    if (obj.And !== void 0)
      return { And: LifecycleRuleAndOperator.filterSensitiveLog(obj.And) };
    if (obj.$unknown !== void 0)
      return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
  };
})(LifecycleRuleFilter || (LifecycleRuleFilter = {}));
var NoncurrentVersionExpiration;
(function(NoncurrentVersionExpiration2) {
  NoncurrentVersionExpiration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(NoncurrentVersionExpiration || (NoncurrentVersionExpiration = {}));
var NoncurrentVersionTransition;
(function(NoncurrentVersionTransition2) {
  NoncurrentVersionTransition2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(NoncurrentVersionTransition || (NoncurrentVersionTransition = {}));
var Transition;
(function(Transition2) {
  Transition2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Transition || (Transition = {}));
var LifecycleRule;
(function(LifecycleRule2) {
  LifecycleRule2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Filter && { Filter: LifecycleRuleFilter.filterSensitiveLog(obj.Filter) });
  };
})(LifecycleRule || (LifecycleRule = {}));
var GetBucketLifecycleConfigurationOutput;
(function(GetBucketLifecycleConfigurationOutput2) {
  GetBucketLifecycleConfigurationOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Rules && { Rules: obj.Rules.map(function(item) {
      return LifecycleRule.filterSensitiveLog(item);
    }) });
  };
})(GetBucketLifecycleConfigurationOutput || (GetBucketLifecycleConfigurationOutput = {}));
var GetBucketLifecycleConfigurationRequest;
(function(GetBucketLifecycleConfigurationRequest2) {
  GetBucketLifecycleConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketLifecycleConfigurationRequest || (GetBucketLifecycleConfigurationRequest = {}));
var GetBucketLocationOutput;
(function(GetBucketLocationOutput2) {
  GetBucketLocationOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketLocationOutput || (GetBucketLocationOutput = {}));
var GetBucketLocationRequest;
(function(GetBucketLocationRequest2) {
  GetBucketLocationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketLocationRequest || (GetBucketLocationRequest = {}));
var TargetGrant;
(function(TargetGrant2) {
  TargetGrant2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TargetGrant || (TargetGrant = {}));
var LoggingEnabled;
(function(LoggingEnabled2) {
  LoggingEnabled2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LoggingEnabled || (LoggingEnabled = {}));
var GetBucketLoggingOutput;
(function(GetBucketLoggingOutput2) {
  GetBucketLoggingOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketLoggingOutput || (GetBucketLoggingOutput = {}));
var GetBucketLoggingRequest;
(function(GetBucketLoggingRequest2) {
  GetBucketLoggingRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketLoggingRequest || (GetBucketLoggingRequest = {}));
var MetricsAndOperator;
(function(MetricsAndOperator2) {
  MetricsAndOperator2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MetricsAndOperator || (MetricsAndOperator = {}));
var MetricsFilter;
(function(MetricsFilter2) {
  MetricsFilter2.visit = function(value, visitor) {
    if (value.Prefix !== void 0)
      return visitor.Prefix(value.Prefix);
    if (value.Tag !== void 0)
      return visitor.Tag(value.Tag);
    if (value.AccessPointArn !== void 0)
      return visitor.AccessPointArn(value.AccessPointArn);
    if (value.And !== void 0)
      return visitor.And(value.And);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
  MetricsFilter2.filterSensitiveLog = function(obj) {
    var _a;
    if (obj.Prefix !== void 0)
      return { Prefix: obj.Prefix };
    if (obj.Tag !== void 0)
      return { Tag: Tag3.filterSensitiveLog(obj.Tag) };
    if (obj.AccessPointArn !== void 0)
      return { AccessPointArn: obj.AccessPointArn };
    if (obj.And !== void 0)
      return { And: MetricsAndOperator.filterSensitiveLog(obj.And) };
    if (obj.$unknown !== void 0)
      return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
  };
})(MetricsFilter || (MetricsFilter = {}));
var MetricsConfiguration;
(function(MetricsConfiguration2) {
  MetricsConfiguration2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Filter && { Filter: MetricsFilter.filterSensitiveLog(obj.Filter) });
  };
})(MetricsConfiguration || (MetricsConfiguration = {}));
var GetBucketMetricsConfigurationOutput;
(function(GetBucketMetricsConfigurationOutput2) {
  GetBucketMetricsConfigurationOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.MetricsConfiguration && {
      MetricsConfiguration: MetricsConfiguration.filterSensitiveLog(obj.MetricsConfiguration)
    });
  };
})(GetBucketMetricsConfigurationOutput || (GetBucketMetricsConfigurationOutput = {}));
var GetBucketMetricsConfigurationRequest;
(function(GetBucketMetricsConfigurationRequest2) {
  GetBucketMetricsConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketMetricsConfigurationRequest || (GetBucketMetricsConfigurationRequest = {}));
var GetBucketNotificationConfigurationRequest;
(function(GetBucketNotificationConfigurationRequest2) {
  GetBucketNotificationConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketNotificationConfigurationRequest || (GetBucketNotificationConfigurationRequest = {}));
var FilterRule;
(function(FilterRule2) {
  FilterRule2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(FilterRule || (FilterRule = {}));
var S3KeyFilter;
(function(S3KeyFilter2) {
  S3KeyFilter2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(S3KeyFilter || (S3KeyFilter = {}));
var NotificationConfigurationFilter;
(function(NotificationConfigurationFilter2) {
  NotificationConfigurationFilter2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(NotificationConfigurationFilter || (NotificationConfigurationFilter = {}));
var LambdaFunctionConfiguration;
(function(LambdaFunctionConfiguration2) {
  LambdaFunctionConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LambdaFunctionConfiguration || (LambdaFunctionConfiguration = {}));
var QueueConfiguration;
(function(QueueConfiguration2) {
  QueueConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(QueueConfiguration || (QueueConfiguration = {}));
var TopicConfiguration;
(function(TopicConfiguration2) {
  TopicConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TopicConfiguration || (TopicConfiguration = {}));
var NotificationConfiguration;
(function(NotificationConfiguration2) {
  NotificationConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(NotificationConfiguration || (NotificationConfiguration = {}));
var OwnershipControlsRule;
(function(OwnershipControlsRule2) {
  OwnershipControlsRule2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(OwnershipControlsRule || (OwnershipControlsRule = {}));
var OwnershipControls;
(function(OwnershipControls2) {
  OwnershipControls2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(OwnershipControls || (OwnershipControls = {}));
var GetBucketOwnershipControlsOutput;
(function(GetBucketOwnershipControlsOutput2) {
  GetBucketOwnershipControlsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketOwnershipControlsOutput || (GetBucketOwnershipControlsOutput = {}));
var GetBucketOwnershipControlsRequest;
(function(GetBucketOwnershipControlsRequest2) {
  GetBucketOwnershipControlsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketOwnershipControlsRequest || (GetBucketOwnershipControlsRequest = {}));
var GetBucketPolicyOutput;
(function(GetBucketPolicyOutput2) {
  GetBucketPolicyOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketPolicyOutput || (GetBucketPolicyOutput = {}));
var GetBucketPolicyRequest;
(function(GetBucketPolicyRequest2) {
  GetBucketPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketPolicyRequest || (GetBucketPolicyRequest = {}));
var PolicyStatus;
(function(PolicyStatus2) {
  PolicyStatus2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PolicyStatus || (PolicyStatus = {}));
var GetBucketPolicyStatusOutput;
(function(GetBucketPolicyStatusOutput2) {
  GetBucketPolicyStatusOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketPolicyStatusOutput || (GetBucketPolicyStatusOutput = {}));
var GetBucketPolicyStatusRequest;
(function(GetBucketPolicyStatusRequest2) {
  GetBucketPolicyStatusRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketPolicyStatusRequest || (GetBucketPolicyStatusRequest = {}));
var DeleteMarkerReplication;
(function(DeleteMarkerReplication2) {
  DeleteMarkerReplication2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteMarkerReplication || (DeleteMarkerReplication = {}));
var EncryptionConfiguration;
(function(EncryptionConfiguration2) {
  EncryptionConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(EncryptionConfiguration || (EncryptionConfiguration = {}));
var ReplicationTimeValue;
(function(ReplicationTimeValue2) {
  ReplicationTimeValue2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicationTimeValue || (ReplicationTimeValue = {}));
var Metrics;
(function(Metrics2) {
  Metrics2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Metrics || (Metrics = {}));
var ReplicationTime;
(function(ReplicationTime2) {
  ReplicationTime2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicationTime || (ReplicationTime = {}));
var Destination;
(function(Destination3) {
  Destination3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Destination || (Destination = {}));
var ExistingObjectReplication;
(function(ExistingObjectReplication2) {
  ExistingObjectReplication2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ExistingObjectReplication || (ExistingObjectReplication = {}));
var ReplicationRuleAndOperator;
(function(ReplicationRuleAndOperator2) {
  ReplicationRuleAndOperator2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicationRuleAndOperator || (ReplicationRuleAndOperator = {}));
var ReplicationRuleFilter;
(function(ReplicationRuleFilter2) {
  ReplicationRuleFilter2.visit = function(value, visitor) {
    if (value.Prefix !== void 0)
      return visitor.Prefix(value.Prefix);
    if (value.Tag !== void 0)
      return visitor.Tag(value.Tag);
    if (value.And !== void 0)
      return visitor.And(value.And);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
  ReplicationRuleFilter2.filterSensitiveLog = function(obj) {
    var _a;
    if (obj.Prefix !== void 0)
      return { Prefix: obj.Prefix };
    if (obj.Tag !== void 0)
      return { Tag: Tag3.filterSensitiveLog(obj.Tag) };
    if (obj.And !== void 0)
      return { And: ReplicationRuleAndOperator.filterSensitiveLog(obj.And) };
    if (obj.$unknown !== void 0)
      return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
  };
})(ReplicationRuleFilter || (ReplicationRuleFilter = {}));
var ReplicaModifications;
(function(ReplicaModifications2) {
  ReplicaModifications2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReplicaModifications || (ReplicaModifications = {}));
var SseKmsEncryptedObjects;
(function(SseKmsEncryptedObjects2) {
  SseKmsEncryptedObjects2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SseKmsEncryptedObjects || (SseKmsEncryptedObjects = {}));
var SourceSelectionCriteria;
(function(SourceSelectionCriteria2) {
  SourceSelectionCriteria2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SourceSelectionCriteria || (SourceSelectionCriteria = {}));
var ReplicationRule;
(function(ReplicationRule2) {
  ReplicationRule2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Filter && { Filter: ReplicationRuleFilter.filterSensitiveLog(obj.Filter) });
  };
})(ReplicationRule || (ReplicationRule = {}));
var ReplicationConfiguration;
(function(ReplicationConfiguration2) {
  ReplicationConfiguration2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Rules && { Rules: obj.Rules.map(function(item) {
      return ReplicationRule.filterSensitiveLog(item);
    }) });
  };
})(ReplicationConfiguration || (ReplicationConfiguration = {}));
var GetBucketReplicationOutput;
(function(GetBucketReplicationOutput2) {
  GetBucketReplicationOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.ReplicationConfiguration && {
      ReplicationConfiguration: ReplicationConfiguration.filterSensitiveLog(obj.ReplicationConfiguration)
    });
  };
})(GetBucketReplicationOutput || (GetBucketReplicationOutput = {}));
var GetBucketReplicationRequest;
(function(GetBucketReplicationRequest2) {
  GetBucketReplicationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketReplicationRequest || (GetBucketReplicationRequest = {}));
var GetBucketRequestPaymentOutput;
(function(GetBucketRequestPaymentOutput2) {
  GetBucketRequestPaymentOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketRequestPaymentOutput || (GetBucketRequestPaymentOutput = {}));
var GetBucketRequestPaymentRequest;
(function(GetBucketRequestPaymentRequest2) {
  GetBucketRequestPaymentRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketRequestPaymentRequest || (GetBucketRequestPaymentRequest = {}));
var GetBucketTaggingOutput;
(function(GetBucketTaggingOutput2) {
  GetBucketTaggingOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketTaggingOutput || (GetBucketTaggingOutput = {}));
var GetBucketTaggingRequest;
(function(GetBucketTaggingRequest2) {
  GetBucketTaggingRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketTaggingRequest || (GetBucketTaggingRequest = {}));
var GetBucketVersioningOutput;
(function(GetBucketVersioningOutput2) {
  GetBucketVersioningOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketVersioningOutput || (GetBucketVersioningOutput = {}));
var GetBucketVersioningRequest;
(function(GetBucketVersioningRequest2) {
  GetBucketVersioningRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketVersioningRequest || (GetBucketVersioningRequest = {}));
var ErrorDocument;
(function(ErrorDocument2) {
  ErrorDocument2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ErrorDocument || (ErrorDocument = {}));
var IndexDocument;
(function(IndexDocument2) {
  IndexDocument2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(IndexDocument || (IndexDocument = {}));
var RedirectAllRequestsTo;
(function(RedirectAllRequestsTo2) {
  RedirectAllRequestsTo2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RedirectAllRequestsTo || (RedirectAllRequestsTo = {}));
var Condition2;
(function(Condition3) {
  Condition3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Condition2 || (Condition2 = {}));
var Redirect;
(function(Redirect2) {
  Redirect2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Redirect || (Redirect = {}));
var RoutingRule;
(function(RoutingRule2) {
  RoutingRule2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RoutingRule || (RoutingRule = {}));
var GetBucketWebsiteOutput;
(function(GetBucketWebsiteOutput2) {
  GetBucketWebsiteOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketWebsiteOutput || (GetBucketWebsiteOutput = {}));
var GetBucketWebsiteRequest;
(function(GetBucketWebsiteRequest2) {
  GetBucketWebsiteRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetBucketWebsiteRequest || (GetBucketWebsiteRequest = {}));
var GetObjectOutput;
(function(GetObjectOutput2) {
  GetObjectOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING });
  };
})(GetObjectOutput || (GetObjectOutput = {}));
var GetObjectRequest;
(function(GetObjectRequest2) {
  GetObjectRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING });
  };
})(GetObjectRequest || (GetObjectRequest = {}));
var InvalidObjectState;
(function(InvalidObjectState2) {
  InvalidObjectState2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidObjectState || (InvalidObjectState = {}));
var NoSuchKey;
(function(NoSuchKey2) {
  NoSuchKey2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(NoSuchKey || (NoSuchKey = {}));
var GetObjectAclOutput;
(function(GetObjectAclOutput2) {
  GetObjectAclOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetObjectAclOutput || (GetObjectAclOutput = {}));
var GetObjectAclRequest;
(function(GetObjectAclRequest2) {
  GetObjectAclRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetObjectAclRequest || (GetObjectAclRequest = {}));
var ObjectLockLegalHold;
(function(ObjectLockLegalHold2) {
  ObjectLockLegalHold2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ObjectLockLegalHold || (ObjectLockLegalHold = {}));
var GetObjectLegalHoldOutput;
(function(GetObjectLegalHoldOutput2) {
  GetObjectLegalHoldOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetObjectLegalHoldOutput || (GetObjectLegalHoldOutput = {}));
var GetObjectLegalHoldRequest;
(function(GetObjectLegalHoldRequest2) {
  GetObjectLegalHoldRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetObjectLegalHoldRequest || (GetObjectLegalHoldRequest = {}));
var DefaultRetention;
(function(DefaultRetention2) {
  DefaultRetention2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DefaultRetention || (DefaultRetention = {}));
var ObjectLockRule;
(function(ObjectLockRule2) {
  ObjectLockRule2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ObjectLockRule || (ObjectLockRule = {}));
var ObjectLockConfiguration;
(function(ObjectLockConfiguration2) {
  ObjectLockConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ObjectLockConfiguration || (ObjectLockConfiguration = {}));
var GetObjectLockConfigurationOutput;
(function(GetObjectLockConfigurationOutput2) {
  GetObjectLockConfigurationOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetObjectLockConfigurationOutput || (GetObjectLockConfigurationOutput = {}));
var GetObjectLockConfigurationRequest;
(function(GetObjectLockConfigurationRequest2) {
  GetObjectLockConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetObjectLockConfigurationRequest || (GetObjectLockConfigurationRequest = {}));
var ObjectLockRetention;
(function(ObjectLockRetention2) {
  ObjectLockRetention2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ObjectLockRetention || (ObjectLockRetention = {}));
var GetObjectRetentionOutput;
(function(GetObjectRetentionOutput2) {
  GetObjectRetentionOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetObjectRetentionOutput || (GetObjectRetentionOutput = {}));
var GetObjectRetentionRequest;
(function(GetObjectRetentionRequest2) {
  GetObjectRetentionRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetObjectRetentionRequest || (GetObjectRetentionRequest = {}));
var GetObjectTaggingOutput;
(function(GetObjectTaggingOutput2) {
  GetObjectTaggingOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetObjectTaggingOutput || (GetObjectTaggingOutput = {}));
var GetObjectTaggingRequest;
(function(GetObjectTaggingRequest2) {
  GetObjectTaggingRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetObjectTaggingRequest || (GetObjectTaggingRequest = {}));
var GetObjectTorrentOutput;
(function(GetObjectTorrentOutput2) {
  GetObjectTorrentOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetObjectTorrentOutput || (GetObjectTorrentOutput = {}));
var GetObjectTorrentRequest;
(function(GetObjectTorrentRequest2) {
  GetObjectTorrentRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetObjectTorrentRequest || (GetObjectTorrentRequest = {}));
var PublicAccessBlockConfiguration;
(function(PublicAccessBlockConfiguration2) {
  PublicAccessBlockConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PublicAccessBlockConfiguration || (PublicAccessBlockConfiguration = {}));
var GetPublicAccessBlockOutput;
(function(GetPublicAccessBlockOutput2) {
  GetPublicAccessBlockOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetPublicAccessBlockOutput || (GetPublicAccessBlockOutput = {}));
var GetPublicAccessBlockRequest;
(function(GetPublicAccessBlockRequest2) {
  GetPublicAccessBlockRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetPublicAccessBlockRequest || (GetPublicAccessBlockRequest = {}));
var HeadBucketRequest;
(function(HeadBucketRequest2) {
  HeadBucketRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(HeadBucketRequest || (HeadBucketRequest = {}));
var NotFound;
(function(NotFound2) {
  NotFound2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(NotFound || (NotFound = {}));
var HeadObjectOutput;
(function(HeadObjectOutput2) {
  HeadObjectOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING });
  };
})(HeadObjectOutput || (HeadObjectOutput = {}));
var HeadObjectRequest;
(function(HeadObjectRequest2) {
  HeadObjectRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING });
  };
})(HeadObjectRequest || (HeadObjectRequest = {}));
var ListBucketAnalyticsConfigurationsOutput;
(function(ListBucketAnalyticsConfigurationsOutput2) {
  ListBucketAnalyticsConfigurationsOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.AnalyticsConfigurationList && {
      AnalyticsConfigurationList: obj.AnalyticsConfigurationList.map(function(item) {
        return AnalyticsConfiguration.filterSensitiveLog(item);
      })
    });
  };
})(ListBucketAnalyticsConfigurationsOutput || (ListBucketAnalyticsConfigurationsOutput = {}));
var ListBucketAnalyticsConfigurationsRequest;
(function(ListBucketAnalyticsConfigurationsRequest2) {
  ListBucketAnalyticsConfigurationsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListBucketAnalyticsConfigurationsRequest || (ListBucketAnalyticsConfigurationsRequest = {}));
var ListBucketIntelligentTieringConfigurationsOutput;
(function(ListBucketIntelligentTieringConfigurationsOutput2) {
  ListBucketIntelligentTieringConfigurationsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListBucketIntelligentTieringConfigurationsOutput || (ListBucketIntelligentTieringConfigurationsOutput = {}));
var ListBucketIntelligentTieringConfigurationsRequest;
(function(ListBucketIntelligentTieringConfigurationsRequest2) {
  ListBucketIntelligentTieringConfigurationsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListBucketIntelligentTieringConfigurationsRequest || (ListBucketIntelligentTieringConfigurationsRequest = {}));
var ListBucketInventoryConfigurationsOutput;
(function(ListBucketInventoryConfigurationsOutput2) {
  ListBucketInventoryConfigurationsOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.InventoryConfigurationList && {
      InventoryConfigurationList: obj.InventoryConfigurationList.map(function(item) {
        return InventoryConfiguration.filterSensitiveLog(item);
      })
    });
  };
})(ListBucketInventoryConfigurationsOutput || (ListBucketInventoryConfigurationsOutput = {}));
var ListBucketInventoryConfigurationsRequest;
(function(ListBucketInventoryConfigurationsRequest2) {
  ListBucketInventoryConfigurationsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListBucketInventoryConfigurationsRequest || (ListBucketInventoryConfigurationsRequest = {}));
var ListBucketMetricsConfigurationsOutput;
(function(ListBucketMetricsConfigurationsOutput2) {
  ListBucketMetricsConfigurationsOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.MetricsConfigurationList && {
      MetricsConfigurationList: obj.MetricsConfigurationList.map(function(item) {
        return MetricsConfiguration.filterSensitiveLog(item);
      })
    });
  };
})(ListBucketMetricsConfigurationsOutput || (ListBucketMetricsConfigurationsOutput = {}));
var ListBucketMetricsConfigurationsRequest;
(function(ListBucketMetricsConfigurationsRequest2) {
  ListBucketMetricsConfigurationsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListBucketMetricsConfigurationsRequest || (ListBucketMetricsConfigurationsRequest = {}));
var Bucket;
(function(Bucket2) {
  Bucket2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Bucket || (Bucket = {}));
var ListBucketsOutput;
(function(ListBucketsOutput2) {
  ListBucketsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListBucketsOutput || (ListBucketsOutput = {}));
var CommonPrefix;
(function(CommonPrefix2) {
  CommonPrefix2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CommonPrefix || (CommonPrefix = {}));
var Initiator;
(function(Initiator2) {
  Initiator2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Initiator || (Initiator = {}));
var MultipartUpload;
(function(MultipartUpload2) {
  MultipartUpload2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MultipartUpload || (MultipartUpload = {}));
var ListMultipartUploadsOutput;
(function(ListMultipartUploadsOutput2) {
  ListMultipartUploadsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListMultipartUploadsOutput || (ListMultipartUploadsOutput = {}));
var ListMultipartUploadsRequest;
(function(ListMultipartUploadsRequest2) {
  ListMultipartUploadsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListMultipartUploadsRequest || (ListMultipartUploadsRequest = {}));
var _Object;
(function(_Object2) {
  _Object2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(_Object || (_Object = {}));
var ListObjectsOutput;
(function(ListObjectsOutput2) {
  ListObjectsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListObjectsOutput || (ListObjectsOutput = {}));
var ListObjectsRequest;
(function(ListObjectsRequest2) {
  ListObjectsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListObjectsRequest || (ListObjectsRequest = {}));
var NoSuchBucket;
(function(NoSuchBucket2) {
  NoSuchBucket2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(NoSuchBucket || (NoSuchBucket = {}));
var ListObjectsV2Output;
(function(ListObjectsV2Output2) {
  ListObjectsV2Output2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListObjectsV2Output || (ListObjectsV2Output = {}));
var ListObjectsV2Request;
(function(ListObjectsV2Request2) {
  ListObjectsV2Request2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListObjectsV2Request || (ListObjectsV2Request = {}));
var DeleteMarkerEntry;
(function(DeleteMarkerEntry2) {
  DeleteMarkerEntry2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteMarkerEntry || (DeleteMarkerEntry = {}));
var ObjectVersion;
(function(ObjectVersion2) {
  ObjectVersion2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ObjectVersion || (ObjectVersion = {}));
var ListObjectVersionsOutput;
(function(ListObjectVersionsOutput2) {
  ListObjectVersionsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListObjectVersionsOutput || (ListObjectVersionsOutput = {}));
var ListObjectVersionsRequest;
(function(ListObjectVersionsRequest2) {
  ListObjectVersionsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListObjectVersionsRequest || (ListObjectVersionsRequest = {}));
var Part;
(function(Part2) {
  Part2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Part || (Part = {}));
var ListPartsOutput;
(function(ListPartsOutput2) {
  ListPartsOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListPartsOutput || (ListPartsOutput = {}));
var ListPartsRequest;
(function(ListPartsRequest2) {
  ListPartsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListPartsRequest || (ListPartsRequest = {}));
var PutBucketAccelerateConfigurationRequest;
(function(PutBucketAccelerateConfigurationRequest2) {
  PutBucketAccelerateConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutBucketAccelerateConfigurationRequest || (PutBucketAccelerateConfigurationRequest = {}));
var PutBucketAclRequest;
(function(PutBucketAclRequest2) {
  PutBucketAclRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutBucketAclRequest || (PutBucketAclRequest = {}));
var PutBucketAnalyticsConfigurationRequest;
(function(PutBucketAnalyticsConfigurationRequest2) {
  PutBucketAnalyticsConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.AnalyticsConfiguration && {
      AnalyticsConfiguration: AnalyticsConfiguration.filterSensitiveLog(obj.AnalyticsConfiguration)
    });
  };
})(PutBucketAnalyticsConfigurationRequest || (PutBucketAnalyticsConfigurationRequest = {}));
var CORSConfiguration;
(function(CORSConfiguration2) {
  CORSConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CORSConfiguration || (CORSConfiguration = {}));
var PutBucketCorsRequest;
(function(PutBucketCorsRequest2) {
  PutBucketCorsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutBucketCorsRequest || (PutBucketCorsRequest = {}));
var PutBucketEncryptionRequest;
(function(PutBucketEncryptionRequest2) {
  PutBucketEncryptionRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.ServerSideEncryptionConfiguration && {
      ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration.filterSensitiveLog(obj.ServerSideEncryptionConfiguration)
    });
  };
})(PutBucketEncryptionRequest || (PutBucketEncryptionRequest = {}));
var PutBucketIntelligentTieringConfigurationRequest;
(function(PutBucketIntelligentTieringConfigurationRequest2) {
  PutBucketIntelligentTieringConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutBucketIntelligentTieringConfigurationRequest || (PutBucketIntelligentTieringConfigurationRequest = {}));
var PutBucketInventoryConfigurationRequest;
(function(PutBucketInventoryConfigurationRequest2) {
  PutBucketInventoryConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.InventoryConfiguration && {
      InventoryConfiguration: InventoryConfiguration.filterSensitiveLog(obj.InventoryConfiguration)
    });
  };
})(PutBucketInventoryConfigurationRequest || (PutBucketInventoryConfigurationRequest = {}));
var BucketLifecycleConfiguration;
(function(BucketLifecycleConfiguration2) {
  BucketLifecycleConfiguration2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Rules && { Rules: obj.Rules.map(function(item) {
      return LifecycleRule.filterSensitiveLog(item);
    }) });
  };
})(BucketLifecycleConfiguration || (BucketLifecycleConfiguration = {}));
var PutBucketLifecycleConfigurationRequest;
(function(PutBucketLifecycleConfigurationRequest2) {
  PutBucketLifecycleConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.LifecycleConfiguration && {
      LifecycleConfiguration: BucketLifecycleConfiguration.filterSensitiveLog(obj.LifecycleConfiguration)
    });
  };
})(PutBucketLifecycleConfigurationRequest || (PutBucketLifecycleConfigurationRequest = {}));
var BucketLoggingStatus;
(function(BucketLoggingStatus2) {
  BucketLoggingStatus2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BucketLoggingStatus || (BucketLoggingStatus = {}));
var PutBucketLoggingRequest;
(function(PutBucketLoggingRequest2) {
  PutBucketLoggingRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutBucketLoggingRequest || (PutBucketLoggingRequest = {}));
var PutBucketMetricsConfigurationRequest;
(function(PutBucketMetricsConfigurationRequest2) {
  PutBucketMetricsConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.MetricsConfiguration && {
      MetricsConfiguration: MetricsConfiguration.filterSensitiveLog(obj.MetricsConfiguration)
    });
  };
})(PutBucketMetricsConfigurationRequest || (PutBucketMetricsConfigurationRequest = {}));
var PutBucketNotificationConfigurationRequest;
(function(PutBucketNotificationConfigurationRequest2) {
  PutBucketNotificationConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutBucketNotificationConfigurationRequest || (PutBucketNotificationConfigurationRequest = {}));
var PutBucketOwnershipControlsRequest;
(function(PutBucketOwnershipControlsRequest2) {
  PutBucketOwnershipControlsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutBucketOwnershipControlsRequest || (PutBucketOwnershipControlsRequest = {}));
var PutBucketPolicyRequest;
(function(PutBucketPolicyRequest2) {
  PutBucketPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutBucketPolicyRequest || (PutBucketPolicyRequest = {}));
var PutBucketReplicationRequest;
(function(PutBucketReplicationRequest2) {
  PutBucketReplicationRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.ReplicationConfiguration && {
      ReplicationConfiguration: ReplicationConfiguration.filterSensitiveLog(obj.ReplicationConfiguration)
    });
  };
})(PutBucketReplicationRequest || (PutBucketReplicationRequest = {}));
var RequestPaymentConfiguration;
(function(RequestPaymentConfiguration2) {
  RequestPaymentConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RequestPaymentConfiguration || (RequestPaymentConfiguration = {}));
var PutBucketRequestPaymentRequest;
(function(PutBucketRequestPaymentRequest2) {
  PutBucketRequestPaymentRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutBucketRequestPaymentRequest || (PutBucketRequestPaymentRequest = {}));
var Tagging;
(function(Tagging2) {
  Tagging2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Tagging || (Tagging = {}));
var PutBucketTaggingRequest;
(function(PutBucketTaggingRequest2) {
  PutBucketTaggingRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutBucketTaggingRequest || (PutBucketTaggingRequest = {}));
var VersioningConfiguration;
(function(VersioningConfiguration2) {
  VersioningConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(VersioningConfiguration || (VersioningConfiguration = {}));
var PutBucketVersioningRequest;
(function(PutBucketVersioningRequest2) {
  PutBucketVersioningRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutBucketVersioningRequest || (PutBucketVersioningRequest = {}));
var WebsiteConfiguration;
(function(WebsiteConfiguration2) {
  WebsiteConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(WebsiteConfiguration || (WebsiteConfiguration = {}));
var PutBucketWebsiteRequest;
(function(PutBucketWebsiteRequest2) {
  PutBucketWebsiteRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutBucketWebsiteRequest || (PutBucketWebsiteRequest = {}));
var PutObjectOutput;
(function(PutObjectOutput2) {
  PutObjectOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }), obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING });
  };
})(PutObjectOutput || (PutObjectOutput = {}));
var PutObjectRequest;
(function(PutObjectRequest2) {
  PutObjectRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign(__assign({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }), obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING });
  };
})(PutObjectRequest || (PutObjectRequest = {}));
var PutObjectAclOutput;
(function(PutObjectAclOutput2) {
  PutObjectAclOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutObjectAclOutput || (PutObjectAclOutput = {}));
var PutObjectAclRequest;
(function(PutObjectAclRequest2) {
  PutObjectAclRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutObjectAclRequest || (PutObjectAclRequest = {}));
var PutObjectLegalHoldOutput;
(function(PutObjectLegalHoldOutput2) {
  PutObjectLegalHoldOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutObjectLegalHoldOutput || (PutObjectLegalHoldOutput = {}));
var PutObjectLegalHoldRequest;
(function(PutObjectLegalHoldRequest2) {
  PutObjectLegalHoldRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutObjectLegalHoldRequest || (PutObjectLegalHoldRequest = {}));
var PutObjectLockConfigurationOutput;
(function(PutObjectLockConfigurationOutput2) {
  PutObjectLockConfigurationOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutObjectLockConfigurationOutput || (PutObjectLockConfigurationOutput = {}));
var PutObjectLockConfigurationRequest;
(function(PutObjectLockConfigurationRequest2) {
  PutObjectLockConfigurationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutObjectLockConfigurationRequest || (PutObjectLockConfigurationRequest = {}));
var PutObjectRetentionOutput;
(function(PutObjectRetentionOutput2) {
  PutObjectRetentionOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutObjectRetentionOutput || (PutObjectRetentionOutput = {}));
var PutObjectRetentionRequest;
(function(PutObjectRetentionRequest2) {
  PutObjectRetentionRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutObjectRetentionRequest || (PutObjectRetentionRequest = {}));
var PutObjectTaggingOutput;
(function(PutObjectTaggingOutput2) {
  PutObjectTaggingOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutObjectTaggingOutput || (PutObjectTaggingOutput = {}));
var PutObjectTaggingRequest;
(function(PutObjectTaggingRequest2) {
  PutObjectTaggingRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutObjectTaggingRequest || (PutObjectTaggingRequest = {}));
var PutPublicAccessBlockRequest;
(function(PutPublicAccessBlockRequest2) {
  PutPublicAccessBlockRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutPublicAccessBlockRequest || (PutPublicAccessBlockRequest = {}));
var ObjectAlreadyInActiveTierError;
(function(ObjectAlreadyInActiveTierError2) {
  ObjectAlreadyInActiveTierError2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ObjectAlreadyInActiveTierError || (ObjectAlreadyInActiveTierError = {}));
var RestoreObjectOutput;
(function(RestoreObjectOutput2) {
  RestoreObjectOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RestoreObjectOutput || (RestoreObjectOutput = {}));
var GlacierJobParameters;
(function(GlacierJobParameters2) {
  GlacierJobParameters2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GlacierJobParameters || (GlacierJobParameters = {}));

// node_modules/@aws-sdk/xml-builder/dist-es/escape-attribute.js
function escapeAttribute(value) {
  return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
}

// node_modules/@aws-sdk/xml-builder/dist-es/XmlNode.js
var XmlNode = function() {
  function XmlNode2(name7, children) {
    if (children === void 0) {
      children = [];
    }
    this.name = name7;
    this.children = children;
    this.attributes = {};
  }
  XmlNode2.prototype.withName = function(name7) {
    this.name = name7;
    return this;
  };
  XmlNode2.prototype.addAttribute = function(name7, value) {
    this.attributes[name7] = value;
    return this;
  };
  XmlNode2.prototype.addChildNode = function(child) {
    this.children.push(child);
    return this;
  };
  XmlNode2.prototype.removeAttribute = function(name7) {
    delete this.attributes[name7];
    return this;
  };
  XmlNode2.prototype.toString = function() {
    var e_1, _a;
    var hasChildren = Boolean(this.children.length);
    var xmlText = "<" + this.name;
    var attributes = this.attributes;
    try {
      for (var _b = __values(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var attributeName = _c.value;
        var attribute = attributes[attributeName];
        if (typeof attribute !== "undefined" && attribute !== null) {
          xmlText += " " + attributeName + '="' + escapeAttribute("" + attribute) + '"';
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return xmlText += !hasChildren ? "/>" : ">" + this.children.map(function(c) {
      return c.toString();
    }).join("") + "</" + this.name + ">";
  };
  return XmlNode2;
}();

// node_modules/@aws-sdk/xml-builder/dist-es/escape-element.js
function escapeElement(value) {
  return value.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
}

// node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js
var XmlText = function() {
  function XmlText2(value) {
    this.value = value;
  }
  XmlText2.prototype.toString = function() {
    return escapeElement("" + this.value);
  };
  return XmlText2;
}();

// node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js
var import_entities = __toModule(require_lib());
var import_fast_xml_parser = __toModule(require_parser());
var serializeAws_restXmlAbortMultipartUploadCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign({ "x-id": "AbortMultipartUpload" }, input.UploadId !== void 0 && { uploadId: input.UploadId });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlCompleteMultipartUploadCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign({ "x-id": "CompleteMultipartUpload" }, input.UploadId !== void 0 && { uploadId: input.UploadId });
          if (input.MultipartUpload !== void 0) {
            body = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);
          }
          if (input.MultipartUpload !== void 0) {
            contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);
            contents = contents.withName("CompleteMultipartUpload");
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlCopyObjectCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.ACL) && { "x-amz-acl": input.ACL }), isSerializableHeaderValue(input.CacheControl) && { "cache-control": input.CacheControl }), isSerializableHeaderValue(input.ContentDisposition) && { "content-disposition": input.ContentDisposition }), isSerializableHeaderValue(input.ContentEncoding) && { "content-encoding": input.ContentEncoding }), isSerializableHeaderValue(input.ContentLanguage) && { "content-language": input.ContentLanguage }), isSerializableHeaderValue(input.ContentType) && { "content-type": input.ContentType }), isSerializableHeaderValue(input.CopySource) && { "x-amz-copy-source": input.CopySource }), isSerializableHeaderValue(input.CopySourceIfMatch) && {
            "x-amz-copy-source-if-match": input.CopySourceIfMatch
          }), isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {
            "x-amz-copy-source-if-modified-since": dateToUtcString(input.CopySourceIfModifiedSince).toString()
          }), isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {
            "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch
          }), isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {
            "x-amz-copy-source-if-unmodified-since": dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()
          }), isSerializableHeaderValue(input.Expires) && { expires: dateToUtcString(input.Expires).toString() }), isSerializableHeaderValue(input.GrantFullControl) && { "x-amz-grant-full-control": input.GrantFullControl }), isSerializableHeaderValue(input.GrantRead) && { "x-amz-grant-read": input.GrantRead }), isSerializableHeaderValue(input.GrantReadACP) && { "x-amz-grant-read-acp": input.GrantReadACP }), isSerializableHeaderValue(input.GrantWriteACP) && { "x-amz-grant-write-acp": input.GrantWriteACP }), isSerializableHeaderValue(input.MetadataDirective) && { "x-amz-metadata-directive": input.MetadataDirective }), isSerializableHeaderValue(input.TaggingDirective) && { "x-amz-tagging-directive": input.TaggingDirective }), isSerializableHeaderValue(input.ServerSideEncryption) && {
            "x-amz-server-side-encryption": input.ServerSideEncryption
          }), isSerializableHeaderValue(input.StorageClass) && { "x-amz-storage-class": input.StorageClass }), isSerializableHeaderValue(input.WebsiteRedirectLocation) && {
            "x-amz-website-redirect-location": input.WebsiteRedirectLocation
          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
            "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
          }), isSerializableHeaderValue(input.SSECustomerKey) && {
            "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
            "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
          }), isSerializableHeaderValue(input.SSEKMSKeyId) && {
            "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId
          }), isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {
            "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext
          }), isSerializableHeaderValue(input.BucketKeyEnabled) && {
            "x-amz-server-side-encryption-bucket-key-enabled": input.BucketKeyEnabled.toString()
          }), isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {
            "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm
          }), isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {
            "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey
          }), isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {
            "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5
          }), isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.Tagging) && { "x-amz-tagging": input.Tagging }), isSerializableHeaderValue(input.ObjectLockMode) && { "x-amz-object-lock-mode": input.ObjectLockMode }), isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {
            "x-amz-object-lock-retain-until-date": (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
          }), isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {
            "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus
          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          }), isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {
            "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner
          }), input.Metadata !== void 0 && Object.keys(input.Metadata).reduce(function(acc, suffix) {
            var _a2;
            return __assign(__assign({}, acc), (_a2 = {}, _a2["x-amz-meta-" + suffix.toLowerCase()] = input.Metadata[suffix], _a2));
          }, {}));
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = {
            "x-id": "CopyObject"
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlCreateBucketCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ACL) && { "x-amz-acl": input.ACL }), isSerializableHeaderValue(input.GrantFullControl) && { "x-amz-grant-full-control": input.GrantFullControl }), isSerializableHeaderValue(input.GrantRead) && { "x-amz-grant-read": input.GrantRead }), isSerializableHeaderValue(input.GrantReadACP) && { "x-amz-grant-read-acp": input.GrantReadACP }), isSerializableHeaderValue(input.GrantWrite) && { "x-amz-grant-write": input.GrantWrite }), isSerializableHeaderValue(input.GrantWriteACP) && { "x-amz-grant-write-acp": input.GrantWriteACP }), isSerializableHeaderValue(input.ObjectLockEnabledForBucket) && {
            "x-amz-bucket-object-lock-enabled": input.ObjectLockEnabledForBucket.toString()
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.CreateBucketConfiguration !== void 0) {
            body = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);
          }
          if (input.CreateBucketConfiguration !== void 0) {
            contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlCreateMultipartUploadCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.ACL) && { "x-amz-acl": input.ACL }), isSerializableHeaderValue(input.CacheControl) && { "cache-control": input.CacheControl }), isSerializableHeaderValue(input.ContentDisposition) && { "content-disposition": input.ContentDisposition }), isSerializableHeaderValue(input.ContentEncoding) && { "content-encoding": input.ContentEncoding }), isSerializableHeaderValue(input.ContentLanguage) && { "content-language": input.ContentLanguage }), isSerializableHeaderValue(input.ContentType) && { "content-type": input.ContentType }), isSerializableHeaderValue(input.Expires) && { expires: dateToUtcString(input.Expires).toString() }), isSerializableHeaderValue(input.GrantFullControl) && { "x-amz-grant-full-control": input.GrantFullControl }), isSerializableHeaderValue(input.GrantRead) && { "x-amz-grant-read": input.GrantRead }), isSerializableHeaderValue(input.GrantReadACP) && { "x-amz-grant-read-acp": input.GrantReadACP }), isSerializableHeaderValue(input.GrantWriteACP) && { "x-amz-grant-write-acp": input.GrantWriteACP }), isSerializableHeaderValue(input.ServerSideEncryption) && {
            "x-amz-server-side-encryption": input.ServerSideEncryption
          }), isSerializableHeaderValue(input.StorageClass) && { "x-amz-storage-class": input.StorageClass }), isSerializableHeaderValue(input.WebsiteRedirectLocation) && {
            "x-amz-website-redirect-location": input.WebsiteRedirectLocation
          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
            "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
          }), isSerializableHeaderValue(input.SSECustomerKey) && {
            "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
            "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
          }), isSerializableHeaderValue(input.SSEKMSKeyId) && {
            "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId
          }), isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {
            "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext
          }), isSerializableHeaderValue(input.BucketKeyEnabled) && {
            "x-amz-server-side-encryption-bucket-key-enabled": input.BucketKeyEnabled.toString()
          }), isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.Tagging) && { "x-amz-tagging": input.Tagging }), isSerializableHeaderValue(input.ObjectLockMode) && { "x-amz-object-lock-mode": input.ObjectLockMode }), isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {
            "x-amz-object-lock-retain-until-date": (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
          }), isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {
            "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus
          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          }), input.Metadata !== void 0 && Object.keys(input.Metadata).reduce(function(acc, suffix) {
            var _a2;
            return __assign(__assign({}, acc), (_a2 = {}, _a2["x-amz-meta-" + suffix.toLowerCase()] = input.Metadata[suffix], _a2));
          }, {}));
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = {
            uploads: "",
            "x-id": "CreateMultipartUpload"
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteBucketCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ analytics: "" }, input.Id !== void 0 && { id: input.Id });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteBucketCorsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            cors: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteBucketEncryptionCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            encryption: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ "intelligent-tiering": "" }, input.Id !== void 0 && { id: input.Id });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ inventory: "" }, input.Id !== void 0 && { id: input.Id });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteBucketLifecycleCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            lifecycle: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ metrics: "" }, input.Id !== void 0 && { id: input.Id });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteBucketOwnershipControlsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            ownershipControls: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteBucketPolicyCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            policy: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteBucketReplicationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            replication: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteBucketTaggingCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            tagging: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteBucketWebsiteCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            website: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteObjectCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.MFA) && { "x-amz-mfa": input.MFA }), isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.BypassGovernanceRetention) && {
            "x-amz-bypass-governance-retention": input.BypassGovernanceRetention.toString()
          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign({ "x-id": "DeleteObject" }, input.VersionId !== void 0 && { versionId: input.VersionId });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteObjectsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.MFA) && { "x-amz-mfa": input.MFA }), isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.BypassGovernanceRetention) && {
            "x-amz-bypass-governance-retention": input.BypassGovernanceRetention.toString()
          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            delete: "",
            "x-id": "DeleteObjects"
          };
          if (input.Delete !== void 0) {
            body = serializeAws_restXmlDelete(input.Delete, context);
          }
          if (input.Delete !== void 0) {
            contents = serializeAws_restXmlDelete(input.Delete, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeleteObjectTaggingCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign({ tagging: "" }, input.VersionId !== void 0 && { versionId: input.VersionId });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlDeletePublicAccessBlockCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            publicAccessBlock: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketAccelerateConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            accelerate: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketAclCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            acl: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ analytics: "", "x-id": "GetBucketAnalyticsConfiguration" }, input.Id !== void 0 && { id: input.Id });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketCorsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            cors: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketEncryptionCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            encryption: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ "intelligent-tiering": "", "x-id": "GetBucketIntelligentTieringConfiguration" }, input.Id !== void 0 && { id: input.Id });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketInventoryConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ inventory: "", "x-id": "GetBucketInventoryConfiguration" }, input.Id !== void 0 && { id: input.Id });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketLifecycleConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            lifecycle: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketLocationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            location: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketLoggingCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            logging: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketMetricsConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ metrics: "", "x-id": "GetBucketMetricsConfiguration" }, input.Id !== void 0 && { id: input.Id });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketNotificationConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            notification: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketOwnershipControlsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            ownershipControls: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketPolicyCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            policy: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketPolicyStatusCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            policyStatus: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketReplicationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            replication: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketRequestPaymentCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            requestPayment: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketTaggingCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            tagging: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketVersioningCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            versioning: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetBucketWebsiteCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            website: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetObjectCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.IfMatch) && { "if-match": input.IfMatch }), isSerializableHeaderValue(input.IfModifiedSince) && {
            "if-modified-since": dateToUtcString(input.IfModifiedSince).toString()
          }), isSerializableHeaderValue(input.IfNoneMatch) && { "if-none-match": input.IfNoneMatch }), isSerializableHeaderValue(input.IfUnmodifiedSince) && {
            "if-unmodified-since": dateToUtcString(input.IfUnmodifiedSince).toString()
          }), isSerializableHeaderValue(input.Range) && { range: input.Range }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
            "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
          }), isSerializableHeaderValue(input.SSECustomerKey) && {
            "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
            "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
          }), isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ "x-id": "GetObject" }, input.ResponseCacheControl !== void 0 && { "response-cache-control": input.ResponseCacheControl }), input.ResponseContentDisposition !== void 0 && {
            "response-content-disposition": input.ResponseContentDisposition
          }), input.ResponseContentEncoding !== void 0 && { "response-content-encoding": input.ResponseContentEncoding }), input.ResponseContentLanguage !== void 0 && { "response-content-language": input.ResponseContentLanguage }), input.ResponseContentType !== void 0 && { "response-content-type": input.ResponseContentType }), input.ResponseExpires !== void 0 && {
            "response-expires": dateToUtcString(input.ResponseExpires).toString()
          }), input.VersionId !== void 0 && { versionId: input.VersionId }), input.PartNumber !== void 0 && { partNumber: input.PartNumber.toString() });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetObjectAclCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign({ acl: "" }, input.VersionId !== void 0 && { versionId: input.VersionId });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetObjectLegalHoldCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign({ "legal-hold": "" }, input.VersionId !== void 0 && { versionId: input.VersionId });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetObjectLockConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            "object-lock": ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetObjectRetentionCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign({ retention: "" }, input.VersionId !== void 0 && { versionId: input.VersionId });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetObjectTaggingCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          }), isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign({ tagging: "" }, input.VersionId !== void 0 && { versionId: input.VersionId });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetObjectTorrentCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = {
            torrent: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlGetPublicAccessBlockCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            publicAccessBlock: ""
          };
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlHeadBucketCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "HEAD",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlHeadObjectCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.IfMatch) && { "if-match": input.IfMatch }), isSerializableHeaderValue(input.IfModifiedSince) && {
            "if-modified-since": dateToUtcString(input.IfModifiedSince).toString()
          }), isSerializableHeaderValue(input.IfNoneMatch) && { "if-none-match": input.IfNoneMatch }), isSerializableHeaderValue(input.IfUnmodifiedSince) && {
            "if-unmodified-since": dateToUtcString(input.IfUnmodifiedSince).toString()
          }), isSerializableHeaderValue(input.Range) && { range: input.Range }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
            "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
          }), isSerializableHeaderValue(input.SSECustomerKey) && {
            "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
            "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
          }), isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign(__assign({}, input.VersionId !== void 0 && { versionId: input.VersionId }), input.PartNumber !== void 0 && { partNumber: input.PartNumber.toString() });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "HEAD",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ analytics: "", "x-id": "ListBucketAnalyticsConfigurations" }, input.ContinuationToken !== void 0 && { "continuation-token": input.ContinuationToken });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ "intelligent-tiering": "", "x-id": "ListBucketIntelligentTieringConfigurations" }, input.ContinuationToken !== void 0 && { "continuation-token": input.ContinuationToken });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlListBucketInventoryConfigurationsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ inventory: "", "x-id": "ListBucketInventoryConfigurations" }, input.ContinuationToken !== void 0 && { "continuation-token": input.ContinuationToken });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlListBucketMetricsConfigurationsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ metrics: "", "x-id": "ListBucketMetricsConfigurations" }, input.ContinuationToken !== void 0 && { "continuation-token": input.ContinuationToken });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlListBucketsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/xml"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/";
          body = "";
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlListMultipartUploadsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign(__assign(__assign(__assign(__assign(__assign({ uploads: "" }, input.Delimiter !== void 0 && { delimiter: input.Delimiter }), input.EncodingType !== void 0 && { "encoding-type": input.EncodingType }), input.KeyMarker !== void 0 && { "key-marker": input.KeyMarker }), input.MaxUploads !== void 0 && { "max-uploads": input.MaxUploads.toString() }), input.Prefix !== void 0 && { prefix: input.Prefix }), input.UploadIdMarker !== void 0 && { "upload-id-marker": input.UploadIdMarker });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlListObjectsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign(__assign(__assign(__assign(__assign({}, input.Delimiter !== void 0 && { delimiter: input.Delimiter }), input.EncodingType !== void 0 && { "encoding-type": input.EncodingType }), input.Marker !== void 0 && { marker: input.Marker }), input.MaxKeys !== void 0 && { "max-keys": input.MaxKeys.toString() }), input.Prefix !== void 0 && { prefix: input.Prefix });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlListObjectsV2Command = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign(__assign(__assign(__assign(__assign(__assign(__assign({ "list-type": "2" }, input.Delimiter !== void 0 && { delimiter: input.Delimiter }), input.EncodingType !== void 0 && { "encoding-type": input.EncodingType }), input.MaxKeys !== void 0 && { "max-keys": input.MaxKeys.toString() }), input.Prefix !== void 0 && { prefix: input.Prefix }), input.ContinuationToken !== void 0 && { "continuation-token": input.ContinuationToken }), input.FetchOwner !== void 0 && { "fetch-owner": input.FetchOwner.toString() }), input.StartAfter !== void 0 && { "start-after": input.StartAfter });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlListObjectVersionsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign(__assign(__assign(__assign(__assign(__assign({ versions: "" }, input.Delimiter !== void 0 && { delimiter: input.Delimiter }), input.EncodingType !== void 0 && { "encoding-type": input.EncodingType }), input.KeyMarker !== void 0 && { "key-marker": input.KeyMarker }), input.MaxKeys !== void 0 && { "max-keys": input.MaxKeys.toString() }), input.Prefix !== void 0 && { prefix: input.Prefix }), input.VersionIdMarker !== void 0 && { "version-id-marker": input.VersionIdMarker });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlListPartsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign(__assign(__assign({ "x-id": "ListParts" }, input.MaxParts !== void 0 && { "max-parts": input.MaxParts.toString() }), input.PartNumberMarker !== void 0 && { "part-number-marker": input.PartNumberMarker }), input.UploadId !== void 0 && { uploadId: input.UploadId });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketAccelerateConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            accelerate: ""
          };
          if (input.AccelerateConfiguration !== void 0) {
            body = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);
          }
          if (input.AccelerateConfiguration !== void 0) {
            contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketAclCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ACL) && { "x-amz-acl": input.ACL }), isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.GrantFullControl) && { "x-amz-grant-full-control": input.GrantFullControl }), isSerializableHeaderValue(input.GrantRead) && { "x-amz-grant-read": input.GrantRead }), isSerializableHeaderValue(input.GrantReadACP) && { "x-amz-grant-read-acp": input.GrantReadACP }), isSerializableHeaderValue(input.GrantWrite) && { "x-amz-grant-write": input.GrantWrite }), isSerializableHeaderValue(input.GrantWriteACP) && { "x-amz-grant-write-acp": input.GrantWriteACP }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            acl: ""
          };
          if (input.AccessControlPolicy !== void 0) {
            body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
          }
          if (input.AccessControlPolicy !== void 0) {
            contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ analytics: "" }, input.Id !== void 0 && { id: input.Id });
          if (input.AnalyticsConfiguration !== void 0) {
            body = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);
          }
          if (input.AnalyticsConfiguration !== void 0) {
            contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketCorsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            cors: ""
          };
          if (input.CORSConfiguration !== void 0) {
            body = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);
          }
          if (input.CORSConfiguration !== void 0) {
            contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketEncryptionCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            encryption: ""
          };
          if (input.ServerSideEncryptionConfiguration !== void 0) {
            body = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
          }
          if (input.ServerSideEncryptionConfiguration !== void 0) {
            contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/xml"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ "intelligent-tiering": "" }, input.Id !== void 0 && { id: input.Id });
          if (input.IntelligentTieringConfiguration !== void 0) {
            body = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
          }
          if (input.IntelligentTieringConfiguration !== void 0) {
            contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketInventoryConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ inventory: "" }, input.Id !== void 0 && { id: input.Id });
          if (input.InventoryConfiguration !== void 0) {
            body = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);
          }
          if (input.InventoryConfiguration !== void 0) {
            contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketLifecycleConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            lifecycle: ""
          };
          if (input.LifecycleConfiguration !== void 0) {
            body = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);
          }
          if (input.LifecycleConfiguration !== void 0) {
            contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);
            contents = contents.withName("LifecycleConfiguration");
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketLoggingCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            logging: ""
          };
          if (input.BucketLoggingStatus !== void 0) {
            body = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);
          }
          if (input.BucketLoggingStatus !== void 0) {
            contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketMetricsConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = __assign({ metrics: "" }, input.Id !== void 0 && { id: input.Id });
          if (input.MetricsConfiguration !== void 0) {
            body = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);
          }
          if (input.MetricsConfiguration !== void 0) {
            contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketNotificationConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            notification: ""
          };
          if (input.NotificationConfiguration !== void 0) {
            body = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);
          }
          if (input.NotificationConfiguration !== void 0) {
            contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketOwnershipControlsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            ownershipControls: ""
          };
          if (input.OwnershipControls !== void 0) {
            body = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);
          }
          if (input.OwnershipControls !== void 0) {
            contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketPolicyCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign({ "content-type": "text/plain" }, isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess) && {
            "x-amz-confirm-remove-self-bucket-access": input.ConfirmRemoveSelfBucketAccess.toString()
          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            policy: ""
          };
          if (input.Policy !== void 0) {
            body = input.Policy;
          }
          if (input.Policy !== void 0) {
            contents = input.Policy;
            body = contents;
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketReplicationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.Token) && { "x-amz-bucket-object-lock-token": input.Token }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            replication: ""
          };
          if (input.ReplicationConfiguration !== void 0) {
            body = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);
          }
          if (input.ReplicationConfiguration !== void 0) {
            contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketRequestPaymentCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            requestPayment: ""
          };
          if (input.RequestPaymentConfiguration !== void 0) {
            body = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
          }
          if (input.RequestPaymentConfiguration !== void 0) {
            contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketTaggingCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            tagging: ""
          };
          if (input.Tagging !== void 0) {
            body = serializeAws_restXmlTagging(input.Tagging, context);
          }
          if (input.Tagging !== void 0) {
            contents = serializeAws_restXmlTagging(input.Tagging, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketVersioningCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.MFA) && { "x-amz-mfa": input.MFA }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            versioning: ""
          };
          if (input.VersioningConfiguration !== void 0) {
            body = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);
          }
          if (input.VersioningConfiguration !== void 0) {
            contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutBucketWebsiteCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            website: ""
          };
          if (input.WebsiteConfiguration !== void 0) {
            body = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);
          }
          if (input.WebsiteConfiguration !== void 0) {
            contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutObjectCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ "content-type": "application/octet-stream" }, isSerializableHeaderValue(input.ACL) && { "x-amz-acl": input.ACL }), isSerializableHeaderValue(input.CacheControl) && { "cache-control": input.CacheControl }), isSerializableHeaderValue(input.ContentDisposition) && { "content-disposition": input.ContentDisposition }), isSerializableHeaderValue(input.ContentEncoding) && { "content-encoding": input.ContentEncoding }), isSerializableHeaderValue(input.ContentLanguage) && { "content-language": input.ContentLanguage }), isSerializableHeaderValue(input.ContentLength) && { "content-length": input.ContentLength.toString() }), isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.ContentType) && { "content-type": input.ContentType }), isSerializableHeaderValue(input.Expires) && { expires: dateToUtcString(input.Expires).toString() }), isSerializableHeaderValue(input.GrantFullControl) && { "x-amz-grant-full-control": input.GrantFullControl }), isSerializableHeaderValue(input.GrantRead) && { "x-amz-grant-read": input.GrantRead }), isSerializableHeaderValue(input.GrantReadACP) && { "x-amz-grant-read-acp": input.GrantReadACP }), isSerializableHeaderValue(input.GrantWriteACP) && { "x-amz-grant-write-acp": input.GrantWriteACP }), isSerializableHeaderValue(input.ServerSideEncryption) && {
            "x-amz-server-side-encryption": input.ServerSideEncryption
          }), isSerializableHeaderValue(input.StorageClass) && { "x-amz-storage-class": input.StorageClass }), isSerializableHeaderValue(input.WebsiteRedirectLocation) && {
            "x-amz-website-redirect-location": input.WebsiteRedirectLocation
          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
            "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
          }), isSerializableHeaderValue(input.SSECustomerKey) && {
            "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
            "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
          }), isSerializableHeaderValue(input.SSEKMSKeyId) && {
            "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId
          }), isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {
            "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext
          }), isSerializableHeaderValue(input.BucketKeyEnabled) && {
            "x-amz-server-side-encryption-bucket-key-enabled": input.BucketKeyEnabled.toString()
          }), isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.Tagging) && { "x-amz-tagging": input.Tagging }), isSerializableHeaderValue(input.ObjectLockMode) && { "x-amz-object-lock-mode": input.ObjectLockMode }), isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {
            "x-amz-object-lock-retain-until-date": (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
          }), isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {
            "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus
          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          }), input.Metadata !== void 0 && Object.keys(input.Metadata).reduce(function(acc, suffix) {
            var _a2;
            return __assign(__assign({}, acc), (_a2 = {}, _a2["x-amz-meta-" + suffix.toLowerCase()] = input.Metadata[suffix], _a2));
          }, {}));
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = {
            "x-id": "PutObject"
          };
          if (input.Body !== void 0) {
            body = input.Body;
          }
          if (input.Body !== void 0) {
            contents = input.Body;
            body = contents;
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutObjectAclCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ACL) && { "x-amz-acl": input.ACL }), isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.GrantFullControl) && { "x-amz-grant-full-control": input.GrantFullControl }), isSerializableHeaderValue(input.GrantRead) && { "x-amz-grant-read": input.GrantRead }), isSerializableHeaderValue(input.GrantReadACP) && { "x-amz-grant-read-acp": input.GrantReadACP }), isSerializableHeaderValue(input.GrantWrite) && { "x-amz-grant-write": input.GrantWrite }), isSerializableHeaderValue(input.GrantWriteACP) && { "x-amz-grant-write-acp": input.GrantWriteACP }), isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign({ acl: "" }, input.VersionId !== void 0 && { versionId: input.VersionId });
          if (input.AccessControlPolicy !== void 0) {
            body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
          }
          if (input.AccessControlPolicy !== void 0) {
            contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutObjectLegalHoldCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign({ "legal-hold": "" }, input.VersionId !== void 0 && { versionId: input.VersionId });
          if (input.LegalHold !== void 0) {
            body = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);
          }
          if (input.LegalHold !== void 0) {
            contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);
            contents = contents.withName("LegalHold");
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutObjectLockConfigurationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.Token) && { "x-amz-bucket-object-lock-token": input.Token }), isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            "object-lock": ""
          };
          if (input.ObjectLockConfiguration !== void 0) {
            body = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);
          }
          if (input.ObjectLockConfiguration !== void 0) {
            contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutObjectRetentionCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.BypassGovernanceRetention) && {
            "x-amz-bypass-governance-retention": input.BypassGovernanceRetention.toString()
          }), isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign({ retention: "" }, input.VersionId !== void 0 && { versionId: input.VersionId });
          if (input.Retention !== void 0) {
            body = serializeAws_restXmlObjectLockRetention(input.Retention, context);
          }
          if (input.Retention !== void 0) {
            contents = serializeAws_restXmlObjectLockRetention(input.Retention, context);
            contents = contents.withName("Retention");
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutObjectTaggingCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          }), isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign({ tagging: "" }, input.VersionId !== void 0 && { versionId: input.VersionId });
          if (input.Tagging !== void 0) {
            body = serializeAws_restXmlTagging(input.Tagging, context);
          }
          if (input.Tagging !== void 0) {
            contents = serializeAws_restXmlTagging(input.Tagging, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlPutPublicAccessBlockCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          query = {
            publicAccessBlock: ""
          };
          if (input.PublicAccessBlockConfiguration !== void 0) {
            body = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
          }
          if (input.PublicAccessBlockConfiguration !== void 0) {
            contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlRestoreObjectCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign({ restore: "", "x-id": "RestoreObject" }, input.VersionId !== void 0 && { versionId: input.VersionId });
          if (input.RestoreRequest !== void 0) {
            body = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);
          }
          if (input.RestoreRequest !== void 0) {
            contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);
            body = '<?xml version="1.0" encoding="UTF-8"?>';
            contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
            body += contents.toString();
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlSelectObjectContentCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body, bodyNode, node, node, node, node, node, node;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign({ "content-type": "application/xml" }, isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
            "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
          }), isSerializableHeaderValue(input.SSECustomerKey) && {
            "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
            "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = {
            select: "",
            "select-type": "2",
            "x-id": "SelectObjectContent"
          };
          body = '<?xml version="1.0" encoding="UTF-8"?>';
          bodyNode = new XmlNode("SelectObjectContentRequest");
          bodyNode.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
          if (input.Expression !== void 0) {
            node = new XmlNode("Expression").addChildNode(new XmlText(input.Expression)).withName("Expression");
            bodyNode.addChildNode(node);
          }
          if (input.ExpressionType !== void 0) {
            node = new XmlNode("ExpressionType").addChildNode(new XmlText(input.ExpressionType)).withName("ExpressionType");
            bodyNode.addChildNode(node);
          }
          if (input.InputSerialization !== void 0) {
            node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName("InputSerialization");
            bodyNode.addChildNode(node);
          }
          if (input.OutputSerialization !== void 0) {
            node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
            bodyNode.addChildNode(node);
          }
          if (input.RequestProgress !== void 0) {
            node = serializeAws_restXmlRequestProgress(input.RequestProgress, context).withName("RequestProgress");
            bodyNode.addChildNode(node);
          }
          if (input.ScanRange !== void 0) {
            node = serializeAws_restXmlScanRange(input.ScanRange, context).withName("ScanRange");
            bodyNode.addChildNode(node);
          }
          body += bodyNode.toString();
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlUploadPartCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign({ "content-type": "application/octet-stream" }, isSerializableHeaderValue(input.ContentLength) && { "content-length": input.ContentLength.toString() }), isSerializableHeaderValue(input.ContentMD5) && { "content-md5": input.ContentMD5 }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
            "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
          }), isSerializableHeaderValue(input.SSECustomerKey) && {
            "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
            "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
          }), isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign(__assign({ "x-id": "UploadPart" }, input.PartNumber !== void 0 && { partNumber: input.PartNumber.toString() }), input.UploadId !== void 0 && { uploadId: input.UploadId });
          if (input.Body !== void 0) {
            body = input.Body;
          }
          if (input.Body !== void 0) {
            contents = input.Body;
            body = contents;
          }
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlUploadPartCopyCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.CopySource) && { "x-amz-copy-source": input.CopySource }), isSerializableHeaderValue(input.CopySourceIfMatch) && {
            "x-amz-copy-source-if-match": input.CopySourceIfMatch
          }), isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {
            "x-amz-copy-source-if-modified-since": dateToUtcString(input.CopySourceIfModifiedSince).toString()
          }), isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {
            "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch
          }), isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {
            "x-amz-copy-source-if-unmodified-since": dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()
          }), isSerializableHeaderValue(input.CopySourceRange) && { "x-amz-copy-source-range": input.CopySourceRange }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
            "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
          }), isSerializableHeaderValue(input.SSECustomerKey) && {
            "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
            "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
          }), isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {
            "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm
          }), isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {
            "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey
          }), isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {
            "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5
          }), isSerializableHeaderValue(input.RequestPayer) && { "x-amz-request-payer": input.RequestPayer }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
            "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
          }), isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {
            "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner
          });
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
          if (input.Bucket !== void 0) {
            labelValue = input.Bucket;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Bucket.");
            }
            resolvedPath = resolvedPath.replace("{Bucket}", extendedEncodeURIComponent(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Bucket.");
          }
          if (input.Key !== void 0) {
            labelValue = input.Key;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Key.");
            }
            resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
              return extendedEncodeURIComponent(segment);
            }).join("/"));
          } else {
            throw new Error("No value provided for input HTTP label: Key.");
          }
          query = __assign(__assign({ "x-id": "UploadPartCopy" }, input.PartNumber !== void 0 && { partNumber: input.PartNumber.toString() }), input.UploadId !== void 0 && { uploadId: input.UploadId });
          return [2, new HttpRequest({
            protocol,
            hostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restXmlWriteGetObjectResponseCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body, contents, resolvedHostname;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ "content-type": "application/octet-stream", "x-amz-content-sha256": "UNSIGNED-PAYLOAD" }, isSerializableHeaderValue(input.RequestRoute) && { "x-amz-request-route": input.RequestRoute }), isSerializableHeaderValue(input.RequestToken) && { "x-amz-request-token": input.RequestToken }), isSerializableHeaderValue(input.StatusCode) && { "x-amz-fwd-status": input.StatusCode.toString() }), isSerializableHeaderValue(input.ErrorCode) && { "x-amz-fwd-error-code": input.ErrorCode }), isSerializableHeaderValue(input.ErrorMessage) && { "x-amz-fwd-error-message": input.ErrorMessage }), isSerializableHeaderValue(input.AcceptRanges) && { "x-amz-fwd-header-accept-ranges": input.AcceptRanges }), isSerializableHeaderValue(input.CacheControl) && { "x-amz-fwd-header-cache-control": input.CacheControl }), isSerializableHeaderValue(input.ContentDisposition) && {
            "x-amz-fwd-header-content-disposition": input.ContentDisposition
          }), isSerializableHeaderValue(input.ContentEncoding) && {
            "x-amz-fwd-header-content-encoding": input.ContentEncoding
          }), isSerializableHeaderValue(input.ContentLanguage) && {
            "x-amz-fwd-header-content-language": input.ContentLanguage
          }), isSerializableHeaderValue(input.ContentLength) && { "content-length": input.ContentLength.toString() }), isSerializableHeaderValue(input.ContentRange) && { "x-amz-fwd-header-content-range": input.ContentRange }), isSerializableHeaderValue(input.ContentType) && { "x-amz-fwd-header-content-type": input.ContentType }), isSerializableHeaderValue(input.DeleteMarker) && {
            "x-amz-fwd-header-x-amz-delete-marker": input.DeleteMarker.toString()
          }), isSerializableHeaderValue(input.ETag) && { "x-amz-fwd-header-etag": input.ETag }), isSerializableHeaderValue(input.Expires) && {
            "x-amz-fwd-header-expires": dateToUtcString(input.Expires).toString()
          }), isSerializableHeaderValue(input.Expiration) && { "x-amz-fwd-header-x-amz-expiration": input.Expiration }), isSerializableHeaderValue(input.LastModified) && {
            "x-amz-fwd-header-last-modified": dateToUtcString(input.LastModified).toString()
          }), isSerializableHeaderValue(input.MissingMeta) && {
            "x-amz-fwd-header-x-amz-missing-meta": input.MissingMeta.toString()
          }), isSerializableHeaderValue(input.ObjectLockMode) && {
            "x-amz-fwd-header-x-amz-object-lock-mode": input.ObjectLockMode
          }), isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {
            "x-amz-fwd-header-x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus
          }), isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {
            "x-amz-fwd-header-x-amz-object-lock-retain-until-date": (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
          }), isSerializableHeaderValue(input.PartsCount) && {
            "x-amz-fwd-header-x-amz-mp-parts-count": input.PartsCount.toString()
          }), isSerializableHeaderValue(input.ReplicationStatus) && {
            "x-amz-fwd-header-x-amz-replication-status": input.ReplicationStatus
          }), isSerializableHeaderValue(input.RequestCharged) && {
            "x-amz-fwd-header-x-amz-request-charged": input.RequestCharged
          }), isSerializableHeaderValue(input.Restore) && { "x-amz-fwd-header-x-amz-restore": input.Restore }), isSerializableHeaderValue(input.ServerSideEncryption) && {
            "x-amz-fwd-header-x-amz-server-side-encryption": input.ServerSideEncryption
          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
            "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
          }), isSerializableHeaderValue(input.SSEKMSKeyId) && {
            "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId
          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
            "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
          }), isSerializableHeaderValue(input.StorageClass) && {
            "x-amz-fwd-header-x-amz-storage-class": input.StorageClass
          }), isSerializableHeaderValue(input.TagCount) && {
            "x-amz-fwd-header-x-amz-tagging-count": input.TagCount.toString()
          }), isSerializableHeaderValue(input.VersionId) && { "x-amz-fwd-header-x-amz-version-id": input.VersionId }), isSerializableHeaderValue(input.BucketKeyEnabled) && {
            "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled": input.BucketKeyEnabled.toString()
          }), input.Metadata !== void 0 && Object.keys(input.Metadata).reduce(function(acc, suffix) {
            var _a2;
            return __assign(__assign({}, acc), (_a2 = {}, _a2["x-amz-meta-" + suffix.toLowerCase()] = input.Metadata[suffix], _a2));
          }, {}));
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/WriteGetObjectResponse";
          query = {
            "x-id": "WriteGetObjectResponse"
          };
          if (input.Body !== void 0) {
            body = input.Body;
          }
          if (input.Body !== void 0) {
            contents = input.Body;
            body = contents;
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "{RequestRoute}." + resolvedHostname;
            if (input.RequestRoute === void 0) {
              throw new Error("Empty value provided for input host prefix: RequestRoute.");
            }
            resolvedHostname = resolvedHostname.replace("{RequestRoute}", input.RequestRoute);
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var deserializeAws_restXmlAbortMultipartUploadCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlAbortMultipartUploadCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            RequestCharged: void 0
          };
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlAbortMultipartUploadCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "NoSuchUpload":
              return [3, 2];
            case "com.amazonaws.s3#NoSuchUpload":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restXmlNoSuchUploadResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlCompleteMultipartUploadCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Bucket: void 0,
            BucketKeyEnabled: void 0,
            ETag: void 0,
            Expiration: void 0,
            Key: void 0,
            Location: void 0,
            RequestCharged: void 0,
            SSEKMSKeyId: void 0,
            ServerSideEncryption: void 0,
            VersionId: void 0
          };
          if (output.headers["x-amz-expiration"] !== void 0) {
            contents.Expiration = output.headers["x-amz-expiration"];
          }
          if (output.headers["x-amz-server-side-encryption"] !== void 0) {
            contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
          }
          if (output.headers["x-amz-version-id"] !== void 0) {
            contents.VersionId = output.headers["x-amz-version-id"];
          }
          if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
            contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
          }
          if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
            contents.BucketKeyEnabled = parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]);
          }
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data["Bucket"] !== void 0) {
            contents.Bucket = expectString(data["Bucket"]);
          }
          if (data["ETag"] !== void 0) {
            contents.ETag = expectString(data["ETag"]);
          }
          if (data["Key"] !== void 0) {
            contents.Key = expectString(data["Key"]);
          }
          if (data["Location"] !== void 0) {
            contents.Location = expectString(data["Location"]);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlCompleteMultipartUploadCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlCopyObjectCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlCopyObjectCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            BucketKeyEnabled: void 0,
            CopyObjectResult: void 0,
            CopySourceVersionId: void 0,
            Expiration: void 0,
            RequestCharged: void 0,
            SSECustomerAlgorithm: void 0,
            SSECustomerKeyMD5: void 0,
            SSEKMSEncryptionContext: void 0,
            SSEKMSKeyId: void 0,
            ServerSideEncryption: void 0,
            VersionId: void 0
          };
          if (output.headers["x-amz-expiration"] !== void 0) {
            contents.Expiration = output.headers["x-amz-expiration"];
          }
          if (output.headers["x-amz-copy-source-version-id"] !== void 0) {
            contents.CopySourceVersionId = output.headers["x-amz-copy-source-version-id"];
          }
          if (output.headers["x-amz-version-id"] !== void 0) {
            contents.VersionId = output.headers["x-amz-version-id"];
          }
          if (output.headers["x-amz-server-side-encryption"] !== void 0) {
            contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
          }
          if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== void 0) {
            contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
          }
          if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== void 0) {
            contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
          }
          if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
            contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
          }
          if (output.headers["x-amz-server-side-encryption-context"] !== void 0) {
            contents.SSEKMSEncryptionContext = output.headers["x-amz-server-side-encryption-context"];
          }
          if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
            contents.BucketKeyEnabled = parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]);
          }
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          _a = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.sent()]);
          contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data, context);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlCopyObjectCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ObjectNotInActiveTierError":
              return [3, 2];
            case "com.amazonaws.s3#ObjectNotInActiveTierError":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlCreateBucketCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlCreateBucketCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Location: void 0
          };
          if (output.headers["location"] !== void 0) {
            contents.Location = output.headers["location"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlCreateBucketCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "BucketAlreadyExists":
              return [3, 2];
            case "com.amazonaws.s3#BucketAlreadyExists":
              return [3, 2];
            case "BucketAlreadyOwnedByYou":
              return [3, 4];
            case "com.amazonaws.s3#BucketAlreadyOwnedByYou":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlCreateMultipartUploadCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlCreateMultipartUploadCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            AbortDate: void 0,
            AbortRuleId: void 0,
            Bucket: void 0,
            BucketKeyEnabled: void 0,
            Key: void 0,
            RequestCharged: void 0,
            SSECustomerAlgorithm: void 0,
            SSECustomerKeyMD5: void 0,
            SSEKMSEncryptionContext: void 0,
            SSEKMSKeyId: void 0,
            ServerSideEncryption: void 0,
            UploadId: void 0
          };
          if (output.headers["x-amz-abort-date"] !== void 0) {
            contents.AbortDate = expectNonNull(parseRfc7231DateTime(output.headers["x-amz-abort-date"]));
          }
          if (output.headers["x-amz-abort-rule-id"] !== void 0) {
            contents.AbortRuleId = output.headers["x-amz-abort-rule-id"];
          }
          if (output.headers["x-amz-server-side-encryption"] !== void 0) {
            contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
          }
          if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== void 0) {
            contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
          }
          if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== void 0) {
            contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
          }
          if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
            contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
          }
          if (output.headers["x-amz-server-side-encryption-context"] !== void 0) {
            contents.SSEKMSEncryptionContext = output.headers["x-amz-server-side-encryption-context"];
          }
          if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
            contents.BucketKeyEnabled = parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]);
          }
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data["Bucket"] !== void 0) {
            contents.Bucket = expectString(data["Bucket"]);
          }
          if (data["Key"] !== void 0) {
            contents.Key = expectString(data["Key"]);
          }
          if (data["UploadId"] !== void 0) {
            contents.UploadId = expectString(data["UploadId"]);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlCreateMultipartUploadCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteBucketCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketCorsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteBucketCorsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketCorsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketEncryptionCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketEncryptionCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketLifecycleCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketLifecycleCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketPolicyCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketPolicyCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketReplicationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketReplicationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketTaggingCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketTaggingCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketWebsiteCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteBucketWebsiteCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteObjectCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteObjectCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            DeleteMarker: void 0,
            RequestCharged: void 0,
            VersionId: void 0
          };
          if (output.headers["x-amz-delete-marker"] !== void 0) {
            contents.DeleteMarker = parseBoolean(output.headers["x-amz-delete-marker"]);
          }
          if (output.headers["x-amz-version-id"] !== void 0) {
            contents.VersionId = output.headers["x-amz-version-id"];
          }
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteObjectCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteObjectsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteObjectsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Deleted: void 0,
            Errors: void 0,
            RequestCharged: void 0
          };
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Deleted === "") {
            contents.Deleted = [];
          }
          if (data["Deleted"] !== void 0) {
            contents.Deleted = deserializeAws_restXmlDeletedObjects(getArrayIfSingleItem(data["Deleted"]), context);
          }
          if (data.Error === "") {
            contents.Errors = [];
          }
          if (data["Error"] !== void 0) {
            contents.Errors = deserializeAws_restXmlErrors(getArrayIfSingleItem(data["Error"]), context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteObjectsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeleteObjectTaggingCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            VersionId: void 0
          };
          if (output.headers["x-amz-version-id"] !== void 0) {
            contents.VersionId = output.headers["x-amz-version-id"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeleteObjectTaggingCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlDeletePublicAccessBlockCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 204 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlDeletePublicAccessBlockCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Status: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data["Status"] !== void 0) {
            contents.Status = expectString(data["Status"]);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketAclCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketAclCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Grants: void 0,
            Owner: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.AccessControlList === "") {
            contents.Grants = [];
          }
          if (data["AccessControlList"] !== void 0 && data["AccessControlList"]["Grant"] !== void 0) {
            contents.Grants = deserializeAws_restXmlGrants(getArrayIfSingleItem(data["AccessControlList"]["Grant"]), context);
          }
          if (data["Owner"] !== void 0) {
            contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketAclCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            AnalyticsConfiguration: void 0
          };
          _a = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.sent()]);
          contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data, context);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketCorsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketCorsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CORSRules: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CORSRule === "") {
            contents.CORSRules = [];
          }
          if (data["CORSRule"] !== void 0) {
            contents.CORSRules = deserializeAws_restXmlCORSRules(getArrayIfSingleItem(data["CORSRule"]), context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketCorsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketEncryptionCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketEncryptionCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            ServerSideEncryptionConfiguration: void 0
          };
          _a = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.sent()]);
          contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data, context);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketEncryptionCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            IntelligentTieringConfiguration: void 0
          };
          _a = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.sent()]);
          contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data, context);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketInventoryConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            InventoryConfiguration: void 0
          };
          _a = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.sent()]);
          contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data, context);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Rules: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Rule === "") {
            contents.Rules = [];
          }
          if (data["Rule"] !== void 0) {
            contents.Rules = deserializeAws_restXmlLifecycleRules(getArrayIfSingleItem(data["Rule"]), context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketLocationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketLocationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            LocationConstraint: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data["LocationConstraint"] !== void 0) {
            contents.LocationConstraint = expectString(data["LocationConstraint"]);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketLocationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketLoggingCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketLoggingCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            LoggingEnabled: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data["LoggingEnabled"] !== void 0) {
            contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data["LoggingEnabled"], context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketLoggingCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketMetricsConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            MetricsConfiguration: void 0
          };
          _a = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.sent()]);
          contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data, context);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketNotificationConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            LambdaFunctionConfigurations: void 0,
            QueueConfigurations: void 0,
            TopicConfigurations: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CloudFunctionConfiguration === "") {
            contents.LambdaFunctionConfigurations = [];
          }
          if (data["CloudFunctionConfiguration"] !== void 0) {
            contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList(getArrayIfSingleItem(data["CloudFunctionConfiguration"]), context);
          }
          if (data.QueueConfiguration === "") {
            contents.QueueConfigurations = [];
          }
          if (data["QueueConfiguration"] !== void 0) {
            contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList(getArrayIfSingleItem(data["QueueConfiguration"]), context);
          }
          if (data.TopicConfiguration === "") {
            contents.TopicConfigurations = [];
          }
          if (data["TopicConfiguration"] !== void 0) {
            contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList(getArrayIfSingleItem(data["TopicConfiguration"]), context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketOwnershipControlsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            OwnershipControls: void 0
          };
          _a = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.sent()]);
          contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data, context);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketOwnershipControlsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketPolicyCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketPolicyCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Policy: void 0
          };
          return [4, collectBodyString3(output.body, context)];
        case 1:
          data = _a.sent();
          contents.Policy = expectString(data);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketPolicyCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketPolicyStatusCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            PolicyStatus: void 0
          };
          _a = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.sent()]);
          contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data, context);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketPolicyStatusCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketReplicationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketReplicationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            ReplicationConfiguration: void 0
          };
          _a = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.sent()]);
          contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data, context);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketReplicationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketRequestPaymentCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Payer: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data["Payer"] !== void 0) {
            contents.Payer = expectString(data["Payer"]);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketRequestPaymentCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketTaggingCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketTaggingCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            TagSet: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.TagSet === "") {
            contents.TagSet = [];
          }
          if (data["TagSet"] !== void 0 && data["TagSet"]["Tag"] !== void 0) {
            contents.TagSet = deserializeAws_restXmlTagSet(getArrayIfSingleItem(data["TagSet"]["Tag"]), context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketTaggingCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketVersioningCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketVersioningCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            MFADelete: void 0,
            Status: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data["MfaDelete"] !== void 0) {
            contents.MFADelete = expectString(data["MfaDelete"]);
          }
          if (data["Status"] !== void 0) {
            contents.Status = expectString(data["Status"]);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketVersioningCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketWebsiteCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetBucketWebsiteCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            ErrorDocument: void 0,
            IndexDocument: void 0,
            RedirectAllRequestsTo: void 0,
            RoutingRules: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data["ErrorDocument"] !== void 0) {
            contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data["ErrorDocument"], context);
          }
          if (data["IndexDocument"] !== void 0) {
            contents.IndexDocument = deserializeAws_restXmlIndexDocument(data["IndexDocument"], context);
          }
          if (data["RedirectAllRequestsTo"] !== void 0) {
            contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(data["RedirectAllRequestsTo"], context);
          }
          if (data.RoutingRules === "") {
            contents.RoutingRules = [];
          }
          if (data["RoutingRules"] !== void 0 && data["RoutingRules"]["RoutingRule"] !== void 0) {
            contents.RoutingRules = deserializeAws_restXmlRoutingRules(getArrayIfSingleItem(data["RoutingRules"]["RoutingRule"]), context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetBucketWebsiteCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetObjectCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator(this, function(_a) {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return [2, deserializeAws_restXmlGetObjectCommandError(output, context)];
      }
      contents = {
        $metadata: deserializeMetadata3(output),
        AcceptRanges: void 0,
        Body: void 0,
        BucketKeyEnabled: void 0,
        CacheControl: void 0,
        ContentDisposition: void 0,
        ContentEncoding: void 0,
        ContentLanguage: void 0,
        ContentLength: void 0,
        ContentRange: void 0,
        ContentType: void 0,
        DeleteMarker: void 0,
        ETag: void 0,
        Expiration: void 0,
        Expires: void 0,
        LastModified: void 0,
        Metadata: void 0,
        MissingMeta: void 0,
        ObjectLockLegalHoldStatus: void 0,
        ObjectLockMode: void 0,
        ObjectLockRetainUntilDate: void 0,
        PartsCount: void 0,
        ReplicationStatus: void 0,
        RequestCharged: void 0,
        Restore: void 0,
        SSECustomerAlgorithm: void 0,
        SSECustomerKeyMD5: void 0,
        SSEKMSKeyId: void 0,
        ServerSideEncryption: void 0,
        StorageClass: void 0,
        TagCount: void 0,
        VersionId: void 0,
        WebsiteRedirectLocation: void 0
      };
      if (output.headers["x-amz-delete-marker"] !== void 0) {
        contents.DeleteMarker = parseBoolean(output.headers["x-amz-delete-marker"]);
      }
      if (output.headers["accept-ranges"] !== void 0) {
        contents.AcceptRanges = output.headers["accept-ranges"];
      }
      if (output.headers["x-amz-expiration"] !== void 0) {
        contents.Expiration = output.headers["x-amz-expiration"];
      }
      if (output.headers["x-amz-restore"] !== void 0) {
        contents.Restore = output.headers["x-amz-restore"];
      }
      if (output.headers["last-modified"] !== void 0) {
        contents.LastModified = expectNonNull(parseRfc7231DateTime(output.headers["last-modified"]));
      }
      if (output.headers["content-length"] !== void 0) {
        contents.ContentLength = strictParseLong(output.headers["content-length"]);
      }
      if (output.headers["etag"] !== void 0) {
        contents.ETag = output.headers["etag"];
      }
      if (output.headers["x-amz-missing-meta"] !== void 0) {
        contents.MissingMeta = strictParseInt32(output.headers["x-amz-missing-meta"]);
      }
      if (output.headers["x-amz-version-id"] !== void 0) {
        contents.VersionId = output.headers["x-amz-version-id"];
      }
      if (output.headers["cache-control"] !== void 0) {
        contents.CacheControl = output.headers["cache-control"];
      }
      if (output.headers["content-disposition"] !== void 0) {
        contents.ContentDisposition = output.headers["content-disposition"];
      }
      if (output.headers["content-encoding"] !== void 0) {
        contents.ContentEncoding = output.headers["content-encoding"];
      }
      if (output.headers["content-language"] !== void 0) {
        contents.ContentLanguage = output.headers["content-language"];
      }
      if (output.headers["content-range"] !== void 0) {
        contents.ContentRange = output.headers["content-range"];
      }
      if (output.headers["content-type"] !== void 0) {
        contents.ContentType = output.headers["content-type"];
      }
      if (output.headers["expires"] !== void 0) {
        contents.Expires = expectNonNull(parseRfc7231DateTime(output.headers["expires"]));
      }
      if (output.headers["x-amz-website-redirect-location"] !== void 0) {
        contents.WebsiteRedirectLocation = output.headers["x-amz-website-redirect-location"];
      }
      if (output.headers["x-amz-server-side-encryption"] !== void 0) {
        contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
      }
      if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== void 0) {
        contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
      }
      if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== void 0) {
        contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
      }
      if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
        contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
      }
      if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
        contents.BucketKeyEnabled = parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]);
      }
      if (output.headers["x-amz-storage-class"] !== void 0) {
        contents.StorageClass = output.headers["x-amz-storage-class"];
      }
      if (output.headers["x-amz-request-charged"] !== void 0) {
        contents.RequestCharged = output.headers["x-amz-request-charged"];
      }
      if (output.headers["x-amz-replication-status"] !== void 0) {
        contents.ReplicationStatus = output.headers["x-amz-replication-status"];
      }
      if (output.headers["x-amz-mp-parts-count"] !== void 0) {
        contents.PartsCount = strictParseInt32(output.headers["x-amz-mp-parts-count"]);
      }
      if (output.headers["x-amz-tagging-count"] !== void 0) {
        contents.TagCount = strictParseInt32(output.headers["x-amz-tagging-count"]);
      }
      if (output.headers["x-amz-object-lock-mode"] !== void 0) {
        contents.ObjectLockMode = output.headers["x-amz-object-lock-mode"];
      }
      if (output.headers["x-amz-object-lock-retain-until-date"] !== void 0) {
        contents.ObjectLockRetainUntilDate = expectNonNull(parseRfc3339DateTime(output.headers["x-amz-object-lock-retain-until-date"]));
      }
      if (output.headers["x-amz-object-lock-legal-hold"] !== void 0) {
        contents.ObjectLockLegalHoldStatus = output.headers["x-amz-object-lock-legal-hold"];
      }
      Object.keys(output.headers).forEach(function(header) {
        if (contents.Metadata === void 0) {
          contents.Metadata = {};
        }
        if (header.startsWith("x-amz-meta-")) {
          contents.Metadata[header.substring(11)] = output.headers[header];
        }
      });
      data = output.body;
      contents.Body = data;
      return [2, Promise.resolve(contents)];
    });
  });
};
var deserializeAws_restXmlGetObjectCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidObjectState":
              return [3, 2];
            case "com.amazonaws.s3#InvalidObjectState":
              return [3, 2];
            case "NoSuchKey":
              return [3, 4];
            case "com.amazonaws.s3#NoSuchKey":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetObjectAclCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetObjectAclCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Grants: void 0,
            Owner: void 0,
            RequestCharged: void 0
          };
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.AccessControlList === "") {
            contents.Grants = [];
          }
          if (data["AccessControlList"] !== void 0 && data["AccessControlList"]["Grant"] !== void 0) {
            contents.Grants = deserializeAws_restXmlGrants(getArrayIfSingleItem(data["AccessControlList"]["Grant"]), context);
          }
          if (data["Owner"] !== void 0) {
            contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetObjectAclCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "NoSuchKey":
              return [3, 2];
            case "com.amazonaws.s3#NoSuchKey":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetObjectLegalHoldCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            LegalHold: void 0
          };
          _a = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.sent()]);
          contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data, context);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetObjectLegalHoldCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetObjectLockConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            ObjectLockConfiguration: void 0
          };
          _a = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.sent()]);
          contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data, context);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetObjectLockConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetObjectRetentionCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetObjectRetentionCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Retention: void 0
          };
          _a = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.sent()]);
          contents.Retention = deserializeAws_restXmlObjectLockRetention(data, context);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetObjectRetentionCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetObjectTaggingCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetObjectTaggingCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            TagSet: void 0,
            VersionId: void 0
          };
          if (output.headers["x-amz-version-id"] !== void 0) {
            contents.VersionId = output.headers["x-amz-version-id"];
          }
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.TagSet === "") {
            contents.TagSet = [];
          }
          if (data["TagSet"] !== void 0 && data["TagSet"]["Tag"] !== void 0) {
            contents.TagSet = deserializeAws_restXmlTagSet(getArrayIfSingleItem(data["TagSet"]["Tag"]), context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetObjectTaggingCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetObjectTorrentCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator(this, function(_a) {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return [2, deserializeAws_restXmlGetObjectTorrentCommandError(output, context)];
      }
      contents = {
        $metadata: deserializeMetadata3(output),
        Body: void 0,
        RequestCharged: void 0
      };
      if (output.headers["x-amz-request-charged"] !== void 0) {
        contents.RequestCharged = output.headers["x-amz-request-charged"];
      }
      data = output.body;
      contents.Body = data;
      return [2, Promise.resolve(contents)];
    });
  });
};
var deserializeAws_restXmlGetObjectTorrentCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlGetPublicAccessBlockCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            PublicAccessBlockConfiguration: void 0
          };
          _a = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.sent()]);
          contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data, context);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlGetPublicAccessBlockCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlHeadBucketCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlHeadBucketCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlHeadBucketCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "NotFound":
              return [3, 2];
            case "com.amazonaws.s3#NotFound":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restXmlNotFoundResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlHeadObjectCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlHeadObjectCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            AcceptRanges: void 0,
            ArchiveStatus: void 0,
            BucketKeyEnabled: void 0,
            CacheControl: void 0,
            ContentDisposition: void 0,
            ContentEncoding: void 0,
            ContentLanguage: void 0,
            ContentLength: void 0,
            ContentType: void 0,
            DeleteMarker: void 0,
            ETag: void 0,
            Expiration: void 0,
            Expires: void 0,
            LastModified: void 0,
            Metadata: void 0,
            MissingMeta: void 0,
            ObjectLockLegalHoldStatus: void 0,
            ObjectLockMode: void 0,
            ObjectLockRetainUntilDate: void 0,
            PartsCount: void 0,
            ReplicationStatus: void 0,
            RequestCharged: void 0,
            Restore: void 0,
            SSECustomerAlgorithm: void 0,
            SSECustomerKeyMD5: void 0,
            SSEKMSKeyId: void 0,
            ServerSideEncryption: void 0,
            StorageClass: void 0,
            VersionId: void 0,
            WebsiteRedirectLocation: void 0
          };
          if (output.headers["x-amz-delete-marker"] !== void 0) {
            contents.DeleteMarker = parseBoolean(output.headers["x-amz-delete-marker"]);
          }
          if (output.headers["accept-ranges"] !== void 0) {
            contents.AcceptRanges = output.headers["accept-ranges"];
          }
          if (output.headers["x-amz-expiration"] !== void 0) {
            contents.Expiration = output.headers["x-amz-expiration"];
          }
          if (output.headers["x-amz-restore"] !== void 0) {
            contents.Restore = output.headers["x-amz-restore"];
          }
          if (output.headers["x-amz-archive-status"] !== void 0) {
            contents.ArchiveStatus = output.headers["x-amz-archive-status"];
          }
          if (output.headers["last-modified"] !== void 0) {
            contents.LastModified = expectNonNull(parseRfc7231DateTime(output.headers["last-modified"]));
          }
          if (output.headers["content-length"] !== void 0) {
            contents.ContentLength = strictParseLong(output.headers["content-length"]);
          }
          if (output.headers["etag"] !== void 0) {
            contents.ETag = output.headers["etag"];
          }
          if (output.headers["x-amz-missing-meta"] !== void 0) {
            contents.MissingMeta = strictParseInt32(output.headers["x-amz-missing-meta"]);
          }
          if (output.headers["x-amz-version-id"] !== void 0) {
            contents.VersionId = output.headers["x-amz-version-id"];
          }
          if (output.headers["cache-control"] !== void 0) {
            contents.CacheControl = output.headers["cache-control"];
          }
          if (output.headers["content-disposition"] !== void 0) {
            contents.ContentDisposition = output.headers["content-disposition"];
          }
          if (output.headers["content-encoding"] !== void 0) {
            contents.ContentEncoding = output.headers["content-encoding"];
          }
          if (output.headers["content-language"] !== void 0) {
            contents.ContentLanguage = output.headers["content-language"];
          }
          if (output.headers["content-type"] !== void 0) {
            contents.ContentType = output.headers["content-type"];
          }
          if (output.headers["expires"] !== void 0) {
            contents.Expires = expectNonNull(parseRfc7231DateTime(output.headers["expires"]));
          }
          if (output.headers["x-amz-website-redirect-location"] !== void 0) {
            contents.WebsiteRedirectLocation = output.headers["x-amz-website-redirect-location"];
          }
          if (output.headers["x-amz-server-side-encryption"] !== void 0) {
            contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
          }
          if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== void 0) {
            contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
          }
          if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== void 0) {
            contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
          }
          if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
            contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
          }
          if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
            contents.BucketKeyEnabled = parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]);
          }
          if (output.headers["x-amz-storage-class"] !== void 0) {
            contents.StorageClass = output.headers["x-amz-storage-class"];
          }
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          if (output.headers["x-amz-replication-status"] !== void 0) {
            contents.ReplicationStatus = output.headers["x-amz-replication-status"];
          }
          if (output.headers["x-amz-mp-parts-count"] !== void 0) {
            contents.PartsCount = strictParseInt32(output.headers["x-amz-mp-parts-count"]);
          }
          if (output.headers["x-amz-object-lock-mode"] !== void 0) {
            contents.ObjectLockMode = output.headers["x-amz-object-lock-mode"];
          }
          if (output.headers["x-amz-object-lock-retain-until-date"] !== void 0) {
            contents.ObjectLockRetainUntilDate = expectNonNull(parseRfc3339DateTime(output.headers["x-amz-object-lock-retain-until-date"]));
          }
          if (output.headers["x-amz-object-lock-legal-hold"] !== void 0) {
            contents.ObjectLockLegalHoldStatus = output.headers["x-amz-object-lock-legal-hold"];
          }
          Object.keys(output.headers).forEach(function(header) {
            if (contents.Metadata === void 0) {
              contents.Metadata = {};
            }
            if (header.startsWith("x-amz-meta-")) {
              contents.Metadata[header.substring(11)] = output.headers[header];
            }
          });
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlHeadObjectCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "NotFound":
              return [3, 2];
            case "com.amazonaws.s3#NotFound":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restXmlNotFoundResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            AnalyticsConfigurationList: void 0,
            ContinuationToken: void 0,
            IsTruncated: void 0,
            NextContinuationToken: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.AnalyticsConfiguration === "") {
            contents.AnalyticsConfigurationList = [];
          }
          if (data["AnalyticsConfiguration"] !== void 0) {
            contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList(getArrayIfSingleItem(data["AnalyticsConfiguration"]), context);
          }
          if (data["ContinuationToken"] !== void 0) {
            contents.ContinuationToken = expectString(data["ContinuationToken"]);
          }
          if (data["IsTruncated"] !== void 0) {
            contents.IsTruncated = parseBoolean(data["IsTruncated"]);
          }
          if (data["NextContinuationToken"] !== void 0) {
            contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            ContinuationToken: void 0,
            IntelligentTieringConfigurationList: void 0,
            IsTruncated: void 0,
            NextContinuationToken: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data["ContinuationToken"] !== void 0) {
            contents.ContinuationToken = expectString(data["ContinuationToken"]);
          }
          if (data.IntelligentTieringConfiguration === "") {
            contents.IntelligentTieringConfigurationList = [];
          }
          if (data["IntelligentTieringConfiguration"] !== void 0) {
            contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList(getArrayIfSingleItem(data["IntelligentTieringConfiguration"]), context);
          }
          if (data["IsTruncated"] !== void 0) {
            contents.IsTruncated = parseBoolean(data["IsTruncated"]);
          }
          if (data["NextContinuationToken"] !== void 0) {
            contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlListBucketInventoryConfigurationsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            ContinuationToken: void 0,
            InventoryConfigurationList: void 0,
            IsTruncated: void 0,
            NextContinuationToken: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data["ContinuationToken"] !== void 0) {
            contents.ContinuationToken = expectString(data["ContinuationToken"]);
          }
          if (data.InventoryConfiguration === "") {
            contents.InventoryConfigurationList = [];
          }
          if (data["InventoryConfiguration"] !== void 0) {
            contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList(getArrayIfSingleItem(data["InventoryConfiguration"]), context);
          }
          if (data["IsTruncated"] !== void 0) {
            contents.IsTruncated = parseBoolean(data["IsTruncated"]);
          }
          if (data["NextContinuationToken"] !== void 0) {
            contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlListBucketMetricsConfigurationsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            ContinuationToken: void 0,
            IsTruncated: void 0,
            MetricsConfigurationList: void 0,
            NextContinuationToken: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data["ContinuationToken"] !== void 0) {
            contents.ContinuationToken = expectString(data["ContinuationToken"]);
          }
          if (data["IsTruncated"] !== void 0) {
            contents.IsTruncated = parseBoolean(data["IsTruncated"]);
          }
          if (data.MetricsConfiguration === "") {
            contents.MetricsConfigurationList = [];
          }
          if (data["MetricsConfiguration"] !== void 0) {
            contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList(getArrayIfSingleItem(data["MetricsConfiguration"]), context);
          }
          if (data["NextContinuationToken"] !== void 0) {
            contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlListBucketsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlListBucketsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Buckets: void 0,
            Owner: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Buckets === "") {
            contents.Buckets = [];
          }
          if (data["Buckets"] !== void 0 && data["Buckets"]["Bucket"] !== void 0) {
            contents.Buckets = deserializeAws_restXmlBuckets(getArrayIfSingleItem(data["Buckets"]["Bucket"]), context);
          }
          if (data["Owner"] !== void 0) {
            contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlListBucketsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlListMultipartUploadsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlListMultipartUploadsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Bucket: void 0,
            CommonPrefixes: void 0,
            Delimiter: void 0,
            EncodingType: void 0,
            IsTruncated: void 0,
            KeyMarker: void 0,
            MaxUploads: void 0,
            NextKeyMarker: void 0,
            NextUploadIdMarker: void 0,
            Prefix: void 0,
            UploadIdMarker: void 0,
            Uploads: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data["Bucket"] !== void 0) {
            contents.Bucket = expectString(data["Bucket"]);
          }
          if (data.CommonPrefixes === "") {
            contents.CommonPrefixes = [];
          }
          if (data["CommonPrefixes"] !== void 0) {
            contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]), context);
          }
          if (data["Delimiter"] !== void 0) {
            contents.Delimiter = expectString(data["Delimiter"]);
          }
          if (data["EncodingType"] !== void 0) {
            contents.EncodingType = expectString(data["EncodingType"]);
          }
          if (data["IsTruncated"] !== void 0) {
            contents.IsTruncated = parseBoolean(data["IsTruncated"]);
          }
          if (data["KeyMarker"] !== void 0) {
            contents.KeyMarker = expectString(data["KeyMarker"]);
          }
          if (data["MaxUploads"] !== void 0) {
            contents.MaxUploads = strictParseInt32(data["MaxUploads"]);
          }
          if (data["NextKeyMarker"] !== void 0) {
            contents.NextKeyMarker = expectString(data["NextKeyMarker"]);
          }
          if (data["NextUploadIdMarker"] !== void 0) {
            contents.NextUploadIdMarker = expectString(data["NextUploadIdMarker"]);
          }
          if (data["Prefix"] !== void 0) {
            contents.Prefix = expectString(data["Prefix"]);
          }
          if (data["UploadIdMarker"] !== void 0) {
            contents.UploadIdMarker = expectString(data["UploadIdMarker"]);
          }
          if (data.Upload === "") {
            contents.Uploads = [];
          }
          if (data["Upload"] !== void 0) {
            contents.Uploads = deserializeAws_restXmlMultipartUploadList(getArrayIfSingleItem(data["Upload"]), context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlListMultipartUploadsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlListObjectsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlListObjectsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CommonPrefixes: void 0,
            Contents: void 0,
            Delimiter: void 0,
            EncodingType: void 0,
            IsTruncated: void 0,
            Marker: void 0,
            MaxKeys: void 0,
            Name: void 0,
            NextMarker: void 0,
            Prefix: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CommonPrefixes === "") {
            contents.CommonPrefixes = [];
          }
          if (data["CommonPrefixes"] !== void 0) {
            contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]), context);
          }
          if (data.Contents === "") {
            contents.Contents = [];
          }
          if (data["Contents"] !== void 0) {
            contents.Contents = deserializeAws_restXmlObjectList(getArrayIfSingleItem(data["Contents"]), context);
          }
          if (data["Delimiter"] !== void 0) {
            contents.Delimiter = expectString(data["Delimiter"]);
          }
          if (data["EncodingType"] !== void 0) {
            contents.EncodingType = expectString(data["EncodingType"]);
          }
          if (data["IsTruncated"] !== void 0) {
            contents.IsTruncated = parseBoolean(data["IsTruncated"]);
          }
          if (data["Marker"] !== void 0) {
            contents.Marker = expectString(data["Marker"]);
          }
          if (data["MaxKeys"] !== void 0) {
            contents.MaxKeys = strictParseInt32(data["MaxKeys"]);
          }
          if (data["Name"] !== void 0) {
            contents.Name = expectString(data["Name"]);
          }
          if (data["NextMarker"] !== void 0) {
            contents.NextMarker = expectString(data["NextMarker"]);
          }
          if (data["Prefix"] !== void 0) {
            contents.Prefix = expectString(data["Prefix"]);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlListObjectsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "NoSuchBucket":
              return [3, 2];
            case "com.amazonaws.s3#NoSuchBucket":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlListObjectsV2Command = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlListObjectsV2CommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CommonPrefixes: void 0,
            Contents: void 0,
            ContinuationToken: void 0,
            Delimiter: void 0,
            EncodingType: void 0,
            IsTruncated: void 0,
            KeyCount: void 0,
            MaxKeys: void 0,
            Name: void 0,
            NextContinuationToken: void 0,
            Prefix: void 0,
            StartAfter: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CommonPrefixes === "") {
            contents.CommonPrefixes = [];
          }
          if (data["CommonPrefixes"] !== void 0) {
            contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]), context);
          }
          if (data.Contents === "") {
            contents.Contents = [];
          }
          if (data["Contents"] !== void 0) {
            contents.Contents = deserializeAws_restXmlObjectList(getArrayIfSingleItem(data["Contents"]), context);
          }
          if (data["ContinuationToken"] !== void 0) {
            contents.ContinuationToken = expectString(data["ContinuationToken"]);
          }
          if (data["Delimiter"] !== void 0) {
            contents.Delimiter = expectString(data["Delimiter"]);
          }
          if (data["EncodingType"] !== void 0) {
            contents.EncodingType = expectString(data["EncodingType"]);
          }
          if (data["IsTruncated"] !== void 0) {
            contents.IsTruncated = parseBoolean(data["IsTruncated"]);
          }
          if (data["KeyCount"] !== void 0) {
            contents.KeyCount = strictParseInt32(data["KeyCount"]);
          }
          if (data["MaxKeys"] !== void 0) {
            contents.MaxKeys = strictParseInt32(data["MaxKeys"]);
          }
          if (data["Name"] !== void 0) {
            contents.Name = expectString(data["Name"]);
          }
          if (data["NextContinuationToken"] !== void 0) {
            contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
          }
          if (data["Prefix"] !== void 0) {
            contents.Prefix = expectString(data["Prefix"]);
          }
          if (data["StartAfter"] !== void 0) {
            contents.StartAfter = expectString(data["StartAfter"]);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlListObjectsV2CommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "NoSuchBucket":
              return [3, 2];
            case "com.amazonaws.s3#NoSuchBucket":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlListObjectVersionsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlListObjectVersionsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CommonPrefixes: void 0,
            DeleteMarkers: void 0,
            Delimiter: void 0,
            EncodingType: void 0,
            IsTruncated: void 0,
            KeyMarker: void 0,
            MaxKeys: void 0,
            Name: void 0,
            NextKeyMarker: void 0,
            NextVersionIdMarker: void 0,
            Prefix: void 0,
            VersionIdMarker: void 0,
            Versions: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CommonPrefixes === "") {
            contents.CommonPrefixes = [];
          }
          if (data["CommonPrefixes"] !== void 0) {
            contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]), context);
          }
          if (data.DeleteMarker === "") {
            contents.DeleteMarkers = [];
          }
          if (data["DeleteMarker"] !== void 0) {
            contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers(getArrayIfSingleItem(data["DeleteMarker"]), context);
          }
          if (data["Delimiter"] !== void 0) {
            contents.Delimiter = expectString(data["Delimiter"]);
          }
          if (data["EncodingType"] !== void 0) {
            contents.EncodingType = expectString(data["EncodingType"]);
          }
          if (data["IsTruncated"] !== void 0) {
            contents.IsTruncated = parseBoolean(data["IsTruncated"]);
          }
          if (data["KeyMarker"] !== void 0) {
            contents.KeyMarker = expectString(data["KeyMarker"]);
          }
          if (data["MaxKeys"] !== void 0) {
            contents.MaxKeys = strictParseInt32(data["MaxKeys"]);
          }
          if (data["Name"] !== void 0) {
            contents.Name = expectString(data["Name"]);
          }
          if (data["NextKeyMarker"] !== void 0) {
            contents.NextKeyMarker = expectString(data["NextKeyMarker"]);
          }
          if (data["NextVersionIdMarker"] !== void 0) {
            contents.NextVersionIdMarker = expectString(data["NextVersionIdMarker"]);
          }
          if (data["Prefix"] !== void 0) {
            contents.Prefix = expectString(data["Prefix"]);
          }
          if (data["VersionIdMarker"] !== void 0) {
            contents.VersionIdMarker = expectString(data["VersionIdMarker"]);
          }
          if (data.Version === "") {
            contents.Versions = [];
          }
          if (data["Version"] !== void 0) {
            contents.Versions = deserializeAws_restXmlObjectVersionList(getArrayIfSingleItem(data["Version"]), context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlListObjectVersionsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlListPartsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlListPartsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            AbortDate: void 0,
            AbortRuleId: void 0,
            Bucket: void 0,
            Initiator: void 0,
            IsTruncated: void 0,
            Key: void 0,
            MaxParts: void 0,
            NextPartNumberMarker: void 0,
            Owner: void 0,
            PartNumberMarker: void 0,
            Parts: void 0,
            RequestCharged: void 0,
            StorageClass: void 0,
            UploadId: void 0
          };
          if (output.headers["x-amz-abort-date"] !== void 0) {
            contents.AbortDate = expectNonNull(parseRfc7231DateTime(output.headers["x-amz-abort-date"]));
          }
          if (output.headers["x-amz-abort-rule-id"] !== void 0) {
            contents.AbortRuleId = output.headers["x-amz-abort-rule-id"];
          }
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data["Bucket"] !== void 0) {
            contents.Bucket = expectString(data["Bucket"]);
          }
          if (data["Initiator"] !== void 0) {
            contents.Initiator = deserializeAws_restXmlInitiator(data["Initiator"], context);
          }
          if (data["IsTruncated"] !== void 0) {
            contents.IsTruncated = parseBoolean(data["IsTruncated"]);
          }
          if (data["Key"] !== void 0) {
            contents.Key = expectString(data["Key"]);
          }
          if (data["MaxParts"] !== void 0) {
            contents.MaxParts = strictParseInt32(data["MaxParts"]);
          }
          if (data["NextPartNumberMarker"] !== void 0) {
            contents.NextPartNumberMarker = expectString(data["NextPartNumberMarker"]);
          }
          if (data["Owner"] !== void 0) {
            contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
          }
          if (data["PartNumberMarker"] !== void 0) {
            contents.PartNumberMarker = expectString(data["PartNumberMarker"]);
          }
          if (data.Part === "") {
            contents.Parts = [];
          }
          if (data["Part"] !== void 0) {
            contents.Parts = deserializeAws_restXmlParts(getArrayIfSingleItem(data["Part"]), context);
          }
          if (data["StorageClass"] !== void 0) {
            contents.StorageClass = expectString(data["StorageClass"]);
          }
          if (data["UploadId"] !== void 0) {
            contents.UploadId = expectString(data["UploadId"]);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlListPartsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketAclCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketAclCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketAclCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketCorsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketCorsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketCorsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketEncryptionCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketEncryptionCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketEncryptionCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketInventoryConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketLoggingCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketLoggingCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketLoggingCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketMetricsConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketNotificationConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketOwnershipControlsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketOwnershipControlsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketPolicyCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketPolicyCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketPolicyCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketReplicationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketReplicationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketReplicationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketRequestPaymentCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketRequestPaymentCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketTaggingCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketTaggingCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketTaggingCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketVersioningCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketVersioningCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketVersioningCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketWebsiteCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutBucketWebsiteCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutBucketWebsiteCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutObjectCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutObjectCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            BucketKeyEnabled: void 0,
            ETag: void 0,
            Expiration: void 0,
            RequestCharged: void 0,
            SSECustomerAlgorithm: void 0,
            SSECustomerKeyMD5: void 0,
            SSEKMSEncryptionContext: void 0,
            SSEKMSKeyId: void 0,
            ServerSideEncryption: void 0,
            VersionId: void 0
          };
          if (output.headers["x-amz-expiration"] !== void 0) {
            contents.Expiration = output.headers["x-amz-expiration"];
          }
          if (output.headers["etag"] !== void 0) {
            contents.ETag = output.headers["etag"];
          }
          if (output.headers["x-amz-server-side-encryption"] !== void 0) {
            contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
          }
          if (output.headers["x-amz-version-id"] !== void 0) {
            contents.VersionId = output.headers["x-amz-version-id"];
          }
          if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== void 0) {
            contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
          }
          if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== void 0) {
            contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
          }
          if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
            contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
          }
          if (output.headers["x-amz-server-side-encryption-context"] !== void 0) {
            contents.SSEKMSEncryptionContext = output.headers["x-amz-server-side-encryption-context"];
          }
          if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
            contents.BucketKeyEnabled = parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]);
          }
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutObjectCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutObjectAclCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutObjectAclCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            RequestCharged: void 0
          };
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutObjectAclCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "NoSuchKey":
              return [3, 2];
            case "com.amazonaws.s3#NoSuchKey":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutObjectLegalHoldCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            RequestCharged: void 0
          };
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutObjectLegalHoldCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutObjectLockConfigurationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            RequestCharged: void 0
          };
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutObjectLockConfigurationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutObjectRetentionCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutObjectRetentionCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            RequestCharged: void 0
          };
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutObjectRetentionCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutObjectTaggingCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutObjectTaggingCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            VersionId: void 0
          };
          if (output.headers["x-amz-version-id"] !== void 0) {
            contents.VersionId = output.headers["x-amz-version-id"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutObjectTaggingCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlPutPublicAccessBlockCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlPutPublicAccessBlockCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlRestoreObjectCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlRestoreObjectCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            RequestCharged: void 0,
            RestoreOutputPath: void 0
          };
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          if (output.headers["x-amz-restore-output-path"] !== void 0) {
            contents.RestoreOutputPath = output.headers["x-amz-restore-output-path"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlRestoreObjectCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ObjectAlreadyInActiveTierError":
              return [3, 2];
            case "com.amazonaws.s3#ObjectAlreadyInActiveTierError":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlSelectObjectContentCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator(this, function(_a) {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return [2, deserializeAws_restXmlSelectObjectContentCommandError(output, context)];
      }
      contents = {
        $metadata: deserializeMetadata3(output),
        Payload: void 0
      };
      data = context.eventStreamMarshaller.deserialize(output.body, function(event) {
        return __awaiter(void 0, void 0, void 0, function() {
          var eventName, eventHeaders, eventMessage, parsedEvent;
          var _a2;
          return __generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                eventName = Object.keys(event)[0];
                eventHeaders = Object.entries(event[eventName].headers).reduce(function(accummulator, curr) {
                  accummulator[curr[0]] = curr[1].value;
                  return accummulator;
                }, {});
                eventMessage = {
                  headers: eventHeaders,
                  body: event[eventName].body
                };
                parsedEvent = (_a2 = {}, _a2[eventName] = eventMessage, _a2);
                return [4, deserializeAws_restXmlSelectObjectContentEventStream_event(parsedEvent, context)];
              case 1:
                return [2, _b.sent()];
            }
          });
        });
      });
      contents.Payload = data;
      return [2, Promise.resolve(contents)];
    });
  });
};
var deserializeAws_restXmlSelectObjectContentCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlUploadPartCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlUploadPartCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            BucketKeyEnabled: void 0,
            ETag: void 0,
            RequestCharged: void 0,
            SSECustomerAlgorithm: void 0,
            SSECustomerKeyMD5: void 0,
            SSEKMSKeyId: void 0,
            ServerSideEncryption: void 0
          };
          if (output.headers["x-amz-server-side-encryption"] !== void 0) {
            contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
          }
          if (output.headers["etag"] !== void 0) {
            contents.ETag = output.headers["etag"];
          }
          if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== void 0) {
            contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
          }
          if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== void 0) {
            contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
          }
          if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
            contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
          }
          if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
            contents.BucketKeyEnabled = parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]);
          }
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlUploadPartCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlUploadPartCopyCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlUploadPartCopyCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            BucketKeyEnabled: void 0,
            CopyPartResult: void 0,
            CopySourceVersionId: void 0,
            RequestCharged: void 0,
            SSECustomerAlgorithm: void 0,
            SSECustomerKeyMD5: void 0,
            SSEKMSKeyId: void 0,
            ServerSideEncryption: void 0
          };
          if (output.headers["x-amz-copy-source-version-id"] !== void 0) {
            contents.CopySourceVersionId = output.headers["x-amz-copy-source-version-id"];
          }
          if (output.headers["x-amz-server-side-encryption"] !== void 0) {
            contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
          }
          if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== void 0) {
            contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
          }
          if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== void 0) {
            contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
          }
          if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
            contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
          }
          if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
            contents.BucketKeyEnabled = parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]);
          }
          if (output.headers["x-amz-request-charged"] !== void 0) {
            contents.RequestCharged = output.headers["x-amz-request-charged"];
          }
          _a = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.sent()]);
          contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data, context);
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlUploadPartCopyCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlWriteGetObjectResponseCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlWriteGetObjectResponseCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restXmlWriteGetObjectResponseCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.code || parsedBody.Code || errorCode;
              response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restXmlSelectObjectContentEventStream_event = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, _b, _c, _d, _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          if (!(output["Records"] !== void 0))
            return [3, 2];
          _a = {};
          return [4, deserializeAws_restXmlRecordsEvent_event(output["Records"], context)];
        case 1:
          return [2, (_a.Records = _f.sent(), _a)];
        case 2:
          if (!(output["Stats"] !== void 0))
            return [3, 4];
          _b = {};
          return [4, deserializeAws_restXmlStatsEvent_event(output["Stats"], context)];
        case 3:
          return [2, (_b.Stats = _f.sent(), _b)];
        case 4:
          if (!(output["Progress"] !== void 0))
            return [3, 6];
          _c = {};
          return [4, deserializeAws_restXmlProgressEvent_event(output["Progress"], context)];
        case 5:
          return [2, (_c.Progress = _f.sent(), _c)];
        case 6:
          if (!(output["Cont"] !== void 0))
            return [3, 8];
          _d = {};
          return [4, deserializeAws_restXmlContinuationEvent_event(output["Cont"], context)];
        case 7:
          return [2, (_d.Cont = _f.sent(), _d)];
        case 8:
          if (!(output["End"] !== void 0))
            return [3, 10];
          _e = {};
          return [4, deserializeAws_restXmlEndEvent_event(output["End"], context)];
        case 9:
          return [2, (_e.End = _f.sent(), _e)];
        case 10:
          return [2, { $unknown: output }];
      }
    });
  });
};
var deserializeAws_restXmlContinuationEvent_event = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      contents = {};
      return [2, contents];
    });
  });
};
var deserializeAws_restXmlEndEvent_event = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      contents = {};
      return [2, contents];
    });
  });
};
var deserializeAws_restXmlProgressEvent_event = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          contents = {};
          _a = contents;
          return [4, parseBody3(output.body, context)];
        case 1:
          _a.Details = _b.sent();
          return [2, contents];
      }
    });
  });
};
var deserializeAws_restXmlRecordsEvent_event = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents;
    return __generator(this, function(_a) {
      contents = {};
      contents.Payload = output.body;
      return [2, contents];
    });
  });
};
var deserializeAws_restXmlStatsEvent_event = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, _a;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          contents = {};
          _a = contents;
          return [4, parseBody3(output.body, context)];
        case 1:
          _a.Details = _b.sent();
          return [2, contents];
      }
    });
  });
};
var deserializeAws_restXmlBucketAlreadyExistsResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator(this, function(_a) {
      contents = {
        name: "BucketAlreadyExists",
        $fault: "client",
        $metadata: deserializeMetadata3(parsedOutput)
      };
      data = parsedOutput.body;
      return [2, contents];
    });
  });
};
var deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator(this, function(_a) {
      contents = {
        name: "BucketAlreadyOwnedByYou",
        $fault: "client",
        $metadata: deserializeMetadata3(parsedOutput)
      };
      data = parsedOutput.body;
      return [2, contents];
    });
  });
};
var deserializeAws_restXmlInvalidObjectStateResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator(this, function(_a) {
      contents = {
        name: "InvalidObjectState",
        $fault: "client",
        $metadata: deserializeMetadata3(parsedOutput),
        AccessTier: void 0,
        StorageClass: void 0
      };
      data = parsedOutput.body;
      if (data["AccessTier"] !== void 0) {
        contents.AccessTier = expectString(data["AccessTier"]);
      }
      if (data["StorageClass"] !== void 0) {
        contents.StorageClass = expectString(data["StorageClass"]);
      }
      return [2, contents];
    });
  });
};
var deserializeAws_restXmlNoSuchBucketResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator(this, function(_a) {
      contents = {
        name: "NoSuchBucket",
        $fault: "client",
        $metadata: deserializeMetadata3(parsedOutput)
      };
      data = parsedOutput.body;
      return [2, contents];
    });
  });
};
var deserializeAws_restXmlNoSuchKeyResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator(this, function(_a) {
      contents = {
        name: "NoSuchKey",
        $fault: "client",
        $metadata: deserializeMetadata3(parsedOutput)
      };
      data = parsedOutput.body;
      return [2, contents];
    });
  });
};
var deserializeAws_restXmlNoSuchUploadResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator(this, function(_a) {
      contents = {
        name: "NoSuchUpload",
        $fault: "client",
        $metadata: deserializeMetadata3(parsedOutput)
      };
      data = parsedOutput.body;
      return [2, contents];
    });
  });
};
var deserializeAws_restXmlNotFoundResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator(this, function(_a) {
      contents = {
        name: "NotFound",
        $fault: "client",
        $metadata: deserializeMetadata3(parsedOutput)
      };
      data = parsedOutput.body;
      return [2, contents];
    });
  });
};
var deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator(this, function(_a) {
      contents = {
        name: "ObjectAlreadyInActiveTierError",
        $fault: "client",
        $metadata: deserializeMetadata3(parsedOutput)
      };
      data = parsedOutput.body;
      return [2, contents];
    });
  });
};
var deserializeAws_restXmlObjectNotInActiveTierErrorResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator(this, function(_a) {
      contents = {
        name: "ObjectNotInActiveTierError",
        $fault: "client",
        $metadata: deserializeMetadata3(parsedOutput)
      };
      data = parsedOutput.body;
      return [2, contents];
    });
  });
};
var serializeAws_restXmlAbortIncompleteMultipartUpload = function(input, context) {
  var bodyNode = new XmlNode("AbortIncompleteMultipartUpload");
  if (input.DaysAfterInitiation !== void 0 && input.DaysAfterInitiation !== null) {
    var node = new XmlNode("DaysAfterInitiation").addChildNode(new XmlText(String(input.DaysAfterInitiation))).withName("DaysAfterInitiation");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlAccelerateConfiguration = function(input, context) {
  var bodyNode = new XmlNode("AccelerateConfiguration");
  if (input.Status !== void 0 && input.Status !== null) {
    var node = new XmlNode("BucketAccelerateStatus").addChildNode(new XmlText(input.Status)).withName("Status");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlAccessControlPolicy = function(input, context) {
  var bodyNode = new XmlNode("AccessControlPolicy");
  if (input.Grants !== void 0 && input.Grants !== null) {
    var nodes = serializeAws_restXmlGrants(input.Grants, context);
    var containerNode_1 = new XmlNode("AccessControlList");
    nodes.map(function(node2) {
      containerNode_1.addChildNode(node2);
    });
    bodyNode.addChildNode(containerNode_1);
  }
  if (input.Owner !== void 0 && input.Owner !== null) {
    var node = serializeAws_restXmlOwner(input.Owner, context).withName("Owner");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlAccessControlTranslation = function(input, context) {
  var bodyNode = new XmlNode("AccessControlTranslation");
  if (input.Owner !== void 0 && input.Owner !== null) {
    var node = new XmlNode("OwnerOverride").addChildNode(new XmlText(input.Owner)).withName("Owner");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlAllowedHeaders = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = new XmlNode("AllowedHeader").addChildNode(new XmlText(entry));
    return node.withName("member");
  });
};
var serializeAws_restXmlAllowedMethods = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = new XmlNode("AllowedMethod").addChildNode(new XmlText(entry));
    return node.withName("member");
  });
};
var serializeAws_restXmlAllowedOrigins = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = new XmlNode("AllowedOrigin").addChildNode(new XmlText(entry));
    return node.withName("member");
  });
};
var serializeAws_restXmlAnalyticsAndOperator = function(input, context) {
  var bodyNode = new XmlNode("AnalyticsAndOperator");
  if (input.Prefix !== void 0 && input.Prefix !== null) {
    var node = new XmlNode("Prefix").addChildNode(new XmlText(input.Prefix)).withName("Prefix");
    bodyNode.addChildNode(node);
  }
  if (input.Tags !== void 0 && input.Tags !== null) {
    var nodes = serializeAws_restXmlTagSet(input.Tags, context);
    nodes.map(function(node2) {
      node2 = node2.withName("Tag");
      bodyNode.addChildNode(node2);
    });
  }
  return bodyNode;
};
var serializeAws_restXmlAnalyticsConfiguration = function(input, context) {
  var bodyNode = new XmlNode("AnalyticsConfiguration");
  if (input.Id !== void 0 && input.Id !== null) {
    var node = new XmlNode("AnalyticsId").addChildNode(new XmlText(input.Id)).withName("Id");
    bodyNode.addChildNode(node);
  }
  if (input.Filter !== void 0 && input.Filter !== null) {
    var node = serializeAws_restXmlAnalyticsFilter(input.Filter, context).withName("Filter");
    bodyNode.addChildNode(node);
  }
  if (input.StorageClassAnalysis !== void 0 && input.StorageClassAnalysis !== null) {
    var node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis, context).withName("StorageClassAnalysis");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlAnalyticsExportDestination = function(input, context) {
  var bodyNode = new XmlNode("AnalyticsExportDestination");
  if (input.S3BucketDestination !== void 0 && input.S3BucketDestination !== null) {
    var node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlAnalyticsFilter = function(input, context) {
  var bodyNode = new XmlNode("AnalyticsFilter");
  AnalyticsFilter.visit(input, {
    Prefix: function(value) {
      var node = new XmlNode("Prefix").addChildNode(new XmlText(value)).withName("Prefix");
      bodyNode.addChildNode(node);
    },
    Tag: function(value) {
      var node = serializeAws_restXmlTag(value, context).withName("Tag");
      bodyNode.addChildNode(node);
    },
    And: function(value) {
      var node = serializeAws_restXmlAnalyticsAndOperator(value, context).withName("And");
      bodyNode.addChildNode(node);
    },
    _: function(name7, value) {
      if (!(value instanceof XmlNode || value instanceof XmlText)) {
        throw new Error("Unable to serialize unknown union members in XML.");
      }
      bodyNode.addChildNode(new XmlNode(name7).addChildNode(value));
    }
  });
  return bodyNode;
};
var serializeAws_restXmlAnalyticsS3BucketDestination = function(input, context) {
  var bodyNode = new XmlNode("AnalyticsS3BucketDestination");
  if (input.Format !== void 0 && input.Format !== null) {
    var node = new XmlNode("AnalyticsS3ExportFileFormat").addChildNode(new XmlText(input.Format)).withName("Format");
    bodyNode.addChildNode(node);
  }
  if (input.BucketAccountId !== void 0 && input.BucketAccountId !== null) {
    var node = new XmlNode("AccountId").addChildNode(new XmlText(input.BucketAccountId)).withName("BucketAccountId");
    bodyNode.addChildNode(node);
  }
  if (input.Bucket !== void 0 && input.Bucket !== null) {
    var node = new XmlNode("BucketName").addChildNode(new XmlText(input.Bucket)).withName("Bucket");
    bodyNode.addChildNode(node);
  }
  if (input.Prefix !== void 0 && input.Prefix !== null) {
    var node = new XmlNode("Prefix").addChildNode(new XmlText(input.Prefix)).withName("Prefix");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlBucketLifecycleConfiguration = function(input, context) {
  var bodyNode = new XmlNode("BucketLifecycleConfiguration");
  if (input.Rules !== void 0 && input.Rules !== null) {
    var nodes = serializeAws_restXmlLifecycleRules(input.Rules, context);
    nodes.map(function(node) {
      node = node.withName("Rule");
      bodyNode.addChildNode(node);
    });
  }
  return bodyNode;
};
var serializeAws_restXmlBucketLoggingStatus = function(input, context) {
  var bodyNode = new XmlNode("BucketLoggingStatus");
  if (input.LoggingEnabled !== void 0 && input.LoggingEnabled !== null) {
    var node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled, context).withName("LoggingEnabled");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlCompletedMultipartUpload = function(input, context) {
  var bodyNode = new XmlNode("CompletedMultipartUpload");
  if (input.Parts !== void 0 && input.Parts !== null) {
    var nodes = serializeAws_restXmlCompletedPartList(input.Parts, context);
    nodes.map(function(node) {
      node = node.withName("Part");
      bodyNode.addChildNode(node);
    });
  }
  return bodyNode;
};
var serializeAws_restXmlCompletedPart = function(input, context) {
  var bodyNode = new XmlNode("CompletedPart");
  if (input.ETag !== void 0 && input.ETag !== null) {
    var node = new XmlNode("ETag").addChildNode(new XmlText(input.ETag)).withName("ETag");
    bodyNode.addChildNode(node);
  }
  if (input.PartNumber !== void 0 && input.PartNumber !== null) {
    var node = new XmlNode("PartNumber").addChildNode(new XmlText(String(input.PartNumber))).withName("PartNumber");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlCompletedPartList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlCompletedPart(entry, context);
    return node.withName("member");
  });
};
var serializeAws_restXmlCondition = function(input, context) {
  var bodyNode = new XmlNode("Condition");
  if (input.HttpErrorCodeReturnedEquals !== void 0 && input.HttpErrorCodeReturnedEquals !== null) {
    var node = new XmlNode("HttpErrorCodeReturnedEquals").addChildNode(new XmlText(input.HttpErrorCodeReturnedEquals)).withName("HttpErrorCodeReturnedEquals");
    bodyNode.addChildNode(node);
  }
  if (input.KeyPrefixEquals !== void 0 && input.KeyPrefixEquals !== null) {
    var node = new XmlNode("KeyPrefixEquals").addChildNode(new XmlText(input.KeyPrefixEquals)).withName("KeyPrefixEquals");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlCORSConfiguration = function(input, context) {
  var bodyNode = new XmlNode("CORSConfiguration");
  if (input.CORSRules !== void 0 && input.CORSRules !== null) {
    var nodes = serializeAws_restXmlCORSRules(input.CORSRules, context);
    nodes.map(function(node) {
      node = node.withName("CORSRule");
      bodyNode.addChildNode(node);
    });
  }
  return bodyNode;
};
var serializeAws_restXmlCORSRule = function(input, context) {
  var bodyNode = new XmlNode("CORSRule");
  if (input.ID !== void 0 && input.ID !== null) {
    var node = new XmlNode("ID").addChildNode(new XmlText(input.ID)).withName("ID");
    bodyNode.addChildNode(node);
  }
  if (input.AllowedHeaders !== void 0 && input.AllowedHeaders !== null) {
    var nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders, context);
    nodes.map(function(node2) {
      node2 = node2.withName("AllowedHeader");
      bodyNode.addChildNode(node2);
    });
  }
  if (input.AllowedMethods !== void 0 && input.AllowedMethods !== null) {
    var nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context);
    nodes.map(function(node2) {
      node2 = node2.withName("AllowedMethod");
      bodyNode.addChildNode(node2);
    });
  }
  if (input.AllowedOrigins !== void 0 && input.AllowedOrigins !== null) {
    var nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins, context);
    nodes.map(function(node2) {
      node2 = node2.withName("AllowedOrigin");
      bodyNode.addChildNode(node2);
    });
  }
  if (input.ExposeHeaders !== void 0 && input.ExposeHeaders !== null) {
    var nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders, context);
    nodes.map(function(node2) {
      node2 = node2.withName("ExposeHeader");
      bodyNode.addChildNode(node2);
    });
  }
  if (input.MaxAgeSeconds !== void 0 && input.MaxAgeSeconds !== null) {
    var node = new XmlNode("MaxAgeSeconds").addChildNode(new XmlText(String(input.MaxAgeSeconds))).withName("MaxAgeSeconds");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlCORSRules = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlCORSRule(entry, context);
    return node.withName("member");
  });
};
var serializeAws_restXmlCreateBucketConfiguration = function(input, context) {
  var bodyNode = new XmlNode("CreateBucketConfiguration");
  if (input.LocationConstraint !== void 0 && input.LocationConstraint !== null) {
    var node = new XmlNode("BucketLocationConstraint").addChildNode(new XmlText(input.LocationConstraint)).withName("LocationConstraint");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlCSVInput = function(input, context) {
  var bodyNode = new XmlNode("CSVInput");
  if (input.FileHeaderInfo !== void 0 && input.FileHeaderInfo !== null) {
    var node = new XmlNode("FileHeaderInfo").addChildNode(new XmlText(input.FileHeaderInfo)).withName("FileHeaderInfo");
    bodyNode.addChildNode(node);
  }
  if (input.Comments !== void 0 && input.Comments !== null) {
    var node = new XmlNode("Comments").addChildNode(new XmlText(input.Comments)).withName("Comments");
    bodyNode.addChildNode(node);
  }
  if (input.QuoteEscapeCharacter !== void 0 && input.QuoteEscapeCharacter !== null) {
    var node = new XmlNode("QuoteEscapeCharacter").addChildNode(new XmlText(input.QuoteEscapeCharacter)).withName("QuoteEscapeCharacter");
    bodyNode.addChildNode(node);
  }
  if (input.RecordDelimiter !== void 0 && input.RecordDelimiter !== null) {
    var node = new XmlNode("RecordDelimiter").addChildNode(new XmlText(input.RecordDelimiter)).withName("RecordDelimiter");
    bodyNode.addChildNode(node);
  }
  if (input.FieldDelimiter !== void 0 && input.FieldDelimiter !== null) {
    var node = new XmlNode("FieldDelimiter").addChildNode(new XmlText(input.FieldDelimiter)).withName("FieldDelimiter");
    bodyNode.addChildNode(node);
  }
  if (input.QuoteCharacter !== void 0 && input.QuoteCharacter !== null) {
    var node = new XmlNode("QuoteCharacter").addChildNode(new XmlText(input.QuoteCharacter)).withName("QuoteCharacter");
    bodyNode.addChildNode(node);
  }
  if (input.AllowQuotedRecordDelimiter !== void 0 && input.AllowQuotedRecordDelimiter !== null) {
    var node = new XmlNode("AllowQuotedRecordDelimiter").addChildNode(new XmlText(String(input.AllowQuotedRecordDelimiter))).withName("AllowQuotedRecordDelimiter");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlCSVOutput = function(input, context) {
  var bodyNode = new XmlNode("CSVOutput");
  if (input.QuoteFields !== void 0 && input.QuoteFields !== null) {
    var node = new XmlNode("QuoteFields").addChildNode(new XmlText(input.QuoteFields)).withName("QuoteFields");
    bodyNode.addChildNode(node);
  }
  if (input.QuoteEscapeCharacter !== void 0 && input.QuoteEscapeCharacter !== null) {
    var node = new XmlNode("QuoteEscapeCharacter").addChildNode(new XmlText(input.QuoteEscapeCharacter)).withName("QuoteEscapeCharacter");
    bodyNode.addChildNode(node);
  }
  if (input.RecordDelimiter !== void 0 && input.RecordDelimiter !== null) {
    var node = new XmlNode("RecordDelimiter").addChildNode(new XmlText(input.RecordDelimiter)).withName("RecordDelimiter");
    bodyNode.addChildNode(node);
  }
  if (input.FieldDelimiter !== void 0 && input.FieldDelimiter !== null) {
    var node = new XmlNode("FieldDelimiter").addChildNode(new XmlText(input.FieldDelimiter)).withName("FieldDelimiter");
    bodyNode.addChildNode(node);
  }
  if (input.QuoteCharacter !== void 0 && input.QuoteCharacter !== null) {
    var node = new XmlNode("QuoteCharacter").addChildNode(new XmlText(input.QuoteCharacter)).withName("QuoteCharacter");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlDefaultRetention = function(input, context) {
  var bodyNode = new XmlNode("DefaultRetention");
  if (input.Mode !== void 0 && input.Mode !== null) {
    var node = new XmlNode("ObjectLockRetentionMode").addChildNode(new XmlText(input.Mode)).withName("Mode");
    bodyNode.addChildNode(node);
  }
  if (input.Days !== void 0 && input.Days !== null) {
    var node = new XmlNode("Days").addChildNode(new XmlText(String(input.Days))).withName("Days");
    bodyNode.addChildNode(node);
  }
  if (input.Years !== void 0 && input.Years !== null) {
    var node = new XmlNode("Years").addChildNode(new XmlText(String(input.Years))).withName("Years");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlDelete = function(input, context) {
  var bodyNode = new XmlNode("Delete");
  if (input.Objects !== void 0 && input.Objects !== null) {
    var nodes = serializeAws_restXmlObjectIdentifierList(input.Objects, context);
    nodes.map(function(node2) {
      node2 = node2.withName("Object");
      bodyNode.addChildNode(node2);
    });
  }
  if (input.Quiet !== void 0 && input.Quiet !== null) {
    var node = new XmlNode("Quiet").addChildNode(new XmlText(String(input.Quiet))).withName("Quiet");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlDeleteMarkerReplication = function(input, context) {
  var bodyNode = new XmlNode("DeleteMarkerReplication");
  if (input.Status !== void 0 && input.Status !== null) {
    var node = new XmlNode("DeleteMarkerReplicationStatus").addChildNode(new XmlText(input.Status)).withName("Status");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlDestination = function(input, context) {
  var bodyNode = new XmlNode("Destination");
  if (input.Bucket !== void 0 && input.Bucket !== null) {
    var node = new XmlNode("BucketName").addChildNode(new XmlText(input.Bucket)).withName("Bucket");
    bodyNode.addChildNode(node);
  }
  if (input.Account !== void 0 && input.Account !== null) {
    var node = new XmlNode("AccountId").addChildNode(new XmlText(input.Account)).withName("Account");
    bodyNode.addChildNode(node);
  }
  if (input.StorageClass !== void 0 && input.StorageClass !== null) {
    var node = new XmlNode("StorageClass").addChildNode(new XmlText(input.StorageClass)).withName("StorageClass");
    bodyNode.addChildNode(node);
  }
  if (input.AccessControlTranslation !== void 0 && input.AccessControlTranslation !== null) {
    var node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation, context).withName("AccessControlTranslation");
    bodyNode.addChildNode(node);
  }
  if (input.EncryptionConfiguration !== void 0 && input.EncryptionConfiguration !== null) {
    var node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration, context).withName("EncryptionConfiguration");
    bodyNode.addChildNode(node);
  }
  if (input.ReplicationTime !== void 0 && input.ReplicationTime !== null) {
    var node = serializeAws_restXmlReplicationTime(input.ReplicationTime, context).withName("ReplicationTime");
    bodyNode.addChildNode(node);
  }
  if (input.Metrics !== void 0 && input.Metrics !== null) {
    var node = serializeAws_restXmlMetrics(input.Metrics, context).withName("Metrics");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlEncryption = function(input, context) {
  var bodyNode = new XmlNode("Encryption");
  if (input.EncryptionType !== void 0 && input.EncryptionType !== null) {
    var node = new XmlNode("ServerSideEncryption").addChildNode(new XmlText(input.EncryptionType)).withName("EncryptionType");
    bodyNode.addChildNode(node);
  }
  if (input.KMSKeyId !== void 0 && input.KMSKeyId !== null) {
    var node = new XmlNode("SSEKMSKeyId").addChildNode(new XmlText(input.KMSKeyId)).withName("KMSKeyId");
    bodyNode.addChildNode(node);
  }
  if (input.KMSContext !== void 0 && input.KMSContext !== null) {
    var node = new XmlNode("KMSContext").addChildNode(new XmlText(input.KMSContext)).withName("KMSContext");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlEncryptionConfiguration = function(input, context) {
  var bodyNode = new XmlNode("EncryptionConfiguration");
  if (input.ReplicaKmsKeyID !== void 0 && input.ReplicaKmsKeyID !== null) {
    var node = new XmlNode("ReplicaKmsKeyID").addChildNode(new XmlText(input.ReplicaKmsKeyID)).withName("ReplicaKmsKeyID");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlErrorDocument = function(input, context) {
  var bodyNode = new XmlNode("ErrorDocument");
  if (input.Key !== void 0 && input.Key !== null) {
    var node = new XmlNode("ObjectKey").addChildNode(new XmlText(input.Key)).withName("Key");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlEventList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = new XmlNode("Event").addChildNode(new XmlText(entry));
    return node.withName("member");
  });
};
var serializeAws_restXmlExistingObjectReplication = function(input, context) {
  var bodyNode = new XmlNode("ExistingObjectReplication");
  if (input.Status !== void 0 && input.Status !== null) {
    var node = new XmlNode("ExistingObjectReplicationStatus").addChildNode(new XmlText(input.Status)).withName("Status");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlExposeHeaders = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = new XmlNode("ExposeHeader").addChildNode(new XmlText(entry));
    return node.withName("member");
  });
};
var serializeAws_restXmlFilterRule = function(input, context) {
  var bodyNode = new XmlNode("FilterRule");
  if (input.Name !== void 0 && input.Name !== null) {
    var node = new XmlNode("FilterRuleName").addChildNode(new XmlText(input.Name)).withName("Name");
    bodyNode.addChildNode(node);
  }
  if (input.Value !== void 0 && input.Value !== null) {
    var node = new XmlNode("FilterRuleValue").addChildNode(new XmlText(input.Value)).withName("Value");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlFilterRuleList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlFilterRule(entry, context);
    return node.withName("member");
  });
};
var serializeAws_restXmlGlacierJobParameters = function(input, context) {
  var bodyNode = new XmlNode("GlacierJobParameters");
  if (input.Tier !== void 0 && input.Tier !== null) {
    var node = new XmlNode("Tier").addChildNode(new XmlText(input.Tier)).withName("Tier");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlGrant = function(input, context) {
  var bodyNode = new XmlNode("Grant");
  if (input.Grantee !== void 0 && input.Grantee !== null) {
    var node = serializeAws_restXmlGrantee(input.Grantee, context).withName("Grantee");
    node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
    bodyNode.addChildNode(node);
  }
  if (input.Permission !== void 0 && input.Permission !== null) {
    var node = new XmlNode("Permission").addChildNode(new XmlText(input.Permission)).withName("Permission");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlGrantee = function(input, context) {
  var bodyNode = new XmlNode("Grantee");
  if (input.DisplayName !== void 0 && input.DisplayName !== null) {
    var node = new XmlNode("DisplayName").addChildNode(new XmlText(input.DisplayName)).withName("DisplayName");
    bodyNode.addChildNode(node);
  }
  if (input.EmailAddress !== void 0 && input.EmailAddress !== null) {
    var node = new XmlNode("EmailAddress").addChildNode(new XmlText(input.EmailAddress)).withName("EmailAddress");
    bodyNode.addChildNode(node);
  }
  if (input.ID !== void 0 && input.ID !== null) {
    var node = new XmlNode("ID").addChildNode(new XmlText(input.ID)).withName("ID");
    bodyNode.addChildNode(node);
  }
  if (input.URI !== void 0 && input.URI !== null) {
    var node = new XmlNode("URI").addChildNode(new XmlText(input.URI)).withName("URI");
    bodyNode.addChildNode(node);
  }
  if (input.Type !== void 0 && input.Type !== null) {
    bodyNode.addAttribute("xsi:type", input.Type);
  }
  return bodyNode;
};
var serializeAws_restXmlGrants = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlGrant(entry, context);
    return node.withName("Grant");
  });
};
var serializeAws_restXmlIndexDocument = function(input, context) {
  var bodyNode = new XmlNode("IndexDocument");
  if (input.Suffix !== void 0 && input.Suffix !== null) {
    var node = new XmlNode("Suffix").addChildNode(new XmlText(input.Suffix)).withName("Suffix");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlInputSerialization = function(input, context) {
  var bodyNode = new XmlNode("InputSerialization");
  if (input.CSV !== void 0 && input.CSV !== null) {
    var node = serializeAws_restXmlCSVInput(input.CSV, context).withName("CSV");
    bodyNode.addChildNode(node);
  }
  if (input.CompressionType !== void 0 && input.CompressionType !== null) {
    var node = new XmlNode("CompressionType").addChildNode(new XmlText(input.CompressionType)).withName("CompressionType");
    bodyNode.addChildNode(node);
  }
  if (input.JSON !== void 0 && input.JSON !== null) {
    var node = serializeAws_restXmlJSONInput(input.JSON, context).withName("JSON");
    bodyNode.addChildNode(node);
  }
  if (input.Parquet !== void 0 && input.Parquet !== null) {
    var node = serializeAws_restXmlParquetInput(input.Parquet, context).withName("Parquet");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlIntelligentTieringAndOperator = function(input, context) {
  var bodyNode = new XmlNode("IntelligentTieringAndOperator");
  if (input.Prefix !== void 0 && input.Prefix !== null) {
    var node = new XmlNode("Prefix").addChildNode(new XmlText(input.Prefix)).withName("Prefix");
    bodyNode.addChildNode(node);
  }
  if (input.Tags !== void 0 && input.Tags !== null) {
    var nodes = serializeAws_restXmlTagSet(input.Tags, context);
    nodes.map(function(node2) {
      node2 = node2.withName("Tag");
      bodyNode.addChildNode(node2);
    });
  }
  return bodyNode;
};
var serializeAws_restXmlIntelligentTieringConfiguration = function(input, context) {
  var bodyNode = new XmlNode("IntelligentTieringConfiguration");
  if (input.Id !== void 0 && input.Id !== null) {
    var node = new XmlNode("IntelligentTieringId").addChildNode(new XmlText(input.Id)).withName("Id");
    bodyNode.addChildNode(node);
  }
  if (input.Filter !== void 0 && input.Filter !== null) {
    var node = serializeAws_restXmlIntelligentTieringFilter(input.Filter, context).withName("Filter");
    bodyNode.addChildNode(node);
  }
  if (input.Status !== void 0 && input.Status !== null) {
    var node = new XmlNode("IntelligentTieringStatus").addChildNode(new XmlText(input.Status)).withName("Status");
    bodyNode.addChildNode(node);
  }
  if (input.Tierings !== void 0 && input.Tierings !== null) {
    var nodes = serializeAws_restXmlTieringList(input.Tierings, context);
    nodes.map(function(node2) {
      node2 = node2.withName("Tiering");
      bodyNode.addChildNode(node2);
    });
  }
  return bodyNode;
};
var serializeAws_restXmlIntelligentTieringFilter = function(input, context) {
  var bodyNode = new XmlNode("IntelligentTieringFilter");
  if (input.Prefix !== void 0 && input.Prefix !== null) {
    var node = new XmlNode("Prefix").addChildNode(new XmlText(input.Prefix)).withName("Prefix");
    bodyNode.addChildNode(node);
  }
  if (input.Tag !== void 0 && input.Tag !== null) {
    var node = serializeAws_restXmlTag(input.Tag, context).withName("Tag");
    bodyNode.addChildNode(node);
  }
  if (input.And !== void 0 && input.And !== null) {
    var node = serializeAws_restXmlIntelligentTieringAndOperator(input.And, context).withName("And");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlInventoryConfiguration = function(input, context) {
  var bodyNode = new XmlNode("InventoryConfiguration");
  if (input.Destination !== void 0 && input.Destination !== null) {
    var node = serializeAws_restXmlInventoryDestination(input.Destination, context).withName("Destination");
    bodyNode.addChildNode(node);
  }
  if (input.IsEnabled !== void 0 && input.IsEnabled !== null) {
    var node = new XmlNode("IsEnabled").addChildNode(new XmlText(String(input.IsEnabled))).withName("IsEnabled");
    bodyNode.addChildNode(node);
  }
  if (input.Filter !== void 0 && input.Filter !== null) {
    var node = serializeAws_restXmlInventoryFilter(input.Filter, context).withName("Filter");
    bodyNode.addChildNode(node);
  }
  if (input.Id !== void 0 && input.Id !== null) {
    var node = new XmlNode("InventoryId").addChildNode(new XmlText(input.Id)).withName("Id");
    bodyNode.addChildNode(node);
  }
  if (input.IncludedObjectVersions !== void 0 && input.IncludedObjectVersions !== null) {
    var node = new XmlNode("InventoryIncludedObjectVersions").addChildNode(new XmlText(input.IncludedObjectVersions)).withName("IncludedObjectVersions");
    bodyNode.addChildNode(node);
  }
  if (input.OptionalFields !== void 0 && input.OptionalFields !== null) {
    var nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields, context);
    var containerNode_2 = new XmlNode("OptionalFields");
    nodes.map(function(node2) {
      containerNode_2.addChildNode(node2);
    });
    bodyNode.addChildNode(containerNode_2);
  }
  if (input.Schedule !== void 0 && input.Schedule !== null) {
    var node = serializeAws_restXmlInventorySchedule(input.Schedule, context).withName("Schedule");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlInventoryDestination = function(input, context) {
  var bodyNode = new XmlNode("InventoryDestination");
  if (input.S3BucketDestination !== void 0 && input.S3BucketDestination !== null) {
    var node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlInventoryEncryption = function(input, context) {
  var bodyNode = new XmlNode("InventoryEncryption");
  if (input.SSES3 !== void 0 && input.SSES3 !== null) {
    var node = serializeAws_restXmlSSES3(input.SSES3, context).withName("SSE-S3");
    bodyNode.addChildNode(node);
  }
  if (input.SSEKMS !== void 0 && input.SSEKMS !== null) {
    var node = serializeAws_restXmlSSEKMS(input.SSEKMS, context).withName("SSE-KMS");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlInventoryFilter = function(input, context) {
  var bodyNode = new XmlNode("InventoryFilter");
  if (input.Prefix !== void 0 && input.Prefix !== null) {
    var node = new XmlNode("Prefix").addChildNode(new XmlText(input.Prefix)).withName("Prefix");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlInventoryOptionalFields = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = new XmlNode("InventoryOptionalField").addChildNode(new XmlText(entry));
    return node.withName("Field");
  });
};
var serializeAws_restXmlInventoryS3BucketDestination = function(input, context) {
  var bodyNode = new XmlNode("InventoryS3BucketDestination");
  if (input.AccountId !== void 0 && input.AccountId !== null) {
    var node = new XmlNode("AccountId").addChildNode(new XmlText(input.AccountId)).withName("AccountId");
    bodyNode.addChildNode(node);
  }
  if (input.Bucket !== void 0 && input.Bucket !== null) {
    var node = new XmlNode("BucketName").addChildNode(new XmlText(input.Bucket)).withName("Bucket");
    bodyNode.addChildNode(node);
  }
  if (input.Format !== void 0 && input.Format !== null) {
    var node = new XmlNode("InventoryFormat").addChildNode(new XmlText(input.Format)).withName("Format");
    bodyNode.addChildNode(node);
  }
  if (input.Prefix !== void 0 && input.Prefix !== null) {
    var node = new XmlNode("Prefix").addChildNode(new XmlText(input.Prefix)).withName("Prefix");
    bodyNode.addChildNode(node);
  }
  if (input.Encryption !== void 0 && input.Encryption !== null) {
    var node = serializeAws_restXmlInventoryEncryption(input.Encryption, context).withName("Encryption");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlInventorySchedule = function(input, context) {
  var bodyNode = new XmlNode("InventorySchedule");
  if (input.Frequency !== void 0 && input.Frequency !== null) {
    var node = new XmlNode("InventoryFrequency").addChildNode(new XmlText(input.Frequency)).withName("Frequency");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlJSONInput = function(input, context) {
  var bodyNode = new XmlNode("JSONInput");
  if (input.Type !== void 0 && input.Type !== null) {
    var node = new XmlNode("JSONType").addChildNode(new XmlText(input.Type)).withName("Type");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlJSONOutput = function(input, context) {
  var bodyNode = new XmlNode("JSONOutput");
  if (input.RecordDelimiter !== void 0 && input.RecordDelimiter !== null) {
    var node = new XmlNode("RecordDelimiter").addChildNode(new XmlText(input.RecordDelimiter)).withName("RecordDelimiter");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlLambdaFunctionConfiguration = function(input, context) {
  var bodyNode = new XmlNode("LambdaFunctionConfiguration");
  if (input.Id !== void 0 && input.Id !== null) {
    var node = new XmlNode("NotificationId").addChildNode(new XmlText(input.Id)).withName("Id");
    bodyNode.addChildNode(node);
  }
  if (input.LambdaFunctionArn !== void 0 && input.LambdaFunctionArn !== null) {
    var node = new XmlNode("LambdaFunctionArn").addChildNode(new XmlText(input.LambdaFunctionArn)).withName("CloudFunction");
    bodyNode.addChildNode(node);
  }
  if (input.Events !== void 0 && input.Events !== null) {
    var nodes = serializeAws_restXmlEventList(input.Events, context);
    nodes.map(function(node2) {
      node2 = node2.withName("Event");
      bodyNode.addChildNode(node2);
    });
  }
  if (input.Filter !== void 0 && input.Filter !== null) {
    var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlLambdaFunctionConfigurationList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlLambdaFunctionConfiguration(entry, context);
    return node.withName("member");
  });
};
var serializeAws_restXmlLifecycleExpiration = function(input, context) {
  var bodyNode = new XmlNode("LifecycleExpiration");
  if (input.Date !== void 0 && input.Date !== null) {
    var node = new XmlNode("Date").addChildNode(new XmlText(input.Date.toISOString().split(".")[0] + "Z")).withName("Date");
    bodyNode.addChildNode(node);
  }
  if (input.Days !== void 0 && input.Days !== null) {
    var node = new XmlNode("Days").addChildNode(new XmlText(String(input.Days))).withName("Days");
    bodyNode.addChildNode(node);
  }
  if (input.ExpiredObjectDeleteMarker !== void 0 && input.ExpiredObjectDeleteMarker !== null) {
    var node = new XmlNode("ExpiredObjectDeleteMarker").addChildNode(new XmlText(String(input.ExpiredObjectDeleteMarker))).withName("ExpiredObjectDeleteMarker");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlLifecycleRule = function(input, context) {
  var bodyNode = new XmlNode("LifecycleRule");
  if (input.Expiration !== void 0 && input.Expiration !== null) {
    var node = serializeAws_restXmlLifecycleExpiration(input.Expiration, context).withName("Expiration");
    bodyNode.addChildNode(node);
  }
  if (input.ID !== void 0 && input.ID !== null) {
    var node = new XmlNode("ID").addChildNode(new XmlText(input.ID)).withName("ID");
    bodyNode.addChildNode(node);
  }
  if (input.Prefix !== void 0 && input.Prefix !== null) {
    var node = new XmlNode("Prefix").addChildNode(new XmlText(input.Prefix)).withName("Prefix");
    bodyNode.addChildNode(node);
  }
  if (input.Filter !== void 0 && input.Filter !== null) {
    var node = serializeAws_restXmlLifecycleRuleFilter(input.Filter, context).withName("Filter");
    bodyNode.addChildNode(node);
  }
  if (input.Status !== void 0 && input.Status !== null) {
    var node = new XmlNode("ExpirationStatus").addChildNode(new XmlText(input.Status)).withName("Status");
    bodyNode.addChildNode(node);
  }
  if (input.Transitions !== void 0 && input.Transitions !== null) {
    var nodes = serializeAws_restXmlTransitionList(input.Transitions, context);
    nodes.map(function(node2) {
      node2 = node2.withName("Transition");
      bodyNode.addChildNode(node2);
    });
  }
  if (input.NoncurrentVersionTransitions !== void 0 && input.NoncurrentVersionTransitions !== null) {
    var nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);
    nodes.map(function(node2) {
      node2 = node2.withName("NoncurrentVersionTransition");
      bodyNode.addChildNode(node2);
    });
  }
  if (input.NoncurrentVersionExpiration !== void 0 && input.NoncurrentVersionExpiration !== null) {
    var node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName("NoncurrentVersionExpiration");
    bodyNode.addChildNode(node);
  }
  if (input.AbortIncompleteMultipartUpload !== void 0 && input.AbortIncompleteMultipartUpload !== null) {
    var node = serializeAws_restXmlAbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName("AbortIncompleteMultipartUpload");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlLifecycleRuleAndOperator = function(input, context) {
  var bodyNode = new XmlNode("LifecycleRuleAndOperator");
  if (input.Prefix !== void 0 && input.Prefix !== null) {
    var node = new XmlNode("Prefix").addChildNode(new XmlText(input.Prefix)).withName("Prefix");
    bodyNode.addChildNode(node);
  }
  if (input.Tags !== void 0 && input.Tags !== null) {
    var nodes = serializeAws_restXmlTagSet(input.Tags, context);
    nodes.map(function(node2) {
      node2 = node2.withName("Tag");
      bodyNode.addChildNode(node2);
    });
  }
  return bodyNode;
};
var serializeAws_restXmlLifecycleRuleFilter = function(input, context) {
  var bodyNode = new XmlNode("LifecycleRuleFilter");
  LifecycleRuleFilter.visit(input, {
    Prefix: function(value) {
      var node = new XmlNode("Prefix").addChildNode(new XmlText(value)).withName("Prefix");
      bodyNode.addChildNode(node);
    },
    Tag: function(value) {
      var node = serializeAws_restXmlTag(value, context).withName("Tag");
      bodyNode.addChildNode(node);
    },
    And: function(value) {
      var node = serializeAws_restXmlLifecycleRuleAndOperator(value, context).withName("And");
      bodyNode.addChildNode(node);
    },
    _: function(name7, value) {
      if (!(value instanceof XmlNode || value instanceof XmlText)) {
        throw new Error("Unable to serialize unknown union members in XML.");
      }
      bodyNode.addChildNode(new XmlNode(name7).addChildNode(value));
    }
  });
  return bodyNode;
};
var serializeAws_restXmlLifecycleRules = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlLifecycleRule(entry, context);
    return node.withName("member");
  });
};
var serializeAws_restXmlLoggingEnabled = function(input, context) {
  var bodyNode = new XmlNode("LoggingEnabled");
  if (input.TargetBucket !== void 0 && input.TargetBucket !== null) {
    var node = new XmlNode("TargetBucket").addChildNode(new XmlText(input.TargetBucket)).withName("TargetBucket");
    bodyNode.addChildNode(node);
  }
  if (input.TargetGrants !== void 0 && input.TargetGrants !== null) {
    var nodes = serializeAws_restXmlTargetGrants(input.TargetGrants, context);
    var containerNode_3 = new XmlNode("TargetGrants");
    nodes.map(function(node2) {
      containerNode_3.addChildNode(node2);
    });
    bodyNode.addChildNode(containerNode_3);
  }
  if (input.TargetPrefix !== void 0 && input.TargetPrefix !== null) {
    var node = new XmlNode("TargetPrefix").addChildNode(new XmlText(input.TargetPrefix)).withName("TargetPrefix");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlMetadataEntry = function(input, context) {
  var bodyNode = new XmlNode("MetadataEntry");
  if (input.Name !== void 0 && input.Name !== null) {
    var node = new XmlNode("MetadataKey").addChildNode(new XmlText(input.Name)).withName("Name");
    bodyNode.addChildNode(node);
  }
  if (input.Value !== void 0 && input.Value !== null) {
    var node = new XmlNode("MetadataValue").addChildNode(new XmlText(input.Value)).withName("Value");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlMetrics = function(input, context) {
  var bodyNode = new XmlNode("Metrics");
  if (input.Status !== void 0 && input.Status !== null) {
    var node = new XmlNode("MetricsStatus").addChildNode(new XmlText(input.Status)).withName("Status");
    bodyNode.addChildNode(node);
  }
  if (input.EventThreshold !== void 0 && input.EventThreshold !== null) {
    var node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold, context).withName("EventThreshold");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlMetricsAndOperator = function(input, context) {
  var bodyNode = new XmlNode("MetricsAndOperator");
  if (input.Prefix !== void 0 && input.Prefix !== null) {
    var node = new XmlNode("Prefix").addChildNode(new XmlText(input.Prefix)).withName("Prefix");
    bodyNode.addChildNode(node);
  }
  if (input.Tags !== void 0 && input.Tags !== null) {
    var nodes = serializeAws_restXmlTagSet(input.Tags, context);
    nodes.map(function(node2) {
      node2 = node2.withName("Tag");
      bodyNode.addChildNode(node2);
    });
  }
  if (input.AccessPointArn !== void 0 && input.AccessPointArn !== null) {
    var node = new XmlNode("AccessPointArn").addChildNode(new XmlText(input.AccessPointArn)).withName("AccessPointArn");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlMetricsConfiguration = function(input, context) {
  var bodyNode = new XmlNode("MetricsConfiguration");
  if (input.Id !== void 0 && input.Id !== null) {
    var node = new XmlNode("MetricsId").addChildNode(new XmlText(input.Id)).withName("Id");
    bodyNode.addChildNode(node);
  }
  if (input.Filter !== void 0 && input.Filter !== null) {
    var node = serializeAws_restXmlMetricsFilter(input.Filter, context).withName("Filter");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlMetricsFilter = function(input, context) {
  var bodyNode = new XmlNode("MetricsFilter");
  MetricsFilter.visit(input, {
    Prefix: function(value) {
      var node = new XmlNode("Prefix").addChildNode(new XmlText(value)).withName("Prefix");
      bodyNode.addChildNode(node);
    },
    Tag: function(value) {
      var node = serializeAws_restXmlTag(value, context).withName("Tag");
      bodyNode.addChildNode(node);
    },
    AccessPointArn: function(value) {
      var node = new XmlNode("AccessPointArn").addChildNode(new XmlText(value)).withName("AccessPointArn");
      bodyNode.addChildNode(node);
    },
    And: function(value) {
      var node = serializeAws_restXmlMetricsAndOperator(value, context).withName("And");
      bodyNode.addChildNode(node);
    },
    _: function(name7, value) {
      if (!(value instanceof XmlNode || value instanceof XmlText)) {
        throw new Error("Unable to serialize unknown union members in XML.");
      }
      bodyNode.addChildNode(new XmlNode(name7).addChildNode(value));
    }
  });
  return bodyNode;
};
var serializeAws_restXmlNoncurrentVersionExpiration = function(input, context) {
  var bodyNode = new XmlNode("NoncurrentVersionExpiration");
  if (input.NoncurrentDays !== void 0 && input.NoncurrentDays !== null) {
    var node = new XmlNode("Days").addChildNode(new XmlText(String(input.NoncurrentDays))).withName("NoncurrentDays");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlNoncurrentVersionTransition = function(input, context) {
  var bodyNode = new XmlNode("NoncurrentVersionTransition");
  if (input.NoncurrentDays !== void 0 && input.NoncurrentDays !== null) {
    var node = new XmlNode("Days").addChildNode(new XmlText(String(input.NoncurrentDays))).withName("NoncurrentDays");
    bodyNode.addChildNode(node);
  }
  if (input.StorageClass !== void 0 && input.StorageClass !== null) {
    var node = new XmlNode("TransitionStorageClass").addChildNode(new XmlText(input.StorageClass)).withName("StorageClass");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlNoncurrentVersionTransitionList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlNoncurrentVersionTransition(entry, context);
    return node.withName("member");
  });
};
var serializeAws_restXmlNotificationConfiguration = function(input, context) {
  var bodyNode = new XmlNode("NotificationConfiguration");
  if (input.TopicConfigurations !== void 0 && input.TopicConfigurations !== null) {
    var nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations, context);
    nodes.map(function(node) {
      node = node.withName("TopicConfiguration");
      bodyNode.addChildNode(node);
    });
  }
  if (input.QueueConfigurations !== void 0 && input.QueueConfigurations !== null) {
    var nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations, context);
    nodes.map(function(node) {
      node = node.withName("QueueConfiguration");
      bodyNode.addChildNode(node);
    });
  }
  if (input.LambdaFunctionConfigurations !== void 0 && input.LambdaFunctionConfigurations !== null) {
    var nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);
    nodes.map(function(node) {
      node = node.withName("CloudFunctionConfiguration");
      bodyNode.addChildNode(node);
    });
  }
  return bodyNode;
};
var serializeAws_restXmlNotificationConfigurationFilter = function(input, context) {
  var bodyNode = new XmlNode("NotificationConfigurationFilter");
  if (input.Key !== void 0 && input.Key !== null) {
    var node = serializeAws_restXmlS3KeyFilter(input.Key, context).withName("S3Key");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlObjectIdentifier = function(input, context) {
  var bodyNode = new XmlNode("ObjectIdentifier");
  if (input.Key !== void 0 && input.Key !== null) {
    var node = new XmlNode("ObjectKey").addChildNode(new XmlText(input.Key)).withName("Key");
    bodyNode.addChildNode(node);
  }
  if (input.VersionId !== void 0 && input.VersionId !== null) {
    var node = new XmlNode("ObjectVersionId").addChildNode(new XmlText(input.VersionId)).withName("VersionId");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlObjectIdentifierList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlObjectIdentifier(entry, context);
    return node.withName("member");
  });
};
var serializeAws_restXmlObjectLockConfiguration = function(input, context) {
  var bodyNode = new XmlNode("ObjectLockConfiguration");
  if (input.ObjectLockEnabled !== void 0 && input.ObjectLockEnabled !== null) {
    var node = new XmlNode("ObjectLockEnabled").addChildNode(new XmlText(input.ObjectLockEnabled)).withName("ObjectLockEnabled");
    bodyNode.addChildNode(node);
  }
  if (input.Rule !== void 0 && input.Rule !== null) {
    var node = serializeAws_restXmlObjectLockRule(input.Rule, context).withName("Rule");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlObjectLockLegalHold = function(input, context) {
  var bodyNode = new XmlNode("ObjectLockLegalHold");
  if (input.Status !== void 0 && input.Status !== null) {
    var node = new XmlNode("ObjectLockLegalHoldStatus").addChildNode(new XmlText(input.Status)).withName("Status");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlObjectLockRetention = function(input, context) {
  var bodyNode = new XmlNode("ObjectLockRetention");
  if (input.Mode !== void 0 && input.Mode !== null) {
    var node = new XmlNode("ObjectLockRetentionMode").addChildNode(new XmlText(input.Mode)).withName("Mode");
    bodyNode.addChildNode(node);
  }
  if (input.RetainUntilDate !== void 0 && input.RetainUntilDate !== null) {
    var node = new XmlNode("Date").addChildNode(new XmlText(input.RetainUntilDate.toISOString().split(".")[0] + "Z")).withName("RetainUntilDate");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlObjectLockRule = function(input, context) {
  var bodyNode = new XmlNode("ObjectLockRule");
  if (input.DefaultRetention !== void 0 && input.DefaultRetention !== null) {
    var node = serializeAws_restXmlDefaultRetention(input.DefaultRetention, context).withName("DefaultRetention");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlOutputLocation = function(input, context) {
  var bodyNode = new XmlNode("OutputLocation");
  if (input.S3 !== void 0 && input.S3 !== null) {
    var node = serializeAws_restXmlS3Location(input.S3, context).withName("S3");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlOutputSerialization = function(input, context) {
  var bodyNode = new XmlNode("OutputSerialization");
  if (input.CSV !== void 0 && input.CSV !== null) {
    var node = serializeAws_restXmlCSVOutput(input.CSV, context).withName("CSV");
    bodyNode.addChildNode(node);
  }
  if (input.JSON !== void 0 && input.JSON !== null) {
    var node = serializeAws_restXmlJSONOutput(input.JSON, context).withName("JSON");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlOwner = function(input, context) {
  var bodyNode = new XmlNode("Owner");
  if (input.DisplayName !== void 0 && input.DisplayName !== null) {
    var node = new XmlNode("DisplayName").addChildNode(new XmlText(input.DisplayName)).withName("DisplayName");
    bodyNode.addChildNode(node);
  }
  if (input.ID !== void 0 && input.ID !== null) {
    var node = new XmlNode("ID").addChildNode(new XmlText(input.ID)).withName("ID");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlOwnershipControls = function(input, context) {
  var bodyNode = new XmlNode("OwnershipControls");
  if (input.Rules !== void 0 && input.Rules !== null) {
    var nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules, context);
    nodes.map(function(node) {
      node = node.withName("Rule");
      bodyNode.addChildNode(node);
    });
  }
  return bodyNode;
};
var serializeAws_restXmlOwnershipControlsRule = function(input, context) {
  var bodyNode = new XmlNode("OwnershipControlsRule");
  if (input.ObjectOwnership !== void 0 && input.ObjectOwnership !== null) {
    var node = new XmlNode("ObjectOwnership").addChildNode(new XmlText(input.ObjectOwnership)).withName("ObjectOwnership");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlOwnershipControlsRules = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlOwnershipControlsRule(entry, context);
    return node.withName("member");
  });
};
var serializeAws_restXmlParquetInput = function(input, context) {
  var bodyNode = new XmlNode("ParquetInput");
  return bodyNode;
};
var serializeAws_restXmlPublicAccessBlockConfiguration = function(input, context) {
  var bodyNode = new XmlNode("PublicAccessBlockConfiguration");
  if (input.BlockPublicAcls !== void 0 && input.BlockPublicAcls !== null) {
    var node = new XmlNode("Setting").addChildNode(new XmlText(String(input.BlockPublicAcls))).withName("BlockPublicAcls");
    bodyNode.addChildNode(node);
  }
  if (input.IgnorePublicAcls !== void 0 && input.IgnorePublicAcls !== null) {
    var node = new XmlNode("Setting").addChildNode(new XmlText(String(input.IgnorePublicAcls))).withName("IgnorePublicAcls");
    bodyNode.addChildNode(node);
  }
  if (input.BlockPublicPolicy !== void 0 && input.BlockPublicPolicy !== null) {
    var node = new XmlNode("Setting").addChildNode(new XmlText(String(input.BlockPublicPolicy))).withName("BlockPublicPolicy");
    bodyNode.addChildNode(node);
  }
  if (input.RestrictPublicBuckets !== void 0 && input.RestrictPublicBuckets !== null) {
    var node = new XmlNode("Setting").addChildNode(new XmlText(String(input.RestrictPublicBuckets))).withName("RestrictPublicBuckets");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlQueueConfiguration = function(input, context) {
  var bodyNode = new XmlNode("QueueConfiguration");
  if (input.Id !== void 0 && input.Id !== null) {
    var node = new XmlNode("NotificationId").addChildNode(new XmlText(input.Id)).withName("Id");
    bodyNode.addChildNode(node);
  }
  if (input.QueueArn !== void 0 && input.QueueArn !== null) {
    var node = new XmlNode("QueueArn").addChildNode(new XmlText(input.QueueArn)).withName("Queue");
    bodyNode.addChildNode(node);
  }
  if (input.Events !== void 0 && input.Events !== null) {
    var nodes = serializeAws_restXmlEventList(input.Events, context);
    nodes.map(function(node2) {
      node2 = node2.withName("Event");
      bodyNode.addChildNode(node2);
    });
  }
  if (input.Filter !== void 0 && input.Filter !== null) {
    var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlQueueConfigurationList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlQueueConfiguration(entry, context);
    return node.withName("member");
  });
};
var serializeAws_restXmlRedirect = function(input, context) {
  var bodyNode = new XmlNode("Redirect");
  if (input.HostName !== void 0 && input.HostName !== null) {
    var node = new XmlNode("HostName").addChildNode(new XmlText(input.HostName)).withName("HostName");
    bodyNode.addChildNode(node);
  }
  if (input.HttpRedirectCode !== void 0 && input.HttpRedirectCode !== null) {
    var node = new XmlNode("HttpRedirectCode").addChildNode(new XmlText(input.HttpRedirectCode)).withName("HttpRedirectCode");
    bodyNode.addChildNode(node);
  }
  if (input.Protocol !== void 0 && input.Protocol !== null) {
    var node = new XmlNode("Protocol").addChildNode(new XmlText(input.Protocol)).withName("Protocol");
    bodyNode.addChildNode(node);
  }
  if (input.ReplaceKeyPrefixWith !== void 0 && input.ReplaceKeyPrefixWith !== null) {
    var node = new XmlNode("ReplaceKeyPrefixWith").addChildNode(new XmlText(input.ReplaceKeyPrefixWith)).withName("ReplaceKeyPrefixWith");
    bodyNode.addChildNode(node);
  }
  if (input.ReplaceKeyWith !== void 0 && input.ReplaceKeyWith !== null) {
    var node = new XmlNode("ReplaceKeyWith").addChildNode(new XmlText(input.ReplaceKeyWith)).withName("ReplaceKeyWith");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlRedirectAllRequestsTo = function(input, context) {
  var bodyNode = new XmlNode("RedirectAllRequestsTo");
  if (input.HostName !== void 0 && input.HostName !== null) {
    var node = new XmlNode("HostName").addChildNode(new XmlText(input.HostName)).withName("HostName");
    bodyNode.addChildNode(node);
  }
  if (input.Protocol !== void 0 && input.Protocol !== null) {
    var node = new XmlNode("Protocol").addChildNode(new XmlText(input.Protocol)).withName("Protocol");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlReplicaModifications = function(input, context) {
  var bodyNode = new XmlNode("ReplicaModifications");
  if (input.Status !== void 0 && input.Status !== null) {
    var node = new XmlNode("ReplicaModificationsStatus").addChildNode(new XmlText(input.Status)).withName("Status");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlReplicationConfiguration = function(input, context) {
  var bodyNode = new XmlNode("ReplicationConfiguration");
  if (input.Role !== void 0 && input.Role !== null) {
    var node = new XmlNode("Role").addChildNode(new XmlText(input.Role)).withName("Role");
    bodyNode.addChildNode(node);
  }
  if (input.Rules !== void 0 && input.Rules !== null) {
    var nodes = serializeAws_restXmlReplicationRules(input.Rules, context);
    nodes.map(function(node2) {
      node2 = node2.withName("Rule");
      bodyNode.addChildNode(node2);
    });
  }
  return bodyNode;
};
var serializeAws_restXmlReplicationRule = function(input, context) {
  var bodyNode = new XmlNode("ReplicationRule");
  if (input.ID !== void 0 && input.ID !== null) {
    var node = new XmlNode("ID").addChildNode(new XmlText(input.ID)).withName("ID");
    bodyNode.addChildNode(node);
  }
  if (input.Priority !== void 0 && input.Priority !== null) {
    var node = new XmlNode("Priority").addChildNode(new XmlText(String(input.Priority))).withName("Priority");
    bodyNode.addChildNode(node);
  }
  if (input.Prefix !== void 0 && input.Prefix !== null) {
    var node = new XmlNode("Prefix").addChildNode(new XmlText(input.Prefix)).withName("Prefix");
    bodyNode.addChildNode(node);
  }
  if (input.Filter !== void 0 && input.Filter !== null) {
    var node = serializeAws_restXmlReplicationRuleFilter(input.Filter, context).withName("Filter");
    bodyNode.addChildNode(node);
  }
  if (input.Status !== void 0 && input.Status !== null) {
    var node = new XmlNode("ReplicationRuleStatus").addChildNode(new XmlText(input.Status)).withName("Status");
    bodyNode.addChildNode(node);
  }
  if (input.SourceSelectionCriteria !== void 0 && input.SourceSelectionCriteria !== null) {
    var node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria, context).withName("SourceSelectionCriteria");
    bodyNode.addChildNode(node);
  }
  if (input.ExistingObjectReplication !== void 0 && input.ExistingObjectReplication !== null) {
    var node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication, context).withName("ExistingObjectReplication");
    bodyNode.addChildNode(node);
  }
  if (input.Destination !== void 0 && input.Destination !== null) {
    var node = serializeAws_restXmlDestination(input.Destination, context).withName("Destination");
    bodyNode.addChildNode(node);
  }
  if (input.DeleteMarkerReplication !== void 0 && input.DeleteMarkerReplication !== null) {
    var node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication, context).withName("DeleteMarkerReplication");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlReplicationRuleAndOperator = function(input, context) {
  var bodyNode = new XmlNode("ReplicationRuleAndOperator");
  if (input.Prefix !== void 0 && input.Prefix !== null) {
    var node = new XmlNode("Prefix").addChildNode(new XmlText(input.Prefix)).withName("Prefix");
    bodyNode.addChildNode(node);
  }
  if (input.Tags !== void 0 && input.Tags !== null) {
    var nodes = serializeAws_restXmlTagSet(input.Tags, context);
    nodes.map(function(node2) {
      node2 = node2.withName("Tag");
      bodyNode.addChildNode(node2);
    });
  }
  return bodyNode;
};
var serializeAws_restXmlReplicationRuleFilter = function(input, context) {
  var bodyNode = new XmlNode("ReplicationRuleFilter");
  ReplicationRuleFilter.visit(input, {
    Prefix: function(value) {
      var node = new XmlNode("Prefix").addChildNode(new XmlText(value)).withName("Prefix");
      bodyNode.addChildNode(node);
    },
    Tag: function(value) {
      var node = serializeAws_restXmlTag(value, context).withName("Tag");
      bodyNode.addChildNode(node);
    },
    And: function(value) {
      var node = serializeAws_restXmlReplicationRuleAndOperator(value, context).withName("And");
      bodyNode.addChildNode(node);
    },
    _: function(name7, value) {
      if (!(value instanceof XmlNode || value instanceof XmlText)) {
        throw new Error("Unable to serialize unknown union members in XML.");
      }
      bodyNode.addChildNode(new XmlNode(name7).addChildNode(value));
    }
  });
  return bodyNode;
};
var serializeAws_restXmlReplicationRules = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlReplicationRule(entry, context);
    return node.withName("member");
  });
};
var serializeAws_restXmlReplicationTime = function(input, context) {
  var bodyNode = new XmlNode("ReplicationTime");
  if (input.Status !== void 0 && input.Status !== null) {
    var node = new XmlNode("ReplicationTimeStatus").addChildNode(new XmlText(input.Status)).withName("Status");
    bodyNode.addChildNode(node);
  }
  if (input.Time !== void 0 && input.Time !== null) {
    var node = serializeAws_restXmlReplicationTimeValue(input.Time, context).withName("Time");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlReplicationTimeValue = function(input, context) {
  var bodyNode = new XmlNode("ReplicationTimeValue");
  if (input.Minutes !== void 0 && input.Minutes !== null) {
    var node = new XmlNode("Minutes").addChildNode(new XmlText(String(input.Minutes))).withName("Minutes");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlRequestPaymentConfiguration = function(input, context) {
  var bodyNode = new XmlNode("RequestPaymentConfiguration");
  if (input.Payer !== void 0 && input.Payer !== null) {
    var node = new XmlNode("Payer").addChildNode(new XmlText(input.Payer)).withName("Payer");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlRequestProgress = function(input, context) {
  var bodyNode = new XmlNode("RequestProgress");
  if (input.Enabled !== void 0 && input.Enabled !== null) {
    var node = new XmlNode("EnableRequestProgress").addChildNode(new XmlText(String(input.Enabled))).withName("Enabled");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlRestoreRequest = function(input, context) {
  var bodyNode = new XmlNode("RestoreRequest");
  if (input.Days !== void 0 && input.Days !== null) {
    var node = new XmlNode("Days").addChildNode(new XmlText(String(input.Days))).withName("Days");
    bodyNode.addChildNode(node);
  }
  if (input.GlacierJobParameters !== void 0 && input.GlacierJobParameters !== null) {
    var node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters, context).withName("GlacierJobParameters");
    bodyNode.addChildNode(node);
  }
  if (input.Type !== void 0 && input.Type !== null) {
    var node = new XmlNode("RestoreRequestType").addChildNode(new XmlText(input.Type)).withName("Type");
    bodyNode.addChildNode(node);
  }
  if (input.Tier !== void 0 && input.Tier !== null) {
    var node = new XmlNode("Tier").addChildNode(new XmlText(input.Tier)).withName("Tier");
    bodyNode.addChildNode(node);
  }
  if (input.Description !== void 0 && input.Description !== null) {
    var node = new XmlNode("Description").addChildNode(new XmlText(input.Description)).withName("Description");
    bodyNode.addChildNode(node);
  }
  if (input.SelectParameters !== void 0 && input.SelectParameters !== null) {
    var node = serializeAws_restXmlSelectParameters(input.SelectParameters, context).withName("SelectParameters");
    bodyNode.addChildNode(node);
  }
  if (input.OutputLocation !== void 0 && input.OutputLocation !== null) {
    var node = serializeAws_restXmlOutputLocation(input.OutputLocation, context).withName("OutputLocation");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlRoutingRule = function(input, context) {
  var bodyNode = new XmlNode("RoutingRule");
  if (input.Condition !== void 0 && input.Condition !== null) {
    var node = serializeAws_restXmlCondition(input.Condition, context).withName("Condition");
    bodyNode.addChildNode(node);
  }
  if (input.Redirect !== void 0 && input.Redirect !== null) {
    var node = serializeAws_restXmlRedirect(input.Redirect, context).withName("Redirect");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlRoutingRules = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlRoutingRule(entry, context);
    return node.withName("RoutingRule");
  });
};
var serializeAws_restXmlS3KeyFilter = function(input, context) {
  var bodyNode = new XmlNode("S3KeyFilter");
  if (input.FilterRules !== void 0 && input.FilterRules !== null) {
    var nodes = serializeAws_restXmlFilterRuleList(input.FilterRules, context);
    nodes.map(function(node) {
      node = node.withName("FilterRule");
      bodyNode.addChildNode(node);
    });
  }
  return bodyNode;
};
var serializeAws_restXmlS3Location = function(input, context) {
  var bodyNode = new XmlNode("S3Location");
  if (input.BucketName !== void 0 && input.BucketName !== null) {
    var node = new XmlNode("BucketName").addChildNode(new XmlText(input.BucketName)).withName("BucketName");
    bodyNode.addChildNode(node);
  }
  if (input.Prefix !== void 0 && input.Prefix !== null) {
    var node = new XmlNode("LocationPrefix").addChildNode(new XmlText(input.Prefix)).withName("Prefix");
    bodyNode.addChildNode(node);
  }
  if (input.Encryption !== void 0 && input.Encryption !== null) {
    var node = serializeAws_restXmlEncryption(input.Encryption, context).withName("Encryption");
    bodyNode.addChildNode(node);
  }
  if (input.CannedACL !== void 0 && input.CannedACL !== null) {
    var node = new XmlNode("ObjectCannedACL").addChildNode(new XmlText(input.CannedACL)).withName("CannedACL");
    bodyNode.addChildNode(node);
  }
  if (input.AccessControlList !== void 0 && input.AccessControlList !== null) {
    var nodes = serializeAws_restXmlGrants(input.AccessControlList, context);
    var containerNode_4 = new XmlNode("AccessControlList");
    nodes.map(function(node2) {
      containerNode_4.addChildNode(node2);
    });
    bodyNode.addChildNode(containerNode_4);
  }
  if (input.Tagging !== void 0 && input.Tagging !== null) {
    var node = serializeAws_restXmlTagging(input.Tagging, context).withName("Tagging");
    bodyNode.addChildNode(node);
  }
  if (input.UserMetadata !== void 0 && input.UserMetadata !== null) {
    var nodes = serializeAws_restXmlUserMetadata(input.UserMetadata, context);
    var containerNode_5 = new XmlNode("UserMetadata");
    nodes.map(function(node2) {
      containerNode_5.addChildNode(node2);
    });
    bodyNode.addChildNode(containerNode_5);
  }
  if (input.StorageClass !== void 0 && input.StorageClass !== null) {
    var node = new XmlNode("StorageClass").addChildNode(new XmlText(input.StorageClass)).withName("StorageClass");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlScanRange = function(input, context) {
  var bodyNode = new XmlNode("ScanRange");
  if (input.Start !== void 0 && input.Start !== null) {
    var node = new XmlNode("Start").addChildNode(new XmlText(String(input.Start))).withName("Start");
    bodyNode.addChildNode(node);
  }
  if (input.End !== void 0 && input.End !== null) {
    var node = new XmlNode("End").addChildNode(new XmlText(String(input.End))).withName("End");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlSelectParameters = function(input, context) {
  var bodyNode = new XmlNode("SelectParameters");
  if (input.InputSerialization !== void 0 && input.InputSerialization !== null) {
    var node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName("InputSerialization");
    bodyNode.addChildNode(node);
  }
  if (input.ExpressionType !== void 0 && input.ExpressionType !== null) {
    var node = new XmlNode("ExpressionType").addChildNode(new XmlText(input.ExpressionType)).withName("ExpressionType");
    bodyNode.addChildNode(node);
  }
  if (input.Expression !== void 0 && input.Expression !== null) {
    var node = new XmlNode("Expression").addChildNode(new XmlText(input.Expression)).withName("Expression");
    bodyNode.addChildNode(node);
  }
  if (input.OutputSerialization !== void 0 && input.OutputSerialization !== null) {
    var node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlServerSideEncryptionByDefault = function(input, context) {
  var bodyNode = new XmlNode("ServerSideEncryptionByDefault");
  if (input.SSEAlgorithm !== void 0 && input.SSEAlgorithm !== null) {
    var node = new XmlNode("ServerSideEncryption").addChildNode(new XmlText(input.SSEAlgorithm)).withName("SSEAlgorithm");
    bodyNode.addChildNode(node);
  }
  if (input.KMSMasterKeyID !== void 0 && input.KMSMasterKeyID !== null) {
    var node = new XmlNode("SSEKMSKeyId").addChildNode(new XmlText(input.KMSMasterKeyID)).withName("KMSMasterKeyID");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlServerSideEncryptionConfiguration = function(input, context) {
  var bodyNode = new XmlNode("ServerSideEncryptionConfiguration");
  if (input.Rules !== void 0 && input.Rules !== null) {
    var nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules, context);
    nodes.map(function(node) {
      node = node.withName("Rule");
      bodyNode.addChildNode(node);
    });
  }
  return bodyNode;
};
var serializeAws_restXmlServerSideEncryptionRule = function(input, context) {
  var bodyNode = new XmlNode("ServerSideEncryptionRule");
  if (input.ApplyServerSideEncryptionByDefault !== void 0 && input.ApplyServerSideEncryptionByDefault !== null) {
    var node = serializeAws_restXmlServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName("ApplyServerSideEncryptionByDefault");
    bodyNode.addChildNode(node);
  }
  if (input.BucketKeyEnabled !== void 0 && input.BucketKeyEnabled !== null) {
    var node = new XmlNode("BucketKeyEnabled").addChildNode(new XmlText(String(input.BucketKeyEnabled))).withName("BucketKeyEnabled");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlServerSideEncryptionRules = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlServerSideEncryptionRule(entry, context);
    return node.withName("member");
  });
};
var serializeAws_restXmlSourceSelectionCriteria = function(input, context) {
  var bodyNode = new XmlNode("SourceSelectionCriteria");
  if (input.SseKmsEncryptedObjects !== void 0 && input.SseKmsEncryptedObjects !== null) {
    var node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName("SseKmsEncryptedObjects");
    bodyNode.addChildNode(node);
  }
  if (input.ReplicaModifications !== void 0 && input.ReplicaModifications !== null) {
    var node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications, context).withName("ReplicaModifications");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlSSEKMS = function(input, context) {
  var bodyNode = new XmlNode("SSE-KMS");
  if (input.KeyId !== void 0 && input.KeyId !== null) {
    var node = new XmlNode("SSEKMSKeyId").addChildNode(new XmlText(input.KeyId)).withName("KeyId");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlSseKmsEncryptedObjects = function(input, context) {
  var bodyNode = new XmlNode("SseKmsEncryptedObjects");
  if (input.Status !== void 0 && input.Status !== null) {
    var node = new XmlNode("SseKmsEncryptedObjectsStatus").addChildNode(new XmlText(input.Status)).withName("Status");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlSSES3 = function(input, context) {
  var bodyNode = new XmlNode("SSE-S3");
  return bodyNode;
};
var serializeAws_restXmlStorageClassAnalysis = function(input, context) {
  var bodyNode = new XmlNode("StorageClassAnalysis");
  if (input.DataExport !== void 0 && input.DataExport !== null) {
    var node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport, context).withName("DataExport");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlStorageClassAnalysisDataExport = function(input, context) {
  var bodyNode = new XmlNode("StorageClassAnalysisDataExport");
  if (input.OutputSchemaVersion !== void 0 && input.OutputSchemaVersion !== null) {
    var node = new XmlNode("StorageClassAnalysisSchemaVersion").addChildNode(new XmlText(input.OutputSchemaVersion)).withName("OutputSchemaVersion");
    bodyNode.addChildNode(node);
  }
  if (input.Destination !== void 0 && input.Destination !== null) {
    var node = serializeAws_restXmlAnalyticsExportDestination(input.Destination, context).withName("Destination");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlTag = function(input, context) {
  var bodyNode = new XmlNode("Tag");
  if (input.Key !== void 0 && input.Key !== null) {
    var node = new XmlNode("ObjectKey").addChildNode(new XmlText(input.Key)).withName("Key");
    bodyNode.addChildNode(node);
  }
  if (input.Value !== void 0 && input.Value !== null) {
    var node = new XmlNode("Value").addChildNode(new XmlText(input.Value)).withName("Value");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlTagging = function(input, context) {
  var bodyNode = new XmlNode("Tagging");
  if (input.TagSet !== void 0 && input.TagSet !== null) {
    var nodes = serializeAws_restXmlTagSet(input.TagSet, context);
    var containerNode_6 = new XmlNode("TagSet");
    nodes.map(function(node) {
      containerNode_6.addChildNode(node);
    });
    bodyNode.addChildNode(containerNode_6);
  }
  return bodyNode;
};
var serializeAws_restXmlTagSet = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlTag(entry, context);
    return node.withName("Tag");
  });
};
var serializeAws_restXmlTargetGrant = function(input, context) {
  var bodyNode = new XmlNode("TargetGrant");
  if (input.Grantee !== void 0 && input.Grantee !== null) {
    var node = serializeAws_restXmlGrantee(input.Grantee, context).withName("Grantee");
    node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
    bodyNode.addChildNode(node);
  }
  if (input.Permission !== void 0 && input.Permission !== null) {
    var node = new XmlNode("BucketLogsPermission").addChildNode(new XmlText(input.Permission)).withName("Permission");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlTargetGrants = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlTargetGrant(entry, context);
    return node.withName("Grant");
  });
};
var serializeAws_restXmlTiering = function(input, context) {
  var bodyNode = new XmlNode("Tiering");
  if (input.Days !== void 0 && input.Days !== null) {
    var node = new XmlNode("IntelligentTieringDays").addChildNode(new XmlText(String(input.Days))).withName("Days");
    bodyNode.addChildNode(node);
  }
  if (input.AccessTier !== void 0 && input.AccessTier !== null) {
    var node = new XmlNode("IntelligentTieringAccessTier").addChildNode(new XmlText(input.AccessTier)).withName("AccessTier");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlTieringList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlTiering(entry, context);
    return node.withName("member");
  });
};
var serializeAws_restXmlTopicConfiguration = function(input, context) {
  var bodyNode = new XmlNode("TopicConfiguration");
  if (input.Id !== void 0 && input.Id !== null) {
    var node = new XmlNode("NotificationId").addChildNode(new XmlText(input.Id)).withName("Id");
    bodyNode.addChildNode(node);
  }
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    var node = new XmlNode("TopicArn").addChildNode(new XmlText(input.TopicArn)).withName("Topic");
    bodyNode.addChildNode(node);
  }
  if (input.Events !== void 0 && input.Events !== null) {
    var nodes = serializeAws_restXmlEventList(input.Events, context);
    nodes.map(function(node2) {
      node2 = node2.withName("Event");
      bodyNode.addChildNode(node2);
    });
  }
  if (input.Filter !== void 0 && input.Filter !== null) {
    var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlTopicConfigurationList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlTopicConfiguration(entry, context);
    return node.withName("member");
  });
};
var serializeAws_restXmlTransition = function(input, context) {
  var bodyNode = new XmlNode("Transition");
  if (input.Date !== void 0 && input.Date !== null) {
    var node = new XmlNode("Date").addChildNode(new XmlText(input.Date.toISOString().split(".")[0] + "Z")).withName("Date");
    bodyNode.addChildNode(node);
  }
  if (input.Days !== void 0 && input.Days !== null) {
    var node = new XmlNode("Days").addChildNode(new XmlText(String(input.Days))).withName("Days");
    bodyNode.addChildNode(node);
  }
  if (input.StorageClass !== void 0 && input.StorageClass !== null) {
    var node = new XmlNode("TransitionStorageClass").addChildNode(new XmlText(input.StorageClass)).withName("StorageClass");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlTransitionList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlTransition(entry, context);
    return node.withName("member");
  });
};
var serializeAws_restXmlUserMetadata = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    var node = serializeAws_restXmlMetadataEntry(entry, context);
    return node.withName("MetadataEntry");
  });
};
var serializeAws_restXmlVersioningConfiguration = function(input, context) {
  var bodyNode = new XmlNode("VersioningConfiguration");
  if (input.MFADelete !== void 0 && input.MFADelete !== null) {
    var node = new XmlNode("MFADelete").addChildNode(new XmlText(input.MFADelete)).withName("MfaDelete");
    bodyNode.addChildNode(node);
  }
  if (input.Status !== void 0 && input.Status !== null) {
    var node = new XmlNode("BucketVersioningStatus").addChildNode(new XmlText(input.Status)).withName("Status");
    bodyNode.addChildNode(node);
  }
  return bodyNode;
};
var serializeAws_restXmlWebsiteConfiguration = function(input, context) {
  var bodyNode = new XmlNode("WebsiteConfiguration");
  if (input.ErrorDocument !== void 0 && input.ErrorDocument !== null) {
    var node = serializeAws_restXmlErrorDocument(input.ErrorDocument, context).withName("ErrorDocument");
    bodyNode.addChildNode(node);
  }
  if (input.IndexDocument !== void 0 && input.IndexDocument !== null) {
    var node = serializeAws_restXmlIndexDocument(input.IndexDocument, context).withName("IndexDocument");
    bodyNode.addChildNode(node);
  }
  if (input.RedirectAllRequestsTo !== void 0 && input.RedirectAllRequestsTo !== null) {
    var node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName("RedirectAllRequestsTo");
    bodyNode.addChildNode(node);
  }
  if (input.RoutingRules !== void 0 && input.RoutingRules !== null) {
    var nodes = serializeAws_restXmlRoutingRules(input.RoutingRules, context);
    var containerNode_7 = new XmlNode("RoutingRules");
    nodes.map(function(node2) {
      containerNode_7.addChildNode(node2);
    });
    bodyNode.addChildNode(containerNode_7);
  }
  return bodyNode;
};
var deserializeAws_restXmlAbortIncompleteMultipartUpload = function(output, context) {
  var contents = {
    DaysAfterInitiation: void 0
  };
  if (output["DaysAfterInitiation"] !== void 0) {
    contents.DaysAfterInitiation = strictParseInt32(output["DaysAfterInitiation"]);
  }
  return contents;
};
var deserializeAws_restXmlAccessControlTranslation = function(output, context) {
  var contents = {
    Owner: void 0
  };
  if (output["Owner"] !== void 0) {
    contents.Owner = expectString(output["Owner"]);
  }
  return contents;
};
var deserializeAws_restXmlAllowedHeaders = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_restXmlAllowedMethods = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_restXmlAllowedOrigins = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_restXmlAnalyticsAndOperator = function(output, context) {
  var contents = {
    Prefix: void 0,
    Tags: void 0
  };
  if (output["Prefix"] !== void 0) {
    contents.Prefix = expectString(output["Prefix"]);
  }
  if (output.Tag === "") {
    contents.Tags = [];
  }
  if (output["Tag"] !== void 0) {
    contents.Tags = deserializeAws_restXmlTagSet(getArrayIfSingleItem(output["Tag"]), context);
  }
  return contents;
};
var deserializeAws_restXmlAnalyticsConfiguration = function(output, context) {
  var contents = {
    Id: void 0,
    Filter: void 0,
    StorageClassAnalysis: void 0
  };
  if (output["Id"] !== void 0) {
    contents.Id = expectString(output["Id"]);
  }
  if (output["Filter"] !== void 0) {
    contents.Filter = deserializeAws_restXmlAnalyticsFilter(expectUnion(output["Filter"]), context);
  }
  if (output["StorageClassAnalysis"] !== void 0) {
    contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output["StorageClassAnalysis"], context);
  }
  return contents;
};
var deserializeAws_restXmlAnalyticsConfigurationList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlAnalyticsConfiguration(entry, context);
  });
};
var deserializeAws_restXmlAnalyticsExportDestination = function(output, context) {
  var contents = {
    S3BucketDestination: void 0
  };
  if (output["S3BucketDestination"] !== void 0) {
    contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(output["S3BucketDestination"], context);
  }
  return contents;
};
var deserializeAws_restXmlAnalyticsFilter = function(output, context) {
  if (output["Prefix"] !== void 0) {
    return {
      Prefix: expectString(output["Prefix"])
    };
  }
  if (output["Tag"] !== void 0) {
    return {
      Tag: deserializeAws_restXmlTag(output["Tag"], context)
    };
  }
  if (output["And"] !== void 0) {
    return {
      And: deserializeAws_restXmlAnalyticsAndOperator(output["And"], context)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var deserializeAws_restXmlAnalyticsS3BucketDestination = function(output, context) {
  var contents = {
    Format: void 0,
    BucketAccountId: void 0,
    Bucket: void 0,
    Prefix: void 0
  };
  if (output["Format"] !== void 0) {
    contents.Format = expectString(output["Format"]);
  }
  if (output["BucketAccountId"] !== void 0) {
    contents.BucketAccountId = expectString(output["BucketAccountId"]);
  }
  if (output["Bucket"] !== void 0) {
    contents.Bucket = expectString(output["Bucket"]);
  }
  if (output["Prefix"] !== void 0) {
    contents.Prefix = expectString(output["Prefix"]);
  }
  return contents;
};
var deserializeAws_restXmlBucket = function(output, context) {
  var contents = {
    Name: void 0,
    CreationDate: void 0
  };
  if (output["Name"] !== void 0) {
    contents.Name = expectString(output["Name"]);
  }
  if (output["CreationDate"] !== void 0) {
    contents.CreationDate = expectNonNull(parseRfc3339DateTime(output["CreationDate"]));
  }
  return contents;
};
var deserializeAws_restXmlBuckets = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlBucket(entry, context);
  });
};
var deserializeAws_restXmlCommonPrefix = function(output, context) {
  var contents = {
    Prefix: void 0
  };
  if (output["Prefix"] !== void 0) {
    contents.Prefix = expectString(output["Prefix"]);
  }
  return contents;
};
var deserializeAws_restXmlCommonPrefixList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlCommonPrefix(entry, context);
  });
};
var deserializeAws_restXmlCondition = function(output, context) {
  var contents = {
    HttpErrorCodeReturnedEquals: void 0,
    KeyPrefixEquals: void 0
  };
  if (output["HttpErrorCodeReturnedEquals"] !== void 0) {
    contents.HttpErrorCodeReturnedEquals = expectString(output["HttpErrorCodeReturnedEquals"]);
  }
  if (output["KeyPrefixEquals"] !== void 0) {
    contents.KeyPrefixEquals = expectString(output["KeyPrefixEquals"]);
  }
  return contents;
};
var deserializeAws_restXmlCopyObjectResult = function(output, context) {
  var contents = {
    ETag: void 0,
    LastModified: void 0
  };
  if (output["ETag"] !== void 0) {
    contents.ETag = expectString(output["ETag"]);
  }
  if (output["LastModified"] !== void 0) {
    contents.LastModified = expectNonNull(parseRfc3339DateTime(output["LastModified"]));
  }
  return contents;
};
var deserializeAws_restXmlCopyPartResult = function(output, context) {
  var contents = {
    ETag: void 0,
    LastModified: void 0
  };
  if (output["ETag"] !== void 0) {
    contents.ETag = expectString(output["ETag"]);
  }
  if (output["LastModified"] !== void 0) {
    contents.LastModified = expectNonNull(parseRfc3339DateTime(output["LastModified"]));
  }
  return contents;
};
var deserializeAws_restXmlCORSRule = function(output, context) {
  var contents = {
    ID: void 0,
    AllowedHeaders: void 0,
    AllowedMethods: void 0,
    AllowedOrigins: void 0,
    ExposeHeaders: void 0,
    MaxAgeSeconds: void 0
  };
  if (output["ID"] !== void 0) {
    contents.ID = expectString(output["ID"]);
  }
  if (output.AllowedHeader === "") {
    contents.AllowedHeaders = [];
  }
  if (output["AllowedHeader"] !== void 0) {
    contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders(getArrayIfSingleItem(output["AllowedHeader"]), context);
  }
  if (output.AllowedMethod === "") {
    contents.AllowedMethods = [];
  }
  if (output["AllowedMethod"] !== void 0) {
    contents.AllowedMethods = deserializeAws_restXmlAllowedMethods(getArrayIfSingleItem(output["AllowedMethod"]), context);
  }
  if (output.AllowedOrigin === "") {
    contents.AllowedOrigins = [];
  }
  if (output["AllowedOrigin"] !== void 0) {
    contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins(getArrayIfSingleItem(output["AllowedOrigin"]), context);
  }
  if (output.ExposeHeader === "") {
    contents.ExposeHeaders = [];
  }
  if (output["ExposeHeader"] !== void 0) {
    contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders(getArrayIfSingleItem(output["ExposeHeader"]), context);
  }
  if (output["MaxAgeSeconds"] !== void 0) {
    contents.MaxAgeSeconds = strictParseInt32(output["MaxAgeSeconds"]);
  }
  return contents;
};
var deserializeAws_restXmlCORSRules = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlCORSRule(entry, context);
  });
};
var deserializeAws_restXmlDefaultRetention = function(output, context) {
  var contents = {
    Mode: void 0,
    Days: void 0,
    Years: void 0
  };
  if (output["Mode"] !== void 0) {
    contents.Mode = expectString(output["Mode"]);
  }
  if (output["Days"] !== void 0) {
    contents.Days = strictParseInt32(output["Days"]);
  }
  if (output["Years"] !== void 0) {
    contents.Years = strictParseInt32(output["Years"]);
  }
  return contents;
};
var deserializeAws_restXmlDeletedObject = function(output, context) {
  var contents = {
    Key: void 0,
    VersionId: void 0,
    DeleteMarker: void 0,
    DeleteMarkerVersionId: void 0
  };
  if (output["Key"] !== void 0) {
    contents.Key = expectString(output["Key"]);
  }
  if (output["VersionId"] !== void 0) {
    contents.VersionId = expectString(output["VersionId"]);
  }
  if (output["DeleteMarker"] !== void 0) {
    contents.DeleteMarker = parseBoolean(output["DeleteMarker"]);
  }
  if (output["DeleteMarkerVersionId"] !== void 0) {
    contents.DeleteMarkerVersionId = expectString(output["DeleteMarkerVersionId"]);
  }
  return contents;
};
var deserializeAws_restXmlDeletedObjects = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlDeletedObject(entry, context);
  });
};
var deserializeAws_restXmlDeleteMarkerEntry = function(output, context) {
  var contents = {
    Owner: void 0,
    Key: void 0,
    VersionId: void 0,
    IsLatest: void 0,
    LastModified: void 0
  };
  if (output["Owner"] !== void 0) {
    contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
  }
  if (output["Key"] !== void 0) {
    contents.Key = expectString(output["Key"]);
  }
  if (output["VersionId"] !== void 0) {
    contents.VersionId = expectString(output["VersionId"]);
  }
  if (output["IsLatest"] !== void 0) {
    contents.IsLatest = parseBoolean(output["IsLatest"]);
  }
  if (output["LastModified"] !== void 0) {
    contents.LastModified = expectNonNull(parseRfc3339DateTime(output["LastModified"]));
  }
  return contents;
};
var deserializeAws_restXmlDeleteMarkerReplication = function(output, context) {
  var contents = {
    Status: void 0
  };
  if (output["Status"] !== void 0) {
    contents.Status = expectString(output["Status"]);
  }
  return contents;
};
var deserializeAws_restXmlDeleteMarkers = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlDeleteMarkerEntry(entry, context);
  });
};
var deserializeAws_restXmlDestination = function(output, context) {
  var contents = {
    Bucket: void 0,
    Account: void 0,
    StorageClass: void 0,
    AccessControlTranslation: void 0,
    EncryptionConfiguration: void 0,
    ReplicationTime: void 0,
    Metrics: void 0
  };
  if (output["Bucket"] !== void 0) {
    contents.Bucket = expectString(output["Bucket"]);
  }
  if (output["Account"] !== void 0) {
    contents.Account = expectString(output["Account"]);
  }
  if (output["StorageClass"] !== void 0) {
    contents.StorageClass = expectString(output["StorageClass"]);
  }
  if (output["AccessControlTranslation"] !== void 0) {
    contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(output["AccessControlTranslation"], context);
  }
  if (output["EncryptionConfiguration"] !== void 0) {
    contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(output["EncryptionConfiguration"], context);
  }
  if (output["ReplicationTime"] !== void 0) {
    contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output["ReplicationTime"], context);
  }
  if (output["Metrics"] !== void 0) {
    contents.Metrics = deserializeAws_restXmlMetrics(output["Metrics"], context);
  }
  return contents;
};
var deserializeAws_restXmlEncryptionConfiguration = function(output, context) {
  var contents = {
    ReplicaKmsKeyID: void 0
  };
  if (output["ReplicaKmsKeyID"] !== void 0) {
    contents.ReplicaKmsKeyID = expectString(output["ReplicaKmsKeyID"]);
  }
  return contents;
};
var deserializeAws_restXml_Error = function(output, context) {
  var contents = {
    Key: void 0,
    VersionId: void 0,
    Code: void 0,
    Message: void 0
  };
  if (output["Key"] !== void 0) {
    contents.Key = expectString(output["Key"]);
  }
  if (output["VersionId"] !== void 0) {
    contents.VersionId = expectString(output["VersionId"]);
  }
  if (output["Code"] !== void 0) {
    contents.Code = expectString(output["Code"]);
  }
  if (output["Message"] !== void 0) {
    contents.Message = expectString(output["Message"]);
  }
  return contents;
};
var deserializeAws_restXmlErrorDocument = function(output, context) {
  var contents = {
    Key: void 0
  };
  if (output["Key"] !== void 0) {
    contents.Key = expectString(output["Key"]);
  }
  return contents;
};
var deserializeAws_restXmlErrors = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXml_Error(entry, context);
  });
};
var deserializeAws_restXmlEventList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_restXmlExistingObjectReplication = function(output, context) {
  var contents = {
    Status: void 0
  };
  if (output["Status"] !== void 0) {
    contents.Status = expectString(output["Status"]);
  }
  return contents;
};
var deserializeAws_restXmlExposeHeaders = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_restXmlFilterRule = function(output, context) {
  var contents = {
    Name: void 0,
    Value: void 0
  };
  if (output["Name"] !== void 0) {
    contents.Name = expectString(output["Name"]);
  }
  if (output["Value"] !== void 0) {
    contents.Value = expectString(output["Value"]);
  }
  return contents;
};
var deserializeAws_restXmlFilterRuleList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlFilterRule(entry, context);
  });
};
var deserializeAws_restXmlGrant = function(output, context) {
  var contents = {
    Grantee: void 0,
    Permission: void 0
  };
  if (output["Grantee"] !== void 0) {
    contents.Grantee = deserializeAws_restXmlGrantee(output["Grantee"], context);
  }
  if (output["Permission"] !== void 0) {
    contents.Permission = expectString(output["Permission"]);
  }
  return contents;
};
var deserializeAws_restXmlGrantee = function(output, context) {
  var contents = {
    DisplayName: void 0,
    EmailAddress: void 0,
    ID: void 0,
    URI: void 0,
    Type: void 0
  };
  if (output["DisplayName"] !== void 0) {
    contents.DisplayName = expectString(output["DisplayName"]);
  }
  if (output["EmailAddress"] !== void 0) {
    contents.EmailAddress = expectString(output["EmailAddress"]);
  }
  if (output["ID"] !== void 0) {
    contents.ID = expectString(output["ID"]);
  }
  if (output["URI"] !== void 0) {
    contents.URI = expectString(output["URI"]);
  }
  if (output["xsi:type"] !== void 0) {
    contents.Type = expectString(output["xsi:type"]);
  }
  return contents;
};
var deserializeAws_restXmlGrants = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlGrant(entry, context);
  });
};
var deserializeAws_restXmlIndexDocument = function(output, context) {
  var contents = {
    Suffix: void 0
  };
  if (output["Suffix"] !== void 0) {
    contents.Suffix = expectString(output["Suffix"]);
  }
  return contents;
};
var deserializeAws_restXmlInitiator = function(output, context) {
  var contents = {
    ID: void 0,
    DisplayName: void 0
  };
  if (output["ID"] !== void 0) {
    contents.ID = expectString(output["ID"]);
  }
  if (output["DisplayName"] !== void 0) {
    contents.DisplayName = expectString(output["DisplayName"]);
  }
  return contents;
};
var deserializeAws_restXmlIntelligentTieringAndOperator = function(output, context) {
  var contents = {
    Prefix: void 0,
    Tags: void 0
  };
  if (output["Prefix"] !== void 0) {
    contents.Prefix = expectString(output["Prefix"]);
  }
  if (output.Tag === "") {
    contents.Tags = [];
  }
  if (output["Tag"] !== void 0) {
    contents.Tags = deserializeAws_restXmlTagSet(getArrayIfSingleItem(output["Tag"]), context);
  }
  return contents;
};
var deserializeAws_restXmlIntelligentTieringConfiguration = function(output, context) {
  var contents = {
    Id: void 0,
    Filter: void 0,
    Status: void 0,
    Tierings: void 0
  };
  if (output["Id"] !== void 0) {
    contents.Id = expectString(output["Id"]);
  }
  if (output["Filter"] !== void 0) {
    contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output["Filter"], context);
  }
  if (output["Status"] !== void 0) {
    contents.Status = expectString(output["Status"]);
  }
  if (output.Tiering === "") {
    contents.Tierings = [];
  }
  if (output["Tiering"] !== void 0) {
    contents.Tierings = deserializeAws_restXmlTieringList(getArrayIfSingleItem(output["Tiering"]), context);
  }
  return contents;
};
var deserializeAws_restXmlIntelligentTieringConfigurationList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlIntelligentTieringConfiguration(entry, context);
  });
};
var deserializeAws_restXmlIntelligentTieringFilter = function(output, context) {
  var contents = {
    Prefix: void 0,
    Tag: void 0,
    And: void 0
  };
  if (output["Prefix"] !== void 0) {
    contents.Prefix = expectString(output["Prefix"]);
  }
  if (output["Tag"] !== void 0) {
    contents.Tag = deserializeAws_restXmlTag(output["Tag"], context);
  }
  if (output["And"] !== void 0) {
    contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output["And"], context);
  }
  return contents;
};
var deserializeAws_restXmlInventoryConfiguration = function(output, context) {
  var contents = {
    Destination: void 0,
    IsEnabled: void 0,
    Filter: void 0,
    Id: void 0,
    IncludedObjectVersions: void 0,
    OptionalFields: void 0,
    Schedule: void 0
  };
  if (output["Destination"] !== void 0) {
    contents.Destination = deserializeAws_restXmlInventoryDestination(output["Destination"], context);
  }
  if (output["IsEnabled"] !== void 0) {
    contents.IsEnabled = parseBoolean(output["IsEnabled"]);
  }
  if (output["Filter"] !== void 0) {
    contents.Filter = deserializeAws_restXmlInventoryFilter(output["Filter"], context);
  }
  if (output["Id"] !== void 0) {
    contents.Id = expectString(output["Id"]);
  }
  if (output["IncludedObjectVersions"] !== void 0) {
    contents.IncludedObjectVersions = expectString(output["IncludedObjectVersions"]);
  }
  if (output.OptionalFields === "") {
    contents.OptionalFields = [];
  }
  if (output["OptionalFields"] !== void 0 && output["OptionalFields"]["Field"] !== void 0) {
    contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields(getArrayIfSingleItem(output["OptionalFields"]["Field"]), context);
  }
  if (output["Schedule"] !== void 0) {
    contents.Schedule = deserializeAws_restXmlInventorySchedule(output["Schedule"], context);
  }
  return contents;
};
var deserializeAws_restXmlInventoryConfigurationList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlInventoryConfiguration(entry, context);
  });
};
var deserializeAws_restXmlInventoryDestination = function(output, context) {
  var contents = {
    S3BucketDestination: void 0
  };
  if (output["S3BucketDestination"] !== void 0) {
    contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(output["S3BucketDestination"], context);
  }
  return contents;
};
var deserializeAws_restXmlInventoryEncryption = function(output, context) {
  var contents = {
    SSES3: void 0,
    SSEKMS: void 0
  };
  if (output["SSE-S3"] !== void 0) {
    contents.SSES3 = deserializeAws_restXmlSSES3(output["SSE-S3"], context);
  }
  if (output["SSE-KMS"] !== void 0) {
    contents.SSEKMS = deserializeAws_restXmlSSEKMS(output["SSE-KMS"], context);
  }
  return contents;
};
var deserializeAws_restXmlInventoryFilter = function(output, context) {
  var contents = {
    Prefix: void 0
  };
  if (output["Prefix"] !== void 0) {
    contents.Prefix = expectString(output["Prefix"]);
  }
  return contents;
};
var deserializeAws_restXmlInventoryOptionalFields = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_restXmlInventoryS3BucketDestination = function(output, context) {
  var contents = {
    AccountId: void 0,
    Bucket: void 0,
    Format: void 0,
    Prefix: void 0,
    Encryption: void 0
  };
  if (output["AccountId"] !== void 0) {
    contents.AccountId = expectString(output["AccountId"]);
  }
  if (output["Bucket"] !== void 0) {
    contents.Bucket = expectString(output["Bucket"]);
  }
  if (output["Format"] !== void 0) {
    contents.Format = expectString(output["Format"]);
  }
  if (output["Prefix"] !== void 0) {
    contents.Prefix = expectString(output["Prefix"]);
  }
  if (output["Encryption"] !== void 0) {
    contents.Encryption = deserializeAws_restXmlInventoryEncryption(output["Encryption"], context);
  }
  return contents;
};
var deserializeAws_restXmlInventorySchedule = function(output, context) {
  var contents = {
    Frequency: void 0
  };
  if (output["Frequency"] !== void 0) {
    contents.Frequency = expectString(output["Frequency"]);
  }
  return contents;
};
var deserializeAws_restXmlLambdaFunctionConfiguration = function(output, context) {
  var contents = {
    Id: void 0,
    LambdaFunctionArn: void 0,
    Events: void 0,
    Filter: void 0
  };
  if (output["Id"] !== void 0) {
    contents.Id = expectString(output["Id"]);
  }
  if (output["CloudFunction"] !== void 0) {
    contents.LambdaFunctionArn = expectString(output["CloudFunction"]);
  }
  if (output.Event === "") {
    contents.Events = [];
  }
  if (output["Event"] !== void 0) {
    contents.Events = deserializeAws_restXmlEventList(getArrayIfSingleItem(output["Event"]), context);
  }
  if (output["Filter"] !== void 0) {
    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
  }
  return contents;
};
var deserializeAws_restXmlLambdaFunctionConfigurationList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlLambdaFunctionConfiguration(entry, context);
  });
};
var deserializeAws_restXmlLifecycleExpiration = function(output, context) {
  var contents = {
    Date: void 0,
    Days: void 0,
    ExpiredObjectDeleteMarker: void 0
  };
  if (output["Date"] !== void 0) {
    contents.Date = expectNonNull(parseRfc3339DateTime(output["Date"]));
  }
  if (output["Days"] !== void 0) {
    contents.Days = strictParseInt32(output["Days"]);
  }
  if (output["ExpiredObjectDeleteMarker"] !== void 0) {
    contents.ExpiredObjectDeleteMarker = parseBoolean(output["ExpiredObjectDeleteMarker"]);
  }
  return contents;
};
var deserializeAws_restXmlLifecycleRule = function(output, context) {
  var contents = {
    Expiration: void 0,
    ID: void 0,
    Prefix: void 0,
    Filter: void 0,
    Status: void 0,
    Transitions: void 0,
    NoncurrentVersionTransitions: void 0,
    NoncurrentVersionExpiration: void 0,
    AbortIncompleteMultipartUpload: void 0
  };
  if (output["Expiration"] !== void 0) {
    contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output["Expiration"], context);
  }
  if (output["ID"] !== void 0) {
    contents.ID = expectString(output["ID"]);
  }
  if (output["Prefix"] !== void 0) {
    contents.Prefix = expectString(output["Prefix"]);
  }
  if (output["Filter"] !== void 0) {
    contents.Filter = deserializeAws_restXmlLifecycleRuleFilter(expectUnion(output["Filter"]), context);
  }
  if (output["Status"] !== void 0) {
    contents.Status = expectString(output["Status"]);
  }
  if (output.Transition === "") {
    contents.Transitions = [];
  }
  if (output["Transition"] !== void 0) {
    contents.Transitions = deserializeAws_restXmlTransitionList(getArrayIfSingleItem(output["Transition"]), context);
  }
  if (output.NoncurrentVersionTransition === "") {
    contents.NoncurrentVersionTransitions = [];
  }
  if (output["NoncurrentVersionTransition"] !== void 0) {
    contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList(getArrayIfSingleItem(output["NoncurrentVersionTransition"]), context);
  }
  if (output["NoncurrentVersionExpiration"] !== void 0) {
    contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(output["NoncurrentVersionExpiration"], context);
  }
  if (output["AbortIncompleteMultipartUpload"] !== void 0) {
    contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(output["AbortIncompleteMultipartUpload"], context);
  }
  return contents;
};
var deserializeAws_restXmlLifecycleRuleAndOperator = function(output, context) {
  var contents = {
    Prefix: void 0,
    Tags: void 0
  };
  if (output["Prefix"] !== void 0) {
    contents.Prefix = expectString(output["Prefix"]);
  }
  if (output.Tag === "") {
    contents.Tags = [];
  }
  if (output["Tag"] !== void 0) {
    contents.Tags = deserializeAws_restXmlTagSet(getArrayIfSingleItem(output["Tag"]), context);
  }
  return contents;
};
var deserializeAws_restXmlLifecycleRuleFilter = function(output, context) {
  if (output["Prefix"] !== void 0) {
    return {
      Prefix: expectString(output["Prefix"])
    };
  }
  if (output["Tag"] !== void 0) {
    return {
      Tag: deserializeAws_restXmlTag(output["Tag"], context)
    };
  }
  if (output["And"] !== void 0) {
    return {
      And: deserializeAws_restXmlLifecycleRuleAndOperator(output["And"], context)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var deserializeAws_restXmlLifecycleRules = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlLifecycleRule(entry, context);
  });
};
var deserializeAws_restXmlLoggingEnabled = function(output, context) {
  var contents = {
    TargetBucket: void 0,
    TargetGrants: void 0,
    TargetPrefix: void 0
  };
  if (output["TargetBucket"] !== void 0) {
    contents.TargetBucket = expectString(output["TargetBucket"]);
  }
  if (output.TargetGrants === "") {
    contents.TargetGrants = [];
  }
  if (output["TargetGrants"] !== void 0 && output["TargetGrants"]["Grant"] !== void 0) {
    contents.TargetGrants = deserializeAws_restXmlTargetGrants(getArrayIfSingleItem(output["TargetGrants"]["Grant"]), context);
  }
  if (output["TargetPrefix"] !== void 0) {
    contents.TargetPrefix = expectString(output["TargetPrefix"]);
  }
  return contents;
};
var deserializeAws_restXmlMetrics = function(output, context) {
  var contents = {
    Status: void 0,
    EventThreshold: void 0
  };
  if (output["Status"] !== void 0) {
    contents.Status = expectString(output["Status"]);
  }
  if (output["EventThreshold"] !== void 0) {
    contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output["EventThreshold"], context);
  }
  return contents;
};
var deserializeAws_restXmlMetricsAndOperator = function(output, context) {
  var contents = {
    Prefix: void 0,
    Tags: void 0,
    AccessPointArn: void 0
  };
  if (output["Prefix"] !== void 0) {
    contents.Prefix = expectString(output["Prefix"]);
  }
  if (output.Tag === "") {
    contents.Tags = [];
  }
  if (output["Tag"] !== void 0) {
    contents.Tags = deserializeAws_restXmlTagSet(getArrayIfSingleItem(output["Tag"]), context);
  }
  if (output["AccessPointArn"] !== void 0) {
    contents.AccessPointArn = expectString(output["AccessPointArn"]);
  }
  return contents;
};
var deserializeAws_restXmlMetricsConfiguration = function(output, context) {
  var contents = {
    Id: void 0,
    Filter: void 0
  };
  if (output["Id"] !== void 0) {
    contents.Id = expectString(output["Id"]);
  }
  if (output["Filter"] !== void 0) {
    contents.Filter = deserializeAws_restXmlMetricsFilter(expectUnion(output["Filter"]), context);
  }
  return contents;
};
var deserializeAws_restXmlMetricsConfigurationList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlMetricsConfiguration(entry, context);
  });
};
var deserializeAws_restXmlMetricsFilter = function(output, context) {
  if (output["Prefix"] !== void 0) {
    return {
      Prefix: expectString(output["Prefix"])
    };
  }
  if (output["Tag"] !== void 0) {
    return {
      Tag: deserializeAws_restXmlTag(output["Tag"], context)
    };
  }
  if (output["AccessPointArn"] !== void 0) {
    return {
      AccessPointArn: expectString(output["AccessPointArn"])
    };
  }
  if (output["And"] !== void 0) {
    return {
      And: deserializeAws_restXmlMetricsAndOperator(output["And"], context)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var deserializeAws_restXmlMultipartUpload = function(output, context) {
  var contents = {
    UploadId: void 0,
    Key: void 0,
    Initiated: void 0,
    StorageClass: void 0,
    Owner: void 0,
    Initiator: void 0
  };
  if (output["UploadId"] !== void 0) {
    contents.UploadId = expectString(output["UploadId"]);
  }
  if (output["Key"] !== void 0) {
    contents.Key = expectString(output["Key"]);
  }
  if (output["Initiated"] !== void 0) {
    contents.Initiated = expectNonNull(parseRfc3339DateTime(output["Initiated"]));
  }
  if (output["StorageClass"] !== void 0) {
    contents.StorageClass = expectString(output["StorageClass"]);
  }
  if (output["Owner"] !== void 0) {
    contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
  }
  if (output["Initiator"] !== void 0) {
    contents.Initiator = deserializeAws_restXmlInitiator(output["Initiator"], context);
  }
  return contents;
};
var deserializeAws_restXmlMultipartUploadList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlMultipartUpload(entry, context);
  });
};
var deserializeAws_restXmlNoncurrentVersionExpiration = function(output, context) {
  var contents = {
    NoncurrentDays: void 0
  };
  if (output["NoncurrentDays"] !== void 0) {
    contents.NoncurrentDays = strictParseInt32(output["NoncurrentDays"]);
  }
  return contents;
};
var deserializeAws_restXmlNoncurrentVersionTransition = function(output, context) {
  var contents = {
    NoncurrentDays: void 0,
    StorageClass: void 0
  };
  if (output["NoncurrentDays"] !== void 0) {
    contents.NoncurrentDays = strictParseInt32(output["NoncurrentDays"]);
  }
  if (output["StorageClass"] !== void 0) {
    contents.StorageClass = expectString(output["StorageClass"]);
  }
  return contents;
};
var deserializeAws_restXmlNoncurrentVersionTransitionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlNoncurrentVersionTransition(entry, context);
  });
};
var deserializeAws_restXmlNotificationConfigurationFilter = function(output, context) {
  var contents = {
    Key: void 0
  };
  if (output["S3Key"] !== void 0) {
    contents.Key = deserializeAws_restXmlS3KeyFilter(output["S3Key"], context);
  }
  return contents;
};
var deserializeAws_restXml_Object = function(output, context) {
  var contents = {
    Key: void 0,
    LastModified: void 0,
    ETag: void 0,
    Size: void 0,
    StorageClass: void 0,
    Owner: void 0
  };
  if (output["Key"] !== void 0) {
    contents.Key = expectString(output["Key"]);
  }
  if (output["LastModified"] !== void 0) {
    contents.LastModified = expectNonNull(parseRfc3339DateTime(output["LastModified"]));
  }
  if (output["ETag"] !== void 0) {
    contents.ETag = expectString(output["ETag"]);
  }
  if (output["Size"] !== void 0) {
    contents.Size = strictParseLong(output["Size"]);
  }
  if (output["StorageClass"] !== void 0) {
    contents.StorageClass = expectString(output["StorageClass"]);
  }
  if (output["Owner"] !== void 0) {
    contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
  }
  return contents;
};
var deserializeAws_restXmlObjectList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXml_Object(entry, context);
  });
};
var deserializeAws_restXmlObjectLockConfiguration = function(output, context) {
  var contents = {
    ObjectLockEnabled: void 0,
    Rule: void 0
  };
  if (output["ObjectLockEnabled"] !== void 0) {
    contents.ObjectLockEnabled = expectString(output["ObjectLockEnabled"]);
  }
  if (output["Rule"] !== void 0) {
    contents.Rule = deserializeAws_restXmlObjectLockRule(output["Rule"], context);
  }
  return contents;
};
var deserializeAws_restXmlObjectLockLegalHold = function(output, context) {
  var contents = {
    Status: void 0
  };
  if (output["Status"] !== void 0) {
    contents.Status = expectString(output["Status"]);
  }
  return contents;
};
var deserializeAws_restXmlObjectLockRetention = function(output, context) {
  var contents = {
    Mode: void 0,
    RetainUntilDate: void 0
  };
  if (output["Mode"] !== void 0) {
    contents.Mode = expectString(output["Mode"]);
  }
  if (output["RetainUntilDate"] !== void 0) {
    contents.RetainUntilDate = expectNonNull(parseRfc3339DateTime(output["RetainUntilDate"]));
  }
  return contents;
};
var deserializeAws_restXmlObjectLockRule = function(output, context) {
  var contents = {
    DefaultRetention: void 0
  };
  if (output["DefaultRetention"] !== void 0) {
    contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output["DefaultRetention"], context);
  }
  return contents;
};
var deserializeAws_restXmlObjectVersion = function(output, context) {
  var contents = {
    ETag: void 0,
    Size: void 0,
    StorageClass: void 0,
    Key: void 0,
    VersionId: void 0,
    IsLatest: void 0,
    LastModified: void 0,
    Owner: void 0
  };
  if (output["ETag"] !== void 0) {
    contents.ETag = expectString(output["ETag"]);
  }
  if (output["Size"] !== void 0) {
    contents.Size = strictParseLong(output["Size"]);
  }
  if (output["StorageClass"] !== void 0) {
    contents.StorageClass = expectString(output["StorageClass"]);
  }
  if (output["Key"] !== void 0) {
    contents.Key = expectString(output["Key"]);
  }
  if (output["VersionId"] !== void 0) {
    contents.VersionId = expectString(output["VersionId"]);
  }
  if (output["IsLatest"] !== void 0) {
    contents.IsLatest = parseBoolean(output["IsLatest"]);
  }
  if (output["LastModified"] !== void 0) {
    contents.LastModified = expectNonNull(parseRfc3339DateTime(output["LastModified"]));
  }
  if (output["Owner"] !== void 0) {
    contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
  }
  return contents;
};
var deserializeAws_restXmlObjectVersionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlObjectVersion(entry, context);
  });
};
var deserializeAws_restXmlOwner = function(output, context) {
  var contents = {
    DisplayName: void 0,
    ID: void 0
  };
  if (output["DisplayName"] !== void 0) {
    contents.DisplayName = expectString(output["DisplayName"]);
  }
  if (output["ID"] !== void 0) {
    contents.ID = expectString(output["ID"]);
  }
  return contents;
};
var deserializeAws_restXmlOwnershipControls = function(output, context) {
  var contents = {
    Rules: void 0
  };
  if (output.Rule === "") {
    contents.Rules = [];
  }
  if (output["Rule"] !== void 0) {
    contents.Rules = deserializeAws_restXmlOwnershipControlsRules(getArrayIfSingleItem(output["Rule"]), context);
  }
  return contents;
};
var deserializeAws_restXmlOwnershipControlsRule = function(output, context) {
  var contents = {
    ObjectOwnership: void 0
  };
  if (output["ObjectOwnership"] !== void 0) {
    contents.ObjectOwnership = expectString(output["ObjectOwnership"]);
  }
  return contents;
};
var deserializeAws_restXmlOwnershipControlsRules = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlOwnershipControlsRule(entry, context);
  });
};
var deserializeAws_restXmlPart = function(output, context) {
  var contents = {
    PartNumber: void 0,
    LastModified: void 0,
    ETag: void 0,
    Size: void 0
  };
  if (output["PartNumber"] !== void 0) {
    contents.PartNumber = strictParseInt32(output["PartNumber"]);
  }
  if (output["LastModified"] !== void 0) {
    contents.LastModified = expectNonNull(parseRfc3339DateTime(output["LastModified"]));
  }
  if (output["ETag"] !== void 0) {
    contents.ETag = expectString(output["ETag"]);
  }
  if (output["Size"] !== void 0) {
    contents.Size = strictParseLong(output["Size"]);
  }
  return contents;
};
var deserializeAws_restXmlParts = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlPart(entry, context);
  });
};
var deserializeAws_restXmlPolicyStatus = function(output, context) {
  var contents = {
    IsPublic: void 0
  };
  if (output["IsPublic"] !== void 0) {
    contents.IsPublic = parseBoolean(output["IsPublic"]);
  }
  return contents;
};
var deserializeAws_restXmlPublicAccessBlockConfiguration = function(output, context) {
  var contents = {
    BlockPublicAcls: void 0,
    IgnorePublicAcls: void 0,
    BlockPublicPolicy: void 0,
    RestrictPublicBuckets: void 0
  };
  if (output["BlockPublicAcls"] !== void 0) {
    contents.BlockPublicAcls = parseBoolean(output["BlockPublicAcls"]);
  }
  if (output["IgnorePublicAcls"] !== void 0) {
    contents.IgnorePublicAcls = parseBoolean(output["IgnorePublicAcls"]);
  }
  if (output["BlockPublicPolicy"] !== void 0) {
    contents.BlockPublicPolicy = parseBoolean(output["BlockPublicPolicy"]);
  }
  if (output["RestrictPublicBuckets"] !== void 0) {
    contents.RestrictPublicBuckets = parseBoolean(output["RestrictPublicBuckets"]);
  }
  return contents;
};
var deserializeAws_restXmlQueueConfiguration = function(output, context) {
  var contents = {
    Id: void 0,
    QueueArn: void 0,
    Events: void 0,
    Filter: void 0
  };
  if (output["Id"] !== void 0) {
    contents.Id = expectString(output["Id"]);
  }
  if (output["Queue"] !== void 0) {
    contents.QueueArn = expectString(output["Queue"]);
  }
  if (output.Event === "") {
    contents.Events = [];
  }
  if (output["Event"] !== void 0) {
    contents.Events = deserializeAws_restXmlEventList(getArrayIfSingleItem(output["Event"]), context);
  }
  if (output["Filter"] !== void 0) {
    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
  }
  return contents;
};
var deserializeAws_restXmlQueueConfigurationList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlQueueConfiguration(entry, context);
  });
};
var deserializeAws_restXmlRedirect = function(output, context) {
  var contents = {
    HostName: void 0,
    HttpRedirectCode: void 0,
    Protocol: void 0,
    ReplaceKeyPrefixWith: void 0,
    ReplaceKeyWith: void 0
  };
  if (output["HostName"] !== void 0) {
    contents.HostName = expectString(output["HostName"]);
  }
  if (output["HttpRedirectCode"] !== void 0) {
    contents.HttpRedirectCode = expectString(output["HttpRedirectCode"]);
  }
  if (output["Protocol"] !== void 0) {
    contents.Protocol = expectString(output["Protocol"]);
  }
  if (output["ReplaceKeyPrefixWith"] !== void 0) {
    contents.ReplaceKeyPrefixWith = expectString(output["ReplaceKeyPrefixWith"]);
  }
  if (output["ReplaceKeyWith"] !== void 0) {
    contents.ReplaceKeyWith = expectString(output["ReplaceKeyWith"]);
  }
  return contents;
};
var deserializeAws_restXmlRedirectAllRequestsTo = function(output, context) {
  var contents = {
    HostName: void 0,
    Protocol: void 0
  };
  if (output["HostName"] !== void 0) {
    contents.HostName = expectString(output["HostName"]);
  }
  if (output["Protocol"] !== void 0) {
    contents.Protocol = expectString(output["Protocol"]);
  }
  return contents;
};
var deserializeAws_restXmlReplicaModifications = function(output, context) {
  var contents = {
    Status: void 0
  };
  if (output["Status"] !== void 0) {
    contents.Status = expectString(output["Status"]);
  }
  return contents;
};
var deserializeAws_restXmlReplicationConfiguration = function(output, context) {
  var contents = {
    Role: void 0,
    Rules: void 0
  };
  if (output["Role"] !== void 0) {
    contents.Role = expectString(output["Role"]);
  }
  if (output.Rule === "") {
    contents.Rules = [];
  }
  if (output["Rule"] !== void 0) {
    contents.Rules = deserializeAws_restXmlReplicationRules(getArrayIfSingleItem(output["Rule"]), context);
  }
  return contents;
};
var deserializeAws_restXmlReplicationRule = function(output, context) {
  var contents = {
    ID: void 0,
    Priority: void 0,
    Prefix: void 0,
    Filter: void 0,
    Status: void 0,
    SourceSelectionCriteria: void 0,
    ExistingObjectReplication: void 0,
    Destination: void 0,
    DeleteMarkerReplication: void 0
  };
  if (output["ID"] !== void 0) {
    contents.ID = expectString(output["ID"]);
  }
  if (output["Priority"] !== void 0) {
    contents.Priority = strictParseInt32(output["Priority"]);
  }
  if (output["Prefix"] !== void 0) {
    contents.Prefix = expectString(output["Prefix"]);
  }
  if (output["Filter"] !== void 0) {
    contents.Filter = deserializeAws_restXmlReplicationRuleFilter(expectUnion(output["Filter"]), context);
  }
  if (output["Status"] !== void 0) {
    contents.Status = expectString(output["Status"]);
  }
  if (output["SourceSelectionCriteria"] !== void 0) {
    contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(output["SourceSelectionCriteria"], context);
  }
  if (output["ExistingObjectReplication"] !== void 0) {
    contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(output["ExistingObjectReplication"], context);
  }
  if (output["Destination"] !== void 0) {
    contents.Destination = deserializeAws_restXmlDestination(output["Destination"], context);
  }
  if (output["DeleteMarkerReplication"] !== void 0) {
    contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(output["DeleteMarkerReplication"], context);
  }
  return contents;
};
var deserializeAws_restXmlReplicationRuleAndOperator = function(output, context) {
  var contents = {
    Prefix: void 0,
    Tags: void 0
  };
  if (output["Prefix"] !== void 0) {
    contents.Prefix = expectString(output["Prefix"]);
  }
  if (output.Tag === "") {
    contents.Tags = [];
  }
  if (output["Tag"] !== void 0) {
    contents.Tags = deserializeAws_restXmlTagSet(getArrayIfSingleItem(output["Tag"]), context);
  }
  return contents;
};
var deserializeAws_restXmlReplicationRuleFilter = function(output, context) {
  if (output["Prefix"] !== void 0) {
    return {
      Prefix: expectString(output["Prefix"])
    };
  }
  if (output["Tag"] !== void 0) {
    return {
      Tag: deserializeAws_restXmlTag(output["Tag"], context)
    };
  }
  if (output["And"] !== void 0) {
    return {
      And: deserializeAws_restXmlReplicationRuleAndOperator(output["And"], context)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var deserializeAws_restXmlReplicationRules = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlReplicationRule(entry, context);
  });
};
var deserializeAws_restXmlReplicationTime = function(output, context) {
  var contents = {
    Status: void 0,
    Time: void 0
  };
  if (output["Status"] !== void 0) {
    contents.Status = expectString(output["Status"]);
  }
  if (output["Time"] !== void 0) {
    contents.Time = deserializeAws_restXmlReplicationTimeValue(output["Time"], context);
  }
  return contents;
};
var deserializeAws_restXmlReplicationTimeValue = function(output, context) {
  var contents = {
    Minutes: void 0
  };
  if (output["Minutes"] !== void 0) {
    contents.Minutes = strictParseInt32(output["Minutes"]);
  }
  return contents;
};
var deserializeAws_restXmlRoutingRule = function(output, context) {
  var contents = {
    Condition: void 0,
    Redirect: void 0
  };
  if (output["Condition"] !== void 0) {
    contents.Condition = deserializeAws_restXmlCondition(output["Condition"], context);
  }
  if (output["Redirect"] !== void 0) {
    contents.Redirect = deserializeAws_restXmlRedirect(output["Redirect"], context);
  }
  return contents;
};
var deserializeAws_restXmlRoutingRules = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlRoutingRule(entry, context);
  });
};
var deserializeAws_restXmlS3KeyFilter = function(output, context) {
  var contents = {
    FilterRules: void 0
  };
  if (output.FilterRule === "") {
    contents.FilterRules = [];
  }
  if (output["FilterRule"] !== void 0) {
    contents.FilterRules = deserializeAws_restXmlFilterRuleList(getArrayIfSingleItem(output["FilterRule"]), context);
  }
  return contents;
};
var deserializeAws_restXmlServerSideEncryptionByDefault = function(output, context) {
  var contents = {
    SSEAlgorithm: void 0,
    KMSMasterKeyID: void 0
  };
  if (output["SSEAlgorithm"] !== void 0) {
    contents.SSEAlgorithm = expectString(output["SSEAlgorithm"]);
  }
  if (output["KMSMasterKeyID"] !== void 0) {
    contents.KMSMasterKeyID = expectString(output["KMSMasterKeyID"]);
  }
  return contents;
};
var deserializeAws_restXmlServerSideEncryptionConfiguration = function(output, context) {
  var contents = {
    Rules: void 0
  };
  if (output.Rule === "") {
    contents.Rules = [];
  }
  if (output["Rule"] !== void 0) {
    contents.Rules = deserializeAws_restXmlServerSideEncryptionRules(getArrayIfSingleItem(output["Rule"]), context);
  }
  return contents;
};
var deserializeAws_restXmlServerSideEncryptionRule = function(output, context) {
  var contents = {
    ApplyServerSideEncryptionByDefault: void 0,
    BucketKeyEnabled: void 0
  };
  if (output["ApplyServerSideEncryptionByDefault"] !== void 0) {
    contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(output["ApplyServerSideEncryptionByDefault"], context);
  }
  if (output["BucketKeyEnabled"] !== void 0) {
    contents.BucketKeyEnabled = parseBoolean(output["BucketKeyEnabled"]);
  }
  return contents;
};
var deserializeAws_restXmlServerSideEncryptionRules = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlServerSideEncryptionRule(entry, context);
  });
};
var deserializeAws_restXmlSourceSelectionCriteria = function(output, context) {
  var contents = {
    SseKmsEncryptedObjects: void 0,
    ReplicaModifications: void 0
  };
  if (output["SseKmsEncryptedObjects"] !== void 0) {
    contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(output["SseKmsEncryptedObjects"], context);
  }
  if (output["ReplicaModifications"] !== void 0) {
    contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output["ReplicaModifications"], context);
  }
  return contents;
};
var deserializeAws_restXmlSSEKMS = function(output, context) {
  var contents = {
    KeyId: void 0
  };
  if (output["KeyId"] !== void 0) {
    contents.KeyId = expectString(output["KeyId"]);
  }
  return contents;
};
var deserializeAws_restXmlSseKmsEncryptedObjects = function(output, context) {
  var contents = {
    Status: void 0
  };
  if (output["Status"] !== void 0) {
    contents.Status = expectString(output["Status"]);
  }
  return contents;
};
var deserializeAws_restXmlSSES3 = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_restXmlStorageClassAnalysis = function(output, context) {
  var contents = {
    DataExport: void 0
  };
  if (output["DataExport"] !== void 0) {
    contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output["DataExport"], context);
  }
  return contents;
};
var deserializeAws_restXmlStorageClassAnalysisDataExport = function(output, context) {
  var contents = {
    OutputSchemaVersion: void 0,
    Destination: void 0
  };
  if (output["OutputSchemaVersion"] !== void 0) {
    contents.OutputSchemaVersion = expectString(output["OutputSchemaVersion"]);
  }
  if (output["Destination"] !== void 0) {
    contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output["Destination"], context);
  }
  return contents;
};
var deserializeAws_restXmlTag = function(output, context) {
  var contents = {
    Key: void 0,
    Value: void 0
  };
  if (output["Key"] !== void 0) {
    contents.Key = expectString(output["Key"]);
  }
  if (output["Value"] !== void 0) {
    contents.Value = expectString(output["Value"]);
  }
  return contents;
};
var deserializeAws_restXmlTagSet = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlTag(entry, context);
  });
};
var deserializeAws_restXmlTargetGrant = function(output, context) {
  var contents = {
    Grantee: void 0,
    Permission: void 0
  };
  if (output["Grantee"] !== void 0) {
    contents.Grantee = deserializeAws_restXmlGrantee(output["Grantee"], context);
  }
  if (output["Permission"] !== void 0) {
    contents.Permission = expectString(output["Permission"]);
  }
  return contents;
};
var deserializeAws_restXmlTargetGrants = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlTargetGrant(entry, context);
  });
};
var deserializeAws_restXmlTiering = function(output, context) {
  var contents = {
    Days: void 0,
    AccessTier: void 0
  };
  if (output["Days"] !== void 0) {
    contents.Days = strictParseInt32(output["Days"]);
  }
  if (output["AccessTier"] !== void 0) {
    contents.AccessTier = expectString(output["AccessTier"]);
  }
  return contents;
};
var deserializeAws_restXmlTieringList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlTiering(entry, context);
  });
};
var deserializeAws_restXmlTopicConfiguration = function(output, context) {
  var contents = {
    Id: void 0,
    TopicArn: void 0,
    Events: void 0,
    Filter: void 0
  };
  if (output["Id"] !== void 0) {
    contents.Id = expectString(output["Id"]);
  }
  if (output["Topic"] !== void 0) {
    contents.TopicArn = expectString(output["Topic"]);
  }
  if (output.Event === "") {
    contents.Events = [];
  }
  if (output["Event"] !== void 0) {
    contents.Events = deserializeAws_restXmlEventList(getArrayIfSingleItem(output["Event"]), context);
  }
  if (output["Filter"] !== void 0) {
    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
  }
  return contents;
};
var deserializeAws_restXmlTopicConfigurationList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlTopicConfiguration(entry, context);
  });
};
var deserializeAws_restXmlTransition = function(output, context) {
  var contents = {
    Date: void 0,
    Days: void 0,
    StorageClass: void 0
  };
  if (output["Date"] !== void 0) {
    contents.Date = expectNonNull(parseRfc3339DateTime(output["Date"]));
  }
  if (output["Days"] !== void 0) {
    contents.Days = strictParseInt32(output["Days"]);
  }
  if (output["StorageClass"] !== void 0) {
    contents.StorageClass = expectString(output["StorageClass"]);
  }
  return contents;
};
var deserializeAws_restXmlTransitionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restXmlTransition(entry, context);
  });
};
var deserializeMetadata3 = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody3 = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString3 = function(streamBody, context) {
  return collectBody3(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var isSerializableHeaderValue = function(value) {
  return value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
};
var parseBody3 = function(streamBody, context) {
  return collectBodyString3(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      var parsedObj = (0, import_fast_xml_parser.parse)(encoded, {
        attributeNamePrefix: "",
        ignoreAttributes: false,
        parseNodeValue: false,
        trimValues: false,
        tagValueProcessor: function(val) {
          return val.trim() === "" && val.includes("\n") ? "" : (0, import_entities.decodeHTML)(val);
        }
      });
      var textNodeName = "#text";
      var key = Object.keys(parsedObj)[0];
      var parsedObjToReturn = parsedObj[key];
      if (parsedObjToReturn[textNodeName]) {
        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
        delete parsedObjToReturn[textNodeName];
      }
      return getValueFromTextNode(parsedObjToReturn);
    }
    return {};
  });
};
var loadRestXmlErrorCode = function(output, data) {
  if (data.Code !== void 0) {
    return data.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
  return "";
};

// node_modules/@aws-sdk/client-s3/dist-es/commands/AbortMultipartUploadCommand.js
var AbortMultipartUploadCommand = function(_super) {
  __extends(AbortMultipartUploadCommand2, _super);
  function AbortMultipartUploadCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  AbortMultipartUploadCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "AbortMultipartUploadCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: AbortMultipartUploadRequest.filterSensitiveLog,
      outputFilterSensitiveLog: AbortMultipartUploadOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  AbortMultipartUploadCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlAbortMultipartUploadCommand(input, context);
  };
  AbortMultipartUploadCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlAbortMultipartUploadCommand(output, context);
  };
  return AbortMultipartUploadCommand2;
}(Command);

// node_modules/@aws-sdk/middleware-sdk-s3/dist-es/S3SignatureV4.js
var S3SignatureV4 = function() {
  function S3SignatureV42(options) {
    this.sigv4Signer = new SignatureV4(options);
    this.signerOptions = options;
  }
  S3SignatureV42.prototype.sign = function(requestToSign, options) {
    if (options === void 0) {
      options = {};
    }
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        if (options.signingRegion === "*") {
          if (this.signerOptions.runtime !== "node")
            throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
          return [2, this.getSigv4aSigner().sign(requestToSign, options)];
        }
        return [2, this.sigv4Signer.sign(requestToSign, options)];
      });
    });
  };
  S3SignatureV42.prototype.presign = function(originalRequest, options) {
    if (options === void 0) {
      options = {};
    }
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        if (options.signingRegion === "*") {
          if (this.signerOptions.runtime !== "node")
            throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
          return [2, this.getSigv4aSigner().presign(originalRequest, options)];
        }
        return [2, this.sigv4Signer.presign(originalRequest, options)];
      });
    });
  };
  S3SignatureV42.prototype.getSigv4aSigner = function() {
    if (!this.sigv4aSigner) {
      var CrtSignerV4_1;
      try {
        CrtSignerV4_1 = require_signature_v4_crt().CrtSignerV4;
        if (typeof CrtSignerV4_1 !== "function")
          throw new Error();
      } catch (e) {
        e.message = e.message + '\nPlease check if you have installed "@aws-sdk/signature-v4-crt" package explicitly. \nFor more information please go to https://github.com/aws/aws-sdk-js-v3#known-issues';
        throw e;
      }
      this.sigv4aSigner = new CrtSignerV4_1(__assign(__assign({}, this.signerOptions), { signingAlgorithm: 1 }));
    }
    return this.sigv4aSigner;
  };
  return S3SignatureV42;
}();

// node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js
var throw200ExceptionsMiddleware = function(config) {
  return function(next) {
    return function(args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var result, response, statusCode, body, bodyBytes, bodyString, err;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, next(args)];
            case 1:
              result = _a.sent();
              response = result.response;
              if (!HttpResponse.isInstance(response))
                return [2, result];
              statusCode = response.statusCode, body = response.body;
              if (statusCode < 200 && statusCode >= 300)
                return [2, result];
              return [4, collectBody4(body, config)];
            case 2:
              bodyBytes = _a.sent();
              return [4, collectBodyString4(bodyBytes, config)];
            case 3:
              bodyString = _a.sent();
              if (bodyBytes.length === 0) {
                err = new Error("S3 aborted request");
                err.name = "InternalError";
                throw err;
              }
              if (bodyString && bodyString.match("<Error>")) {
                response.statusCode = 400;
              }
              response.body = bodyBytes;
              return [2, result];
          }
        });
      });
    };
  };
};
var collectBody4 = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString4 = function(streamBody, context) {
  return collectBody4(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var throw200ExceptionsMiddlewareOptions = {
  relation: "after",
  toMiddleware: "deserializerMiddleware",
  tags: ["THROW_200_EXCEPTIONS", "S3"],
  name: "throw200ExceptionsMiddleware",
  override: true
};
var getThrow200ExceptionsPlugin = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-sdk-s3/dist-es/use-regional-endpoint.js
var useRegionalEndpointMiddleware = function(config) {
  return function(next) {
    return function(args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var request, _a;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              request = args.request;
              if (!HttpRequest.isInstance(request) || config.isCustomEndpoint)
                return [2, next(__assign({}, args))];
              if (!(request.hostname === "s3.amazonaws.com"))
                return [3, 1];
              request.hostname = "s3.us-east-1.amazonaws.com";
              return [3, 3];
            case 1:
              _a = "aws-global";
              return [4, config.region()];
            case 2:
              if (_a === _b.sent()) {
                request.hostname = "s3.amazonaws.com";
              }
              _b.label = 3;
            case 3:
              return [2, next(__assign({}, args))];
          }
        });
      });
    };
  };
};
var useRegionalEndpointMiddlewareOptions = {
  step: "build",
  tags: ["USE_REGIONAL_ENDPOINT", "S3"],
  name: "useRegionalEndpointMiddleware",
  override: true
};
var getUseRegionalEndpointPlugin = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(useRegionalEndpointMiddleware(config), useRegionalEndpointMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-sdk-s3/dist-es/validate-bucket-name.js
function validateBucketNameMiddleware() {
  var _this = this;
  return function(next) {
    return function(args) {
      return __awaiter(_this, void 0, void 0, function() {
        var Bucket2, err;
        return __generator(this, function(_a) {
          Bucket2 = args.input.Bucket;
          if (typeof Bucket2 === "string" && !validate2(Bucket2) && Bucket2.indexOf("/") >= 0) {
            err = new Error("Bucket name shouldn't contain '/', received '" + Bucket2 + "'");
            err.name = "InvalidBucketName";
            throw err;
          }
          return [2, next(__assign({}, args))];
        });
      });
    };
  };
}
var validateBucketNameMiddlewareOptions = {
  step: "initialize",
  tags: ["VALIDATE_BUCKET_NAME"],
  name: "validateBucketNameMiddleware",
  override: true
};
var getValidateBucketNamePlugin = function(unused) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/client-s3/dist-es/commands/CompleteMultipartUploadCommand.js
var CompleteMultipartUploadCommand = function(_super) {
  __extends(CompleteMultipartUploadCommand2, _super);
  function CompleteMultipartUploadCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CompleteMultipartUploadCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "CompleteMultipartUploadCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CompleteMultipartUploadRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CompleteMultipartUploadOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CompleteMultipartUploadCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlCompleteMultipartUploadCommand(input, context);
  };
  CompleteMultipartUploadCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlCompleteMultipartUploadCommand(output, context);
  };
  return CompleteMultipartUploadCommand2;
}(Command);

// node_modules/@aws-sdk/middleware-ssec/dist-es/index.js
function ssecMiddleware(options) {
  var _this = this;
  return function(next) {
    return function(args) {
      return __awaiter(_this, void 0, void 0, function() {
        var input, properties, properties_1, properties_1_1, prop, value, valueView, encoded, hash, _a, _b, _c, _d, e_1_1;
        var e_1, _e, _f;
        return __generator(this, function(_g) {
          switch (_g.label) {
            case 0:
              input = __assign({}, args.input);
              properties = [
                {
                  target: "SSECustomerKey",
                  hash: "SSECustomerKeyMD5"
                },
                {
                  target: "CopySourceSSECustomerKey",
                  hash: "CopySourceSSECustomerKeyMD5"
                }
              ];
              _g.label = 1;
            case 1:
              _g.trys.push([1, 6, 7, 8]);
              properties_1 = __values(properties), properties_1_1 = properties_1.next();
              _g.label = 2;
            case 2:
              if (!!properties_1_1.done)
                return [3, 5];
              prop = properties_1_1.value;
              value = input[prop.target];
              if (!value)
                return [3, 4];
              valueView = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : typeof value === "string" ? options.utf8Decoder(value) : new Uint8Array(value);
              encoded = options.base64Encoder(valueView);
              hash = new options.md5();
              hash.update(valueView);
              _a = [__assign({}, input)];
              _f = {}, _f[prop.target] = encoded;
              _b = prop.hash;
              _d = (_c = options).base64Encoder;
              return [4, hash.digest()];
            case 3:
              input = __assign.apply(void 0, _a.concat([(_f[_b] = _d.apply(_c, [_g.sent()]), _f)]));
              _g.label = 4;
            case 4:
              properties_1_1 = properties_1.next();
              return [3, 2];
            case 5:
              return [3, 8];
            case 6:
              e_1_1 = _g.sent();
              e_1 = { error: e_1_1 };
              return [3, 8];
            case 7:
              try {
                if (properties_1_1 && !properties_1_1.done && (_e = properties_1.return))
                  _e.call(properties_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
              return [7];
            case 8:
              return [2, next(__assign(__assign({}, args), { input }))];
          }
        });
      });
    };
  };
}
var ssecMiddlewareOptions = {
  name: "ssecMiddleware",
  step: "initialize",
  tags: ["SSE"],
  override: true
};
var getSsecPlugin = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/client-s3/dist-es/commands/CopyObjectCommand.js
var CopyObjectCommand = function(_super) {
  __extends(CopyObjectCommand2, _super);
  function CopyObjectCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CopyObjectCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));
    this.middlewareStack.use(getSsecPlugin(configuration));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "CopyObjectCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CopyObjectRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CopyObjectOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CopyObjectCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlCopyObjectCommand(input, context);
  };
  CopyObjectCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlCopyObjectCommand(output, context);
  };
  return CopyObjectCommand2;
}(Command);

// node_modules/@aws-sdk/middleware-location-constraint/dist-es/index.js
function locationConstraintMiddleware(options) {
  var _this = this;
  return function(next) {
    return function(args) {
      return __awaiter(_this, void 0, void 0, function() {
        var CreateBucketConfiguration2, region;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              CreateBucketConfiguration2 = args.input.CreateBucketConfiguration;
              return [4, options.region()];
            case 1:
              region = _a.sent();
              if (!CreateBucketConfiguration2 || !CreateBucketConfiguration2.LocationConstraint) {
                args = __assign(__assign({}, args), { input: __assign(__assign({}, args.input), { CreateBucketConfiguration: region === "us-east-1" ? void 0 : { LocationConstraint: region } }) });
              }
              return [2, next(args)];
          }
        });
      });
    };
  };
}
var locationConstraintMiddlewareOptions = {
  step: "initialize",
  tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
  name: "locationConstraintMiddleware",
  override: true
};
var getLocationConstraintPlugin = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketCommand.js
var CreateBucketCommand = function(_super) {
  __extends(CreateBucketCommand2, _super);
  function CreateBucketCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateBucketCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getLocationConstraintPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "CreateBucketCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateBucketRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateBucketOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateBucketCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlCreateBucketCommand(input, context);
  };
  CreateBucketCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlCreateBucketCommand(output, context);
  };
  return CreateBucketCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/CreateMultipartUploadCommand.js
var CreateMultipartUploadCommand = function(_super) {
  __extends(CreateMultipartUploadCommand2, _super);
  function CreateMultipartUploadCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateMultipartUploadCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getSsecPlugin(configuration));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "CreateMultipartUploadCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateMultipartUploadRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateMultipartUploadOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateMultipartUploadCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlCreateMultipartUploadCommand(input, context);
  };
  CreateMultipartUploadCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlCreateMultipartUploadCommand(output, context);
  };
  return CreateMultipartUploadCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketAnalyticsConfigurationCommand.js
var DeleteBucketAnalyticsConfigurationCommand = function(_super) {
  __extends(DeleteBucketAnalyticsConfigurationCommand2, _super);
  function DeleteBucketAnalyticsConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteBucketAnalyticsConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteBucketAnalyticsConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteBucketAnalyticsConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteBucketAnalyticsConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand(input, context);
  };
  DeleteBucketAnalyticsConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand(output, context);
  };
  return DeleteBucketAnalyticsConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCommand.js
var DeleteBucketCommand = function(_super) {
  __extends(DeleteBucketCommand2, _super);
  function DeleteBucketCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteBucketCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteBucketCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteBucketRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteBucketCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteBucketCommand(input, context);
  };
  DeleteBucketCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteBucketCommand(output, context);
  };
  return DeleteBucketCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCorsCommand.js
var DeleteBucketCorsCommand = function(_super) {
  __extends(DeleteBucketCorsCommand2, _super);
  function DeleteBucketCorsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteBucketCorsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteBucketCorsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteBucketCorsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteBucketCorsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteBucketCorsCommand(input, context);
  };
  DeleteBucketCorsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteBucketCorsCommand(output, context);
  };
  return DeleteBucketCorsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketEncryptionCommand.js
var DeleteBucketEncryptionCommand = function(_super) {
  __extends(DeleteBucketEncryptionCommand2, _super);
  function DeleteBucketEncryptionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteBucketEncryptionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteBucketEncryptionCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteBucketEncryptionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteBucketEncryptionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteBucketEncryptionCommand(input, context);
  };
  DeleteBucketEncryptionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteBucketEncryptionCommand(output, context);
  };
  return DeleteBucketEncryptionCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketIntelligentTieringConfigurationCommand.js
var DeleteBucketIntelligentTieringConfigurationCommand = function(_super) {
  __extends(DeleteBucketIntelligentTieringConfigurationCommand2, _super);
  function DeleteBucketIntelligentTieringConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteBucketIntelligentTieringConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteBucketIntelligentTieringConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteBucketIntelligentTieringConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteBucketIntelligentTieringConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand(input, context);
  };
  DeleteBucketIntelligentTieringConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand(output, context);
  };
  return DeleteBucketIntelligentTieringConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketInventoryConfigurationCommand.js
var DeleteBucketInventoryConfigurationCommand = function(_super) {
  __extends(DeleteBucketInventoryConfigurationCommand2, _super);
  function DeleteBucketInventoryConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteBucketInventoryConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteBucketInventoryConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteBucketInventoryConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteBucketInventoryConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteBucketInventoryConfigurationCommand(input, context);
  };
  DeleteBucketInventoryConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand(output, context);
  };
  return DeleteBucketInventoryConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketLifecycleCommand.js
var DeleteBucketLifecycleCommand = function(_super) {
  __extends(DeleteBucketLifecycleCommand2, _super);
  function DeleteBucketLifecycleCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteBucketLifecycleCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteBucketLifecycleCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteBucketLifecycleRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteBucketLifecycleCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteBucketLifecycleCommand(input, context);
  };
  DeleteBucketLifecycleCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteBucketLifecycleCommand(output, context);
  };
  return DeleteBucketLifecycleCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetricsConfigurationCommand.js
var DeleteBucketMetricsConfigurationCommand = function(_super) {
  __extends(DeleteBucketMetricsConfigurationCommand2, _super);
  function DeleteBucketMetricsConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteBucketMetricsConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteBucketMetricsConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteBucketMetricsConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteBucketMetricsConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteBucketMetricsConfigurationCommand(input, context);
  };
  DeleteBucketMetricsConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand(output, context);
  };
  return DeleteBucketMetricsConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketOwnershipControlsCommand.js
var DeleteBucketOwnershipControlsCommand = function(_super) {
  __extends(DeleteBucketOwnershipControlsCommand2, _super);
  function DeleteBucketOwnershipControlsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteBucketOwnershipControlsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteBucketOwnershipControlsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteBucketOwnershipControlsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteBucketOwnershipControlsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteBucketOwnershipControlsCommand(input, context);
  };
  DeleteBucketOwnershipControlsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteBucketOwnershipControlsCommand(output, context);
  };
  return DeleteBucketOwnershipControlsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketPolicyCommand.js
var DeleteBucketPolicyCommand = function(_super) {
  __extends(DeleteBucketPolicyCommand2, _super);
  function DeleteBucketPolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteBucketPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteBucketPolicyCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteBucketPolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteBucketPolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteBucketPolicyCommand(input, context);
  };
  DeleteBucketPolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteBucketPolicyCommand(output, context);
  };
  return DeleteBucketPolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketReplicationCommand.js
var DeleteBucketReplicationCommand = function(_super) {
  __extends(DeleteBucketReplicationCommand2, _super);
  function DeleteBucketReplicationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteBucketReplicationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteBucketReplicationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteBucketReplicationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteBucketReplicationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteBucketReplicationCommand(input, context);
  };
  DeleteBucketReplicationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteBucketReplicationCommand(output, context);
  };
  return DeleteBucketReplicationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketTaggingCommand.js
var DeleteBucketTaggingCommand = function(_super) {
  __extends(DeleteBucketTaggingCommand2, _super);
  function DeleteBucketTaggingCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteBucketTaggingCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteBucketTaggingCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteBucketTaggingRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteBucketTaggingCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteBucketTaggingCommand(input, context);
  };
  DeleteBucketTaggingCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteBucketTaggingCommand(output, context);
  };
  return DeleteBucketTaggingCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketWebsiteCommand.js
var DeleteBucketWebsiteCommand = function(_super) {
  __extends(DeleteBucketWebsiteCommand2, _super);
  function DeleteBucketWebsiteCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteBucketWebsiteCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteBucketWebsiteCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteBucketWebsiteRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteBucketWebsiteCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteBucketWebsiteCommand(input, context);
  };
  DeleteBucketWebsiteCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteBucketWebsiteCommand(output, context);
  };
  return DeleteBucketWebsiteCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectCommand.js
var DeleteObjectCommand = function(_super) {
  __extends(DeleteObjectCommand2, _super);
  function DeleteObjectCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteObjectCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteObjectCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteObjectRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteObjectOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteObjectCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteObjectCommand(input, context);
  };
  DeleteObjectCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteObjectCommand(output, context);
  };
  return DeleteObjectCommand2;
}(Command);

// node_modules/@aws-sdk/middleware-apply-body-checksum/dist-es/applyMd5BodyChecksumMiddleware.js
var applyMd5BodyChecksumMiddleware = function(options) {
  return function(next) {
    return function(args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var request, body, headers, digest, hash, _a, _b, _c, _d, _e;
        var _f, _g;
        return __generator(this, function(_h) {
          switch (_h.label) {
            case 0:
              request = args.request;
              if (!HttpRequest.isInstance(request))
                return [3, 2];
              body = request.body, headers = request.headers;
              if (!!hasHeader2("content-md5", headers))
                return [3, 2];
              digest = void 0;
              if (body === void 0 || typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {
                hash = new options.md5();
                hash.update(body || "");
                digest = hash.digest();
              } else {
                digest = options.streamHasher(options.md5, body);
              }
              _a = [__assign({}, request)];
              _f = {};
              _b = [__assign({}, headers)];
              _g = {};
              _c = "content-md5";
              _e = (_d = options).base64Encoder;
              return [4, digest];
            case 1:
              request = __assign.apply(void 0, _a.concat([(_f.headers = __assign.apply(void 0, _b.concat([(_g[_c] = _e.apply(_d, [_h.sent()]), _g)])), _f)]));
              _h.label = 2;
            case 2:
              return [2, next(__assign(__assign({}, args), { request }))];
          }
        });
      });
    };
  };
};
var applyMd5BodyChecksumMiddlewareOptions = {
  name: "applyMd5BodyChecksumMiddleware",
  step: "build",
  tags: ["SET_CONTENT_MD5", "BODY_CHECKSUM"],
  override: true
};
var getApplyMd5BodyChecksumPlugin = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(applyMd5BodyChecksumMiddleware(config), applyMd5BodyChecksumMiddlewareOptions);
    }
  };
};
var hasHeader2 = function(soughtHeader, headers) {
  var e_1, _a;
  soughtHeader = soughtHeader.toLowerCase();
  try {
    for (var _b = __values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return false;
};

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectsCommand.js
var DeleteObjectsCommand = function(_super) {
  __extends(DeleteObjectsCommand2, _super);
  function DeleteObjectsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteObjectsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteObjectsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteObjectsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteObjectsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteObjectsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteObjectsCommand(input, context);
  };
  DeleteObjectsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteObjectsCommand(output, context);
  };
  return DeleteObjectsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectTaggingCommand.js
var DeleteObjectTaggingCommand = function(_super) {
  __extends(DeleteObjectTaggingCommand2, _super);
  function DeleteObjectTaggingCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteObjectTaggingCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeleteObjectTaggingCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteObjectTaggingRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteObjectTaggingOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteObjectTaggingCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeleteObjectTaggingCommand(input, context);
  };
  DeleteObjectTaggingCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeleteObjectTaggingCommand(output, context);
  };
  return DeleteObjectTaggingCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeletePublicAccessBlockCommand.js
var DeletePublicAccessBlockCommand = function(_super) {
  __extends(DeletePublicAccessBlockCommand2, _super);
  function DeletePublicAccessBlockCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeletePublicAccessBlockCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "DeletePublicAccessBlockCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeletePublicAccessBlockRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeletePublicAccessBlockCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlDeletePublicAccessBlockCommand(input, context);
  };
  DeletePublicAccessBlockCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlDeletePublicAccessBlockCommand(output, context);
  };
  return DeletePublicAccessBlockCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAccelerateConfigurationCommand.js
var GetBucketAccelerateConfigurationCommand = function(_super) {
  __extends(GetBucketAccelerateConfigurationCommand2, _super);
  function GetBucketAccelerateConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketAccelerateConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketAccelerateConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketAccelerateConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketAccelerateConfigurationOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketAccelerateConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketAccelerateConfigurationCommand(input, context);
  };
  GetBucketAccelerateConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketAccelerateConfigurationCommand(output, context);
  };
  return GetBucketAccelerateConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAclCommand.js
var GetBucketAclCommand = function(_super) {
  __extends(GetBucketAclCommand2, _super);
  function GetBucketAclCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketAclCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketAclCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketAclRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketAclOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketAclCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketAclCommand(input, context);
  };
  GetBucketAclCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketAclCommand(output, context);
  };
  return GetBucketAclCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAnalyticsConfigurationCommand.js
var GetBucketAnalyticsConfigurationCommand = function(_super) {
  __extends(GetBucketAnalyticsConfigurationCommand2, _super);
  function GetBucketAnalyticsConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketAnalyticsConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketAnalyticsConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketAnalyticsConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketAnalyticsConfigurationOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketAnalyticsConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketAnalyticsConfigurationCommand(input, context);
  };
  GetBucketAnalyticsConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand(output, context);
  };
  return GetBucketAnalyticsConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketCorsCommand.js
var GetBucketCorsCommand = function(_super) {
  __extends(GetBucketCorsCommand2, _super);
  function GetBucketCorsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketCorsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketCorsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketCorsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketCorsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketCorsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketCorsCommand(input, context);
  };
  GetBucketCorsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketCorsCommand(output, context);
  };
  return GetBucketCorsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketEncryptionCommand.js
var GetBucketEncryptionCommand = function(_super) {
  __extends(GetBucketEncryptionCommand2, _super);
  function GetBucketEncryptionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketEncryptionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketEncryptionCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketEncryptionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketEncryptionOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketEncryptionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketEncryptionCommand(input, context);
  };
  GetBucketEncryptionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketEncryptionCommand(output, context);
  };
  return GetBucketEncryptionCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketIntelligentTieringConfigurationCommand.js
var GetBucketIntelligentTieringConfigurationCommand = function(_super) {
  __extends(GetBucketIntelligentTieringConfigurationCommand2, _super);
  function GetBucketIntelligentTieringConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketIntelligentTieringConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketIntelligentTieringConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketIntelligentTieringConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketIntelligentTieringConfigurationOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketIntelligentTieringConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand(input, context);
  };
  GetBucketIntelligentTieringConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand(output, context);
  };
  return GetBucketIntelligentTieringConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketInventoryConfigurationCommand.js
var GetBucketInventoryConfigurationCommand = function(_super) {
  __extends(GetBucketInventoryConfigurationCommand2, _super);
  function GetBucketInventoryConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketInventoryConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketInventoryConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketInventoryConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketInventoryConfigurationOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketInventoryConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketInventoryConfigurationCommand(input, context);
  };
  GetBucketInventoryConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketInventoryConfigurationCommand(output, context);
  };
  return GetBucketInventoryConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLifecycleConfigurationCommand.js
var GetBucketLifecycleConfigurationCommand = function(_super) {
  __extends(GetBucketLifecycleConfigurationCommand2, _super);
  function GetBucketLifecycleConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketLifecycleConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketLifecycleConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketLifecycleConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketLifecycleConfigurationOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketLifecycleConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketLifecycleConfigurationCommand(input, context);
  };
  GetBucketLifecycleConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketLifecycleConfigurationCommand(output, context);
  };
  return GetBucketLifecycleConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLocationCommand.js
var GetBucketLocationCommand = function(_super) {
  __extends(GetBucketLocationCommand2, _super);
  function GetBucketLocationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketLocationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketLocationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketLocationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketLocationOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketLocationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketLocationCommand(input, context);
  };
  GetBucketLocationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketLocationCommand(output, context);
  };
  return GetBucketLocationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLoggingCommand.js
var GetBucketLoggingCommand = function(_super) {
  __extends(GetBucketLoggingCommand2, _super);
  function GetBucketLoggingCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketLoggingCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketLoggingCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketLoggingRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketLoggingOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketLoggingCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketLoggingCommand(input, context);
  };
  GetBucketLoggingCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketLoggingCommand(output, context);
  };
  return GetBucketLoggingCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetricsConfigurationCommand.js
var GetBucketMetricsConfigurationCommand = function(_super) {
  __extends(GetBucketMetricsConfigurationCommand2, _super);
  function GetBucketMetricsConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketMetricsConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketMetricsConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketMetricsConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketMetricsConfigurationOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketMetricsConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketMetricsConfigurationCommand(input, context);
  };
  GetBucketMetricsConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketMetricsConfigurationCommand(output, context);
  };
  return GetBucketMetricsConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketNotificationConfigurationCommand.js
var GetBucketNotificationConfigurationCommand = function(_super) {
  __extends(GetBucketNotificationConfigurationCommand2, _super);
  function GetBucketNotificationConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketNotificationConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketNotificationConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketNotificationConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: NotificationConfiguration.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketNotificationConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketNotificationConfigurationCommand(input, context);
  };
  GetBucketNotificationConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketNotificationConfigurationCommand(output, context);
  };
  return GetBucketNotificationConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketOwnershipControlsCommand.js
var GetBucketOwnershipControlsCommand = function(_super) {
  __extends(GetBucketOwnershipControlsCommand2, _super);
  function GetBucketOwnershipControlsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketOwnershipControlsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketOwnershipControlsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketOwnershipControlsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketOwnershipControlsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketOwnershipControlsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketOwnershipControlsCommand(input, context);
  };
  GetBucketOwnershipControlsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketOwnershipControlsCommand(output, context);
  };
  return GetBucketOwnershipControlsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyCommand.js
var GetBucketPolicyCommand = function(_super) {
  __extends(GetBucketPolicyCommand2, _super);
  function GetBucketPolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketPolicyCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketPolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketPolicyOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketPolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketPolicyCommand(input, context);
  };
  GetBucketPolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketPolicyCommand(output, context);
  };
  return GetBucketPolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyStatusCommand.js
var GetBucketPolicyStatusCommand = function(_super) {
  __extends(GetBucketPolicyStatusCommand2, _super);
  function GetBucketPolicyStatusCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketPolicyStatusCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketPolicyStatusCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketPolicyStatusRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketPolicyStatusOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketPolicyStatusCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketPolicyStatusCommand(input, context);
  };
  GetBucketPolicyStatusCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketPolicyStatusCommand(output, context);
  };
  return GetBucketPolicyStatusCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketReplicationCommand.js
var GetBucketReplicationCommand = function(_super) {
  __extends(GetBucketReplicationCommand2, _super);
  function GetBucketReplicationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketReplicationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketReplicationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketReplicationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketReplicationOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketReplicationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketReplicationCommand(input, context);
  };
  GetBucketReplicationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketReplicationCommand(output, context);
  };
  return GetBucketReplicationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketRequestPaymentCommand.js
var GetBucketRequestPaymentCommand = function(_super) {
  __extends(GetBucketRequestPaymentCommand2, _super);
  function GetBucketRequestPaymentCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketRequestPaymentCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketRequestPaymentCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketRequestPaymentRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketRequestPaymentOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketRequestPaymentCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketRequestPaymentCommand(input, context);
  };
  GetBucketRequestPaymentCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketRequestPaymentCommand(output, context);
  };
  return GetBucketRequestPaymentCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketTaggingCommand.js
var GetBucketTaggingCommand = function(_super) {
  __extends(GetBucketTaggingCommand2, _super);
  function GetBucketTaggingCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketTaggingCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketTaggingCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketTaggingRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketTaggingOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketTaggingCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketTaggingCommand(input, context);
  };
  GetBucketTaggingCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketTaggingCommand(output, context);
  };
  return GetBucketTaggingCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketVersioningCommand.js
var GetBucketVersioningCommand = function(_super) {
  __extends(GetBucketVersioningCommand2, _super);
  function GetBucketVersioningCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketVersioningCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketVersioningCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketVersioningRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketVersioningOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketVersioningCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketVersioningCommand(input, context);
  };
  GetBucketVersioningCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketVersioningCommand(output, context);
  };
  return GetBucketVersioningCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketWebsiteCommand.js
var GetBucketWebsiteCommand = function(_super) {
  __extends(GetBucketWebsiteCommand2, _super);
  function GetBucketWebsiteCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetBucketWebsiteCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetBucketWebsiteCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetBucketWebsiteRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetBucketWebsiteOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetBucketWebsiteCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetBucketWebsiteCommand(input, context);
  };
  GetBucketWebsiteCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetBucketWebsiteCommand(output, context);
  };
  return GetBucketWebsiteCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAclCommand.js
var GetObjectAclCommand = function(_super) {
  __extends(GetObjectAclCommand2, _super);
  function GetObjectAclCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetObjectAclCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetObjectAclCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetObjectAclRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetObjectAclOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetObjectAclCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetObjectAclCommand(input, context);
  };
  GetObjectAclCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetObjectAclCommand(output, context);
  };
  return GetObjectAclCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectCommand.js
var GetObjectCommand = function(_super) {
  __extends(GetObjectCommand2, _super);
  function GetObjectCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetObjectCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getSsecPlugin(configuration));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetObjectCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetObjectRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetObjectOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetObjectCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetObjectCommand(input, context);
  };
  GetObjectCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetObjectCommand(output, context);
  };
  return GetObjectCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLegalHoldCommand.js
var GetObjectLegalHoldCommand = function(_super) {
  __extends(GetObjectLegalHoldCommand2, _super);
  function GetObjectLegalHoldCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetObjectLegalHoldCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetObjectLegalHoldCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetObjectLegalHoldRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetObjectLegalHoldOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetObjectLegalHoldCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetObjectLegalHoldCommand(input, context);
  };
  GetObjectLegalHoldCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetObjectLegalHoldCommand(output, context);
  };
  return GetObjectLegalHoldCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLockConfigurationCommand.js
var GetObjectLockConfigurationCommand = function(_super) {
  __extends(GetObjectLockConfigurationCommand2, _super);
  function GetObjectLockConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetObjectLockConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetObjectLockConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetObjectLockConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetObjectLockConfigurationOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetObjectLockConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetObjectLockConfigurationCommand(input, context);
  };
  GetObjectLockConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetObjectLockConfigurationCommand(output, context);
  };
  return GetObjectLockConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectRetentionCommand.js
var GetObjectRetentionCommand = function(_super) {
  __extends(GetObjectRetentionCommand2, _super);
  function GetObjectRetentionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetObjectRetentionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetObjectRetentionCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetObjectRetentionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetObjectRetentionOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetObjectRetentionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetObjectRetentionCommand(input, context);
  };
  GetObjectRetentionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetObjectRetentionCommand(output, context);
  };
  return GetObjectRetentionCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTaggingCommand.js
var GetObjectTaggingCommand = function(_super) {
  __extends(GetObjectTaggingCommand2, _super);
  function GetObjectTaggingCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetObjectTaggingCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetObjectTaggingCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetObjectTaggingRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetObjectTaggingOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetObjectTaggingCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetObjectTaggingCommand(input, context);
  };
  GetObjectTaggingCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetObjectTaggingCommand(output, context);
  };
  return GetObjectTaggingCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTorrentCommand.js
var GetObjectTorrentCommand = function(_super) {
  __extends(GetObjectTorrentCommand2, _super);
  function GetObjectTorrentCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetObjectTorrentCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetObjectTorrentCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetObjectTorrentRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetObjectTorrentOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetObjectTorrentCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetObjectTorrentCommand(input, context);
  };
  GetObjectTorrentCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetObjectTorrentCommand(output, context);
  };
  return GetObjectTorrentCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetPublicAccessBlockCommand.js
var GetPublicAccessBlockCommand = function(_super) {
  __extends(GetPublicAccessBlockCommand2, _super);
  function GetPublicAccessBlockCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetPublicAccessBlockCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "GetPublicAccessBlockCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetPublicAccessBlockRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetPublicAccessBlockOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetPublicAccessBlockCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlGetPublicAccessBlockCommand(input, context);
  };
  GetPublicAccessBlockCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlGetPublicAccessBlockCommand(output, context);
  };
  return GetPublicAccessBlockCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js
var HeadBucketCommand = function(_super) {
  __extends(HeadBucketCommand2, _super);
  function HeadBucketCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  HeadBucketCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "HeadBucketCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: HeadBucketRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  HeadBucketCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlHeadBucketCommand(input, context);
  };
  HeadBucketCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlHeadBucketCommand(output, context);
  };
  return HeadBucketCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js
var HeadObjectCommand = function(_super) {
  __extends(HeadObjectCommand2, _super);
  function HeadObjectCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  HeadObjectCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getSsecPlugin(configuration));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "HeadObjectCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: HeadObjectRequest.filterSensitiveLog,
      outputFilterSensitiveLog: HeadObjectOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  HeadObjectCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlHeadObjectCommand(input, context);
  };
  HeadObjectCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlHeadObjectCommand(output, context);
  };
  return HeadObjectCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketAnalyticsConfigurationsCommand.js
var ListBucketAnalyticsConfigurationsCommand = function(_super) {
  __extends(ListBucketAnalyticsConfigurationsCommand2, _super);
  function ListBucketAnalyticsConfigurationsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListBucketAnalyticsConfigurationsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "ListBucketAnalyticsConfigurationsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListBucketAnalyticsConfigurationsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListBucketAnalyticsConfigurationsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListBucketAnalyticsConfigurationsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlListBucketAnalyticsConfigurationsCommand(input, context);
  };
  ListBucketAnalyticsConfigurationsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand(output, context);
  };
  return ListBucketAnalyticsConfigurationsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketIntelligentTieringConfigurationsCommand.js
var ListBucketIntelligentTieringConfigurationsCommand = function(_super) {
  __extends(ListBucketIntelligentTieringConfigurationsCommand2, _super);
  function ListBucketIntelligentTieringConfigurationsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListBucketIntelligentTieringConfigurationsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "ListBucketIntelligentTieringConfigurationsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListBucketIntelligentTieringConfigurationsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListBucketIntelligentTieringConfigurationsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListBucketIntelligentTieringConfigurationsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand(input, context);
  };
  ListBucketIntelligentTieringConfigurationsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand(output, context);
  };
  return ListBucketIntelligentTieringConfigurationsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketInventoryConfigurationsCommand.js
var ListBucketInventoryConfigurationsCommand = function(_super) {
  __extends(ListBucketInventoryConfigurationsCommand2, _super);
  function ListBucketInventoryConfigurationsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListBucketInventoryConfigurationsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "ListBucketInventoryConfigurationsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListBucketInventoryConfigurationsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListBucketInventoryConfigurationsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListBucketInventoryConfigurationsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlListBucketInventoryConfigurationsCommand(input, context);
  };
  ListBucketInventoryConfigurationsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlListBucketInventoryConfigurationsCommand(output, context);
  };
  return ListBucketInventoryConfigurationsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketMetricsConfigurationsCommand.js
var ListBucketMetricsConfigurationsCommand = function(_super) {
  __extends(ListBucketMetricsConfigurationsCommand2, _super);
  function ListBucketMetricsConfigurationsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListBucketMetricsConfigurationsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "ListBucketMetricsConfigurationsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListBucketMetricsConfigurationsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListBucketMetricsConfigurationsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListBucketMetricsConfigurationsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlListBucketMetricsConfigurationsCommand(input, context);
  };
  ListBucketMetricsConfigurationsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlListBucketMetricsConfigurationsCommand(output, context);
  };
  return ListBucketMetricsConfigurationsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketsCommand.js
var ListBucketsCommand = function(_super) {
  __extends(ListBucketsCommand2, _super);
  function ListBucketsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListBucketsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "ListBucketsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: function(input) {
        return input;
      },
      outputFilterSensitiveLog: ListBucketsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListBucketsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlListBucketsCommand(input, context);
  };
  ListBucketsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlListBucketsCommand(output, context);
  };
  return ListBucketsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListMultipartUploadsCommand.js
var ListMultipartUploadsCommand = function(_super) {
  __extends(ListMultipartUploadsCommand2, _super);
  function ListMultipartUploadsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListMultipartUploadsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "ListMultipartUploadsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListMultipartUploadsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListMultipartUploadsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListMultipartUploadsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlListMultipartUploadsCommand(input, context);
  };
  ListMultipartUploadsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlListMultipartUploadsCommand(output, context);
  };
  return ListMultipartUploadsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsCommand.js
var ListObjectsCommand = function(_super) {
  __extends(ListObjectsCommand2, _super);
  function ListObjectsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListObjectsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "ListObjectsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListObjectsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListObjectsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListObjectsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlListObjectsCommand(input, context);
  };
  ListObjectsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlListObjectsCommand(output, context);
  };
  return ListObjectsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js
var ListObjectsV2Command = function(_super) {
  __extends(ListObjectsV2Command2, _super);
  function ListObjectsV2Command2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListObjectsV2Command2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "ListObjectsV2Command";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListObjectsV2Request.filterSensitiveLog,
      outputFilterSensitiveLog: ListObjectsV2Output.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListObjectsV2Command2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlListObjectsV2Command(input, context);
  };
  ListObjectsV2Command2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlListObjectsV2Command(output, context);
  };
  return ListObjectsV2Command2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectVersionsCommand.js
var ListObjectVersionsCommand = function(_super) {
  __extends(ListObjectVersionsCommand2, _super);
  function ListObjectVersionsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListObjectVersionsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "ListObjectVersionsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListObjectVersionsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListObjectVersionsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListObjectVersionsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlListObjectVersionsCommand(input, context);
  };
  ListObjectVersionsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlListObjectVersionsCommand(output, context);
  };
  return ListObjectVersionsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js
var ListPartsCommand = function(_super) {
  __extends(ListPartsCommand2, _super);
  function ListPartsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListPartsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "ListPartsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListPartsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListPartsOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListPartsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlListPartsCommand(input, context);
  };
  ListPartsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlListPartsCommand(output, context);
  };
  return ListPartsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAccelerateConfigurationCommand.js
var PutBucketAccelerateConfigurationCommand = function(_super) {
  __extends(PutBucketAccelerateConfigurationCommand2, _super);
  function PutBucketAccelerateConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketAccelerateConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketAccelerateConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketAccelerateConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketAccelerateConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketAccelerateConfigurationCommand(input, context);
  };
  PutBucketAccelerateConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketAccelerateConfigurationCommand(output, context);
  };
  return PutBucketAccelerateConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAclCommand.js
var PutBucketAclCommand = function(_super) {
  __extends(PutBucketAclCommand2, _super);
  function PutBucketAclCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketAclCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketAclCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketAclRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketAclCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketAclCommand(input, context);
  };
  PutBucketAclCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketAclCommand(output, context);
  };
  return PutBucketAclCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAnalyticsConfigurationCommand.js
var PutBucketAnalyticsConfigurationCommand = function(_super) {
  __extends(PutBucketAnalyticsConfigurationCommand2, _super);
  function PutBucketAnalyticsConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketAnalyticsConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketAnalyticsConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketAnalyticsConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketAnalyticsConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketAnalyticsConfigurationCommand(input, context);
  };
  PutBucketAnalyticsConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand(output, context);
  };
  return PutBucketAnalyticsConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketCorsCommand.js
var PutBucketCorsCommand = function(_super) {
  __extends(PutBucketCorsCommand2, _super);
  function PutBucketCorsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketCorsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketCorsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketCorsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketCorsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketCorsCommand(input, context);
  };
  PutBucketCorsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketCorsCommand(output, context);
  };
  return PutBucketCorsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketEncryptionCommand.js
var PutBucketEncryptionCommand = function(_super) {
  __extends(PutBucketEncryptionCommand2, _super);
  function PutBucketEncryptionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketEncryptionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketEncryptionCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketEncryptionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketEncryptionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketEncryptionCommand(input, context);
  };
  PutBucketEncryptionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketEncryptionCommand(output, context);
  };
  return PutBucketEncryptionCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketIntelligentTieringConfigurationCommand.js
var PutBucketIntelligentTieringConfigurationCommand = function(_super) {
  __extends(PutBucketIntelligentTieringConfigurationCommand2, _super);
  function PutBucketIntelligentTieringConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketIntelligentTieringConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketIntelligentTieringConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketIntelligentTieringConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketIntelligentTieringConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand(input, context);
  };
  PutBucketIntelligentTieringConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand(output, context);
  };
  return PutBucketIntelligentTieringConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketInventoryConfigurationCommand.js
var PutBucketInventoryConfigurationCommand = function(_super) {
  __extends(PutBucketInventoryConfigurationCommand2, _super);
  function PutBucketInventoryConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketInventoryConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketInventoryConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketInventoryConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketInventoryConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketInventoryConfigurationCommand(input, context);
  };
  PutBucketInventoryConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketInventoryConfigurationCommand(output, context);
  };
  return PutBucketInventoryConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLifecycleConfigurationCommand.js
var PutBucketLifecycleConfigurationCommand = function(_super) {
  __extends(PutBucketLifecycleConfigurationCommand2, _super);
  function PutBucketLifecycleConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketLifecycleConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketLifecycleConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketLifecycleConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketLifecycleConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketLifecycleConfigurationCommand(input, context);
  };
  PutBucketLifecycleConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketLifecycleConfigurationCommand(output, context);
  };
  return PutBucketLifecycleConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLoggingCommand.js
var PutBucketLoggingCommand = function(_super) {
  __extends(PutBucketLoggingCommand2, _super);
  function PutBucketLoggingCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketLoggingCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketLoggingCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketLoggingRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketLoggingCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketLoggingCommand(input, context);
  };
  PutBucketLoggingCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketLoggingCommand(output, context);
  };
  return PutBucketLoggingCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketMetricsConfigurationCommand.js
var PutBucketMetricsConfigurationCommand = function(_super) {
  __extends(PutBucketMetricsConfigurationCommand2, _super);
  function PutBucketMetricsConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketMetricsConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketMetricsConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketMetricsConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketMetricsConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketMetricsConfigurationCommand(input, context);
  };
  PutBucketMetricsConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketMetricsConfigurationCommand(output, context);
  };
  return PutBucketMetricsConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketNotificationConfigurationCommand.js
var PutBucketNotificationConfigurationCommand = function(_super) {
  __extends(PutBucketNotificationConfigurationCommand2, _super);
  function PutBucketNotificationConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketNotificationConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketNotificationConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketNotificationConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketNotificationConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketNotificationConfigurationCommand(input, context);
  };
  PutBucketNotificationConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketNotificationConfigurationCommand(output, context);
  };
  return PutBucketNotificationConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketOwnershipControlsCommand.js
var PutBucketOwnershipControlsCommand = function(_super) {
  __extends(PutBucketOwnershipControlsCommand2, _super);
  function PutBucketOwnershipControlsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketOwnershipControlsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketOwnershipControlsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketOwnershipControlsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketOwnershipControlsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketOwnershipControlsCommand(input, context);
  };
  PutBucketOwnershipControlsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketOwnershipControlsCommand(output, context);
  };
  return PutBucketOwnershipControlsCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketPolicyCommand.js
var PutBucketPolicyCommand = function(_super) {
  __extends(PutBucketPolicyCommand2, _super);
  function PutBucketPolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketPolicyCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketPolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketPolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketPolicyCommand(input, context);
  };
  PutBucketPolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketPolicyCommand(output, context);
  };
  return PutBucketPolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketReplicationCommand.js
var PutBucketReplicationCommand = function(_super) {
  __extends(PutBucketReplicationCommand2, _super);
  function PutBucketReplicationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketReplicationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketReplicationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketReplicationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketReplicationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketReplicationCommand(input, context);
  };
  PutBucketReplicationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketReplicationCommand(output, context);
  };
  return PutBucketReplicationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketRequestPaymentCommand.js
var PutBucketRequestPaymentCommand = function(_super) {
  __extends(PutBucketRequestPaymentCommand2, _super);
  function PutBucketRequestPaymentCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketRequestPaymentCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketRequestPaymentCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketRequestPaymentRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketRequestPaymentCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketRequestPaymentCommand(input, context);
  };
  PutBucketRequestPaymentCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketRequestPaymentCommand(output, context);
  };
  return PutBucketRequestPaymentCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketTaggingCommand.js
var PutBucketTaggingCommand = function(_super) {
  __extends(PutBucketTaggingCommand2, _super);
  function PutBucketTaggingCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketTaggingCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketTaggingCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketTaggingRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketTaggingCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketTaggingCommand(input, context);
  };
  PutBucketTaggingCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketTaggingCommand(output, context);
  };
  return PutBucketTaggingCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketVersioningCommand.js
var PutBucketVersioningCommand = function(_super) {
  __extends(PutBucketVersioningCommand2, _super);
  function PutBucketVersioningCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketVersioningCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketVersioningCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketVersioningRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketVersioningCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketVersioningCommand(input, context);
  };
  PutBucketVersioningCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketVersioningCommand(output, context);
  };
  return PutBucketVersioningCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketWebsiteCommand.js
var PutBucketWebsiteCommand = function(_super) {
  __extends(PutBucketWebsiteCommand2, _super);
  function PutBucketWebsiteCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutBucketWebsiteCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutBucketWebsiteCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutBucketWebsiteRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutBucketWebsiteCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutBucketWebsiteCommand(input, context);
  };
  PutBucketWebsiteCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutBucketWebsiteCommand(output, context);
  };
  return PutBucketWebsiteCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectAclCommand.js
var PutObjectAclCommand = function(_super) {
  __extends(PutObjectAclCommand2, _super);
  function PutObjectAclCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutObjectAclCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutObjectAclCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutObjectAclRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutObjectAclOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutObjectAclCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutObjectAclCommand(input, context);
  };
  PutObjectAclCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutObjectAclCommand(output, context);
  };
  return PutObjectAclCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectCommand.js
var PutObjectCommand = function(_super) {
  __extends(PutObjectCommand2, _super);
  function PutObjectCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutObjectCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getSsecPlugin(configuration));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutObjectCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutObjectRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutObjectOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutObjectCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutObjectCommand(input, context);
  };
  PutObjectCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutObjectCommand(output, context);
  };
  return PutObjectCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLegalHoldCommand.js
var PutObjectLegalHoldCommand = function(_super) {
  __extends(PutObjectLegalHoldCommand2, _super);
  function PutObjectLegalHoldCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutObjectLegalHoldCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutObjectLegalHoldCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutObjectLegalHoldRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutObjectLegalHoldOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutObjectLegalHoldCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutObjectLegalHoldCommand(input, context);
  };
  PutObjectLegalHoldCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutObjectLegalHoldCommand(output, context);
  };
  return PutObjectLegalHoldCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLockConfigurationCommand.js
var PutObjectLockConfigurationCommand = function(_super) {
  __extends(PutObjectLockConfigurationCommand2, _super);
  function PutObjectLockConfigurationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutObjectLockConfigurationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutObjectLockConfigurationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutObjectLockConfigurationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutObjectLockConfigurationOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutObjectLockConfigurationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutObjectLockConfigurationCommand(input, context);
  };
  PutObjectLockConfigurationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutObjectLockConfigurationCommand(output, context);
  };
  return PutObjectLockConfigurationCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectRetentionCommand.js
var PutObjectRetentionCommand = function(_super) {
  __extends(PutObjectRetentionCommand2, _super);
  function PutObjectRetentionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutObjectRetentionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutObjectRetentionCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutObjectRetentionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutObjectRetentionOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutObjectRetentionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutObjectRetentionCommand(input, context);
  };
  PutObjectRetentionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutObjectRetentionCommand(output, context);
  };
  return PutObjectRetentionCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectTaggingCommand.js
var PutObjectTaggingCommand = function(_super) {
  __extends(PutObjectTaggingCommand2, _super);
  function PutObjectTaggingCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutObjectTaggingCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutObjectTaggingCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutObjectTaggingRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutObjectTaggingOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutObjectTaggingCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutObjectTaggingCommand(input, context);
  };
  PutObjectTaggingCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutObjectTaggingCommand(output, context);
  };
  return PutObjectTaggingCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutPublicAccessBlockCommand.js
var PutPublicAccessBlockCommand = function(_super) {
  __extends(PutPublicAccessBlockCommand2, _super);
  function PutPublicAccessBlockCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutPublicAccessBlockCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "PutPublicAccessBlockCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutPublicAccessBlockRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutPublicAccessBlockCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlPutPublicAccessBlockCommand(input, context);
  };
  PutPublicAccessBlockCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlPutPublicAccessBlockCommand(output, context);
  };
  return PutPublicAccessBlockCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js
var Encryption;
(function(Encryption2) {
  Encryption2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.KMSKeyId && { KMSKeyId: SENSITIVE_STRING });
  };
})(Encryption || (Encryption = {}));
var MetadataEntry;
(function(MetadataEntry2) {
  MetadataEntry2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MetadataEntry || (MetadataEntry = {}));
var S3Location;
(function(S3Location2) {
  S3Location2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Encryption && { Encryption: Encryption.filterSensitiveLog(obj.Encryption) });
  };
})(S3Location || (S3Location = {}));
var OutputLocation;
(function(OutputLocation2) {
  OutputLocation2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.S3 && { S3: S3Location.filterSensitiveLog(obj.S3) });
  };
})(OutputLocation || (OutputLocation = {}));
var FileHeaderInfo;
(function(FileHeaderInfo2) {
  FileHeaderInfo2["IGNORE"] = "IGNORE";
  FileHeaderInfo2["NONE"] = "NONE";
  FileHeaderInfo2["USE"] = "USE";
})(FileHeaderInfo || (FileHeaderInfo = {}));
var CSVInput;
(function(CSVInput2) {
  CSVInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CSVInput || (CSVInput = {}));
var JSONType;
(function(JSONType2) {
  JSONType2["DOCUMENT"] = "DOCUMENT";
  JSONType2["LINES"] = "LINES";
})(JSONType || (JSONType = {}));
var JSONInput;
(function(JSONInput2) {
  JSONInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(JSONInput || (JSONInput = {}));
var ParquetInput;
(function(ParquetInput2) {
  ParquetInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ParquetInput || (ParquetInput = {}));
var InputSerialization;
(function(InputSerialization2) {
  InputSerialization2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InputSerialization || (InputSerialization = {}));
var QuoteFields;
(function(QuoteFields2) {
  QuoteFields2["ALWAYS"] = "ALWAYS";
  QuoteFields2["ASNEEDED"] = "ASNEEDED";
})(QuoteFields || (QuoteFields = {}));
var CSVOutput;
(function(CSVOutput2) {
  CSVOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CSVOutput || (CSVOutput = {}));
var JSONOutput;
(function(JSONOutput2) {
  JSONOutput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(JSONOutput || (JSONOutput = {}));
var OutputSerialization;
(function(OutputSerialization2) {
  OutputSerialization2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(OutputSerialization || (OutputSerialization = {}));
var SelectParameters;
(function(SelectParameters2) {
  SelectParameters2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SelectParameters || (SelectParameters = {}));
var RestoreRequestType;
(function(RestoreRequestType2) {
  RestoreRequestType2["SELECT"] = "SELECT";
})(RestoreRequestType || (RestoreRequestType = {}));
var RestoreRequest;
(function(RestoreRequest2) {
  RestoreRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.OutputLocation && { OutputLocation: OutputLocation.filterSensitiveLog(obj.OutputLocation) });
  };
})(RestoreRequest || (RestoreRequest = {}));
var RestoreObjectRequest;
(function(RestoreObjectRequest2) {
  RestoreObjectRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.RestoreRequest && { RestoreRequest: RestoreRequest.filterSensitiveLog(obj.RestoreRequest) });
  };
})(RestoreObjectRequest || (RestoreObjectRequest = {}));
var ContinuationEvent;
(function(ContinuationEvent2) {
  ContinuationEvent2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ContinuationEvent || (ContinuationEvent = {}));
var EndEvent;
(function(EndEvent2) {
  EndEvent2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(EndEvent || (EndEvent = {}));
var Progress;
(function(Progress2) {
  Progress2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Progress || (Progress = {}));
var ProgressEvent;
(function(ProgressEvent2) {
  ProgressEvent2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ProgressEvent || (ProgressEvent = {}));
var RecordsEvent;
(function(RecordsEvent2) {
  RecordsEvent2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RecordsEvent || (RecordsEvent = {}));
var Stats;
(function(Stats2) {
  Stats2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Stats || (Stats = {}));
var StatsEvent;
(function(StatsEvent2) {
  StatsEvent2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StatsEvent || (StatsEvent = {}));
var SelectObjectContentEventStream;
(function(SelectObjectContentEventStream2) {
  SelectObjectContentEventStream2.visit = function(value, visitor) {
    if (value.Records !== void 0)
      return visitor.Records(value.Records);
    if (value.Stats !== void 0)
      return visitor.Stats(value.Stats);
    if (value.Progress !== void 0)
      return visitor.Progress(value.Progress);
    if (value.Cont !== void 0)
      return visitor.Cont(value.Cont);
    if (value.End !== void 0)
      return visitor.End(value.End);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
  SelectObjectContentEventStream2.filterSensitiveLog = function(obj) {
    var _a;
    if (obj.Records !== void 0)
      return { Records: RecordsEvent.filterSensitiveLog(obj.Records) };
    if (obj.Stats !== void 0)
      return { Stats: StatsEvent.filterSensitiveLog(obj.Stats) };
    if (obj.Progress !== void 0)
      return { Progress: ProgressEvent.filterSensitiveLog(obj.Progress) };
    if (obj.Cont !== void 0)
      return { Cont: ContinuationEvent.filterSensitiveLog(obj.Cont) };
    if (obj.End !== void 0)
      return { End: EndEvent.filterSensitiveLog(obj.End) };
    if (obj.$unknown !== void 0)
      return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
  };
})(SelectObjectContentEventStream || (SelectObjectContentEventStream = {}));
var SelectObjectContentOutput;
(function(SelectObjectContentOutput2) {
  SelectObjectContentOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.Payload && { Payload: "STREAMING_CONTENT" });
  };
})(SelectObjectContentOutput || (SelectObjectContentOutput = {}));
var RequestProgress;
(function(RequestProgress2) {
  RequestProgress2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RequestProgress || (RequestProgress = {}));
var ScanRange;
(function(ScanRange2) {
  ScanRange2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ScanRange || (ScanRange = {}));
var SelectObjectContentRequest;
(function(SelectObjectContentRequest2) {
  SelectObjectContentRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING });
  };
})(SelectObjectContentRequest || (SelectObjectContentRequest = {}));
var UploadPartOutput;
(function(UploadPartOutput2) {
  UploadPartOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING });
  };
})(UploadPartOutput || (UploadPartOutput = {}));
var UploadPartRequest;
(function(UploadPartRequest2) {
  UploadPartRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING });
  };
})(UploadPartRequest || (UploadPartRequest = {}));
var CopyPartResult;
(function(CopyPartResult2) {
  CopyPartResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CopyPartResult || (CopyPartResult = {}));
var UploadPartCopyOutput;
(function(UploadPartCopyOutput2) {
  UploadPartCopyOutput2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING });
  };
})(UploadPartCopyOutput || (UploadPartCopyOutput = {}));
var UploadPartCopyRequest;
(function(UploadPartCopyRequest2) {
  UploadPartCopyRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign(__assign({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }), obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: SENSITIVE_STRING });
  };
})(UploadPartCopyRequest || (UploadPartCopyRequest = {}));
var WriteGetObjectResponseRequest;
(function(WriteGetObjectResponseRequest2) {
  WriteGetObjectResponseRequest2.filterSensitiveLog = function(obj) {
    return __assign(__assign({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING });
  };
})(WriteGetObjectResponseRequest || (WriteGetObjectResponseRequest = {}));

// node_modules/@aws-sdk/client-s3/dist-es/commands/RestoreObjectCommand.js
var RestoreObjectCommand = function(_super) {
  __extends(RestoreObjectCommand2, _super);
  function RestoreObjectCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  RestoreObjectCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "RestoreObjectCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: RestoreObjectRequest.filterSensitiveLog,
      outputFilterSensitiveLog: RestoreObjectOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  RestoreObjectCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlRestoreObjectCommand(input, context);
  };
  RestoreObjectCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlRestoreObjectCommand(output, context);
  };
  return RestoreObjectCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/SelectObjectContentCommand.js
var SelectObjectContentCommand = function(_super) {
  __extends(SelectObjectContentCommand2, _super);
  function SelectObjectContentCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SelectObjectContentCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getSsecPlugin(configuration));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "SelectObjectContentCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SelectObjectContentRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SelectObjectContentOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SelectObjectContentCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlSelectObjectContentCommand(input, context);
  };
  SelectObjectContentCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlSelectObjectContentCommand(output, context);
  };
  return SelectObjectContentCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCommand.js
var UploadPartCommand = function(_super) {
  __extends(UploadPartCommand2, _super);
  function UploadPartCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UploadPartCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getSsecPlugin(configuration));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "UploadPartCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UploadPartRequest.filterSensitiveLog,
      outputFilterSensitiveLog: UploadPartOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UploadPartCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlUploadPartCommand(input, context);
  };
  UploadPartCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlUploadPartCommand(output, context);
  };
  return UploadPartCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCopyCommand.js
var UploadPartCopyCommand = function(_super) {
  __extends(UploadPartCopyCommand2, _super);
  function UploadPartCopyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UploadPartCopyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));
    this.middlewareStack.use(getSsecPlugin(configuration));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "UploadPartCopyCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UploadPartCopyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: UploadPartCopyOutput.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UploadPartCopyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlUploadPartCopyCommand(input, context);
  };
  UploadPartCopyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlUploadPartCopyCommand(output, context);
  };
  return UploadPartCopyCommand2;
}(Command);

// node_modules/@aws-sdk/client-s3/dist-es/commands/WriteGetObjectResponseCommand.js
var WriteGetObjectResponseCommand = function(_super) {
  __extends(WriteGetObjectResponseCommand2, _super);
  function WriteGetObjectResponseCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  WriteGetObjectResponseCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getBucketEndpointPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "S3Client";
    var commandName = "WriteGetObjectResponseCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: WriteGetObjectResponseRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  WriteGetObjectResponseCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restXmlWriteGetObjectResponseCommand(input, context);
  };
  WriteGetObjectResponseCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restXmlWriteGetObjectResponseCommand(output, context);
  };
  return WriteGetObjectResponseCommand2;
}(Command);

// node_modules/@aws-sdk/middleware-expect-continue/dist-es/index.js
function addExpectContinueMiddleware(options) {
  var _this = this;
  return function(next) {
    return function(args) {
      return __awaiter(_this, void 0, void 0, function() {
        var request;
        return __generator(this, function(_a) {
          request = args.request;
          if (HttpRequest.isInstance(request) && request.body && options.runtime === "node") {
            request.headers = __assign(__assign({}, request.headers), { Expect: "100-continue" });
          }
          return [2, next(__assign(__assign({}, args), { request }))];
        });
      });
    };
  };
}
var addExpectContinueMiddlewareOptions = {
  step: "build",
  tags: ["SET_EXPECT_HEADER", "EXPECT_HEADER"],
  name: "addExpectContinueMiddleware",
  override: true
};
var getAddExpectContinuePlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/client-s3/package.json
var name3 = "@aws-sdk/client-s3";
var description3 = "AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native";
var version3 = "3.42.0";
var scripts3 = {
  build: "yarn build:cjs && yarn build:es && yarn build:types",
  "build:cjs": "tsc -p tsconfig.json",
  "build:docs": "yarn clean:docs && typedoc ./",
  "build:es": "tsc -p tsconfig.es.json",
  "build:types": "tsc -p tsconfig.types.json",
  clean: "yarn clean:dist && yarn clean:docs",
  "clean:dist": "rimraf ./dist",
  "clean:docs": "rimraf ./docs",
  "downlevel-dts": "downlevel-dts dist-types dist-types/ts3.4",
  test: "yarn test:unit",
  "test:e2e": "ts-mocha test/**/*.ispec.ts && karma start karma.conf.js",
  "test:unit": "ts-mocha test/**/*.spec.ts"
};
var main3 = "./dist-cjs/index.js";
var types3 = "./dist-types/index.d.ts";
var module3 = "./dist-es/index.js";
var sideEffects3 = false;
var dependencies3 = {
  "@aws-crypto/sha256-browser": "2.0.0",
  "@aws-crypto/sha256-js": "2.0.0",
  "@aws-sdk/client-sts": "3.42.0",
  "@aws-sdk/config-resolver": "3.40.0",
  "@aws-sdk/credential-provider-node": "3.41.0",
  "@aws-sdk/eventstream-serde-browser": "3.40.0",
  "@aws-sdk/eventstream-serde-config-resolver": "3.40.0",
  "@aws-sdk/eventstream-serde-node": "3.40.0",
  "@aws-sdk/fetch-http-handler": "3.40.0",
  "@aws-sdk/hash-blob-browser": "3.40.0",
  "@aws-sdk/hash-node": "3.40.0",
  "@aws-sdk/hash-stream-node": "3.40.0",
  "@aws-sdk/invalid-dependency": "3.40.0",
  "@aws-sdk/md5-js": "3.40.0",
  "@aws-sdk/middleware-apply-body-checksum": "3.40.0",
  "@aws-sdk/middleware-bucket-endpoint": "3.41.0",
  "@aws-sdk/middleware-content-length": "3.40.0",
  "@aws-sdk/middleware-expect-continue": "3.40.0",
  "@aws-sdk/middleware-host-header": "3.40.0",
  "@aws-sdk/middleware-location-constraint": "3.40.0",
  "@aws-sdk/middleware-logger": "3.40.0",
  "@aws-sdk/middleware-retry": "3.40.0",
  "@aws-sdk/middleware-sdk-s3": "3.41.0",
  "@aws-sdk/middleware-serde": "3.40.0",
  "@aws-sdk/middleware-signing": "3.40.0",
  "@aws-sdk/middleware-ssec": "3.40.0",
  "@aws-sdk/middleware-stack": "3.40.0",
  "@aws-sdk/middleware-user-agent": "3.40.0",
  "@aws-sdk/node-config-provider": "3.40.0",
  "@aws-sdk/node-http-handler": "3.40.0",
  "@aws-sdk/protocol-http": "3.40.0",
  "@aws-sdk/smithy-client": "3.41.0",
  "@aws-sdk/types": "3.40.0",
  "@aws-sdk/url-parser": "3.40.0",
  "@aws-sdk/util-base64-browser": "3.37.0",
  "@aws-sdk/util-base64-node": "3.37.0",
  "@aws-sdk/util-body-length-browser": "3.37.0",
  "@aws-sdk/util-body-length-node": "3.37.0",
  "@aws-sdk/util-user-agent-browser": "3.40.0",
  "@aws-sdk/util-user-agent-node": "3.40.0",
  "@aws-sdk/util-utf8-browser": "3.37.0",
  "@aws-sdk/util-utf8-node": "3.37.0",
  "@aws-sdk/util-waiter": "3.40.0",
  "@aws-sdk/xml-builder": "3.37.0",
  entities: "2.2.0",
  "fast-xml-parser": "3.19.0",
  tslib: "^2.3.0"
};
var devDependencies3 = {
  "@aws-sdk/service-client-documentation-generator": "3.38.0",
  "@types/chai": "^4.2.11",
  "@types/mocha": "^8.0.4",
  "@types/node": "^12.7.5",
  "downlevel-dts": "0.7.0",
  jest: "^26.1.0",
  rimraf: "^3.0.0",
  "ts-jest": "^26.4.1",
  typedoc: "^0.19.2",
  typescript: "~4.3.5"
};
var engines3 = {
  node: ">=10.0.0"
};
var typesVersions3 = {
  "<4.0": {
    "dist-types/*": [
      "dist-types/ts3.4/*"
    ]
  }
};
var files3 = [
  "dist-*"
];
var author3 = {
  name: "AWS SDK for JavaScript Team",
  url: "https://aws.amazon.com/javascript/"
};
var license3 = "Apache-2.0";
var browser3 = {
  "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
};
var react_native3 = {
  "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
};
var homepage3 = "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3";
var repository3 = {
  type: "git",
  url: "https://github.com/aws/aws-sdk-js-v3.git",
  directory: "clients/client-s3"
};
var package_default3 = {
  name: name3,
  description: description3,
  version: version3,
  scripts: scripts3,
  main: main3,
  types: types3,
  module: module3,
  sideEffects: sideEffects3,
  dependencies: dependencies3,
  devDependencies: devDependencies3,
  engines: engines3,
  typesVersions: typesVersions3,
  files: files3,
  author: author3,
  license: license3,
  browser: browser3,
  "react-native": react_native3,
  homepage: homepage3,
  repository: repository3
};

// node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.browser.js
var import_sha256_browser3 = __toModule(require_build5());

// node_modules/@aws-sdk/chunked-blob-reader/dist-es/index.js
function blobReader(blob, onChunk, chunkSize) {
  if (chunkSize === void 0) {
    chunkSize = 1024 * 1024;
  }
  return new Promise(function(resolve, reject) {
    var fileReader = new FileReader();
    fileReader.addEventListener("error", reject);
    fileReader.addEventListener("abort", reject);
    var size = blob.size;
    var totalBytesRead = 0;
    function read() {
      if (totalBytesRead >= size) {
        resolve();
        return;
      }
      fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));
    }
    fileReader.addEventListener("load", function(event) {
      var result = event.target.result;
      onChunk(new Uint8Array(result));
      totalBytesRead += result.byteLength;
      read();
    });
    read();
  });
}

// node_modules/@aws-sdk/hash-blob-browser/dist-es/index.js
var blobHasher = function blobHasher2(hashCtor, blob) {
  return __awaiter(this, void 0, void 0, function() {
    var hash;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          hash = new hashCtor();
          return [4, blobReader(blob, function(chunk) {
            hash.update(chunk);
          })];
        case 1:
          _a.sent();
          return [2, hash.digest()];
      }
    });
  });
};

// node_modules/@aws-sdk/md5-js/dist-es/index.js
var import_util_utf8_node = __toModule(require_dist_cjs());

// node_modules/@aws-sdk/md5-js/dist-es/constants.js
var BLOCK_SIZE = 64;
var DIGEST_LENGTH = 16;
var INIT = [1732584193, 4023233417, 2562383102, 271733878];

// node_modules/@aws-sdk/md5-js/dist-es/index.js
var Md5 = function() {
  function Md52() {
    this.state = Uint32Array.from(INIT);
    this.buffer = new DataView(new ArrayBuffer(BLOCK_SIZE));
    this.bufferLength = 0;
    this.bytesHashed = 0;
    this.finished = false;
  }
  Md52.prototype.update = function(sourceData) {
    if (isEmptyData(sourceData)) {
      return;
    } else if (this.finished) {
      throw new Error("Attempted to update an already finished hash.");
    }
    var data = convertToBuffer(sourceData);
    var position = 0;
    var byteLength = data.byteLength;
    this.bytesHashed += byteLength;
    while (byteLength > 0) {
      this.buffer.setUint8(this.bufferLength++, data[position++]);
      byteLength--;
      if (this.bufferLength === BLOCK_SIZE) {
        this.hashBuffer();
        this.bufferLength = 0;
      }
    }
  };
  Md52.prototype.digest = function() {
    return __awaiter(this, void 0, void 0, function() {
      var _a, buffer, undecoratedLength, bytesHashed, bitsHashed, i, i, out, i;
      return __generator(this, function(_b) {
        if (!this.finished) {
          _a = this, buffer = _a.buffer, undecoratedLength = _a.bufferLength, bytesHashed = _a.bytesHashed;
          bitsHashed = bytesHashed * 8;
          buffer.setUint8(this.bufferLength++, 128);
          if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
            for (i = this.bufferLength; i < BLOCK_SIZE; i++) {
              buffer.setUint8(i, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
          }
          for (i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {
            buffer.setUint8(i, 0);
          }
          buffer.setUint32(BLOCK_SIZE - 8, bitsHashed >>> 0, true);
          buffer.setUint32(BLOCK_SIZE - 4, Math.floor(bitsHashed / 4294967296), true);
          this.hashBuffer();
          this.finished = true;
        }
        out = new DataView(new ArrayBuffer(DIGEST_LENGTH));
        for (i = 0; i < 4; i++) {
          out.setUint32(i * 4, this.state[i], true);
        }
        return [2, new Uint8Array(out.buffer, out.byteOffset, out.byteLength)];
      });
    });
  };
  Md52.prototype.hashBuffer = function() {
    var _a = this, buffer = _a.buffer, state = _a.state;
    var a = state[0], b = state[1], c = state[2], d = state[3];
    a = ff(a, b, c, d, buffer.getUint32(0, true), 7, 3614090360);
    d = ff(d, a, b, c, buffer.getUint32(4, true), 12, 3905402710);
    c = ff(c, d, a, b, buffer.getUint32(8, true), 17, 606105819);
    b = ff(b, c, d, a, buffer.getUint32(12, true), 22, 3250441966);
    a = ff(a, b, c, d, buffer.getUint32(16, true), 7, 4118548399);
    d = ff(d, a, b, c, buffer.getUint32(20, true), 12, 1200080426);
    c = ff(c, d, a, b, buffer.getUint32(24, true), 17, 2821735955);
    b = ff(b, c, d, a, buffer.getUint32(28, true), 22, 4249261313);
    a = ff(a, b, c, d, buffer.getUint32(32, true), 7, 1770035416);
    d = ff(d, a, b, c, buffer.getUint32(36, true), 12, 2336552879);
    c = ff(c, d, a, b, buffer.getUint32(40, true), 17, 4294925233);
    b = ff(b, c, d, a, buffer.getUint32(44, true), 22, 2304563134);
    a = ff(a, b, c, d, buffer.getUint32(48, true), 7, 1804603682);
    d = ff(d, a, b, c, buffer.getUint32(52, true), 12, 4254626195);
    c = ff(c, d, a, b, buffer.getUint32(56, true), 17, 2792965006);
    b = ff(b, c, d, a, buffer.getUint32(60, true), 22, 1236535329);
    a = gg(a, b, c, d, buffer.getUint32(4, true), 5, 4129170786);
    d = gg(d, a, b, c, buffer.getUint32(24, true), 9, 3225465664);
    c = gg(c, d, a, b, buffer.getUint32(44, true), 14, 643717713);
    b = gg(b, c, d, a, buffer.getUint32(0, true), 20, 3921069994);
    a = gg(a, b, c, d, buffer.getUint32(20, true), 5, 3593408605);
    d = gg(d, a, b, c, buffer.getUint32(40, true), 9, 38016083);
    c = gg(c, d, a, b, buffer.getUint32(60, true), 14, 3634488961);
    b = gg(b, c, d, a, buffer.getUint32(16, true), 20, 3889429448);
    a = gg(a, b, c, d, buffer.getUint32(36, true), 5, 568446438);
    d = gg(d, a, b, c, buffer.getUint32(56, true), 9, 3275163606);
    c = gg(c, d, a, b, buffer.getUint32(12, true), 14, 4107603335);
    b = gg(b, c, d, a, buffer.getUint32(32, true), 20, 1163531501);
    a = gg(a, b, c, d, buffer.getUint32(52, true), 5, 2850285829);
    d = gg(d, a, b, c, buffer.getUint32(8, true), 9, 4243563512);
    c = gg(c, d, a, b, buffer.getUint32(28, true), 14, 1735328473);
    b = gg(b, c, d, a, buffer.getUint32(48, true), 20, 2368359562);
    a = hh(a, b, c, d, buffer.getUint32(20, true), 4, 4294588738);
    d = hh(d, a, b, c, buffer.getUint32(32, true), 11, 2272392833);
    c = hh(c, d, a, b, buffer.getUint32(44, true), 16, 1839030562);
    b = hh(b, c, d, a, buffer.getUint32(56, true), 23, 4259657740);
    a = hh(a, b, c, d, buffer.getUint32(4, true), 4, 2763975236);
    d = hh(d, a, b, c, buffer.getUint32(16, true), 11, 1272893353);
    c = hh(c, d, a, b, buffer.getUint32(28, true), 16, 4139469664);
    b = hh(b, c, d, a, buffer.getUint32(40, true), 23, 3200236656);
    a = hh(a, b, c, d, buffer.getUint32(52, true), 4, 681279174);
    d = hh(d, a, b, c, buffer.getUint32(0, true), 11, 3936430074);
    c = hh(c, d, a, b, buffer.getUint32(12, true), 16, 3572445317);
    b = hh(b, c, d, a, buffer.getUint32(24, true), 23, 76029189);
    a = hh(a, b, c, d, buffer.getUint32(36, true), 4, 3654602809);
    d = hh(d, a, b, c, buffer.getUint32(48, true), 11, 3873151461);
    c = hh(c, d, a, b, buffer.getUint32(60, true), 16, 530742520);
    b = hh(b, c, d, a, buffer.getUint32(8, true), 23, 3299628645);
    a = ii(a, b, c, d, buffer.getUint32(0, true), 6, 4096336452);
    d = ii(d, a, b, c, buffer.getUint32(28, true), 10, 1126891415);
    c = ii(c, d, a, b, buffer.getUint32(56, true), 15, 2878612391);
    b = ii(b, c, d, a, buffer.getUint32(20, true), 21, 4237533241);
    a = ii(a, b, c, d, buffer.getUint32(48, true), 6, 1700485571);
    d = ii(d, a, b, c, buffer.getUint32(12, true), 10, 2399980690);
    c = ii(c, d, a, b, buffer.getUint32(40, true), 15, 4293915773);
    b = ii(b, c, d, a, buffer.getUint32(4, true), 21, 2240044497);
    a = ii(a, b, c, d, buffer.getUint32(32, true), 6, 1873313359);
    d = ii(d, a, b, c, buffer.getUint32(60, true), 10, 4264355552);
    c = ii(c, d, a, b, buffer.getUint32(24, true), 15, 2734768916);
    b = ii(b, c, d, a, buffer.getUint32(52, true), 21, 1309151649);
    a = ii(a, b, c, d, buffer.getUint32(16, true), 6, 4149444226);
    d = ii(d, a, b, c, buffer.getUint32(44, true), 10, 3174756917);
    c = ii(c, d, a, b, buffer.getUint32(8, true), 15, 718787259);
    b = ii(b, c, d, a, buffer.getUint32(36, true), 21, 3951481745);
    state[0] = a + state[0] & 4294967295;
    state[1] = b + state[1] & 4294967295;
    state[2] = c + state[2] & 4294967295;
    state[3] = d + state[3] & 4294967295;
  };
  return Md52;
}();
function cmn(q, a, b, x, s, t) {
  a = (a + q & 4294967295) + (x + t & 4294967295) & 4294967295;
  return (a << s | a >>> 32 - s) + b & 4294967295;
}
function ff(a, b, c, d, x, s, t) {
  return cmn(b & c | ~b & d, a, b, x, s, t);
}
function gg(a, b, c, d, x, s, t) {
  return cmn(b & d | c & ~d, a, b, x, s, t);
}
function hh(a, b, c, d, x, s, t) {
  return cmn(b ^ c ^ d, a, b, x, s, t);
}
function ii(a, b, c, d, x, s, t) {
  return cmn(c ^ (b | ~d), a, b, x, s, t);
}
function isEmptyData(data) {
  if (typeof data === "string") {
    return data.length === 0;
  }
  return data.byteLength === 0;
}
function convertToBuffer(data) {
  if (typeof data === "string") {
    return (0, import_util_utf8_node.fromUtf8)(data);
  }
  if (ArrayBuffer.isView(data)) {
    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
  }
  return new Uint8Array(data);
}

// node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.browser.js
var import_util_utf8_browser3 = __toModule(require_dist_cjs());

// node_modules/@aws-sdk/client-s3/dist-es/endpoints.js
var regionHash3 = {
  "af-south-1": {
    variants: [
      {
        hostname: "s3.af-south-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.af-south-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "ap-east-1": {
    variants: [
      {
        hostname: "s3.ap-east-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.ap-east-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "ap-northeast-1": {
    variants: [
      {
        hostname: "s3.ap-northeast-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.ap-northeast-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "ap-northeast-2": {
    variants: [
      {
        hostname: "s3.ap-northeast-2.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.ap-northeast-2.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "ap-northeast-3": {
    variants: [
      {
        hostname: "s3.ap-northeast-3.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.ap-northeast-3.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "ap-south-1": {
    variants: [
      {
        hostname: "s3.ap-south-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.ap-south-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "ap-southeast-1": {
    variants: [
      {
        hostname: "s3.ap-southeast-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.ap-southeast-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "ap-southeast-2": {
    variants: [
      {
        hostname: "s3.ap-southeast-2.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.ap-southeast-2.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-global": {
    variants: [
      {
        hostname: "s3.amazonaws.com",
        tags: []
      }
    ],
    signingRegion: "us-east-1"
  },
  "ca-central-1": {
    variants: [
      {
        hostname: "s3.ca-central-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3-fips.ca-central-1.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "s3-fips.dualstack.ca-central-1.amazonaws.com",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "s3.dualstack.ca-central-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "cn-north-1": {
    variants: [
      {
        hostname: "s3.cn-north-1.amazonaws.com.cn",
        tags: []
      },
      {
        hostname: "s3.dualstack.cn-north-1.amazonaws.com.cn",
        tags: ["dualstack"]
      }
    ]
  },
  "cn-northwest-1": {
    variants: [
      {
        hostname: "s3.cn-northwest-1.amazonaws.com.cn",
        tags: []
      },
      {
        hostname: "s3.dualstack.cn-northwest-1.amazonaws.com.cn",
        tags: ["dualstack"]
      }
    ]
  },
  "eu-central-1": {
    variants: [
      {
        hostname: "s3.eu-central-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.eu-central-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "eu-north-1": {
    variants: [
      {
        hostname: "s3.eu-north-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.eu-north-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "eu-south-1": {
    variants: [
      {
        hostname: "s3.eu-south-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.eu-south-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "eu-west-1": {
    variants: [
      {
        hostname: "s3.eu-west-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.eu-west-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "eu-west-2": {
    variants: [
      {
        hostname: "s3.eu-west-2.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.eu-west-2.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "eu-west-3": {
    variants: [
      {
        hostname: "s3.eu-west-3.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.eu-west-3.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "me-south-1": {
    variants: [
      {
        hostname: "s3.me-south-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.me-south-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "s3-external-1": {
    variants: [
      {
        hostname: "s3-external-1.amazonaws.com",
        tags: []
      }
    ],
    signingRegion: "us-east-1"
  },
  "sa-east-1": {
    variants: [
      {
        hostname: "s3.sa-east-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3.dualstack.sa-east-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "us-east-1": {
    variants: [
      {
        hostname: "s3.us-east-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3-fips.dualstack.us-east-1.amazonaws.com",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "s3-fips.us-east-1.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "s3.dualstack.us-east-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "us-east-2": {
    variants: [
      {
        hostname: "s3.us-east-2.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3-fips.dualstack.us-east-2.amazonaws.com",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "s3-fips.us-east-2.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "s3.dualstack.us-east-2.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "us-gov-east-1": {
    variants: [
      {
        hostname: "s3.us-gov-east-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3-fips.us-gov-east-1.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "s3.dualstack.us-gov-east-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "us-gov-west-1": {
    variants: [
      {
        hostname: "s3.us-gov-west-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3-fips.us-gov-west-1.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "s3.dualstack.us-gov-west-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "us-west-1": {
    variants: [
      {
        hostname: "s3.us-west-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3-fips.dualstack.us-west-1.amazonaws.com",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "s3-fips.us-west-1.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "s3.dualstack.us-west-1.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "us-west-2": {
    variants: [
      {
        hostname: "s3.us-west-2.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3-fips.dualstack.us-west-2.amazonaws.com",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "s3-fips.us-west-2.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "s3.dualstack.us-west-2.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  }
};
var partitionHash3 = {
  aws: {
    regions: [
      "af-south-1",
      "ap-east-1",
      "ap-northeast-1",
      "ap-northeast-2",
      "ap-northeast-3",
      "ap-south-1",
      "ap-southeast-1",
      "ap-southeast-2",
      "aws-global",
      "ca-central-1",
      "eu-central-1",
      "eu-north-1",
      "eu-south-1",
      "eu-west-1",
      "eu-west-2",
      "eu-west-3",
      "fips-ca-central-1",
      "fips-us-east-1",
      "fips-us-east-2",
      "fips-us-west-1",
      "fips-us-west-2",
      "me-south-1",
      "s3-external-1",
      "sa-east-1",
      "us-east-1",
      "us-east-2",
      "us-west-1",
      "us-west-2"
    ],
    regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "s3.{region}.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3-fips.{region}.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "s3-fips.dualstack.{region}.amazonaws.com",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "s3.dualstack.{region}.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-cn": {
    regions: ["cn-north-1", "cn-northwest-1"],
    regionRegex: "^cn\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "s3.{region}.amazonaws.com.cn",
        tags: []
      },
      {
        hostname: "s3-fips.{region}.amazonaws.com.cn",
        tags: ["fips"]
      },
      {
        hostname: "s3-fips.{region}.api.amazonwebservices.com.cn",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "s3.dualstack.{region}.amazonaws.com.cn",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-iso": {
    regions: ["us-iso-east-1", "us-iso-west-1"],
    regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "s3.{region}.c2s.ic.gov",
        tags: []
      },
      {
        hostname: "s3-fips.{region}.c2s.ic.gov",
        tags: ["fips"]
      }
    ]
  },
  "aws-iso-b": {
    regions: ["us-isob-east-1"],
    regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "s3.{region}.sc2s.sgov.gov",
        tags: []
      },
      {
        hostname: "s3-fips.{region}.sc2s.sgov.gov",
        tags: ["fips"]
      }
    ]
  },
  "aws-us-gov": {
    regions: ["fips-us-gov-east-1", "fips-us-gov-west-1", "us-gov-east-1", "us-gov-west-1"],
    regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "s3.{region}.amazonaws.com",
        tags: []
      },
      {
        hostname: "s3-fips.{region}.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "s3-fips.dualstack.{region}.amazonaws.com",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "s3.dualstack.{region}.amazonaws.com",
        tags: ["dualstack"]
      }
    ]
  }
};
var defaultRegionInfoProvider3 = function(region, options) {
  return __awaiter(void 0, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, getRegionInfo(region, __assign(__assign({}, options), { signingService: "s3", regionHash: regionHash3, partitionHash: partitionHash3 }))];
    });
  });
};

// node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.shared.js
var getRuntimeConfig5 = function(config) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  return {
    apiVersion: "2006-03-01",
    disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
    logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
    regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : defaultRegionInfoProvider3,
    serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "S3",
    signerConstructor: (_e = config === null || config === void 0 ? void 0 : config.signerConstructor) !== null && _e !== void 0 ? _e : S3SignatureV4,
    signingEscapePath: (_f = config === null || config === void 0 ? void 0 : config.signingEscapePath) !== null && _f !== void 0 ? _f : false,
    urlParser: (_g = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _g !== void 0 ? _g : parseUrl,
    useArnRegion: (_h = config === null || config === void 0 ? void 0 : config.useArnRegion) !== null && _h !== void 0 ? _h : false
  };
};

// node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.browser.js
var getRuntimeConfig6 = function(config) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
  var clientSharedValues = getRuntimeConfig5(config);
  return __assign(__assign(__assign({}, clientSharedValues), config), { runtime: "browser", base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : fromBase64, base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : toBase64, bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : calculateBodyLength, credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : function(_) {
    return function() {
      return Promise.reject(new Error("Credential is missing"));
    };
  }, defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default3.version }), eventStreamSerdeProvider: (_f = config === null || config === void 0 ? void 0 : config.eventStreamSerdeProvider) !== null && _f !== void 0 ? _f : eventStreamSerdeProvider, maxAttempts: (_g = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _g !== void 0 ? _g : DEFAULT_MAX_ATTEMPTS, md5: (_h = config === null || config === void 0 ? void 0 : config.md5) !== null && _h !== void 0 ? _h : Md5, region: (_j = config === null || config === void 0 ? void 0 : config.region) !== null && _j !== void 0 ? _j : invalidProvider("Region is missing"), requestHandler: (_k = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _k !== void 0 ? _k : new FetchHttpHandler(), retryMode: (_l = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _l !== void 0 ? _l : function() {
    return Promise.resolve(DEFAULT_RETRY_MODE);
  }, sha256: (_m = config === null || config === void 0 ? void 0 : config.sha256) !== null && _m !== void 0 ? _m : import_sha256_browser3.Sha256, streamCollector: (_o = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _o !== void 0 ? _o : streamCollector, streamHasher: (_p = config === null || config === void 0 ? void 0 : config.streamHasher) !== null && _p !== void 0 ? _p : blobHasher, useDualstackEndpoint: (_q = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _q !== void 0 ? _q : function() {
    return Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT);
  }, useFipsEndpoint: (_r = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _r !== void 0 ? _r : function() {
    return Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT);
  }, utf8Decoder: (_s = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _s !== void 0 ? _s : import_util_utf8_browser3.fromUtf8, utf8Encoder: (_t = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _t !== void 0 ? _t : import_util_utf8_browser3.toUtf8 });
};

// node_modules/@aws-sdk/client-s3/dist-es/S3Client.js
var S3Client = function(_super) {
  __extends(S3Client2, _super);
  function S3Client2(configuration) {
    var _this = this;
    var _config_0 = getRuntimeConfig6(configuration);
    var _config_1 = resolveRegionConfig(_config_0);
    var _config_2 = resolveEndpointsConfig(_config_1);
    var _config_3 = resolveRetryConfig(_config_2);
    var _config_4 = resolveHostHeaderConfig(_config_3);
    var _config_5 = resolveAwsAuthConfig(_config_4);
    var _config_6 = resolveBucketEndpointConfig(_config_5);
    var _config_7 = resolveUserAgentConfig(_config_6);
    var _config_8 = resolveEventStreamSerdeConfig(_config_7);
    _this = _super.call(this, _config_8) || this;
    _this.config = _config_8;
    _this.middlewareStack.use(getRetryPlugin(_this.config));
    _this.middlewareStack.use(getContentLengthPlugin(_this.config));
    _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
    _this.middlewareStack.use(getLoggerPlugin(_this.config));
    _this.middlewareStack.use(getAwsAuthPlugin(_this.config));
    _this.middlewareStack.use(getValidateBucketNamePlugin(_this.config));
    _this.middlewareStack.use(getUseRegionalEndpointPlugin(_this.config));
    _this.middlewareStack.use(getAddExpectContinuePlugin(_this.config));
    _this.middlewareStack.use(getUserAgentPlugin(_this.config));
    return _this;
  }
  S3Client2.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
  };
  return S3Client2;
}(Client);

// node_modules/@aws-sdk/client-s3/dist-es/S3.js
var S3 = function(_super) {
  __extends(S32, _super);
  function S32() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  S32.prototype.abortMultipartUpload = function(args, optionsOrCb, cb) {
    var command = new AbortMultipartUploadCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.completeMultipartUpload = function(args, optionsOrCb, cb) {
    var command = new CompleteMultipartUploadCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.copyObject = function(args, optionsOrCb, cb) {
    var command = new CopyObjectCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.createBucket = function(args, optionsOrCb, cb) {
    var command = new CreateBucketCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.createMultipartUpload = function(args, optionsOrCb, cb) {
    var command = new CreateMultipartUploadCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteBucket = function(args, optionsOrCb, cb) {
    var command = new DeleteBucketCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteBucketAnalyticsConfiguration = function(args, optionsOrCb, cb) {
    var command = new DeleteBucketAnalyticsConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteBucketCors = function(args, optionsOrCb, cb) {
    var command = new DeleteBucketCorsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteBucketEncryption = function(args, optionsOrCb, cb) {
    var command = new DeleteBucketEncryptionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteBucketIntelligentTieringConfiguration = function(args, optionsOrCb, cb) {
    var command = new DeleteBucketIntelligentTieringConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteBucketInventoryConfiguration = function(args, optionsOrCb, cb) {
    var command = new DeleteBucketInventoryConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteBucketLifecycle = function(args, optionsOrCb, cb) {
    var command = new DeleteBucketLifecycleCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteBucketMetricsConfiguration = function(args, optionsOrCb, cb) {
    var command = new DeleteBucketMetricsConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteBucketOwnershipControls = function(args, optionsOrCb, cb) {
    var command = new DeleteBucketOwnershipControlsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteBucketPolicy = function(args, optionsOrCb, cb) {
    var command = new DeleteBucketPolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteBucketReplication = function(args, optionsOrCb, cb) {
    var command = new DeleteBucketReplicationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteBucketTagging = function(args, optionsOrCb, cb) {
    var command = new DeleteBucketTaggingCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteBucketWebsite = function(args, optionsOrCb, cb) {
    var command = new DeleteBucketWebsiteCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteObject = function(args, optionsOrCb, cb) {
    var command = new DeleteObjectCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteObjects = function(args, optionsOrCb, cb) {
    var command = new DeleteObjectsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deleteObjectTagging = function(args, optionsOrCb, cb) {
    var command = new DeleteObjectTaggingCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.deletePublicAccessBlock = function(args, optionsOrCb, cb) {
    var command = new DeletePublicAccessBlockCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketAccelerateConfiguration = function(args, optionsOrCb, cb) {
    var command = new GetBucketAccelerateConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketAcl = function(args, optionsOrCb, cb) {
    var command = new GetBucketAclCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketAnalyticsConfiguration = function(args, optionsOrCb, cb) {
    var command = new GetBucketAnalyticsConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketCors = function(args, optionsOrCb, cb) {
    var command = new GetBucketCorsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketEncryption = function(args, optionsOrCb, cb) {
    var command = new GetBucketEncryptionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketIntelligentTieringConfiguration = function(args, optionsOrCb, cb) {
    var command = new GetBucketIntelligentTieringConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketInventoryConfiguration = function(args, optionsOrCb, cb) {
    var command = new GetBucketInventoryConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketLifecycleConfiguration = function(args, optionsOrCb, cb) {
    var command = new GetBucketLifecycleConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketLocation = function(args, optionsOrCb, cb) {
    var command = new GetBucketLocationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketLogging = function(args, optionsOrCb, cb) {
    var command = new GetBucketLoggingCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketMetricsConfiguration = function(args, optionsOrCb, cb) {
    var command = new GetBucketMetricsConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketNotificationConfiguration = function(args, optionsOrCb, cb) {
    var command = new GetBucketNotificationConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketOwnershipControls = function(args, optionsOrCb, cb) {
    var command = new GetBucketOwnershipControlsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketPolicy = function(args, optionsOrCb, cb) {
    var command = new GetBucketPolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketPolicyStatus = function(args, optionsOrCb, cb) {
    var command = new GetBucketPolicyStatusCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketReplication = function(args, optionsOrCb, cb) {
    var command = new GetBucketReplicationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketRequestPayment = function(args, optionsOrCb, cb) {
    var command = new GetBucketRequestPaymentCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketTagging = function(args, optionsOrCb, cb) {
    var command = new GetBucketTaggingCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketVersioning = function(args, optionsOrCb, cb) {
    var command = new GetBucketVersioningCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getBucketWebsite = function(args, optionsOrCb, cb) {
    var command = new GetBucketWebsiteCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getObject = function(args, optionsOrCb, cb) {
    var command = new GetObjectCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getObjectAcl = function(args, optionsOrCb, cb) {
    var command = new GetObjectAclCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getObjectLegalHold = function(args, optionsOrCb, cb) {
    var command = new GetObjectLegalHoldCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getObjectLockConfiguration = function(args, optionsOrCb, cb) {
    var command = new GetObjectLockConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getObjectRetention = function(args, optionsOrCb, cb) {
    var command = new GetObjectRetentionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getObjectTagging = function(args, optionsOrCb, cb) {
    var command = new GetObjectTaggingCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getObjectTorrent = function(args, optionsOrCb, cb) {
    var command = new GetObjectTorrentCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.getPublicAccessBlock = function(args, optionsOrCb, cb) {
    var command = new GetPublicAccessBlockCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.headBucket = function(args, optionsOrCb, cb) {
    var command = new HeadBucketCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.headObject = function(args, optionsOrCb, cb) {
    var command = new HeadObjectCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.listBucketAnalyticsConfigurations = function(args, optionsOrCb, cb) {
    var command = new ListBucketAnalyticsConfigurationsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.listBucketIntelligentTieringConfigurations = function(args, optionsOrCb, cb) {
    var command = new ListBucketIntelligentTieringConfigurationsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.listBucketInventoryConfigurations = function(args, optionsOrCb, cb) {
    var command = new ListBucketInventoryConfigurationsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.listBucketMetricsConfigurations = function(args, optionsOrCb, cb) {
    var command = new ListBucketMetricsConfigurationsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.listBuckets = function(args, optionsOrCb, cb) {
    var command = new ListBucketsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.listMultipartUploads = function(args, optionsOrCb, cb) {
    var command = new ListMultipartUploadsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.listObjects = function(args, optionsOrCb, cb) {
    var command = new ListObjectsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.listObjectsV2 = function(args, optionsOrCb, cb) {
    var command = new ListObjectsV2Command(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.listObjectVersions = function(args, optionsOrCb, cb) {
    var command = new ListObjectVersionsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.listParts = function(args, optionsOrCb, cb) {
    var command = new ListPartsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketAccelerateConfiguration = function(args, optionsOrCb, cb) {
    var command = new PutBucketAccelerateConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketAcl = function(args, optionsOrCb, cb) {
    var command = new PutBucketAclCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketAnalyticsConfiguration = function(args, optionsOrCb, cb) {
    var command = new PutBucketAnalyticsConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketCors = function(args, optionsOrCb, cb) {
    var command = new PutBucketCorsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketEncryption = function(args, optionsOrCb, cb) {
    var command = new PutBucketEncryptionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketIntelligentTieringConfiguration = function(args, optionsOrCb, cb) {
    var command = new PutBucketIntelligentTieringConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketInventoryConfiguration = function(args, optionsOrCb, cb) {
    var command = new PutBucketInventoryConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketLifecycleConfiguration = function(args, optionsOrCb, cb) {
    var command = new PutBucketLifecycleConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketLogging = function(args, optionsOrCb, cb) {
    var command = new PutBucketLoggingCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketMetricsConfiguration = function(args, optionsOrCb, cb) {
    var command = new PutBucketMetricsConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketNotificationConfiguration = function(args, optionsOrCb, cb) {
    var command = new PutBucketNotificationConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketOwnershipControls = function(args, optionsOrCb, cb) {
    var command = new PutBucketOwnershipControlsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketPolicy = function(args, optionsOrCb, cb) {
    var command = new PutBucketPolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketReplication = function(args, optionsOrCb, cb) {
    var command = new PutBucketReplicationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketRequestPayment = function(args, optionsOrCb, cb) {
    var command = new PutBucketRequestPaymentCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketTagging = function(args, optionsOrCb, cb) {
    var command = new PutBucketTaggingCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketVersioning = function(args, optionsOrCb, cb) {
    var command = new PutBucketVersioningCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putBucketWebsite = function(args, optionsOrCb, cb) {
    var command = new PutBucketWebsiteCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putObject = function(args, optionsOrCb, cb) {
    var command = new PutObjectCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putObjectAcl = function(args, optionsOrCb, cb) {
    var command = new PutObjectAclCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putObjectLegalHold = function(args, optionsOrCb, cb) {
    var command = new PutObjectLegalHoldCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putObjectLockConfiguration = function(args, optionsOrCb, cb) {
    var command = new PutObjectLockConfigurationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putObjectRetention = function(args, optionsOrCb, cb) {
    var command = new PutObjectRetentionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putObjectTagging = function(args, optionsOrCb, cb) {
    var command = new PutObjectTaggingCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.putPublicAccessBlock = function(args, optionsOrCb, cb) {
    var command = new PutPublicAccessBlockCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.restoreObject = function(args, optionsOrCb, cb) {
    var command = new RestoreObjectCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.selectObjectContent = function(args, optionsOrCb, cb) {
    var command = new SelectObjectContentCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.uploadPart = function(args, optionsOrCb, cb) {
    var command = new UploadPartCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.uploadPartCopy = function(args, optionsOrCb, cb) {
    var command = new UploadPartCopyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  S32.prototype.writeGetObjectResponse = function(args, optionsOrCb, cb) {
    var command = new WriteGetObjectResponseCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  return S32;
}(S3Client);

// node_modules/@aws-sdk/client-ses/dist-es/models/models_0.js
var AccountSendingPausedException;
(function(AccountSendingPausedException2) {
  AccountSendingPausedException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AccountSendingPausedException || (AccountSendingPausedException = {}));
var AddHeaderAction;
(function(AddHeaderAction2) {
  AddHeaderAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AddHeaderAction || (AddHeaderAction = {}));
var AlreadyExistsException;
(function(AlreadyExistsException2) {
  AlreadyExistsException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AlreadyExistsException || (AlreadyExistsException = {}));
var BehaviorOnMXFailure;
(function(BehaviorOnMXFailure2) {
  BehaviorOnMXFailure2["RejectMessage"] = "RejectMessage";
  BehaviorOnMXFailure2["UseDefaultValue"] = "UseDefaultValue";
})(BehaviorOnMXFailure || (BehaviorOnMXFailure = {}));
var Content;
(function(Content2) {
  Content2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Content || (Content = {}));
var Body;
(function(Body2) {
  Body2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Body || (Body = {}));
var BounceAction;
(function(BounceAction2) {
  BounceAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BounceAction || (BounceAction = {}));
var BounceType;
(function(BounceType2) {
  BounceType2["ContentRejected"] = "ContentRejected";
  BounceType2["DoesNotExist"] = "DoesNotExist";
  BounceType2["ExceededQuota"] = "ExceededQuota";
  BounceType2["MessageTooLarge"] = "MessageTooLarge";
  BounceType2["TemporaryFailure"] = "TemporaryFailure";
  BounceType2["Undefined"] = "Undefined";
})(BounceType || (BounceType = {}));
var DsnAction;
(function(DsnAction2) {
  DsnAction2["DELAYED"] = "delayed";
  DsnAction2["DELIVERED"] = "delivered";
  DsnAction2["EXPANDED"] = "expanded";
  DsnAction2["FAILED"] = "failed";
  DsnAction2["RELAYED"] = "relayed";
})(DsnAction || (DsnAction = {}));
var ExtensionField;
(function(ExtensionField2) {
  ExtensionField2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ExtensionField || (ExtensionField = {}));
var RecipientDsnFields;
(function(RecipientDsnFields2) {
  RecipientDsnFields2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RecipientDsnFields || (RecipientDsnFields = {}));
var BouncedRecipientInfo;
(function(BouncedRecipientInfo2) {
  BouncedRecipientInfo2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BouncedRecipientInfo || (BouncedRecipientInfo = {}));
var Destination2;
(function(Destination3) {
  Destination3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Destination2 || (Destination2 = {}));
var MessageTag;
(function(MessageTag2) {
  MessageTag2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MessageTag || (MessageTag = {}));
var BulkEmailDestination;
(function(BulkEmailDestination2) {
  BulkEmailDestination2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BulkEmailDestination || (BulkEmailDestination = {}));
var BulkEmailStatus;
(function(BulkEmailStatus2) {
  BulkEmailStatus2["AccountDailyQuotaExceeded"] = "AccountDailyQuotaExceeded";
  BulkEmailStatus2["AccountSendingPaused"] = "AccountSendingPaused";
  BulkEmailStatus2["AccountSuspended"] = "AccountSuspended";
  BulkEmailStatus2["AccountThrottled"] = "AccountThrottled";
  BulkEmailStatus2["ConfigurationSetDoesNotExist"] = "ConfigurationSetDoesNotExist";
  BulkEmailStatus2["ConfigurationSetSendingPaused"] = "ConfigurationSetSendingPaused";
  BulkEmailStatus2["Failed"] = "Failed";
  BulkEmailStatus2["InvalidParameterValue"] = "InvalidParameterValue";
  BulkEmailStatus2["InvalidSendingPoolName"] = "InvalidSendingPoolName";
  BulkEmailStatus2["MailFromDomainNotVerified"] = "MailFromDomainNotVerified";
  BulkEmailStatus2["MessageRejected"] = "MessageRejected";
  BulkEmailStatus2["Success"] = "Success";
  BulkEmailStatus2["TemplateDoesNotExist"] = "TemplateDoesNotExist";
  BulkEmailStatus2["TransientFailure"] = "TransientFailure";
})(BulkEmailStatus || (BulkEmailStatus = {}));
var BulkEmailDestinationStatus;
(function(BulkEmailDestinationStatus2) {
  BulkEmailDestinationStatus2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BulkEmailDestinationStatus || (BulkEmailDestinationStatus = {}));
var CannotDeleteException;
(function(CannotDeleteException2) {
  CannotDeleteException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CannotDeleteException || (CannotDeleteException = {}));
var CloneReceiptRuleSetRequest;
(function(CloneReceiptRuleSetRequest2) {
  CloneReceiptRuleSetRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CloneReceiptRuleSetRequest || (CloneReceiptRuleSetRequest = {}));
var CloneReceiptRuleSetResponse;
(function(CloneReceiptRuleSetResponse2) {
  CloneReceiptRuleSetResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CloneReceiptRuleSetResponse || (CloneReceiptRuleSetResponse = {}));
var LimitExceededException3;
(function(LimitExceededException4) {
  LimitExceededException4.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LimitExceededException3 || (LimitExceededException3 = {}));
var RuleSetDoesNotExistException;
(function(RuleSetDoesNotExistException2) {
  RuleSetDoesNotExistException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RuleSetDoesNotExistException || (RuleSetDoesNotExistException = {}));
var DimensionValueSource;
(function(DimensionValueSource2) {
  DimensionValueSource2["EMAIL_HEADER"] = "emailHeader";
  DimensionValueSource2["LINK_TAG"] = "linkTag";
  DimensionValueSource2["MESSAGE_TAG"] = "messageTag";
})(DimensionValueSource || (DimensionValueSource = {}));
var CloudWatchDimensionConfiguration;
(function(CloudWatchDimensionConfiguration2) {
  CloudWatchDimensionConfiguration2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CloudWatchDimensionConfiguration || (CloudWatchDimensionConfiguration = {}));
var CloudWatchDestination;
(function(CloudWatchDestination2) {
  CloudWatchDestination2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CloudWatchDestination || (CloudWatchDestination = {}));
var ConfigurationSet;
(function(ConfigurationSet2) {
  ConfigurationSet2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ConfigurationSet || (ConfigurationSet = {}));
var ConfigurationSetAlreadyExistsException;
(function(ConfigurationSetAlreadyExistsException2) {
  ConfigurationSetAlreadyExistsException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ConfigurationSetAlreadyExistsException || (ConfigurationSetAlreadyExistsException = {}));
var ConfigurationSetAttribute;
(function(ConfigurationSetAttribute2) {
  ConfigurationSetAttribute2["DELIVERY_OPTIONS"] = "deliveryOptions";
  ConfigurationSetAttribute2["EVENT_DESTINATIONS"] = "eventDestinations";
  ConfigurationSetAttribute2["REPUTATION_OPTIONS"] = "reputationOptions";
  ConfigurationSetAttribute2["TRACKING_OPTIONS"] = "trackingOptions";
})(ConfigurationSetAttribute || (ConfigurationSetAttribute = {}));
var ConfigurationSetDoesNotExistException;
(function(ConfigurationSetDoesNotExistException2) {
  ConfigurationSetDoesNotExistException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ConfigurationSetDoesNotExistException || (ConfigurationSetDoesNotExistException = {}));
var ConfigurationSetSendingPausedException;
(function(ConfigurationSetSendingPausedException2) {
  ConfigurationSetSendingPausedException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ConfigurationSetSendingPausedException || (ConfigurationSetSendingPausedException = {}));
var CreateConfigurationSetRequest;
(function(CreateConfigurationSetRequest2) {
  CreateConfigurationSetRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateConfigurationSetRequest || (CreateConfigurationSetRequest = {}));
var CreateConfigurationSetResponse;
(function(CreateConfigurationSetResponse2) {
  CreateConfigurationSetResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateConfigurationSetResponse || (CreateConfigurationSetResponse = {}));
var InvalidConfigurationSetException;
(function(InvalidConfigurationSetException2) {
  InvalidConfigurationSetException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidConfigurationSetException || (InvalidConfigurationSetException = {}));
var KinesisFirehoseDestination;
(function(KinesisFirehoseDestination2) {
  KinesisFirehoseDestination2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KinesisFirehoseDestination || (KinesisFirehoseDestination = {}));
var EventType;
(function(EventType2) {
  EventType2["BOUNCE"] = "bounce";
  EventType2["CLICK"] = "click";
  EventType2["COMPLAINT"] = "complaint";
  EventType2["DELIVERY"] = "delivery";
  EventType2["OPEN"] = "open";
  EventType2["REJECT"] = "reject";
  EventType2["RENDERING_FAILURE"] = "renderingFailure";
  EventType2["SEND"] = "send";
})(EventType || (EventType = {}));
var SNSDestination;
(function(SNSDestination2) {
  SNSDestination2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SNSDestination || (SNSDestination = {}));
var EventDestination;
(function(EventDestination2) {
  EventDestination2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(EventDestination || (EventDestination = {}));
var CreateConfigurationSetEventDestinationRequest;
(function(CreateConfigurationSetEventDestinationRequest2) {
  CreateConfigurationSetEventDestinationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateConfigurationSetEventDestinationRequest || (CreateConfigurationSetEventDestinationRequest = {}));
var CreateConfigurationSetEventDestinationResponse;
(function(CreateConfigurationSetEventDestinationResponse2) {
  CreateConfigurationSetEventDestinationResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateConfigurationSetEventDestinationResponse || (CreateConfigurationSetEventDestinationResponse = {}));
var EventDestinationAlreadyExistsException;
(function(EventDestinationAlreadyExistsException2) {
  EventDestinationAlreadyExistsException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(EventDestinationAlreadyExistsException || (EventDestinationAlreadyExistsException = {}));
var InvalidCloudWatchDestinationException;
(function(InvalidCloudWatchDestinationException2) {
  InvalidCloudWatchDestinationException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidCloudWatchDestinationException || (InvalidCloudWatchDestinationException = {}));
var InvalidFirehoseDestinationException;
(function(InvalidFirehoseDestinationException2) {
  InvalidFirehoseDestinationException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidFirehoseDestinationException || (InvalidFirehoseDestinationException = {}));
var InvalidSNSDestinationException;
(function(InvalidSNSDestinationException2) {
  InvalidSNSDestinationException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidSNSDestinationException || (InvalidSNSDestinationException = {}));
var TrackingOptions;
(function(TrackingOptions2) {
  TrackingOptions2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TrackingOptions || (TrackingOptions = {}));
var CreateConfigurationSetTrackingOptionsRequest;
(function(CreateConfigurationSetTrackingOptionsRequest2) {
  CreateConfigurationSetTrackingOptionsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateConfigurationSetTrackingOptionsRequest || (CreateConfigurationSetTrackingOptionsRequest = {}));
var CreateConfigurationSetTrackingOptionsResponse;
(function(CreateConfigurationSetTrackingOptionsResponse2) {
  CreateConfigurationSetTrackingOptionsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateConfigurationSetTrackingOptionsResponse || (CreateConfigurationSetTrackingOptionsResponse = {}));
var InvalidTrackingOptionsException;
(function(InvalidTrackingOptionsException2) {
  InvalidTrackingOptionsException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidTrackingOptionsException || (InvalidTrackingOptionsException = {}));
var TrackingOptionsAlreadyExistsException;
(function(TrackingOptionsAlreadyExistsException2) {
  TrackingOptionsAlreadyExistsException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TrackingOptionsAlreadyExistsException || (TrackingOptionsAlreadyExistsException = {}));
var CreateCustomVerificationEmailTemplateRequest;
(function(CreateCustomVerificationEmailTemplateRequest2) {
  CreateCustomVerificationEmailTemplateRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateCustomVerificationEmailTemplateRequest || (CreateCustomVerificationEmailTemplateRequest = {}));
var CustomVerificationEmailInvalidContentException;
(function(CustomVerificationEmailInvalidContentException2) {
  CustomVerificationEmailInvalidContentException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CustomVerificationEmailInvalidContentException || (CustomVerificationEmailInvalidContentException = {}));
var CustomVerificationEmailTemplateAlreadyExistsException;
(function(CustomVerificationEmailTemplateAlreadyExistsException2) {
  CustomVerificationEmailTemplateAlreadyExistsException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CustomVerificationEmailTemplateAlreadyExistsException || (CustomVerificationEmailTemplateAlreadyExistsException = {}));
var FromEmailAddressNotVerifiedException;
(function(FromEmailAddressNotVerifiedException2) {
  FromEmailAddressNotVerifiedException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(FromEmailAddressNotVerifiedException || (FromEmailAddressNotVerifiedException = {}));
var ReceiptFilterPolicy;
(function(ReceiptFilterPolicy2) {
  ReceiptFilterPolicy2["Allow"] = "Allow";
  ReceiptFilterPolicy2["Block"] = "Block";
})(ReceiptFilterPolicy || (ReceiptFilterPolicy = {}));
var ReceiptIpFilter;
(function(ReceiptIpFilter2) {
  ReceiptIpFilter2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReceiptIpFilter || (ReceiptIpFilter = {}));
var ReceiptFilter;
(function(ReceiptFilter2) {
  ReceiptFilter2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReceiptFilter || (ReceiptFilter = {}));
var CreateReceiptFilterRequest;
(function(CreateReceiptFilterRequest2) {
  CreateReceiptFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateReceiptFilterRequest || (CreateReceiptFilterRequest = {}));
var CreateReceiptFilterResponse;
(function(CreateReceiptFilterResponse2) {
  CreateReceiptFilterResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateReceiptFilterResponse || (CreateReceiptFilterResponse = {}));
var LambdaAction;
(function(LambdaAction2) {
  LambdaAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LambdaAction || (LambdaAction = {}));
var S3Action;
(function(S3Action2) {
  S3Action2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(S3Action || (S3Action = {}));
var SNSActionEncoding;
(function(SNSActionEncoding2) {
  SNSActionEncoding2["Base64"] = "Base64";
  SNSActionEncoding2["UTF8"] = "UTF-8";
})(SNSActionEncoding || (SNSActionEncoding = {}));
var SNSAction;
(function(SNSAction2) {
  SNSAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SNSAction || (SNSAction = {}));
var StopScope;
(function(StopScope2) {
  StopScope2["RULE_SET"] = "RuleSet";
})(StopScope || (StopScope = {}));
var StopAction;
(function(StopAction2) {
  StopAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StopAction || (StopAction = {}));
var WorkmailAction;
(function(WorkmailAction2) {
  WorkmailAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(WorkmailAction || (WorkmailAction = {}));
var ReceiptAction;
(function(ReceiptAction2) {
  ReceiptAction2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReceiptAction || (ReceiptAction = {}));
var TlsPolicy;
(function(TlsPolicy2) {
  TlsPolicy2["Optional"] = "Optional";
  TlsPolicy2["Require"] = "Require";
})(TlsPolicy || (TlsPolicy = {}));
var ReceiptRule;
(function(ReceiptRule2) {
  ReceiptRule2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReceiptRule || (ReceiptRule = {}));
var CreateReceiptRuleRequest;
(function(CreateReceiptRuleRequest2) {
  CreateReceiptRuleRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateReceiptRuleRequest || (CreateReceiptRuleRequest = {}));
var CreateReceiptRuleResponse;
(function(CreateReceiptRuleResponse2) {
  CreateReceiptRuleResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateReceiptRuleResponse || (CreateReceiptRuleResponse = {}));
var InvalidLambdaFunctionException;
(function(InvalidLambdaFunctionException2) {
  InvalidLambdaFunctionException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidLambdaFunctionException || (InvalidLambdaFunctionException = {}));
var InvalidS3ConfigurationException;
(function(InvalidS3ConfigurationException2) {
  InvalidS3ConfigurationException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidS3ConfigurationException || (InvalidS3ConfigurationException = {}));
var InvalidSnsTopicException;
(function(InvalidSnsTopicException2) {
  InvalidSnsTopicException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidSnsTopicException || (InvalidSnsTopicException = {}));
var RuleDoesNotExistException;
(function(RuleDoesNotExistException2) {
  RuleDoesNotExistException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RuleDoesNotExistException || (RuleDoesNotExistException = {}));
var CreateReceiptRuleSetRequest;
(function(CreateReceiptRuleSetRequest2) {
  CreateReceiptRuleSetRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateReceiptRuleSetRequest || (CreateReceiptRuleSetRequest = {}));
var CreateReceiptRuleSetResponse;
(function(CreateReceiptRuleSetResponse2) {
  CreateReceiptRuleSetResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateReceiptRuleSetResponse || (CreateReceiptRuleSetResponse = {}));
var Template;
(function(Template2) {
  Template2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Template || (Template = {}));
var CreateTemplateRequest;
(function(CreateTemplateRequest2) {
  CreateTemplateRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateTemplateRequest || (CreateTemplateRequest = {}));
var CreateTemplateResponse;
(function(CreateTemplateResponse2) {
  CreateTemplateResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateTemplateResponse || (CreateTemplateResponse = {}));
var InvalidTemplateException;
(function(InvalidTemplateException2) {
  InvalidTemplateException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidTemplateException || (InvalidTemplateException = {}));
var CustomMailFromStatus;
(function(CustomMailFromStatus2) {
  CustomMailFromStatus2["Failed"] = "Failed";
  CustomMailFromStatus2["Pending"] = "Pending";
  CustomMailFromStatus2["Success"] = "Success";
  CustomMailFromStatus2["TemporaryFailure"] = "TemporaryFailure";
})(CustomMailFromStatus || (CustomMailFromStatus = {}));
var CustomVerificationEmailTemplate;
(function(CustomVerificationEmailTemplate2) {
  CustomVerificationEmailTemplate2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CustomVerificationEmailTemplate || (CustomVerificationEmailTemplate = {}));
var CustomVerificationEmailTemplateDoesNotExistException;
(function(CustomVerificationEmailTemplateDoesNotExistException2) {
  CustomVerificationEmailTemplateDoesNotExistException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CustomVerificationEmailTemplateDoesNotExistException || (CustomVerificationEmailTemplateDoesNotExistException = {}));
var DeleteConfigurationSetRequest;
(function(DeleteConfigurationSetRequest2) {
  DeleteConfigurationSetRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteConfigurationSetRequest || (DeleteConfigurationSetRequest = {}));
var DeleteConfigurationSetResponse;
(function(DeleteConfigurationSetResponse2) {
  DeleteConfigurationSetResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteConfigurationSetResponse || (DeleteConfigurationSetResponse = {}));
var DeleteConfigurationSetEventDestinationRequest;
(function(DeleteConfigurationSetEventDestinationRequest2) {
  DeleteConfigurationSetEventDestinationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteConfigurationSetEventDestinationRequest || (DeleteConfigurationSetEventDestinationRequest = {}));
var DeleteConfigurationSetEventDestinationResponse;
(function(DeleteConfigurationSetEventDestinationResponse2) {
  DeleteConfigurationSetEventDestinationResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteConfigurationSetEventDestinationResponse || (DeleteConfigurationSetEventDestinationResponse = {}));
var EventDestinationDoesNotExistException;
(function(EventDestinationDoesNotExistException2) {
  EventDestinationDoesNotExistException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(EventDestinationDoesNotExistException || (EventDestinationDoesNotExistException = {}));
var DeleteConfigurationSetTrackingOptionsRequest;
(function(DeleteConfigurationSetTrackingOptionsRequest2) {
  DeleteConfigurationSetTrackingOptionsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteConfigurationSetTrackingOptionsRequest || (DeleteConfigurationSetTrackingOptionsRequest = {}));
var DeleteConfigurationSetTrackingOptionsResponse;
(function(DeleteConfigurationSetTrackingOptionsResponse2) {
  DeleteConfigurationSetTrackingOptionsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteConfigurationSetTrackingOptionsResponse || (DeleteConfigurationSetTrackingOptionsResponse = {}));
var TrackingOptionsDoesNotExistException;
(function(TrackingOptionsDoesNotExistException2) {
  TrackingOptionsDoesNotExistException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TrackingOptionsDoesNotExistException || (TrackingOptionsDoesNotExistException = {}));
var DeleteCustomVerificationEmailTemplateRequest;
(function(DeleteCustomVerificationEmailTemplateRequest2) {
  DeleteCustomVerificationEmailTemplateRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteCustomVerificationEmailTemplateRequest || (DeleteCustomVerificationEmailTemplateRequest = {}));
var DeleteIdentityRequest;
(function(DeleteIdentityRequest2) {
  DeleteIdentityRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteIdentityRequest || (DeleteIdentityRequest = {}));
var DeleteIdentityResponse;
(function(DeleteIdentityResponse2) {
  DeleteIdentityResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteIdentityResponse || (DeleteIdentityResponse = {}));
var DeleteIdentityPolicyRequest;
(function(DeleteIdentityPolicyRequest2) {
  DeleteIdentityPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteIdentityPolicyRequest || (DeleteIdentityPolicyRequest = {}));
var DeleteIdentityPolicyResponse;
(function(DeleteIdentityPolicyResponse2) {
  DeleteIdentityPolicyResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteIdentityPolicyResponse || (DeleteIdentityPolicyResponse = {}));
var DeleteReceiptFilterRequest;
(function(DeleteReceiptFilterRequest2) {
  DeleteReceiptFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteReceiptFilterRequest || (DeleteReceiptFilterRequest = {}));
var DeleteReceiptFilterResponse;
(function(DeleteReceiptFilterResponse2) {
  DeleteReceiptFilterResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteReceiptFilterResponse || (DeleteReceiptFilterResponse = {}));
var DeleteReceiptRuleRequest;
(function(DeleteReceiptRuleRequest2) {
  DeleteReceiptRuleRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteReceiptRuleRequest || (DeleteReceiptRuleRequest = {}));
var DeleteReceiptRuleResponse;
(function(DeleteReceiptRuleResponse2) {
  DeleteReceiptRuleResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteReceiptRuleResponse || (DeleteReceiptRuleResponse = {}));
var DeleteReceiptRuleSetRequest;
(function(DeleteReceiptRuleSetRequest2) {
  DeleteReceiptRuleSetRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteReceiptRuleSetRequest || (DeleteReceiptRuleSetRequest = {}));
var DeleteReceiptRuleSetResponse;
(function(DeleteReceiptRuleSetResponse2) {
  DeleteReceiptRuleSetResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteReceiptRuleSetResponse || (DeleteReceiptRuleSetResponse = {}));
var DeleteTemplateRequest;
(function(DeleteTemplateRequest2) {
  DeleteTemplateRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteTemplateRequest || (DeleteTemplateRequest = {}));
var DeleteTemplateResponse;
(function(DeleteTemplateResponse2) {
  DeleteTemplateResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteTemplateResponse || (DeleteTemplateResponse = {}));
var DeleteVerifiedEmailAddressRequest;
(function(DeleteVerifiedEmailAddressRequest2) {
  DeleteVerifiedEmailAddressRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteVerifiedEmailAddressRequest || (DeleteVerifiedEmailAddressRequest = {}));
var DeliveryOptions;
(function(DeliveryOptions2) {
  DeliveryOptions2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeliveryOptions || (DeliveryOptions = {}));
var DescribeActiveReceiptRuleSetRequest;
(function(DescribeActiveReceiptRuleSetRequest2) {
  DescribeActiveReceiptRuleSetRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeActiveReceiptRuleSetRequest || (DescribeActiveReceiptRuleSetRequest = {}));
var ReceiptRuleSetMetadata;
(function(ReceiptRuleSetMetadata2) {
  ReceiptRuleSetMetadata2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReceiptRuleSetMetadata || (ReceiptRuleSetMetadata = {}));
var DescribeActiveReceiptRuleSetResponse;
(function(DescribeActiveReceiptRuleSetResponse2) {
  DescribeActiveReceiptRuleSetResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeActiveReceiptRuleSetResponse || (DescribeActiveReceiptRuleSetResponse = {}));
var DescribeConfigurationSetRequest;
(function(DescribeConfigurationSetRequest2) {
  DescribeConfigurationSetRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeConfigurationSetRequest || (DescribeConfigurationSetRequest = {}));
var ReputationOptions;
(function(ReputationOptions2) {
  ReputationOptions2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReputationOptions || (ReputationOptions = {}));
var DescribeConfigurationSetResponse;
(function(DescribeConfigurationSetResponse2) {
  DescribeConfigurationSetResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeConfigurationSetResponse || (DescribeConfigurationSetResponse = {}));
var DescribeReceiptRuleRequest;
(function(DescribeReceiptRuleRequest2) {
  DescribeReceiptRuleRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeReceiptRuleRequest || (DescribeReceiptRuleRequest = {}));
var DescribeReceiptRuleResponse;
(function(DescribeReceiptRuleResponse2) {
  DescribeReceiptRuleResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeReceiptRuleResponse || (DescribeReceiptRuleResponse = {}));
var DescribeReceiptRuleSetRequest;
(function(DescribeReceiptRuleSetRequest2) {
  DescribeReceiptRuleSetRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeReceiptRuleSetRequest || (DescribeReceiptRuleSetRequest = {}));
var DescribeReceiptRuleSetResponse;
(function(DescribeReceiptRuleSetResponse2) {
  DescribeReceiptRuleSetResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeReceiptRuleSetResponse || (DescribeReceiptRuleSetResponse = {}));
var IdentityDkimAttributes;
(function(IdentityDkimAttributes2) {
  IdentityDkimAttributes2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(IdentityDkimAttributes || (IdentityDkimAttributes = {}));
var GetAccountSendingEnabledResponse;
(function(GetAccountSendingEnabledResponse2) {
  GetAccountSendingEnabledResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetAccountSendingEnabledResponse || (GetAccountSendingEnabledResponse = {}));
var GetCustomVerificationEmailTemplateRequest;
(function(GetCustomVerificationEmailTemplateRequest2) {
  GetCustomVerificationEmailTemplateRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetCustomVerificationEmailTemplateRequest || (GetCustomVerificationEmailTemplateRequest = {}));
var GetCustomVerificationEmailTemplateResponse;
(function(GetCustomVerificationEmailTemplateResponse2) {
  GetCustomVerificationEmailTemplateResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetCustomVerificationEmailTemplateResponse || (GetCustomVerificationEmailTemplateResponse = {}));
var GetIdentityDkimAttributesRequest;
(function(GetIdentityDkimAttributesRequest2) {
  GetIdentityDkimAttributesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetIdentityDkimAttributesRequest || (GetIdentityDkimAttributesRequest = {}));
var GetIdentityDkimAttributesResponse;
(function(GetIdentityDkimAttributesResponse2) {
  GetIdentityDkimAttributesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetIdentityDkimAttributesResponse || (GetIdentityDkimAttributesResponse = {}));
var GetIdentityMailFromDomainAttributesRequest;
(function(GetIdentityMailFromDomainAttributesRequest2) {
  GetIdentityMailFromDomainAttributesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetIdentityMailFromDomainAttributesRequest || (GetIdentityMailFromDomainAttributesRequest = {}));
var IdentityMailFromDomainAttributes;
(function(IdentityMailFromDomainAttributes2) {
  IdentityMailFromDomainAttributes2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(IdentityMailFromDomainAttributes || (IdentityMailFromDomainAttributes = {}));
var GetIdentityMailFromDomainAttributesResponse;
(function(GetIdentityMailFromDomainAttributesResponse2) {
  GetIdentityMailFromDomainAttributesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetIdentityMailFromDomainAttributesResponse || (GetIdentityMailFromDomainAttributesResponse = {}));
var GetIdentityNotificationAttributesRequest;
(function(GetIdentityNotificationAttributesRequest2) {
  GetIdentityNotificationAttributesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetIdentityNotificationAttributesRequest || (GetIdentityNotificationAttributesRequest = {}));
var IdentityNotificationAttributes;
(function(IdentityNotificationAttributes2) {
  IdentityNotificationAttributes2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(IdentityNotificationAttributes || (IdentityNotificationAttributes = {}));
var GetIdentityNotificationAttributesResponse;
(function(GetIdentityNotificationAttributesResponse2) {
  GetIdentityNotificationAttributesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetIdentityNotificationAttributesResponse || (GetIdentityNotificationAttributesResponse = {}));
var GetIdentityPoliciesRequest;
(function(GetIdentityPoliciesRequest2) {
  GetIdentityPoliciesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetIdentityPoliciesRequest || (GetIdentityPoliciesRequest = {}));
var GetIdentityPoliciesResponse;
(function(GetIdentityPoliciesResponse2) {
  GetIdentityPoliciesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetIdentityPoliciesResponse || (GetIdentityPoliciesResponse = {}));
var GetIdentityVerificationAttributesRequest;
(function(GetIdentityVerificationAttributesRequest2) {
  GetIdentityVerificationAttributesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetIdentityVerificationAttributesRequest || (GetIdentityVerificationAttributesRequest = {}));
var IdentityVerificationAttributes;
(function(IdentityVerificationAttributes2) {
  IdentityVerificationAttributes2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(IdentityVerificationAttributes || (IdentityVerificationAttributes = {}));
var GetIdentityVerificationAttributesResponse;
(function(GetIdentityVerificationAttributesResponse2) {
  GetIdentityVerificationAttributesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetIdentityVerificationAttributesResponse || (GetIdentityVerificationAttributesResponse = {}));
var GetSendQuotaResponse;
(function(GetSendQuotaResponse2) {
  GetSendQuotaResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetSendQuotaResponse || (GetSendQuotaResponse = {}));
var SendDataPoint;
(function(SendDataPoint2) {
  SendDataPoint2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendDataPoint || (SendDataPoint = {}));
var GetSendStatisticsResponse;
(function(GetSendStatisticsResponse2) {
  GetSendStatisticsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetSendStatisticsResponse || (GetSendStatisticsResponse = {}));
var GetTemplateRequest;
(function(GetTemplateRequest2) {
  GetTemplateRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetTemplateRequest || (GetTemplateRequest = {}));
var GetTemplateResponse;
(function(GetTemplateResponse2) {
  GetTemplateResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetTemplateResponse || (GetTemplateResponse = {}));
var TemplateDoesNotExistException;
(function(TemplateDoesNotExistException2) {
  TemplateDoesNotExistException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TemplateDoesNotExistException || (TemplateDoesNotExistException = {}));
var InvalidDeliveryOptionsException;
(function(InvalidDeliveryOptionsException2) {
  InvalidDeliveryOptionsException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidDeliveryOptionsException || (InvalidDeliveryOptionsException = {}));
var InvalidPolicyException;
(function(InvalidPolicyException2) {
  InvalidPolicyException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidPolicyException || (InvalidPolicyException = {}));
var InvalidRenderingParameterException;
(function(InvalidRenderingParameterException2) {
  InvalidRenderingParameterException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidRenderingParameterException || (InvalidRenderingParameterException = {}));
var ListConfigurationSetsRequest;
(function(ListConfigurationSetsRequest2) {
  ListConfigurationSetsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListConfigurationSetsRequest || (ListConfigurationSetsRequest = {}));
var ListConfigurationSetsResponse;
(function(ListConfigurationSetsResponse2) {
  ListConfigurationSetsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListConfigurationSetsResponse || (ListConfigurationSetsResponse = {}));
var ListCustomVerificationEmailTemplatesRequest;
(function(ListCustomVerificationEmailTemplatesRequest2) {
  ListCustomVerificationEmailTemplatesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListCustomVerificationEmailTemplatesRequest || (ListCustomVerificationEmailTemplatesRequest = {}));
var ListCustomVerificationEmailTemplatesResponse;
(function(ListCustomVerificationEmailTemplatesResponse2) {
  ListCustomVerificationEmailTemplatesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListCustomVerificationEmailTemplatesResponse || (ListCustomVerificationEmailTemplatesResponse = {}));
var ListIdentitiesRequest;
(function(ListIdentitiesRequest2) {
  ListIdentitiesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListIdentitiesRequest || (ListIdentitiesRequest = {}));
var ListIdentitiesResponse;
(function(ListIdentitiesResponse2) {
  ListIdentitiesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListIdentitiesResponse || (ListIdentitiesResponse = {}));
var ListIdentityPoliciesRequest;
(function(ListIdentityPoliciesRequest2) {
  ListIdentityPoliciesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListIdentityPoliciesRequest || (ListIdentityPoliciesRequest = {}));
var ListIdentityPoliciesResponse;
(function(ListIdentityPoliciesResponse2) {
  ListIdentityPoliciesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListIdentityPoliciesResponse || (ListIdentityPoliciesResponse = {}));
var ListReceiptFiltersRequest;
(function(ListReceiptFiltersRequest2) {
  ListReceiptFiltersRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListReceiptFiltersRequest || (ListReceiptFiltersRequest = {}));
var ListReceiptFiltersResponse;
(function(ListReceiptFiltersResponse2) {
  ListReceiptFiltersResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListReceiptFiltersResponse || (ListReceiptFiltersResponse = {}));
var ListReceiptRuleSetsRequest;
(function(ListReceiptRuleSetsRequest2) {
  ListReceiptRuleSetsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListReceiptRuleSetsRequest || (ListReceiptRuleSetsRequest = {}));
var ListReceiptRuleSetsResponse;
(function(ListReceiptRuleSetsResponse2) {
  ListReceiptRuleSetsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListReceiptRuleSetsResponse || (ListReceiptRuleSetsResponse = {}));
var ListTemplatesRequest;
(function(ListTemplatesRequest2) {
  ListTemplatesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTemplatesRequest || (ListTemplatesRequest = {}));
var TemplateMetadata;
(function(TemplateMetadata2) {
  TemplateMetadata2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TemplateMetadata || (TemplateMetadata = {}));
var ListTemplatesResponse;
(function(ListTemplatesResponse2) {
  ListTemplatesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTemplatesResponse || (ListTemplatesResponse = {}));
var ListVerifiedEmailAddressesResponse;
(function(ListVerifiedEmailAddressesResponse2) {
  ListVerifiedEmailAddressesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListVerifiedEmailAddressesResponse || (ListVerifiedEmailAddressesResponse = {}));
var MailFromDomainNotVerifiedException;
(function(MailFromDomainNotVerifiedException2) {
  MailFromDomainNotVerifiedException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MailFromDomainNotVerifiedException || (MailFromDomainNotVerifiedException = {}));
var Message;
(function(Message3) {
  Message3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Message || (Message = {}));
var MessageDsn;
(function(MessageDsn2) {
  MessageDsn2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MessageDsn || (MessageDsn = {}));
var MessageRejected;
(function(MessageRejected2) {
  MessageRejected2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MessageRejected || (MessageRejected = {}));
var MissingRenderingAttributeException;
(function(MissingRenderingAttributeException2) {
  MissingRenderingAttributeException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MissingRenderingAttributeException || (MissingRenderingAttributeException = {}));
var ProductionAccessNotGrantedException;
(function(ProductionAccessNotGrantedException2) {
  ProductionAccessNotGrantedException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ProductionAccessNotGrantedException || (ProductionAccessNotGrantedException = {}));
var PutConfigurationSetDeliveryOptionsRequest;
(function(PutConfigurationSetDeliveryOptionsRequest2) {
  PutConfigurationSetDeliveryOptionsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutConfigurationSetDeliveryOptionsRequest || (PutConfigurationSetDeliveryOptionsRequest = {}));
var PutConfigurationSetDeliveryOptionsResponse;
(function(PutConfigurationSetDeliveryOptionsResponse2) {
  PutConfigurationSetDeliveryOptionsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutConfigurationSetDeliveryOptionsResponse || (PutConfigurationSetDeliveryOptionsResponse = {}));
var PutIdentityPolicyRequest;
(function(PutIdentityPolicyRequest2) {
  PutIdentityPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutIdentityPolicyRequest || (PutIdentityPolicyRequest = {}));
var PutIdentityPolicyResponse;
(function(PutIdentityPolicyResponse2) {
  PutIdentityPolicyResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutIdentityPolicyResponse || (PutIdentityPolicyResponse = {}));
var RawMessage;
(function(RawMessage2) {
  RawMessage2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RawMessage || (RawMessage = {}));
var ReorderReceiptRuleSetRequest;
(function(ReorderReceiptRuleSetRequest2) {
  ReorderReceiptRuleSetRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReorderReceiptRuleSetRequest || (ReorderReceiptRuleSetRequest = {}));
var ReorderReceiptRuleSetResponse;
(function(ReorderReceiptRuleSetResponse2) {
  ReorderReceiptRuleSetResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReorderReceiptRuleSetResponse || (ReorderReceiptRuleSetResponse = {}));
var SendBounceRequest;
(function(SendBounceRequest2) {
  SendBounceRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendBounceRequest || (SendBounceRequest = {}));
var SendBounceResponse;
(function(SendBounceResponse2) {
  SendBounceResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendBounceResponse || (SendBounceResponse = {}));
var SendBulkTemplatedEmailRequest;
(function(SendBulkTemplatedEmailRequest2) {
  SendBulkTemplatedEmailRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendBulkTemplatedEmailRequest || (SendBulkTemplatedEmailRequest = {}));
var SendBulkTemplatedEmailResponse;
(function(SendBulkTemplatedEmailResponse2) {
  SendBulkTemplatedEmailResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendBulkTemplatedEmailResponse || (SendBulkTemplatedEmailResponse = {}));
var SendCustomVerificationEmailRequest;
(function(SendCustomVerificationEmailRequest2) {
  SendCustomVerificationEmailRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendCustomVerificationEmailRequest || (SendCustomVerificationEmailRequest = {}));
var SendCustomVerificationEmailResponse;
(function(SendCustomVerificationEmailResponse2) {
  SendCustomVerificationEmailResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendCustomVerificationEmailResponse || (SendCustomVerificationEmailResponse = {}));
var SendEmailRequest;
(function(SendEmailRequest2) {
  SendEmailRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendEmailRequest || (SendEmailRequest = {}));
var SendEmailResponse;
(function(SendEmailResponse2) {
  SendEmailResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendEmailResponse || (SendEmailResponse = {}));
var SendRawEmailRequest;
(function(SendRawEmailRequest2) {
  SendRawEmailRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendRawEmailRequest || (SendRawEmailRequest = {}));
var SendRawEmailResponse;
(function(SendRawEmailResponse2) {
  SendRawEmailResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendRawEmailResponse || (SendRawEmailResponse = {}));
var SendTemplatedEmailRequest;
(function(SendTemplatedEmailRequest2) {
  SendTemplatedEmailRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendTemplatedEmailRequest || (SendTemplatedEmailRequest = {}));
var SendTemplatedEmailResponse;
(function(SendTemplatedEmailResponse2) {
  SendTemplatedEmailResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendTemplatedEmailResponse || (SendTemplatedEmailResponse = {}));
var SetActiveReceiptRuleSetRequest;
(function(SetActiveReceiptRuleSetRequest2) {
  SetActiveReceiptRuleSetRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetActiveReceiptRuleSetRequest || (SetActiveReceiptRuleSetRequest = {}));
var SetActiveReceiptRuleSetResponse;
(function(SetActiveReceiptRuleSetResponse2) {
  SetActiveReceiptRuleSetResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetActiveReceiptRuleSetResponse || (SetActiveReceiptRuleSetResponse = {}));
var SetIdentityDkimEnabledRequest;
(function(SetIdentityDkimEnabledRequest2) {
  SetIdentityDkimEnabledRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetIdentityDkimEnabledRequest || (SetIdentityDkimEnabledRequest = {}));
var SetIdentityDkimEnabledResponse;
(function(SetIdentityDkimEnabledResponse2) {
  SetIdentityDkimEnabledResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetIdentityDkimEnabledResponse || (SetIdentityDkimEnabledResponse = {}));
var SetIdentityFeedbackForwardingEnabledRequest;
(function(SetIdentityFeedbackForwardingEnabledRequest2) {
  SetIdentityFeedbackForwardingEnabledRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetIdentityFeedbackForwardingEnabledRequest || (SetIdentityFeedbackForwardingEnabledRequest = {}));
var SetIdentityFeedbackForwardingEnabledResponse;
(function(SetIdentityFeedbackForwardingEnabledResponse2) {
  SetIdentityFeedbackForwardingEnabledResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetIdentityFeedbackForwardingEnabledResponse || (SetIdentityFeedbackForwardingEnabledResponse = {}));
var SetIdentityHeadersInNotificationsEnabledRequest;
(function(SetIdentityHeadersInNotificationsEnabledRequest2) {
  SetIdentityHeadersInNotificationsEnabledRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetIdentityHeadersInNotificationsEnabledRequest || (SetIdentityHeadersInNotificationsEnabledRequest = {}));
var SetIdentityHeadersInNotificationsEnabledResponse;
(function(SetIdentityHeadersInNotificationsEnabledResponse2) {
  SetIdentityHeadersInNotificationsEnabledResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetIdentityHeadersInNotificationsEnabledResponse || (SetIdentityHeadersInNotificationsEnabledResponse = {}));
var SetIdentityMailFromDomainRequest;
(function(SetIdentityMailFromDomainRequest2) {
  SetIdentityMailFromDomainRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetIdentityMailFromDomainRequest || (SetIdentityMailFromDomainRequest = {}));
var SetIdentityMailFromDomainResponse;
(function(SetIdentityMailFromDomainResponse2) {
  SetIdentityMailFromDomainResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetIdentityMailFromDomainResponse || (SetIdentityMailFromDomainResponse = {}));
var SetIdentityNotificationTopicRequest;
(function(SetIdentityNotificationTopicRequest2) {
  SetIdentityNotificationTopicRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetIdentityNotificationTopicRequest || (SetIdentityNotificationTopicRequest = {}));
var SetIdentityNotificationTopicResponse;
(function(SetIdentityNotificationTopicResponse2) {
  SetIdentityNotificationTopicResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetIdentityNotificationTopicResponse || (SetIdentityNotificationTopicResponse = {}));
var SetReceiptRulePositionRequest;
(function(SetReceiptRulePositionRequest2) {
  SetReceiptRulePositionRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetReceiptRulePositionRequest || (SetReceiptRulePositionRequest = {}));
var SetReceiptRulePositionResponse;
(function(SetReceiptRulePositionResponse2) {
  SetReceiptRulePositionResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetReceiptRulePositionResponse || (SetReceiptRulePositionResponse = {}));
var TestRenderTemplateRequest;
(function(TestRenderTemplateRequest2) {
  TestRenderTemplateRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TestRenderTemplateRequest || (TestRenderTemplateRequest = {}));
var TestRenderTemplateResponse;
(function(TestRenderTemplateResponse2) {
  TestRenderTemplateResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TestRenderTemplateResponse || (TestRenderTemplateResponse = {}));
var UpdateAccountSendingEnabledRequest;
(function(UpdateAccountSendingEnabledRequest2) {
  UpdateAccountSendingEnabledRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateAccountSendingEnabledRequest || (UpdateAccountSendingEnabledRequest = {}));
var UpdateConfigurationSetEventDestinationRequest;
(function(UpdateConfigurationSetEventDestinationRequest2) {
  UpdateConfigurationSetEventDestinationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateConfigurationSetEventDestinationRequest || (UpdateConfigurationSetEventDestinationRequest = {}));
var UpdateConfigurationSetEventDestinationResponse;
(function(UpdateConfigurationSetEventDestinationResponse2) {
  UpdateConfigurationSetEventDestinationResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateConfigurationSetEventDestinationResponse || (UpdateConfigurationSetEventDestinationResponse = {}));
var UpdateConfigurationSetReputationMetricsEnabledRequest;
(function(UpdateConfigurationSetReputationMetricsEnabledRequest2) {
  UpdateConfigurationSetReputationMetricsEnabledRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateConfigurationSetReputationMetricsEnabledRequest || (UpdateConfigurationSetReputationMetricsEnabledRequest = {}));
var UpdateConfigurationSetSendingEnabledRequest;
(function(UpdateConfigurationSetSendingEnabledRequest2) {
  UpdateConfigurationSetSendingEnabledRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateConfigurationSetSendingEnabledRequest || (UpdateConfigurationSetSendingEnabledRequest = {}));
var UpdateConfigurationSetTrackingOptionsRequest;
(function(UpdateConfigurationSetTrackingOptionsRequest2) {
  UpdateConfigurationSetTrackingOptionsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateConfigurationSetTrackingOptionsRequest || (UpdateConfigurationSetTrackingOptionsRequest = {}));
var UpdateConfigurationSetTrackingOptionsResponse;
(function(UpdateConfigurationSetTrackingOptionsResponse2) {
  UpdateConfigurationSetTrackingOptionsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateConfigurationSetTrackingOptionsResponse || (UpdateConfigurationSetTrackingOptionsResponse = {}));
var UpdateCustomVerificationEmailTemplateRequest;
(function(UpdateCustomVerificationEmailTemplateRequest2) {
  UpdateCustomVerificationEmailTemplateRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateCustomVerificationEmailTemplateRequest || (UpdateCustomVerificationEmailTemplateRequest = {}));
var UpdateReceiptRuleRequest;
(function(UpdateReceiptRuleRequest2) {
  UpdateReceiptRuleRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateReceiptRuleRequest || (UpdateReceiptRuleRequest = {}));
var UpdateReceiptRuleResponse;
(function(UpdateReceiptRuleResponse2) {
  UpdateReceiptRuleResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateReceiptRuleResponse || (UpdateReceiptRuleResponse = {}));
var UpdateTemplateRequest;
(function(UpdateTemplateRequest2) {
  UpdateTemplateRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateTemplateRequest || (UpdateTemplateRequest = {}));
var UpdateTemplateResponse;
(function(UpdateTemplateResponse2) {
  UpdateTemplateResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UpdateTemplateResponse || (UpdateTemplateResponse = {}));
var VerifyDomainDkimRequest;
(function(VerifyDomainDkimRequest2) {
  VerifyDomainDkimRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(VerifyDomainDkimRequest || (VerifyDomainDkimRequest = {}));
var VerifyDomainDkimResponse;
(function(VerifyDomainDkimResponse2) {
  VerifyDomainDkimResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(VerifyDomainDkimResponse || (VerifyDomainDkimResponse = {}));
var VerifyDomainIdentityRequest;
(function(VerifyDomainIdentityRequest2) {
  VerifyDomainIdentityRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(VerifyDomainIdentityRequest || (VerifyDomainIdentityRequest = {}));
var VerifyDomainIdentityResponse;
(function(VerifyDomainIdentityResponse2) {
  VerifyDomainIdentityResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(VerifyDomainIdentityResponse || (VerifyDomainIdentityResponse = {}));
var VerifyEmailAddressRequest;
(function(VerifyEmailAddressRequest2) {
  VerifyEmailAddressRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(VerifyEmailAddressRequest || (VerifyEmailAddressRequest = {}));
var VerifyEmailIdentityRequest;
(function(VerifyEmailIdentityRequest2) {
  VerifyEmailIdentityRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(VerifyEmailIdentityRequest || (VerifyEmailIdentityRequest = {}));
var VerifyEmailIdentityResponse;
(function(VerifyEmailIdentityResponse2) {
  VerifyEmailIdentityResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(VerifyEmailIdentityResponse || (VerifyEmailIdentityResponse = {}));

// node_modules/@aws-sdk/client-ses/dist-es/protocols/Aws_query.js
var import_entities2 = __toModule(require_lib());
var import_fast_xml_parser2 = __toModule(require_parser());
var serializeAws_queryCloneReceiptRuleSetCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCloneReceiptRuleSetRequest(input, context)), { Action: "CloneReceiptRuleSet", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryCreateConfigurationSetCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateConfigurationSetRequest(input, context)), { Action: "CreateConfigurationSet", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryCreateConfigurationSetEventDestinationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateConfigurationSetEventDestinationRequest(input, context)), { Action: "CreateConfigurationSetEventDestination", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryCreateConfigurationSetTrackingOptionsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateConfigurationSetTrackingOptionsRequest(input, context)), { Action: "CreateConfigurationSetTrackingOptions", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryCreateCustomVerificationEmailTemplateCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateCustomVerificationEmailTemplateRequest(input, context)), { Action: "CreateCustomVerificationEmailTemplate", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryCreateReceiptFilterCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateReceiptFilterRequest(input, context)), { Action: "CreateReceiptFilter", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryCreateReceiptRuleCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateReceiptRuleRequest(input, context)), { Action: "CreateReceiptRule", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryCreateReceiptRuleSetCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateReceiptRuleSetRequest(input, context)), { Action: "CreateReceiptRuleSet", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryCreateTemplateCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateTemplateRequest(input, context)), { Action: "CreateTemplate", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteConfigurationSetCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteConfigurationSetRequest(input, context)), { Action: "DeleteConfigurationSet", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteConfigurationSetEventDestinationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteConfigurationSetEventDestinationRequest(input, context)), { Action: "DeleteConfigurationSetEventDestination", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteConfigurationSetTrackingOptionsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteConfigurationSetTrackingOptionsRequest(input, context)), { Action: "DeleteConfigurationSetTrackingOptions", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteCustomVerificationEmailTemplateCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteCustomVerificationEmailTemplateRequest(input, context)), { Action: "DeleteCustomVerificationEmailTemplate", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteIdentityCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteIdentityRequest(input, context)), { Action: "DeleteIdentity", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteIdentityPolicyCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteIdentityPolicyRequest(input, context)), { Action: "DeleteIdentityPolicy", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteReceiptFilterCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteReceiptFilterRequest(input, context)), { Action: "DeleteReceiptFilter", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteReceiptRuleCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteReceiptRuleRequest(input, context)), { Action: "DeleteReceiptRule", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteReceiptRuleSetCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteReceiptRuleSetRequest(input, context)), { Action: "DeleteReceiptRuleSet", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteTemplateCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteTemplateRequest(input, context)), { Action: "DeleteTemplate", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteVerifiedEmailAddressCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteVerifiedEmailAddressRequest(input, context)), { Action: "DeleteVerifiedEmailAddress", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDescribeActiveReceiptRuleSetCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeActiveReceiptRuleSetRequest(input, context)), { Action: "DescribeActiveReceiptRuleSet", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDescribeConfigurationSetCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeConfigurationSetRequest(input, context)), { Action: "DescribeConfigurationSet", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDescribeReceiptRuleCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeReceiptRuleRequest(input, context)), { Action: "DescribeReceiptRule", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDescribeReceiptRuleSetCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeReceiptRuleSetRequest(input, context)), { Action: "DescribeReceiptRuleSet", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetAccountSendingEnabledCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString({
        Action: "GetAccountSendingEnabled",
        Version: "2010-12-01"
      });
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetCustomVerificationEmailTemplateCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryGetCustomVerificationEmailTemplateRequest(input, context)), { Action: "GetCustomVerificationEmailTemplate", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetIdentityDkimAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryGetIdentityDkimAttributesRequest(input, context)), { Action: "GetIdentityDkimAttributes", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetIdentityMailFromDomainAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryGetIdentityMailFromDomainAttributesRequest(input, context)), { Action: "GetIdentityMailFromDomainAttributes", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetIdentityNotificationAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryGetIdentityNotificationAttributesRequest(input, context)), { Action: "GetIdentityNotificationAttributes", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetIdentityPoliciesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryGetIdentityPoliciesRequest(input, context)), { Action: "GetIdentityPolicies", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetIdentityVerificationAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryGetIdentityVerificationAttributesRequest(input, context)), { Action: "GetIdentityVerificationAttributes", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetSendQuotaCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString({
        Action: "GetSendQuota",
        Version: "2010-12-01"
      });
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetSendStatisticsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString({
        Action: "GetSendStatistics",
        Version: "2010-12-01"
      });
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetTemplateCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryGetTemplateRequest(input, context)), { Action: "GetTemplate", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListConfigurationSetsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryListConfigurationSetsRequest(input, context)), { Action: "ListConfigurationSets", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListCustomVerificationEmailTemplatesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryListCustomVerificationEmailTemplatesRequest(input, context)), { Action: "ListCustomVerificationEmailTemplates", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListIdentitiesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryListIdentitiesRequest(input, context)), { Action: "ListIdentities", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListIdentityPoliciesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryListIdentityPoliciesRequest(input, context)), { Action: "ListIdentityPolicies", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListReceiptFiltersCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryListReceiptFiltersRequest(input, context)), { Action: "ListReceiptFilters", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListReceiptRuleSetsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryListReceiptRuleSetsRequest(input, context)), { Action: "ListReceiptRuleSets", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListTemplatesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryListTemplatesRequest(input, context)), { Action: "ListTemplates", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListVerifiedEmailAddressesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString({
        Action: "ListVerifiedEmailAddresses",
        Version: "2010-12-01"
      });
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryPutConfigurationSetDeliveryOptionsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryPutConfigurationSetDeliveryOptionsRequest(input, context)), { Action: "PutConfigurationSetDeliveryOptions", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryPutIdentityPolicyCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryPutIdentityPolicyRequest(input, context)), { Action: "PutIdentityPolicy", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryReorderReceiptRuleSetCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryReorderReceiptRuleSetRequest(input, context)), { Action: "ReorderReceiptRuleSet", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySendBounceCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_querySendBounceRequest(input, context)), { Action: "SendBounce", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySendBulkTemplatedEmailCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_querySendBulkTemplatedEmailRequest(input, context)), { Action: "SendBulkTemplatedEmail", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySendCustomVerificationEmailCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_querySendCustomVerificationEmailRequest(input, context)), { Action: "SendCustomVerificationEmail", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySendEmailCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_querySendEmailRequest(input, context)), { Action: "SendEmail", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySendRawEmailCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_querySendRawEmailRequest(input, context)), { Action: "SendRawEmail", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySendTemplatedEmailCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_querySendTemplatedEmailRequest(input, context)), { Action: "SendTemplatedEmail", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySetActiveReceiptRuleSetCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_querySetActiveReceiptRuleSetRequest(input, context)), { Action: "SetActiveReceiptRuleSet", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySetIdentityDkimEnabledCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_querySetIdentityDkimEnabledRequest(input, context)), { Action: "SetIdentityDkimEnabled", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySetIdentityFeedbackForwardingEnabledCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_querySetIdentityFeedbackForwardingEnabledRequest(input, context)), { Action: "SetIdentityFeedbackForwardingEnabled", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySetIdentityHeadersInNotificationsEnabledCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_querySetIdentityHeadersInNotificationsEnabledRequest(input, context)), { Action: "SetIdentityHeadersInNotificationsEnabled", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySetIdentityMailFromDomainCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_querySetIdentityMailFromDomainRequest(input, context)), { Action: "SetIdentityMailFromDomain", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySetIdentityNotificationTopicCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_querySetIdentityNotificationTopicRequest(input, context)), { Action: "SetIdentityNotificationTopic", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySetReceiptRulePositionCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_querySetReceiptRulePositionRequest(input, context)), { Action: "SetReceiptRulePosition", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryTestRenderTemplateCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryTestRenderTemplateRequest(input, context)), { Action: "TestRenderTemplate", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryUpdateAccountSendingEnabledCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryUpdateAccountSendingEnabledRequest(input, context)), { Action: "UpdateAccountSendingEnabled", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryUpdateConfigurationSetEventDestinationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryUpdateConfigurationSetEventDestinationRequest(input, context)), { Action: "UpdateConfigurationSetEventDestination", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryUpdateConfigurationSetReputationMetricsEnabledRequest(input, context)), { Action: "UpdateConfigurationSetReputationMetricsEnabled", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryUpdateConfigurationSetSendingEnabledCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryUpdateConfigurationSetSendingEnabledRequest(input, context)), { Action: "UpdateConfigurationSetSendingEnabled", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryUpdateConfigurationSetTrackingOptionsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryUpdateConfigurationSetTrackingOptionsRequest(input, context)), { Action: "UpdateConfigurationSetTrackingOptions", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryUpdateCustomVerificationEmailTemplateCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryUpdateCustomVerificationEmailTemplateRequest(input, context)), { Action: "UpdateCustomVerificationEmailTemplate", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryUpdateReceiptRuleCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryUpdateReceiptRuleRequest(input, context)), { Action: "UpdateReceiptRule", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryUpdateTemplateCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryUpdateTemplateRequest(input, context)), { Action: "UpdateTemplate", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryVerifyDomainDkimCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryVerifyDomainDkimRequest(input, context)), { Action: "VerifyDomainDkim", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryVerifyDomainIdentityCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryVerifyDomainIdentityRequest(input, context)), { Action: "VerifyDomainIdentity", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryVerifyEmailAddressCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryVerifyEmailAddressRequest(input, context)), { Action: "VerifyEmailAddress", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryVerifyEmailIdentityCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryVerifyEmailIdentityRequest(input, context)), { Action: "VerifyEmailIdentity", Version: "2010-12-01" }));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var deserializeAws_queryCloneReceiptRuleSetCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCloneReceiptRuleSetCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryCloneReceiptRuleSetResponse(data.CloneReceiptRuleSetResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCloneReceiptRuleSetCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AlreadyExistsException":
              return [3, 2];
            case "com.amazonaws.ses#AlreadyExistsException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.ses#LimitExceededException":
              return [3, 4];
            case "RuleSetDoesNotExistException":
              return [3, 6];
            case "com.amazonaws.ses#RuleSetDoesNotExistException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryCreateConfigurationSetCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCreateConfigurationSetCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryCreateConfigurationSetResponse(data.CreateConfigurationSetResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCreateConfigurationSetCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConfigurationSetAlreadyExistsException":
              return [3, 2];
            case "com.amazonaws.ses#ConfigurationSetAlreadyExistsException":
              return [3, 2];
            case "InvalidConfigurationSetException":
              return [3, 4];
            case "com.amazonaws.ses#InvalidConfigurationSetException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.ses#LimitExceededException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryConfigurationSetAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInvalidConfigurationSetExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryCreateConfigurationSetEventDestinationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCreateConfigurationSetEventDestinationCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryCreateConfigurationSetEventDestinationResponse(data.CreateConfigurationSetEventDestinationResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCreateConfigurationSetEventDestinationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "EventDestinationAlreadyExistsException":
              return [3, 4];
            case "com.amazonaws.ses#EventDestinationAlreadyExistsException":
              return [3, 4];
            case "InvalidCloudWatchDestinationException":
              return [3, 6];
            case "com.amazonaws.ses#InvalidCloudWatchDestinationException":
              return [3, 6];
            case "InvalidFirehoseDestinationException":
              return [3, 8];
            case "com.amazonaws.ses#InvalidFirehoseDestinationException":
              return [3, 8];
            case "InvalidSNSDestinationException":
              return [3, 10];
            case "com.amazonaws.ses#InvalidSNSDestinationException":
              return [3, 10];
            case "LimitExceededException":
              return [3, 12];
            case "com.amazonaws.ses#LimitExceededException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryEventDestinationAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidCloudWatchDestinationExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryInvalidFirehoseDestinationExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryInvalidSNSDestinationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryCreateConfigurationSetTrackingOptionsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCreateConfigurationSetTrackingOptionsCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryCreateConfigurationSetTrackingOptionsResponse(data.CreateConfigurationSetTrackingOptionsResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCreateConfigurationSetTrackingOptionsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "InvalidTrackingOptionsException":
              return [3, 4];
            case "com.amazonaws.ses#InvalidTrackingOptionsException":
              return [3, 4];
            case "TrackingOptionsAlreadyExistsException":
              return [3, 6];
            case "com.amazonaws.ses#TrackingOptionsAlreadyExistsException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInvalidTrackingOptionsExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryTrackingOptionsAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryCreateCustomVerificationEmailTemplateCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCreateCustomVerificationEmailTemplateCommandError(output, context)];
          }
          return [4, collectBody5(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata4(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCreateCustomVerificationEmailTemplateCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "CustomVerificationEmailInvalidContentException":
              return [3, 2];
            case "com.amazonaws.ses#CustomVerificationEmailInvalidContentException":
              return [3, 2];
            case "CustomVerificationEmailTemplateAlreadyExistsException":
              return [3, 4];
            case "com.amazonaws.ses#CustomVerificationEmailTemplateAlreadyExistsException":
              return [3, 4];
            case "FromEmailAddressNotVerifiedException":
              return [3, 6];
            case "com.amazonaws.ses#FromEmailAddressNotVerifiedException":
              return [3, 6];
            case "LimitExceededException":
              return [3, 8];
            case "com.amazonaws.ses#LimitExceededException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryCustomVerificationEmailInvalidContentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryCustomVerificationEmailTemplateAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryFromEmailAddressNotVerifiedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryCreateReceiptFilterCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCreateReceiptFilterCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryCreateReceiptFilterResponse(data.CreateReceiptFilterResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCreateReceiptFilterCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AlreadyExistsException":
              return [3, 2];
            case "com.amazonaws.ses#AlreadyExistsException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.ses#LimitExceededException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryCreateReceiptRuleCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCreateReceiptRuleCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryCreateReceiptRuleResponse(data.CreateReceiptRuleResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCreateReceiptRuleCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign({}, output)];
          _k = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AlreadyExistsException":
              return [3, 2];
            case "com.amazonaws.ses#AlreadyExistsException":
              return [3, 2];
            case "InvalidLambdaFunctionException":
              return [3, 4];
            case "com.amazonaws.ses#InvalidLambdaFunctionException":
              return [3, 4];
            case "InvalidS3ConfigurationException":
              return [3, 6];
            case "com.amazonaws.ses#InvalidS3ConfigurationException":
              return [3, 6];
            case "InvalidSnsTopicException":
              return [3, 8];
            case "com.amazonaws.ses#InvalidSnsTopicException":
              return [3, 8];
            case "LimitExceededException":
              return [3, 10];
            case "com.amazonaws.ses#LimitExceededException":
              return [3, 10];
            case "RuleDoesNotExistException":
              return [3, 12];
            case "com.amazonaws.ses#RuleDoesNotExistException":
              return [3, 12];
            case "RuleSetDoesNotExistException":
              return [3, 14];
            case "com.amazonaws.ses#RuleSetDoesNotExistException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInvalidLambdaFunctionExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidS3ConfigurationExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryInvalidSnsTopicExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryCreateReceiptRuleSetCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCreateReceiptRuleSetCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryCreateReceiptRuleSetResponse(data.CreateReceiptRuleSetResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCreateReceiptRuleSetCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AlreadyExistsException":
              return [3, 2];
            case "com.amazonaws.ses#AlreadyExistsException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.ses#LimitExceededException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryCreateTemplateCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCreateTemplateCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryCreateTemplateResponse(data.CreateTemplateResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCreateTemplateCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AlreadyExistsException":
              return [3, 2];
            case "com.amazonaws.ses#AlreadyExistsException":
              return [3, 2];
            case "InvalidTemplateException":
              return [3, 4];
            case "com.amazonaws.ses#InvalidTemplateException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.ses#LimitExceededException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInvalidTemplateExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteConfigurationSetCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteConfigurationSetCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDeleteConfigurationSetResponse(data.DeleteConfigurationSetResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteConfigurationSetCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteConfigurationSetEventDestinationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteConfigurationSetEventDestinationCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDeleteConfigurationSetEventDestinationResponse(data.DeleteConfigurationSetEventDestinationResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteConfigurationSetEventDestinationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "EventDestinationDoesNotExistException":
              return [3, 4];
            case "com.amazonaws.ses#EventDestinationDoesNotExistException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryEventDestinationDoesNotExistExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteConfigurationSetTrackingOptionsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteConfigurationSetTrackingOptionsCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDeleteConfigurationSetTrackingOptionsResponse(data.DeleteConfigurationSetTrackingOptionsResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteConfigurationSetTrackingOptionsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "TrackingOptionsDoesNotExistException":
              return [3, 4];
            case "com.amazonaws.ses#TrackingOptionsDoesNotExistException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryTrackingOptionsDoesNotExistExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteCustomVerificationEmailTemplateCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteCustomVerificationEmailTemplateCommandError(output, context)];
          }
          return [4, collectBody5(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata4(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteCustomVerificationEmailTemplateCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteIdentityCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteIdentityCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDeleteIdentityResponse(data.DeleteIdentityResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteIdentityCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteIdentityPolicyCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteIdentityPolicyCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDeleteIdentityPolicyResponse(data.DeleteIdentityPolicyResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteIdentityPolicyCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteReceiptFilterCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteReceiptFilterCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDeleteReceiptFilterResponse(data.DeleteReceiptFilterResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteReceiptFilterCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteReceiptRuleCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteReceiptRuleCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDeleteReceiptRuleResponse(data.DeleteReceiptRuleResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteReceiptRuleCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "RuleSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#RuleSetDoesNotExistException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteReceiptRuleSetCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteReceiptRuleSetCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDeleteReceiptRuleSetResponse(data.DeleteReceiptRuleSetResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteReceiptRuleSetCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "CannotDeleteException":
              return [3, 2];
            case "com.amazonaws.ses#CannotDeleteException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryCannotDeleteExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteTemplateCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteTemplateCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDeleteTemplateResponse(data.DeleteTemplateResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteTemplateCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteVerifiedEmailAddressCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteVerifiedEmailAddressCommandError(output, context)];
          }
          return [4, collectBody5(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata4(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteVerifiedEmailAddressCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDescribeActiveReceiptRuleSetCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDescribeActiveReceiptRuleSetCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDescribeActiveReceiptRuleSetResponse(data.DescribeActiveReceiptRuleSetResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDescribeActiveReceiptRuleSetCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDescribeConfigurationSetCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDescribeConfigurationSetCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDescribeConfigurationSetResponse(data.DescribeConfigurationSetResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDescribeConfigurationSetCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDescribeReceiptRuleCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDescribeReceiptRuleCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDescribeReceiptRuleResponse(data.DescribeReceiptRuleResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDescribeReceiptRuleCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "RuleDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#RuleDoesNotExistException":
              return [3, 2];
            case "RuleSetDoesNotExistException":
              return [3, 4];
            case "com.amazonaws.ses#RuleSetDoesNotExistException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDescribeReceiptRuleSetCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDescribeReceiptRuleSetCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDescribeReceiptRuleSetResponse(data.DescribeReceiptRuleSetResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDescribeReceiptRuleSetCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "RuleSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#RuleSetDoesNotExistException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetAccountSendingEnabledCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetAccountSendingEnabledCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetAccountSendingEnabledResponse(data.GetAccountSendingEnabledResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetAccountSendingEnabledCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetCustomVerificationEmailTemplateCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetCustomVerificationEmailTemplateCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetCustomVerificationEmailTemplateResponse(data.GetCustomVerificationEmailTemplateResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetCustomVerificationEmailTemplateCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "CustomVerificationEmailTemplateDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#CustomVerificationEmailTemplateDoesNotExistException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetIdentityDkimAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetIdentityDkimAttributesCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetIdentityDkimAttributesResponse(data.GetIdentityDkimAttributesResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetIdentityDkimAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetIdentityMailFromDomainAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetIdentityMailFromDomainAttributesCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetIdentityMailFromDomainAttributesResponse(data.GetIdentityMailFromDomainAttributesResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetIdentityMailFromDomainAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetIdentityNotificationAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetIdentityNotificationAttributesCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetIdentityNotificationAttributesResponse(data.GetIdentityNotificationAttributesResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetIdentityNotificationAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetIdentityPoliciesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetIdentityPoliciesCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetIdentityPoliciesResponse(data.GetIdentityPoliciesResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetIdentityPoliciesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetIdentityVerificationAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetIdentityVerificationAttributesCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetIdentityVerificationAttributesResponse(data.GetIdentityVerificationAttributesResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetIdentityVerificationAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetSendQuotaCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetSendQuotaCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetSendQuotaResponse(data.GetSendQuotaResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetSendQuotaCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetSendStatisticsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetSendStatisticsCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetSendStatisticsResponse(data.GetSendStatisticsResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetSendStatisticsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetTemplateCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetTemplateCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetTemplateResponse(data.GetTemplateResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetTemplateCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "TemplateDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#TemplateDoesNotExistException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListConfigurationSetsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListConfigurationSetsCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListConfigurationSetsResponse(data.ListConfigurationSetsResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListConfigurationSetsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListCustomVerificationEmailTemplatesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListCustomVerificationEmailTemplatesCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListCustomVerificationEmailTemplatesResponse(data.ListCustomVerificationEmailTemplatesResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListCustomVerificationEmailTemplatesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListIdentitiesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListIdentitiesCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListIdentitiesResponse(data.ListIdentitiesResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListIdentitiesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListIdentityPoliciesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListIdentityPoliciesCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListIdentityPoliciesResponse(data.ListIdentityPoliciesResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListIdentityPoliciesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListReceiptFiltersCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListReceiptFiltersCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListReceiptFiltersResponse(data.ListReceiptFiltersResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListReceiptFiltersCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListReceiptRuleSetsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListReceiptRuleSetsCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListReceiptRuleSetsResponse(data.ListReceiptRuleSetsResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListReceiptRuleSetsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListTemplatesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListTemplatesCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListTemplatesResponse(data.ListTemplatesResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListTemplatesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListVerifiedEmailAddressesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListVerifiedEmailAddressesCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListVerifiedEmailAddressesResponse(data.ListVerifiedEmailAddressesResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListVerifiedEmailAddressesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryPutConfigurationSetDeliveryOptionsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryPutConfigurationSetDeliveryOptionsCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryPutConfigurationSetDeliveryOptionsResponse(data.PutConfigurationSetDeliveryOptionsResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryPutConfigurationSetDeliveryOptionsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "InvalidDeliveryOptionsException":
              return [3, 4];
            case "com.amazonaws.ses#InvalidDeliveryOptionsException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInvalidDeliveryOptionsExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryPutIdentityPolicyCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryPutIdentityPolicyCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryPutIdentityPolicyResponse(data.PutIdentityPolicyResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryPutIdentityPolicyCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidPolicyException":
              return [3, 2];
            case "com.amazonaws.ses#InvalidPolicyException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryInvalidPolicyExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryReorderReceiptRuleSetCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryReorderReceiptRuleSetCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryReorderReceiptRuleSetResponse(data.ReorderReceiptRuleSetResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryReorderReceiptRuleSetCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "RuleDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#RuleDoesNotExistException":
              return [3, 2];
            case "RuleSetDoesNotExistException":
              return [3, 4];
            case "com.amazonaws.ses#RuleSetDoesNotExistException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySendBounceCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySendBounceCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySendBounceResponse(data.SendBounceResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySendBounceCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "MessageRejected":
              return [3, 2];
            case "com.amazonaws.ses#MessageRejected":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryMessageRejectedResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySendBulkTemplatedEmailCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySendBulkTemplatedEmailCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySendBulkTemplatedEmailResponse(data.SendBulkTemplatedEmailResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySendBulkTemplatedEmailCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccountSendingPausedException":
              return [3, 2];
            case "com.amazonaws.ses#AccountSendingPausedException":
              return [3, 2];
            case "ConfigurationSetDoesNotExistException":
              return [3, 4];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 4];
            case "ConfigurationSetSendingPausedException":
              return [3, 6];
            case "com.amazonaws.ses#ConfigurationSetSendingPausedException":
              return [3, 6];
            case "MailFromDomainNotVerifiedException":
              return [3, 8];
            case "com.amazonaws.ses#MailFromDomainNotVerifiedException":
              return [3, 8];
            case "MessageRejected":
              return [3, 10];
            case "com.amazonaws.ses#MessageRejected":
              return [3, 10];
            case "TemplateDoesNotExistException":
              return [3, 12];
            case "com.amazonaws.ses#TemplateDoesNotExistException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAccountSendingPausedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryConfigurationSetSendingPausedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryMessageRejectedResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySendCustomVerificationEmailCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySendCustomVerificationEmailCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySendCustomVerificationEmailResponse(data.SendCustomVerificationEmailResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySendCustomVerificationEmailCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "CustomVerificationEmailTemplateDoesNotExistException":
              return [3, 4];
            case "com.amazonaws.ses#CustomVerificationEmailTemplateDoesNotExistException":
              return [3, 4];
            case "FromEmailAddressNotVerifiedException":
              return [3, 6];
            case "com.amazonaws.ses#FromEmailAddressNotVerifiedException":
              return [3, 6];
            case "MessageRejected":
              return [3, 8];
            case "com.amazonaws.ses#MessageRejected":
              return [3, 8];
            case "ProductionAccessNotGrantedException":
              return [3, 10];
            case "com.amazonaws.ses#ProductionAccessNotGrantedException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryFromEmailAddressNotVerifiedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryMessageRejectedResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryProductionAccessNotGrantedExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySendEmailCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySendEmailCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySendEmailResponse(data.SendEmailResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySendEmailCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccountSendingPausedException":
              return [3, 2];
            case "com.amazonaws.ses#AccountSendingPausedException":
              return [3, 2];
            case "ConfigurationSetDoesNotExistException":
              return [3, 4];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 4];
            case "ConfigurationSetSendingPausedException":
              return [3, 6];
            case "com.amazonaws.ses#ConfigurationSetSendingPausedException":
              return [3, 6];
            case "MailFromDomainNotVerifiedException":
              return [3, 8];
            case "com.amazonaws.ses#MailFromDomainNotVerifiedException":
              return [3, 8];
            case "MessageRejected":
              return [3, 10];
            case "com.amazonaws.ses#MessageRejected":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAccountSendingPausedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryConfigurationSetSendingPausedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryMessageRejectedResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySendRawEmailCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySendRawEmailCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySendRawEmailResponse(data.SendRawEmailResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySendRawEmailCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccountSendingPausedException":
              return [3, 2];
            case "com.amazonaws.ses#AccountSendingPausedException":
              return [3, 2];
            case "ConfigurationSetDoesNotExistException":
              return [3, 4];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 4];
            case "ConfigurationSetSendingPausedException":
              return [3, 6];
            case "com.amazonaws.ses#ConfigurationSetSendingPausedException":
              return [3, 6];
            case "MailFromDomainNotVerifiedException":
              return [3, 8];
            case "com.amazonaws.ses#MailFromDomainNotVerifiedException":
              return [3, 8];
            case "MessageRejected":
              return [3, 10];
            case "com.amazonaws.ses#MessageRejected":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAccountSendingPausedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryConfigurationSetSendingPausedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryMessageRejectedResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySendTemplatedEmailCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySendTemplatedEmailCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySendTemplatedEmailResponse(data.SendTemplatedEmailResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySendTemplatedEmailCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccountSendingPausedException":
              return [3, 2];
            case "com.amazonaws.ses#AccountSendingPausedException":
              return [3, 2];
            case "ConfigurationSetDoesNotExistException":
              return [3, 4];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 4];
            case "ConfigurationSetSendingPausedException":
              return [3, 6];
            case "com.amazonaws.ses#ConfigurationSetSendingPausedException":
              return [3, 6];
            case "MailFromDomainNotVerifiedException":
              return [3, 8];
            case "com.amazonaws.ses#MailFromDomainNotVerifiedException":
              return [3, 8];
            case "MessageRejected":
              return [3, 10];
            case "com.amazonaws.ses#MessageRejected":
              return [3, 10];
            case "TemplateDoesNotExistException":
              return [3, 12];
            case "com.amazonaws.ses#TemplateDoesNotExistException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAccountSendingPausedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryConfigurationSetSendingPausedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryMessageRejectedResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySetActiveReceiptRuleSetCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySetActiveReceiptRuleSetCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySetActiveReceiptRuleSetResponse(data.SetActiveReceiptRuleSetResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySetActiveReceiptRuleSetCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "RuleSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#RuleSetDoesNotExistException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySetIdentityDkimEnabledCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySetIdentityDkimEnabledCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySetIdentityDkimEnabledResponse(data.SetIdentityDkimEnabledResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySetIdentityDkimEnabledCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySetIdentityFeedbackForwardingEnabledCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySetIdentityFeedbackForwardingEnabledCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySetIdentityFeedbackForwardingEnabledResponse(data.SetIdentityFeedbackForwardingEnabledResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySetIdentityFeedbackForwardingEnabledCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySetIdentityHeadersInNotificationsEnabledCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySetIdentityHeadersInNotificationsEnabledCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySetIdentityHeadersInNotificationsEnabledResponse(data.SetIdentityHeadersInNotificationsEnabledResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySetIdentityHeadersInNotificationsEnabledCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySetIdentityMailFromDomainCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySetIdentityMailFromDomainCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySetIdentityMailFromDomainResponse(data.SetIdentityMailFromDomainResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySetIdentityMailFromDomainCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySetIdentityNotificationTopicCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySetIdentityNotificationTopicCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySetIdentityNotificationTopicResponse(data.SetIdentityNotificationTopicResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySetIdentityNotificationTopicCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySetReceiptRulePositionCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySetReceiptRulePositionCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySetReceiptRulePositionResponse(data.SetReceiptRulePositionResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySetReceiptRulePositionCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "RuleDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#RuleDoesNotExistException":
              return [3, 2];
            case "RuleSetDoesNotExistException":
              return [3, 4];
            case "com.amazonaws.ses#RuleSetDoesNotExistException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryTestRenderTemplateCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryTestRenderTemplateCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryTestRenderTemplateResponse(data.TestRenderTemplateResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryTestRenderTemplateCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidRenderingParameterException":
              return [3, 2];
            case "com.amazonaws.ses#InvalidRenderingParameterException":
              return [3, 2];
            case "MissingRenderingAttributeException":
              return [3, 4];
            case "com.amazonaws.ses#MissingRenderingAttributeException":
              return [3, 4];
            case "TemplateDoesNotExistException":
              return [3, 6];
            case "com.amazonaws.ses#TemplateDoesNotExistException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryInvalidRenderingParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryMissingRenderingAttributeExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryUpdateAccountSendingEnabledCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryUpdateAccountSendingEnabledCommandError(output, context)];
          }
          return [4, collectBody5(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata4(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryUpdateAccountSendingEnabledCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryUpdateConfigurationSetEventDestinationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryUpdateConfigurationSetEventDestinationCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryUpdateConfigurationSetEventDestinationResponse(data.UpdateConfigurationSetEventDestinationResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryUpdateConfigurationSetEventDestinationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "EventDestinationDoesNotExistException":
              return [3, 4];
            case "com.amazonaws.ses#EventDestinationDoesNotExistException":
              return [3, 4];
            case "InvalidCloudWatchDestinationException":
              return [3, 6];
            case "com.amazonaws.ses#InvalidCloudWatchDestinationException":
              return [3, 6];
            case "InvalidFirehoseDestinationException":
              return [3, 8];
            case "com.amazonaws.ses#InvalidFirehoseDestinationException":
              return [3, 8];
            case "InvalidSNSDestinationException":
              return [3, 10];
            case "com.amazonaws.ses#InvalidSNSDestinationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryEventDestinationDoesNotExistExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidCloudWatchDestinationExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryInvalidFirehoseDestinationExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryInvalidSNSDestinationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommandError(output, context)];
          }
          return [4, collectBody5(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata4(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryUpdateConfigurationSetSendingEnabledCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryUpdateConfigurationSetSendingEnabledCommandError(output, context)];
          }
          return [4, collectBody5(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata4(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryUpdateConfigurationSetSendingEnabledCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryUpdateConfigurationSetTrackingOptionsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryUpdateConfigurationSetTrackingOptionsCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryUpdateConfigurationSetTrackingOptionsResponse(data.UpdateConfigurationSetTrackingOptionsResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryUpdateConfigurationSetTrackingOptionsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
              return [3, 2];
            case "InvalidTrackingOptionsException":
              return [3, 4];
            case "com.amazonaws.ses#InvalidTrackingOptionsException":
              return [3, 4];
            case "TrackingOptionsDoesNotExistException":
              return [3, 6];
            case "com.amazonaws.ses#TrackingOptionsDoesNotExistException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInvalidTrackingOptionsExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryTrackingOptionsDoesNotExistExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryUpdateCustomVerificationEmailTemplateCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryUpdateCustomVerificationEmailTemplateCommandError(output, context)];
          }
          return [4, collectBody5(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata4(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryUpdateCustomVerificationEmailTemplateCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "CustomVerificationEmailInvalidContentException":
              return [3, 2];
            case "com.amazonaws.ses#CustomVerificationEmailInvalidContentException":
              return [3, 2];
            case "CustomVerificationEmailTemplateDoesNotExistException":
              return [3, 4];
            case "com.amazonaws.ses#CustomVerificationEmailTemplateDoesNotExistException":
              return [3, 4];
            case "FromEmailAddressNotVerifiedException":
              return [3, 6];
            case "com.amazonaws.ses#FromEmailAddressNotVerifiedException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryCustomVerificationEmailInvalidContentExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryFromEmailAddressNotVerifiedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryUpdateReceiptRuleCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryUpdateReceiptRuleCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryUpdateReceiptRuleResponse(data.UpdateReceiptRuleResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryUpdateReceiptRuleCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidLambdaFunctionException":
              return [3, 2];
            case "com.amazonaws.ses#InvalidLambdaFunctionException":
              return [3, 2];
            case "InvalidS3ConfigurationException":
              return [3, 4];
            case "com.amazonaws.ses#InvalidS3ConfigurationException":
              return [3, 4];
            case "InvalidSnsTopicException":
              return [3, 6];
            case "com.amazonaws.ses#InvalidSnsTopicException":
              return [3, 6];
            case "LimitExceededException":
              return [3, 8];
            case "com.amazonaws.ses#LimitExceededException":
              return [3, 8];
            case "RuleDoesNotExistException":
              return [3, 10];
            case "com.amazonaws.ses#RuleDoesNotExistException":
              return [3, 10];
            case "RuleSetDoesNotExistException":
              return [3, 12];
            case "com.amazonaws.ses#RuleSetDoesNotExistException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryInvalidLambdaFunctionExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInvalidS3ConfigurationExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidSnsTopicExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryUpdateTemplateCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryUpdateTemplateCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryUpdateTemplateResponse(data.UpdateTemplateResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryUpdateTemplateCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidTemplateException":
              return [3, 2];
            case "com.amazonaws.ses#InvalidTemplateException":
              return [3, 2];
            case "TemplateDoesNotExistException":
              return [3, 4];
            case "com.amazonaws.ses#TemplateDoesNotExistException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryInvalidTemplateExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata4(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryVerifyDomainDkimCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryVerifyDomainDkimCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryVerifyDomainDkimResponse(data.VerifyDomainDkimResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryVerifyDomainDkimCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryVerifyDomainIdentityCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryVerifyDomainIdentityCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryVerifyDomainIdentityResponse(data.VerifyDomainIdentityResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryVerifyDomainIdentityCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryVerifyEmailAddressCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryVerifyEmailAddressCommandError(output, context)];
          }
          return [4, collectBody5(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata4(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryVerifyEmailAddressCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryVerifyEmailIdentityCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryVerifyEmailIdentityCommandError(output, context)];
          }
          return [4, parseBody4(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryVerifyEmailIdentityResponse(data.VerifyEmailIdentityResult, context);
          response = __assign({ $metadata: deserializeMetadata4(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryVerifyEmailIdentityCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody4(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata4(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryAccountSendingPausedExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryAccountSendingPausedException(body.Error, context);
      contents = __assign({ name: "AccountSendingPausedException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryAlreadyExistsExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryAlreadyExistsException(body.Error, context);
      contents = __assign({ name: "AlreadyExistsException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryCannotDeleteExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryCannotDeleteException(body.Error, context);
      contents = __assign({ name: "CannotDeleteException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryConfigurationSetAlreadyExistsExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryConfigurationSetAlreadyExistsException(body.Error, context);
      contents = __assign({ name: "ConfigurationSetAlreadyExistsException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryConfigurationSetDoesNotExistException(body.Error, context);
      contents = __assign({ name: "ConfigurationSetDoesNotExistException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryConfigurationSetSendingPausedExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryConfigurationSetSendingPausedException(body.Error, context);
      contents = __assign({ name: "ConfigurationSetSendingPausedException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryCustomVerificationEmailInvalidContentExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryCustomVerificationEmailInvalidContentException(body.Error, context);
      contents = __assign({ name: "CustomVerificationEmailInvalidContentException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryCustomVerificationEmailTemplateAlreadyExistsExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryCustomVerificationEmailTemplateAlreadyExistsException(body.Error, context);
      contents = __assign({ name: "CustomVerificationEmailTemplateAlreadyExistsException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistException(body.Error, context);
      contents = __assign({ name: "CustomVerificationEmailTemplateDoesNotExistException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryEventDestinationAlreadyExistsExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryEventDestinationAlreadyExistsException(body.Error, context);
      contents = __assign({ name: "EventDestinationAlreadyExistsException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryEventDestinationDoesNotExistExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryEventDestinationDoesNotExistException(body.Error, context);
      contents = __assign({ name: "EventDestinationDoesNotExistException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryFromEmailAddressNotVerifiedExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryFromEmailAddressNotVerifiedException(body.Error, context);
      contents = __assign({ name: "FromEmailAddressNotVerifiedException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidCloudWatchDestinationExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidCloudWatchDestinationException(body.Error, context);
      contents = __assign({ name: "InvalidCloudWatchDestinationException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidConfigurationSetExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidConfigurationSetException(body.Error, context);
      contents = __assign({ name: "InvalidConfigurationSetException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidDeliveryOptionsExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidDeliveryOptionsException(body.Error, context);
      contents = __assign({ name: "InvalidDeliveryOptionsException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidFirehoseDestinationExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidFirehoseDestinationException(body.Error, context);
      contents = __assign({ name: "InvalidFirehoseDestinationException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidLambdaFunctionExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidLambdaFunctionException(body.Error, context);
      contents = __assign({ name: "InvalidLambdaFunctionException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidPolicyExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidPolicyException(body.Error, context);
      contents = __assign({ name: "InvalidPolicyException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidRenderingParameterExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidRenderingParameterException(body.Error, context);
      contents = __assign({ name: "InvalidRenderingParameterException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidS3ConfigurationExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidS3ConfigurationException(body.Error, context);
      contents = __assign({ name: "InvalidS3ConfigurationException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidSNSDestinationExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidSNSDestinationException(body.Error, context);
      contents = __assign({ name: "InvalidSNSDestinationException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidSnsTopicExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidSnsTopicException(body.Error, context);
      contents = __assign({ name: "InvalidSnsTopicException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidTemplateExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidTemplateException(body.Error, context);
      contents = __assign({ name: "InvalidTemplateException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidTrackingOptionsExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidTrackingOptionsException(body.Error, context);
      contents = __assign({ name: "InvalidTrackingOptionsException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryLimitExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryLimitExceededException(body.Error, context);
      contents = __assign({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryMailFromDomainNotVerifiedException(body.Error, context);
      contents = __assign({ name: "MailFromDomainNotVerifiedException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryMessageRejectedResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryMessageRejected(body.Error, context);
      contents = __assign({ name: "MessageRejected", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryMissingRenderingAttributeExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryMissingRenderingAttributeException(body.Error, context);
      contents = __assign({ name: "MissingRenderingAttributeException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryProductionAccessNotGrantedExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryProductionAccessNotGrantedException(body.Error, context);
      contents = __assign({ name: "ProductionAccessNotGrantedException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryRuleDoesNotExistExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryRuleDoesNotExistException(body.Error, context);
      contents = __assign({ name: "RuleDoesNotExistException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryRuleSetDoesNotExistExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryRuleSetDoesNotExistException(body.Error, context);
      contents = __assign({ name: "RuleSetDoesNotExistException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryTemplateDoesNotExistExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryTemplateDoesNotExistException(body.Error, context);
      contents = __assign({ name: "TemplateDoesNotExistException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryTrackingOptionsAlreadyExistsExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryTrackingOptionsAlreadyExistsException(body.Error, context);
      contents = __assign({ name: "TrackingOptionsAlreadyExistsException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryTrackingOptionsDoesNotExistExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryTrackingOptionsDoesNotExistException(body.Error, context);
      contents = __assign({ name: "TrackingOptionsDoesNotExistException", $fault: "client", $metadata: deserializeMetadata4(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var serializeAws_queryAddHeaderAction = function(input, context) {
  var entries = {};
  if (input.HeaderName !== void 0 && input.HeaderName !== null) {
    entries["HeaderName"] = input.HeaderName;
  }
  if (input.HeaderValue !== void 0 && input.HeaderValue !== null) {
    entries["HeaderValue"] = input.HeaderValue;
  }
  return entries;
};
var serializeAws_queryAddressList = function(input, context) {
  var e_1, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
      var entry = input_1_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (input_1_1 && !input_1_1.done && (_a = input_1.return))
        _a.call(input_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return entries;
};
var serializeAws_queryBody = function(input, context) {
  var entries = {};
  if (input.Text !== void 0 && input.Text !== null) {
    var memberEntries = serializeAws_queryContent(input.Text, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Text." + key;
      entries[loc] = value;
    });
  }
  if (input.Html !== void 0 && input.Html !== null) {
    var memberEntries = serializeAws_queryContent(input.Html, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Html." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryBounceAction = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  if (input.SmtpReplyCode !== void 0 && input.SmtpReplyCode !== null) {
    entries["SmtpReplyCode"] = input.SmtpReplyCode;
  }
  if (input.StatusCode !== void 0 && input.StatusCode !== null) {
    entries["StatusCode"] = input.StatusCode;
  }
  if (input.Message !== void 0 && input.Message !== null) {
    entries["Message"] = input.Message;
  }
  if (input.Sender !== void 0 && input.Sender !== null) {
    entries["Sender"] = input.Sender;
  }
  return entries;
};
var serializeAws_queryBouncedRecipientInfo = function(input, context) {
  var entries = {};
  if (input.Recipient !== void 0 && input.Recipient !== null) {
    entries["Recipient"] = input.Recipient;
  }
  if (input.RecipientArn !== void 0 && input.RecipientArn !== null) {
    entries["RecipientArn"] = input.RecipientArn;
  }
  if (input.BounceType !== void 0 && input.BounceType !== null) {
    entries["BounceType"] = input.BounceType;
  }
  if (input.RecipientDsnFields !== void 0 && input.RecipientDsnFields !== null) {
    var memberEntries = serializeAws_queryRecipientDsnFields(input.RecipientDsnFields, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "RecipientDsnFields." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryBouncedRecipientInfoList = function(input, context) {
  var e_2, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_2 = __values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {
      var entry = input_2_1.value;
      if (entry === null) {
        continue;
      }
      var memberEntries = serializeAws_queryBouncedRecipientInfo(entry, context);
      Object.entries(memberEntries).forEach(function(_a2) {
        var _b = __read(_a2, 2), key = _b[0], value = _b[1];
        entries["member." + counter + "." + key] = value;
      });
      counter++;
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (input_2_1 && !input_2_1.done && (_a = input_2.return))
        _a.call(input_2);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  return entries;
};
var serializeAws_queryBulkEmailDestination = function(input, context) {
  var entries = {};
  if (input.Destination !== void 0 && input.Destination !== null) {
    var memberEntries = serializeAws_queryDestination(input.Destination, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Destination." + key;
      entries[loc] = value;
    });
  }
  if (input.ReplacementTags !== void 0 && input.ReplacementTags !== null) {
    var memberEntries = serializeAws_queryMessageTagList(input.ReplacementTags, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "ReplacementTags." + key;
      entries[loc] = value;
    });
  }
  if (input.ReplacementTemplateData !== void 0 && input.ReplacementTemplateData !== null) {
    entries["ReplacementTemplateData"] = input.ReplacementTemplateData;
  }
  return entries;
};
var serializeAws_queryBulkEmailDestinationList = function(input, context) {
  var e_3, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_3 = __values(input), input_3_1 = input_3.next(); !input_3_1.done; input_3_1 = input_3.next()) {
      var entry = input_3_1.value;
      if (entry === null) {
        continue;
      }
      var memberEntries = serializeAws_queryBulkEmailDestination(entry, context);
      Object.entries(memberEntries).forEach(function(_a2) {
        var _b = __read(_a2, 2), key = _b[0], value = _b[1];
        entries["member." + counter + "." + key] = value;
      });
      counter++;
    }
  } catch (e_3_1) {
    e_3 = { error: e_3_1 };
  } finally {
    try {
      if (input_3_1 && !input_3_1.done && (_a = input_3.return))
        _a.call(input_3);
    } finally {
      if (e_3)
        throw e_3.error;
    }
  }
  return entries;
};
var serializeAws_queryCloneReceiptRuleSetRequest = function(input, context) {
  var entries = {};
  if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
    entries["RuleSetName"] = input.RuleSetName;
  }
  if (input.OriginalRuleSetName !== void 0 && input.OriginalRuleSetName !== null) {
    entries["OriginalRuleSetName"] = input.OriginalRuleSetName;
  }
  return entries;
};
var serializeAws_queryCloudWatchDestination = function(input, context) {
  var entries = {};
  if (input.DimensionConfigurations !== void 0 && input.DimensionConfigurations !== null) {
    var memberEntries = serializeAws_queryCloudWatchDimensionConfigurations(input.DimensionConfigurations, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "DimensionConfigurations." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryCloudWatchDimensionConfiguration = function(input, context) {
  var entries = {};
  if (input.DimensionName !== void 0 && input.DimensionName !== null) {
    entries["DimensionName"] = input.DimensionName;
  }
  if (input.DimensionValueSource !== void 0 && input.DimensionValueSource !== null) {
    entries["DimensionValueSource"] = input.DimensionValueSource;
  }
  if (input.DefaultDimensionValue !== void 0 && input.DefaultDimensionValue !== null) {
    entries["DefaultDimensionValue"] = input.DefaultDimensionValue;
  }
  return entries;
};
var serializeAws_queryCloudWatchDimensionConfigurations = function(input, context) {
  var e_4, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_4 = __values(input), input_4_1 = input_4.next(); !input_4_1.done; input_4_1 = input_4.next()) {
      var entry = input_4_1.value;
      if (entry === null) {
        continue;
      }
      var memberEntries = serializeAws_queryCloudWatchDimensionConfiguration(entry, context);
      Object.entries(memberEntries).forEach(function(_a2) {
        var _b = __read(_a2, 2), key = _b[0], value = _b[1];
        entries["member." + counter + "." + key] = value;
      });
      counter++;
    }
  } catch (e_4_1) {
    e_4 = { error: e_4_1 };
  } finally {
    try {
      if (input_4_1 && !input_4_1.done && (_a = input_4.return))
        _a.call(input_4);
    } finally {
      if (e_4)
        throw e_4.error;
    }
  }
  return entries;
};
var serializeAws_queryConfigurationSet = function(input, context) {
  var entries = {};
  if (input.Name !== void 0 && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  return entries;
};
var serializeAws_queryConfigurationSetAttributeList = function(input, context) {
  var e_5, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_5 = __values(input), input_5_1 = input_5.next(); !input_5_1.done; input_5_1 = input_5.next()) {
      var entry = input_5_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_5_1) {
    e_5 = { error: e_5_1 };
  } finally {
    try {
      if (input_5_1 && !input_5_1.done && (_a = input_5.return))
        _a.call(input_5);
    } finally {
      if (e_5)
        throw e_5.error;
    }
  }
  return entries;
};
var serializeAws_queryContent = function(input, context) {
  var entries = {};
  if (input.Data !== void 0 && input.Data !== null) {
    entries["Data"] = input.Data;
  }
  if (input.Charset !== void 0 && input.Charset !== null) {
    entries["Charset"] = input.Charset;
  }
  return entries;
};
var serializeAws_queryCreateConfigurationSetEventDestinationRequest = function(input, context) {
  var entries = {};
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  if (input.EventDestination !== void 0 && input.EventDestination !== null) {
    var memberEntries = serializeAws_queryEventDestination(input.EventDestination, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "EventDestination." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryCreateConfigurationSetRequest = function(input, context) {
  var entries = {};
  if (input.ConfigurationSet !== void 0 && input.ConfigurationSet !== null) {
    var memberEntries = serializeAws_queryConfigurationSet(input.ConfigurationSet, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "ConfigurationSet." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryCreateConfigurationSetTrackingOptionsRequest = function(input, context) {
  var entries = {};
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  if (input.TrackingOptions !== void 0 && input.TrackingOptions !== null) {
    var memberEntries = serializeAws_queryTrackingOptions(input.TrackingOptions, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "TrackingOptions." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryCreateCustomVerificationEmailTemplateRequest = function(input, context) {
  var entries = {};
  if (input.TemplateName !== void 0 && input.TemplateName !== null) {
    entries["TemplateName"] = input.TemplateName;
  }
  if (input.FromEmailAddress !== void 0 && input.FromEmailAddress !== null) {
    entries["FromEmailAddress"] = input.FromEmailAddress;
  }
  if (input.TemplateSubject !== void 0 && input.TemplateSubject !== null) {
    entries["TemplateSubject"] = input.TemplateSubject;
  }
  if (input.TemplateContent !== void 0 && input.TemplateContent !== null) {
    entries["TemplateContent"] = input.TemplateContent;
  }
  if (input.SuccessRedirectionURL !== void 0 && input.SuccessRedirectionURL !== null) {
    entries["SuccessRedirectionURL"] = input.SuccessRedirectionURL;
  }
  if (input.FailureRedirectionURL !== void 0 && input.FailureRedirectionURL !== null) {
    entries["FailureRedirectionURL"] = input.FailureRedirectionURL;
  }
  return entries;
};
var serializeAws_queryCreateReceiptFilterRequest = function(input, context) {
  var entries = {};
  if (input.Filter !== void 0 && input.Filter !== null) {
    var memberEntries = serializeAws_queryReceiptFilter(input.Filter, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Filter." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryCreateReceiptRuleRequest = function(input, context) {
  var entries = {};
  if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
    entries["RuleSetName"] = input.RuleSetName;
  }
  if (input.After !== void 0 && input.After !== null) {
    entries["After"] = input.After;
  }
  if (input.Rule !== void 0 && input.Rule !== null) {
    var memberEntries = serializeAws_queryReceiptRule(input.Rule, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Rule." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryCreateReceiptRuleSetRequest = function(input, context) {
  var entries = {};
  if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
    entries["RuleSetName"] = input.RuleSetName;
  }
  return entries;
};
var serializeAws_queryCreateTemplateRequest = function(input, context) {
  var entries = {};
  if (input.Template !== void 0 && input.Template !== null) {
    var memberEntries = serializeAws_queryTemplate(input.Template, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Template." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryDeleteConfigurationSetEventDestinationRequest = function(input, context) {
  var entries = {};
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  if (input.EventDestinationName !== void 0 && input.EventDestinationName !== null) {
    entries["EventDestinationName"] = input.EventDestinationName;
  }
  return entries;
};
var serializeAws_queryDeleteConfigurationSetRequest = function(input, context) {
  var entries = {};
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  return entries;
};
var serializeAws_queryDeleteConfigurationSetTrackingOptionsRequest = function(input, context) {
  var entries = {};
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  return entries;
};
var serializeAws_queryDeleteCustomVerificationEmailTemplateRequest = function(input, context) {
  var entries = {};
  if (input.TemplateName !== void 0 && input.TemplateName !== null) {
    entries["TemplateName"] = input.TemplateName;
  }
  return entries;
};
var serializeAws_queryDeleteIdentityPolicyRequest = function(input, context) {
  var entries = {};
  if (input.Identity !== void 0 && input.Identity !== null) {
    entries["Identity"] = input.Identity;
  }
  if (input.PolicyName !== void 0 && input.PolicyName !== null) {
    entries["PolicyName"] = input.PolicyName;
  }
  return entries;
};
var serializeAws_queryDeleteIdentityRequest = function(input, context) {
  var entries = {};
  if (input.Identity !== void 0 && input.Identity !== null) {
    entries["Identity"] = input.Identity;
  }
  return entries;
};
var serializeAws_queryDeleteReceiptFilterRequest = function(input, context) {
  var entries = {};
  if (input.FilterName !== void 0 && input.FilterName !== null) {
    entries["FilterName"] = input.FilterName;
  }
  return entries;
};
var serializeAws_queryDeleteReceiptRuleRequest = function(input, context) {
  var entries = {};
  if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
    entries["RuleSetName"] = input.RuleSetName;
  }
  if (input.RuleName !== void 0 && input.RuleName !== null) {
    entries["RuleName"] = input.RuleName;
  }
  return entries;
};
var serializeAws_queryDeleteReceiptRuleSetRequest = function(input, context) {
  var entries = {};
  if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
    entries["RuleSetName"] = input.RuleSetName;
  }
  return entries;
};
var serializeAws_queryDeleteTemplateRequest = function(input, context) {
  var entries = {};
  if (input.TemplateName !== void 0 && input.TemplateName !== null) {
    entries["TemplateName"] = input.TemplateName;
  }
  return entries;
};
var serializeAws_queryDeleteVerifiedEmailAddressRequest = function(input, context) {
  var entries = {};
  if (input.EmailAddress !== void 0 && input.EmailAddress !== null) {
    entries["EmailAddress"] = input.EmailAddress;
  }
  return entries;
};
var serializeAws_queryDeliveryOptions = function(input, context) {
  var entries = {};
  if (input.TlsPolicy !== void 0 && input.TlsPolicy !== null) {
    entries["TlsPolicy"] = input.TlsPolicy;
  }
  return entries;
};
var serializeAws_queryDescribeActiveReceiptRuleSetRequest = function(input, context) {
  var entries = {};
  return entries;
};
var serializeAws_queryDescribeConfigurationSetRequest = function(input, context) {
  var entries = {};
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  if (input.ConfigurationSetAttributeNames !== void 0 && input.ConfigurationSetAttributeNames !== null) {
    var memberEntries = serializeAws_queryConfigurationSetAttributeList(input.ConfigurationSetAttributeNames, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "ConfigurationSetAttributeNames." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryDescribeReceiptRuleRequest = function(input, context) {
  var entries = {};
  if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
    entries["RuleSetName"] = input.RuleSetName;
  }
  if (input.RuleName !== void 0 && input.RuleName !== null) {
    entries["RuleName"] = input.RuleName;
  }
  return entries;
};
var serializeAws_queryDescribeReceiptRuleSetRequest = function(input, context) {
  var entries = {};
  if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
    entries["RuleSetName"] = input.RuleSetName;
  }
  return entries;
};
var serializeAws_queryDestination = function(input, context) {
  var entries = {};
  if (input.ToAddresses !== void 0 && input.ToAddresses !== null) {
    var memberEntries = serializeAws_queryAddressList(input.ToAddresses, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "ToAddresses." + key;
      entries[loc] = value;
    });
  }
  if (input.CcAddresses !== void 0 && input.CcAddresses !== null) {
    var memberEntries = serializeAws_queryAddressList(input.CcAddresses, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "CcAddresses." + key;
      entries[loc] = value;
    });
  }
  if (input.BccAddresses !== void 0 && input.BccAddresses !== null) {
    var memberEntries = serializeAws_queryAddressList(input.BccAddresses, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "BccAddresses." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryEventDestination = function(input, context) {
  var entries = {};
  if (input.Name !== void 0 && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  if (input.Enabled !== void 0 && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  if (input.MatchingEventTypes !== void 0 && input.MatchingEventTypes !== null) {
    var memberEntries = serializeAws_queryEventTypes(input.MatchingEventTypes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "MatchingEventTypes." + key;
      entries[loc] = value;
    });
  }
  if (input.KinesisFirehoseDestination !== void 0 && input.KinesisFirehoseDestination !== null) {
    var memberEntries = serializeAws_queryKinesisFirehoseDestination(input.KinesisFirehoseDestination, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "KinesisFirehoseDestination." + key;
      entries[loc] = value;
    });
  }
  if (input.CloudWatchDestination !== void 0 && input.CloudWatchDestination !== null) {
    var memberEntries = serializeAws_queryCloudWatchDestination(input.CloudWatchDestination, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "CloudWatchDestination." + key;
      entries[loc] = value;
    });
  }
  if (input.SNSDestination !== void 0 && input.SNSDestination !== null) {
    var memberEntries = serializeAws_querySNSDestination(input.SNSDestination, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "SNSDestination." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryEventTypes = function(input, context) {
  var e_6, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_6 = __values(input), input_6_1 = input_6.next(); !input_6_1.done; input_6_1 = input_6.next()) {
      var entry = input_6_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_6_1) {
    e_6 = { error: e_6_1 };
  } finally {
    try {
      if (input_6_1 && !input_6_1.done && (_a = input_6.return))
        _a.call(input_6);
    } finally {
      if (e_6)
        throw e_6.error;
    }
  }
  return entries;
};
var serializeAws_queryExtensionField = function(input, context) {
  var entries = {};
  if (input.Name !== void 0 && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  if (input.Value !== void 0 && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  return entries;
};
var serializeAws_queryExtensionFieldList = function(input, context) {
  var e_7, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_7 = __values(input), input_7_1 = input_7.next(); !input_7_1.done; input_7_1 = input_7.next()) {
      var entry = input_7_1.value;
      if (entry === null) {
        continue;
      }
      var memberEntries = serializeAws_queryExtensionField(entry, context);
      Object.entries(memberEntries).forEach(function(_a2) {
        var _b = __read(_a2, 2), key = _b[0], value = _b[1];
        entries["member." + counter + "." + key] = value;
      });
      counter++;
    }
  } catch (e_7_1) {
    e_7 = { error: e_7_1 };
  } finally {
    try {
      if (input_7_1 && !input_7_1.done && (_a = input_7.return))
        _a.call(input_7);
    } finally {
      if (e_7)
        throw e_7.error;
    }
  }
  return entries;
};
var serializeAws_queryGetCustomVerificationEmailTemplateRequest = function(input, context) {
  var entries = {};
  if (input.TemplateName !== void 0 && input.TemplateName !== null) {
    entries["TemplateName"] = input.TemplateName;
  }
  return entries;
};
var serializeAws_queryGetIdentityDkimAttributesRequest = function(input, context) {
  var entries = {};
  if (input.Identities !== void 0 && input.Identities !== null) {
    var memberEntries = serializeAws_queryIdentityList(input.Identities, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Identities." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryGetIdentityMailFromDomainAttributesRequest = function(input, context) {
  var entries = {};
  if (input.Identities !== void 0 && input.Identities !== null) {
    var memberEntries = serializeAws_queryIdentityList(input.Identities, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Identities." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryGetIdentityNotificationAttributesRequest = function(input, context) {
  var entries = {};
  if (input.Identities !== void 0 && input.Identities !== null) {
    var memberEntries = serializeAws_queryIdentityList(input.Identities, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Identities." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryGetIdentityPoliciesRequest = function(input, context) {
  var entries = {};
  if (input.Identity !== void 0 && input.Identity !== null) {
    entries["Identity"] = input.Identity;
  }
  if (input.PolicyNames !== void 0 && input.PolicyNames !== null) {
    var memberEntries = serializeAws_queryPolicyNameList(input.PolicyNames, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "PolicyNames." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryGetIdentityVerificationAttributesRequest = function(input, context) {
  var entries = {};
  if (input.Identities !== void 0 && input.Identities !== null) {
    var memberEntries = serializeAws_queryIdentityList(input.Identities, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Identities." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryGetTemplateRequest = function(input, context) {
  var entries = {};
  if (input.TemplateName !== void 0 && input.TemplateName !== null) {
    entries["TemplateName"] = input.TemplateName;
  }
  return entries;
};
var serializeAws_queryIdentityList = function(input, context) {
  var e_8, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_8 = __values(input), input_8_1 = input_8.next(); !input_8_1.done; input_8_1 = input_8.next()) {
      var entry = input_8_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_8_1) {
    e_8 = { error: e_8_1 };
  } finally {
    try {
      if (input_8_1 && !input_8_1.done && (_a = input_8.return))
        _a.call(input_8);
    } finally {
      if (e_8)
        throw e_8.error;
    }
  }
  return entries;
};
var serializeAws_queryKinesisFirehoseDestination = function(input, context) {
  var entries = {};
  if (input.IAMRoleARN !== void 0 && input.IAMRoleARN !== null) {
    entries["IAMRoleARN"] = input.IAMRoleARN;
  }
  if (input.DeliveryStreamARN !== void 0 && input.DeliveryStreamARN !== null) {
    entries["DeliveryStreamARN"] = input.DeliveryStreamARN;
  }
  return entries;
};
var serializeAws_queryLambdaAction = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  if (input.FunctionArn !== void 0 && input.FunctionArn !== null) {
    entries["FunctionArn"] = input.FunctionArn;
  }
  if (input.InvocationType !== void 0 && input.InvocationType !== null) {
    entries["InvocationType"] = input.InvocationType;
  }
  return entries;
};
var serializeAws_queryListConfigurationSetsRequest = function(input, context) {
  var entries = {};
  if (input.NextToken !== void 0 && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxItems !== void 0 && input.MaxItems !== null) {
    entries["MaxItems"] = input.MaxItems;
  }
  return entries;
};
var serializeAws_queryListCustomVerificationEmailTemplatesRequest = function(input, context) {
  var entries = {};
  if (input.NextToken !== void 0 && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== void 0 && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};
var serializeAws_queryListIdentitiesRequest = function(input, context) {
  var entries = {};
  if (input.IdentityType !== void 0 && input.IdentityType !== null) {
    entries["IdentityType"] = input.IdentityType;
  }
  if (input.NextToken !== void 0 && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxItems !== void 0 && input.MaxItems !== null) {
    entries["MaxItems"] = input.MaxItems;
  }
  return entries;
};
var serializeAws_queryListIdentityPoliciesRequest = function(input, context) {
  var entries = {};
  if (input.Identity !== void 0 && input.Identity !== null) {
    entries["Identity"] = input.Identity;
  }
  return entries;
};
var serializeAws_queryListReceiptFiltersRequest = function(input, context) {
  var entries = {};
  return entries;
};
var serializeAws_queryListReceiptRuleSetsRequest = function(input, context) {
  var entries = {};
  if (input.NextToken !== void 0 && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};
var serializeAws_queryListTemplatesRequest = function(input, context) {
  var entries = {};
  if (input.NextToken !== void 0 && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxItems !== void 0 && input.MaxItems !== null) {
    entries["MaxItems"] = input.MaxItems;
  }
  return entries;
};
var serializeAws_queryMessage = function(input, context) {
  var entries = {};
  if (input.Subject !== void 0 && input.Subject !== null) {
    var memberEntries = serializeAws_queryContent(input.Subject, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Subject." + key;
      entries[loc] = value;
    });
  }
  if (input.Body !== void 0 && input.Body !== null) {
    var memberEntries = serializeAws_queryBody(input.Body, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Body." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryMessageDsn = function(input, context) {
  var entries = {};
  if (input.ReportingMta !== void 0 && input.ReportingMta !== null) {
    entries["ReportingMta"] = input.ReportingMta;
  }
  if (input.ArrivalDate !== void 0 && input.ArrivalDate !== null) {
    entries["ArrivalDate"] = input.ArrivalDate.toISOString().split(".")[0] + "Z";
  }
  if (input.ExtensionFields !== void 0 && input.ExtensionFields !== null) {
    var memberEntries = serializeAws_queryExtensionFieldList(input.ExtensionFields, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "ExtensionFields." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryMessageTag = function(input, context) {
  var entries = {};
  if (input.Name !== void 0 && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  if (input.Value !== void 0 && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  return entries;
};
var serializeAws_queryMessageTagList = function(input, context) {
  var e_9, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_9 = __values(input), input_9_1 = input_9.next(); !input_9_1.done; input_9_1 = input_9.next()) {
      var entry = input_9_1.value;
      if (entry === null) {
        continue;
      }
      var memberEntries = serializeAws_queryMessageTag(entry, context);
      Object.entries(memberEntries).forEach(function(_a2) {
        var _b = __read(_a2, 2), key = _b[0], value = _b[1];
        entries["member." + counter + "." + key] = value;
      });
      counter++;
    }
  } catch (e_9_1) {
    e_9 = { error: e_9_1 };
  } finally {
    try {
      if (input_9_1 && !input_9_1.done && (_a = input_9.return))
        _a.call(input_9);
    } finally {
      if (e_9)
        throw e_9.error;
    }
  }
  return entries;
};
var serializeAws_queryPolicyNameList = function(input, context) {
  var e_10, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_10 = __values(input), input_10_1 = input_10.next(); !input_10_1.done; input_10_1 = input_10.next()) {
      var entry = input_10_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_10_1) {
    e_10 = { error: e_10_1 };
  } finally {
    try {
      if (input_10_1 && !input_10_1.done && (_a = input_10.return))
        _a.call(input_10);
    } finally {
      if (e_10)
        throw e_10.error;
    }
  }
  return entries;
};
var serializeAws_queryPutConfigurationSetDeliveryOptionsRequest = function(input, context) {
  var entries = {};
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  if (input.DeliveryOptions !== void 0 && input.DeliveryOptions !== null) {
    var memberEntries = serializeAws_queryDeliveryOptions(input.DeliveryOptions, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "DeliveryOptions." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryPutIdentityPolicyRequest = function(input, context) {
  var entries = {};
  if (input.Identity !== void 0 && input.Identity !== null) {
    entries["Identity"] = input.Identity;
  }
  if (input.PolicyName !== void 0 && input.PolicyName !== null) {
    entries["PolicyName"] = input.PolicyName;
  }
  if (input.Policy !== void 0 && input.Policy !== null) {
    entries["Policy"] = input.Policy;
  }
  return entries;
};
var serializeAws_queryRawMessage = function(input, context) {
  var entries = {};
  if (input.Data !== void 0 && input.Data !== null) {
    entries["Data"] = context.base64Encoder(input.Data);
  }
  return entries;
};
var serializeAws_queryReceiptAction = function(input, context) {
  var entries = {};
  if (input.S3Action !== void 0 && input.S3Action !== null) {
    var memberEntries = serializeAws_queryS3Action(input.S3Action, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "S3Action." + key;
      entries[loc] = value;
    });
  }
  if (input.BounceAction !== void 0 && input.BounceAction !== null) {
    var memberEntries = serializeAws_queryBounceAction(input.BounceAction, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "BounceAction." + key;
      entries[loc] = value;
    });
  }
  if (input.WorkmailAction !== void 0 && input.WorkmailAction !== null) {
    var memberEntries = serializeAws_queryWorkmailAction(input.WorkmailAction, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "WorkmailAction." + key;
      entries[loc] = value;
    });
  }
  if (input.LambdaAction !== void 0 && input.LambdaAction !== null) {
    var memberEntries = serializeAws_queryLambdaAction(input.LambdaAction, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "LambdaAction." + key;
      entries[loc] = value;
    });
  }
  if (input.StopAction !== void 0 && input.StopAction !== null) {
    var memberEntries = serializeAws_queryStopAction(input.StopAction, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "StopAction." + key;
      entries[loc] = value;
    });
  }
  if (input.AddHeaderAction !== void 0 && input.AddHeaderAction !== null) {
    var memberEntries = serializeAws_queryAddHeaderAction(input.AddHeaderAction, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "AddHeaderAction." + key;
      entries[loc] = value;
    });
  }
  if (input.SNSAction !== void 0 && input.SNSAction !== null) {
    var memberEntries = serializeAws_querySNSAction(input.SNSAction, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "SNSAction." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryReceiptActionsList = function(input, context) {
  var e_11, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_11 = __values(input), input_11_1 = input_11.next(); !input_11_1.done; input_11_1 = input_11.next()) {
      var entry = input_11_1.value;
      if (entry === null) {
        continue;
      }
      var memberEntries = serializeAws_queryReceiptAction(entry, context);
      Object.entries(memberEntries).forEach(function(_a2) {
        var _b = __read(_a2, 2), key = _b[0], value = _b[1];
        entries["member." + counter + "." + key] = value;
      });
      counter++;
    }
  } catch (e_11_1) {
    e_11 = { error: e_11_1 };
  } finally {
    try {
      if (input_11_1 && !input_11_1.done && (_a = input_11.return))
        _a.call(input_11);
    } finally {
      if (e_11)
        throw e_11.error;
    }
  }
  return entries;
};
var serializeAws_queryReceiptFilter = function(input, context) {
  var entries = {};
  if (input.Name !== void 0 && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  if (input.IpFilter !== void 0 && input.IpFilter !== null) {
    var memberEntries = serializeAws_queryReceiptIpFilter(input.IpFilter, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "IpFilter." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryReceiptIpFilter = function(input, context) {
  var entries = {};
  if (input.Policy !== void 0 && input.Policy !== null) {
    entries["Policy"] = input.Policy;
  }
  if (input.Cidr !== void 0 && input.Cidr !== null) {
    entries["Cidr"] = input.Cidr;
  }
  return entries;
};
var serializeAws_queryReceiptRule = function(input, context) {
  var entries = {};
  if (input.Name !== void 0 && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  if (input.Enabled !== void 0 && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  if (input.TlsPolicy !== void 0 && input.TlsPolicy !== null) {
    entries["TlsPolicy"] = input.TlsPolicy;
  }
  if (input.Recipients !== void 0 && input.Recipients !== null) {
    var memberEntries = serializeAws_queryRecipientsList(input.Recipients, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Recipients." + key;
      entries[loc] = value;
    });
  }
  if (input.Actions !== void 0 && input.Actions !== null) {
    var memberEntries = serializeAws_queryReceiptActionsList(input.Actions, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Actions." + key;
      entries[loc] = value;
    });
  }
  if (input.ScanEnabled !== void 0 && input.ScanEnabled !== null) {
    entries["ScanEnabled"] = input.ScanEnabled;
  }
  return entries;
};
var serializeAws_queryReceiptRuleNamesList = function(input, context) {
  var e_12, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_12 = __values(input), input_12_1 = input_12.next(); !input_12_1.done; input_12_1 = input_12.next()) {
      var entry = input_12_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_12_1) {
    e_12 = { error: e_12_1 };
  } finally {
    try {
      if (input_12_1 && !input_12_1.done && (_a = input_12.return))
        _a.call(input_12);
    } finally {
      if (e_12)
        throw e_12.error;
    }
  }
  return entries;
};
var serializeAws_queryRecipientDsnFields = function(input, context) {
  var entries = {};
  if (input.FinalRecipient !== void 0 && input.FinalRecipient !== null) {
    entries["FinalRecipient"] = input.FinalRecipient;
  }
  if (input.Action !== void 0 && input.Action !== null) {
    entries["Action"] = input.Action;
  }
  if (input.RemoteMta !== void 0 && input.RemoteMta !== null) {
    entries["RemoteMta"] = input.RemoteMta;
  }
  if (input.Status !== void 0 && input.Status !== null) {
    entries["Status"] = input.Status;
  }
  if (input.DiagnosticCode !== void 0 && input.DiagnosticCode !== null) {
    entries["DiagnosticCode"] = input.DiagnosticCode;
  }
  if (input.LastAttemptDate !== void 0 && input.LastAttemptDate !== null) {
    entries["LastAttemptDate"] = input.LastAttemptDate.toISOString().split(".")[0] + "Z";
  }
  if (input.ExtensionFields !== void 0 && input.ExtensionFields !== null) {
    var memberEntries = serializeAws_queryExtensionFieldList(input.ExtensionFields, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "ExtensionFields." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryRecipientsList = function(input, context) {
  var e_13, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_13 = __values(input), input_13_1 = input_13.next(); !input_13_1.done; input_13_1 = input_13.next()) {
      var entry = input_13_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_13_1) {
    e_13 = { error: e_13_1 };
  } finally {
    try {
      if (input_13_1 && !input_13_1.done && (_a = input_13.return))
        _a.call(input_13);
    } finally {
      if (e_13)
        throw e_13.error;
    }
  }
  return entries;
};
var serializeAws_queryReorderReceiptRuleSetRequest = function(input, context) {
  var entries = {};
  if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
    entries["RuleSetName"] = input.RuleSetName;
  }
  if (input.RuleNames !== void 0 && input.RuleNames !== null) {
    var memberEntries = serializeAws_queryReceiptRuleNamesList(input.RuleNames, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "RuleNames." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryS3Action = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  if (input.BucketName !== void 0 && input.BucketName !== null) {
    entries["BucketName"] = input.BucketName;
  }
  if (input.ObjectKeyPrefix !== void 0 && input.ObjectKeyPrefix !== null) {
    entries["ObjectKeyPrefix"] = input.ObjectKeyPrefix;
  }
  if (input.KmsKeyArn !== void 0 && input.KmsKeyArn !== null) {
    entries["KmsKeyArn"] = input.KmsKeyArn;
  }
  return entries;
};
var serializeAws_querySendBounceRequest = function(input, context) {
  var entries = {};
  if (input.OriginalMessageId !== void 0 && input.OriginalMessageId !== null) {
    entries["OriginalMessageId"] = input.OriginalMessageId;
  }
  if (input.BounceSender !== void 0 && input.BounceSender !== null) {
    entries["BounceSender"] = input.BounceSender;
  }
  if (input.Explanation !== void 0 && input.Explanation !== null) {
    entries["Explanation"] = input.Explanation;
  }
  if (input.MessageDsn !== void 0 && input.MessageDsn !== null) {
    var memberEntries = serializeAws_queryMessageDsn(input.MessageDsn, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "MessageDsn." + key;
      entries[loc] = value;
    });
  }
  if (input.BouncedRecipientInfoList !== void 0 && input.BouncedRecipientInfoList !== null) {
    var memberEntries = serializeAws_queryBouncedRecipientInfoList(input.BouncedRecipientInfoList, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "BouncedRecipientInfoList." + key;
      entries[loc] = value;
    });
  }
  if (input.BounceSenderArn !== void 0 && input.BounceSenderArn !== null) {
    entries["BounceSenderArn"] = input.BounceSenderArn;
  }
  return entries;
};
var serializeAws_querySendBulkTemplatedEmailRequest = function(input, context) {
  var entries = {};
  if (input.Source !== void 0 && input.Source !== null) {
    entries["Source"] = input.Source;
  }
  if (input.SourceArn !== void 0 && input.SourceArn !== null) {
    entries["SourceArn"] = input.SourceArn;
  }
  if (input.ReplyToAddresses !== void 0 && input.ReplyToAddresses !== null) {
    var memberEntries = serializeAws_queryAddressList(input.ReplyToAddresses, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "ReplyToAddresses." + key;
      entries[loc] = value;
    });
  }
  if (input.ReturnPath !== void 0 && input.ReturnPath !== null) {
    entries["ReturnPath"] = input.ReturnPath;
  }
  if (input.ReturnPathArn !== void 0 && input.ReturnPathArn !== null) {
    entries["ReturnPathArn"] = input.ReturnPathArn;
  }
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  if (input.DefaultTags !== void 0 && input.DefaultTags !== null) {
    var memberEntries = serializeAws_queryMessageTagList(input.DefaultTags, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "DefaultTags." + key;
      entries[loc] = value;
    });
  }
  if (input.Template !== void 0 && input.Template !== null) {
    entries["Template"] = input.Template;
  }
  if (input.TemplateArn !== void 0 && input.TemplateArn !== null) {
    entries["TemplateArn"] = input.TemplateArn;
  }
  if (input.DefaultTemplateData !== void 0 && input.DefaultTemplateData !== null) {
    entries["DefaultTemplateData"] = input.DefaultTemplateData;
  }
  if (input.Destinations !== void 0 && input.Destinations !== null) {
    var memberEntries = serializeAws_queryBulkEmailDestinationList(input.Destinations, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Destinations." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_querySendCustomVerificationEmailRequest = function(input, context) {
  var entries = {};
  if (input.EmailAddress !== void 0 && input.EmailAddress !== null) {
    entries["EmailAddress"] = input.EmailAddress;
  }
  if (input.TemplateName !== void 0 && input.TemplateName !== null) {
    entries["TemplateName"] = input.TemplateName;
  }
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  return entries;
};
var serializeAws_querySendEmailRequest = function(input, context) {
  var entries = {};
  if (input.Source !== void 0 && input.Source !== null) {
    entries["Source"] = input.Source;
  }
  if (input.Destination !== void 0 && input.Destination !== null) {
    var memberEntries = serializeAws_queryDestination(input.Destination, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Destination." + key;
      entries[loc] = value;
    });
  }
  if (input.Message !== void 0 && input.Message !== null) {
    var memberEntries = serializeAws_queryMessage(input.Message, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Message." + key;
      entries[loc] = value;
    });
  }
  if (input.ReplyToAddresses !== void 0 && input.ReplyToAddresses !== null) {
    var memberEntries = serializeAws_queryAddressList(input.ReplyToAddresses, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "ReplyToAddresses." + key;
      entries[loc] = value;
    });
  }
  if (input.ReturnPath !== void 0 && input.ReturnPath !== null) {
    entries["ReturnPath"] = input.ReturnPath;
  }
  if (input.SourceArn !== void 0 && input.SourceArn !== null) {
    entries["SourceArn"] = input.SourceArn;
  }
  if (input.ReturnPathArn !== void 0 && input.ReturnPathArn !== null) {
    entries["ReturnPathArn"] = input.ReturnPathArn;
  }
  if (input.Tags !== void 0 && input.Tags !== null) {
    var memberEntries = serializeAws_queryMessageTagList(input.Tags, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Tags." + key;
      entries[loc] = value;
    });
  }
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  return entries;
};
var serializeAws_querySendRawEmailRequest = function(input, context) {
  var entries = {};
  if (input.Source !== void 0 && input.Source !== null) {
    entries["Source"] = input.Source;
  }
  if (input.Destinations !== void 0 && input.Destinations !== null) {
    var memberEntries = serializeAws_queryAddressList(input.Destinations, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Destinations." + key;
      entries[loc] = value;
    });
  }
  if (input.RawMessage !== void 0 && input.RawMessage !== null) {
    var memberEntries = serializeAws_queryRawMessage(input.RawMessage, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "RawMessage." + key;
      entries[loc] = value;
    });
  }
  if (input.FromArn !== void 0 && input.FromArn !== null) {
    entries["FromArn"] = input.FromArn;
  }
  if (input.SourceArn !== void 0 && input.SourceArn !== null) {
    entries["SourceArn"] = input.SourceArn;
  }
  if (input.ReturnPathArn !== void 0 && input.ReturnPathArn !== null) {
    entries["ReturnPathArn"] = input.ReturnPathArn;
  }
  if (input.Tags !== void 0 && input.Tags !== null) {
    var memberEntries = serializeAws_queryMessageTagList(input.Tags, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Tags." + key;
      entries[loc] = value;
    });
  }
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  return entries;
};
var serializeAws_querySendTemplatedEmailRequest = function(input, context) {
  var entries = {};
  if (input.Source !== void 0 && input.Source !== null) {
    entries["Source"] = input.Source;
  }
  if (input.Destination !== void 0 && input.Destination !== null) {
    var memberEntries = serializeAws_queryDestination(input.Destination, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Destination." + key;
      entries[loc] = value;
    });
  }
  if (input.ReplyToAddresses !== void 0 && input.ReplyToAddresses !== null) {
    var memberEntries = serializeAws_queryAddressList(input.ReplyToAddresses, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "ReplyToAddresses." + key;
      entries[loc] = value;
    });
  }
  if (input.ReturnPath !== void 0 && input.ReturnPath !== null) {
    entries["ReturnPath"] = input.ReturnPath;
  }
  if (input.SourceArn !== void 0 && input.SourceArn !== null) {
    entries["SourceArn"] = input.SourceArn;
  }
  if (input.ReturnPathArn !== void 0 && input.ReturnPathArn !== null) {
    entries["ReturnPathArn"] = input.ReturnPathArn;
  }
  if (input.Tags !== void 0 && input.Tags !== null) {
    var memberEntries = serializeAws_queryMessageTagList(input.Tags, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Tags." + key;
      entries[loc] = value;
    });
  }
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  if (input.Template !== void 0 && input.Template !== null) {
    entries["Template"] = input.Template;
  }
  if (input.TemplateArn !== void 0 && input.TemplateArn !== null) {
    entries["TemplateArn"] = input.TemplateArn;
  }
  if (input.TemplateData !== void 0 && input.TemplateData !== null) {
    entries["TemplateData"] = input.TemplateData;
  }
  return entries;
};
var serializeAws_querySetActiveReceiptRuleSetRequest = function(input, context) {
  var entries = {};
  if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
    entries["RuleSetName"] = input.RuleSetName;
  }
  return entries;
};
var serializeAws_querySetIdentityDkimEnabledRequest = function(input, context) {
  var entries = {};
  if (input.Identity !== void 0 && input.Identity !== null) {
    entries["Identity"] = input.Identity;
  }
  if (input.DkimEnabled !== void 0 && input.DkimEnabled !== null) {
    entries["DkimEnabled"] = input.DkimEnabled;
  }
  return entries;
};
var serializeAws_querySetIdentityFeedbackForwardingEnabledRequest = function(input, context) {
  var entries = {};
  if (input.Identity !== void 0 && input.Identity !== null) {
    entries["Identity"] = input.Identity;
  }
  if (input.ForwardingEnabled !== void 0 && input.ForwardingEnabled !== null) {
    entries["ForwardingEnabled"] = input.ForwardingEnabled;
  }
  return entries;
};
var serializeAws_querySetIdentityHeadersInNotificationsEnabledRequest = function(input, context) {
  var entries = {};
  if (input.Identity !== void 0 && input.Identity !== null) {
    entries["Identity"] = input.Identity;
  }
  if (input.NotificationType !== void 0 && input.NotificationType !== null) {
    entries["NotificationType"] = input.NotificationType;
  }
  if (input.Enabled !== void 0 && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};
var serializeAws_querySetIdentityMailFromDomainRequest = function(input, context) {
  var entries = {};
  if (input.Identity !== void 0 && input.Identity !== null) {
    entries["Identity"] = input.Identity;
  }
  if (input.MailFromDomain !== void 0 && input.MailFromDomain !== null) {
    entries["MailFromDomain"] = input.MailFromDomain;
  }
  if (input.BehaviorOnMXFailure !== void 0 && input.BehaviorOnMXFailure !== null) {
    entries["BehaviorOnMXFailure"] = input.BehaviorOnMXFailure;
  }
  return entries;
};
var serializeAws_querySetIdentityNotificationTopicRequest = function(input, context) {
  var entries = {};
  if (input.Identity !== void 0 && input.Identity !== null) {
    entries["Identity"] = input.Identity;
  }
  if (input.NotificationType !== void 0 && input.NotificationType !== null) {
    entries["NotificationType"] = input.NotificationType;
  }
  if (input.SnsTopic !== void 0 && input.SnsTopic !== null) {
    entries["SnsTopic"] = input.SnsTopic;
  }
  return entries;
};
var serializeAws_querySetReceiptRulePositionRequest = function(input, context) {
  var entries = {};
  if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
    entries["RuleSetName"] = input.RuleSetName;
  }
  if (input.RuleName !== void 0 && input.RuleName !== null) {
    entries["RuleName"] = input.RuleName;
  }
  if (input.After !== void 0 && input.After !== null) {
    entries["After"] = input.After;
  }
  return entries;
};
var serializeAws_querySNSAction = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  if (input.Encoding !== void 0 && input.Encoding !== null) {
    entries["Encoding"] = input.Encoding;
  }
  return entries;
};
var serializeAws_querySNSDestination = function(input, context) {
  var entries = {};
  if (input.TopicARN !== void 0 && input.TopicARN !== null) {
    entries["TopicARN"] = input.TopicARN;
  }
  return entries;
};
var serializeAws_queryStopAction = function(input, context) {
  var entries = {};
  if (input.Scope !== void 0 && input.Scope !== null) {
    entries["Scope"] = input.Scope;
  }
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  return entries;
};
var serializeAws_queryTemplate = function(input, context) {
  var entries = {};
  if (input.TemplateName !== void 0 && input.TemplateName !== null) {
    entries["TemplateName"] = input.TemplateName;
  }
  if (input.SubjectPart !== void 0 && input.SubjectPart !== null) {
    entries["SubjectPart"] = input.SubjectPart;
  }
  if (input.TextPart !== void 0 && input.TextPart !== null) {
    entries["TextPart"] = input.TextPart;
  }
  if (input.HtmlPart !== void 0 && input.HtmlPart !== null) {
    entries["HtmlPart"] = input.HtmlPart;
  }
  return entries;
};
var serializeAws_queryTestRenderTemplateRequest = function(input, context) {
  var entries = {};
  if (input.TemplateName !== void 0 && input.TemplateName !== null) {
    entries["TemplateName"] = input.TemplateName;
  }
  if (input.TemplateData !== void 0 && input.TemplateData !== null) {
    entries["TemplateData"] = input.TemplateData;
  }
  return entries;
};
var serializeAws_queryTrackingOptions = function(input, context) {
  var entries = {};
  if (input.CustomRedirectDomain !== void 0 && input.CustomRedirectDomain !== null) {
    entries["CustomRedirectDomain"] = input.CustomRedirectDomain;
  }
  return entries;
};
var serializeAws_queryUpdateAccountSendingEnabledRequest = function(input, context) {
  var entries = {};
  if (input.Enabled !== void 0 && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};
var serializeAws_queryUpdateConfigurationSetEventDestinationRequest = function(input, context) {
  var entries = {};
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  if (input.EventDestination !== void 0 && input.EventDestination !== null) {
    var memberEntries = serializeAws_queryEventDestination(input.EventDestination, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "EventDestination." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryUpdateConfigurationSetReputationMetricsEnabledRequest = function(input, context) {
  var entries = {};
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  if (input.Enabled !== void 0 && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};
var serializeAws_queryUpdateConfigurationSetSendingEnabledRequest = function(input, context) {
  var entries = {};
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  if (input.Enabled !== void 0 && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};
var serializeAws_queryUpdateConfigurationSetTrackingOptionsRequest = function(input, context) {
  var entries = {};
  if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
    entries["ConfigurationSetName"] = input.ConfigurationSetName;
  }
  if (input.TrackingOptions !== void 0 && input.TrackingOptions !== null) {
    var memberEntries = serializeAws_queryTrackingOptions(input.TrackingOptions, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "TrackingOptions." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryUpdateCustomVerificationEmailTemplateRequest = function(input, context) {
  var entries = {};
  if (input.TemplateName !== void 0 && input.TemplateName !== null) {
    entries["TemplateName"] = input.TemplateName;
  }
  if (input.FromEmailAddress !== void 0 && input.FromEmailAddress !== null) {
    entries["FromEmailAddress"] = input.FromEmailAddress;
  }
  if (input.TemplateSubject !== void 0 && input.TemplateSubject !== null) {
    entries["TemplateSubject"] = input.TemplateSubject;
  }
  if (input.TemplateContent !== void 0 && input.TemplateContent !== null) {
    entries["TemplateContent"] = input.TemplateContent;
  }
  if (input.SuccessRedirectionURL !== void 0 && input.SuccessRedirectionURL !== null) {
    entries["SuccessRedirectionURL"] = input.SuccessRedirectionURL;
  }
  if (input.FailureRedirectionURL !== void 0 && input.FailureRedirectionURL !== null) {
    entries["FailureRedirectionURL"] = input.FailureRedirectionURL;
  }
  return entries;
};
var serializeAws_queryUpdateReceiptRuleRequest = function(input, context) {
  var entries = {};
  if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
    entries["RuleSetName"] = input.RuleSetName;
  }
  if (input.Rule !== void 0 && input.Rule !== null) {
    var memberEntries = serializeAws_queryReceiptRule(input.Rule, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Rule." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryUpdateTemplateRequest = function(input, context) {
  var entries = {};
  if (input.Template !== void 0 && input.Template !== null) {
    var memberEntries = serializeAws_queryTemplate(input.Template, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Template." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryVerifyDomainDkimRequest = function(input, context) {
  var entries = {};
  if (input.Domain !== void 0 && input.Domain !== null) {
    entries["Domain"] = input.Domain;
  }
  return entries;
};
var serializeAws_queryVerifyDomainIdentityRequest = function(input, context) {
  var entries = {};
  if (input.Domain !== void 0 && input.Domain !== null) {
    entries["Domain"] = input.Domain;
  }
  return entries;
};
var serializeAws_queryVerifyEmailAddressRequest = function(input, context) {
  var entries = {};
  if (input.EmailAddress !== void 0 && input.EmailAddress !== null) {
    entries["EmailAddress"] = input.EmailAddress;
  }
  return entries;
};
var serializeAws_queryVerifyEmailIdentityRequest = function(input, context) {
  var entries = {};
  if (input.EmailAddress !== void 0 && input.EmailAddress !== null) {
    entries["EmailAddress"] = input.EmailAddress;
  }
  return entries;
};
var serializeAws_queryWorkmailAction = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  if (input.OrganizationArn !== void 0 && input.OrganizationArn !== null) {
    entries["OrganizationArn"] = input.OrganizationArn;
  }
  return entries;
};
var deserializeAws_queryAccountSendingPausedException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryAddHeaderAction = function(output, context) {
  var contents = {
    HeaderName: void 0,
    HeaderValue: void 0
  };
  if (output["HeaderName"] !== void 0) {
    contents.HeaderName = expectString(output["HeaderName"]);
  }
  if (output["HeaderValue"] !== void 0) {
    contents.HeaderValue = expectString(output["HeaderValue"]);
  }
  return contents;
};
var deserializeAws_queryAddressList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_queryAlreadyExistsException = function(output, context) {
  var contents = {
    Name: void 0,
    message: void 0
  };
  if (output["Name"] !== void 0) {
    contents.Name = expectString(output["Name"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryBounceAction = function(output, context) {
  var contents = {
    TopicArn: void 0,
    SmtpReplyCode: void 0,
    StatusCode: void 0,
    Message: void 0,
    Sender: void 0
  };
  if (output["TopicArn"] !== void 0) {
    contents.TopicArn = expectString(output["TopicArn"]);
  }
  if (output["SmtpReplyCode"] !== void 0) {
    contents.SmtpReplyCode = expectString(output["SmtpReplyCode"]);
  }
  if (output["StatusCode"] !== void 0) {
    contents.StatusCode = expectString(output["StatusCode"]);
  }
  if (output["Message"] !== void 0) {
    contents.Message = expectString(output["Message"]);
  }
  if (output["Sender"] !== void 0) {
    contents.Sender = expectString(output["Sender"]);
  }
  return contents;
};
var deserializeAws_queryBulkEmailDestinationStatus = function(output, context) {
  var contents = {
    Status: void 0,
    Error: void 0,
    MessageId: void 0
  };
  if (output["Status"] !== void 0) {
    contents.Status = expectString(output["Status"]);
  }
  if (output["Error"] !== void 0) {
    contents.Error = expectString(output["Error"]);
  }
  if (output["MessageId"] !== void 0) {
    contents.MessageId = expectString(output["MessageId"]);
  }
  return contents;
};
var deserializeAws_queryBulkEmailDestinationStatusList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryBulkEmailDestinationStatus(entry, context);
  });
};
var deserializeAws_queryCannotDeleteException = function(output, context) {
  var contents = {
    Name: void 0,
    message: void 0
  };
  if (output["Name"] !== void 0) {
    contents.Name = expectString(output["Name"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryCloneReceiptRuleSetResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryCloudWatchDestination = function(output, context) {
  var contents = {
    DimensionConfigurations: void 0
  };
  if (output.DimensionConfigurations === "") {
    contents.DimensionConfigurations = [];
  }
  if (output["DimensionConfigurations"] !== void 0 && output["DimensionConfigurations"]["member"] !== void 0) {
    contents.DimensionConfigurations = deserializeAws_queryCloudWatchDimensionConfigurations(getArrayIfSingleItem(output["DimensionConfigurations"]["member"]), context);
  }
  return contents;
};
var deserializeAws_queryCloudWatchDimensionConfiguration = function(output, context) {
  var contents = {
    DimensionName: void 0,
    DimensionValueSource: void 0,
    DefaultDimensionValue: void 0
  };
  if (output["DimensionName"] !== void 0) {
    contents.DimensionName = expectString(output["DimensionName"]);
  }
  if (output["DimensionValueSource"] !== void 0) {
    contents.DimensionValueSource = expectString(output["DimensionValueSource"]);
  }
  if (output["DefaultDimensionValue"] !== void 0) {
    contents.DefaultDimensionValue = expectString(output["DefaultDimensionValue"]);
  }
  return contents;
};
var deserializeAws_queryCloudWatchDimensionConfigurations = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryCloudWatchDimensionConfiguration(entry, context);
  });
};
var deserializeAws_queryConfigurationSet = function(output, context) {
  var contents = {
    Name: void 0
  };
  if (output["Name"] !== void 0) {
    contents.Name = expectString(output["Name"]);
  }
  return contents;
};
var deserializeAws_queryConfigurationSetAlreadyExistsException = function(output, context) {
  var contents = {
    ConfigurationSetName: void 0,
    message: void 0
  };
  if (output["ConfigurationSetName"] !== void 0) {
    contents.ConfigurationSetName = expectString(output["ConfigurationSetName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryConfigurationSetDoesNotExistException = function(output, context) {
  var contents = {
    ConfigurationSetName: void 0,
    message: void 0
  };
  if (output["ConfigurationSetName"] !== void 0) {
    contents.ConfigurationSetName = expectString(output["ConfigurationSetName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryConfigurationSets = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryConfigurationSet(entry, context);
  });
};
var deserializeAws_queryConfigurationSetSendingPausedException = function(output, context) {
  var contents = {
    ConfigurationSetName: void 0,
    message: void 0
  };
  if (output["ConfigurationSetName"] !== void 0) {
    contents.ConfigurationSetName = expectString(output["ConfigurationSetName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryCreateConfigurationSetEventDestinationResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryCreateConfigurationSetResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryCreateConfigurationSetTrackingOptionsResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryCreateReceiptFilterResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryCreateReceiptRuleResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryCreateReceiptRuleSetResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryCreateTemplateResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryCustomVerificationEmailInvalidContentException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryCustomVerificationEmailTemplate = function(output, context) {
  var contents = {
    TemplateName: void 0,
    FromEmailAddress: void 0,
    TemplateSubject: void 0,
    SuccessRedirectionURL: void 0,
    FailureRedirectionURL: void 0
  };
  if (output["TemplateName"] !== void 0) {
    contents.TemplateName = expectString(output["TemplateName"]);
  }
  if (output["FromEmailAddress"] !== void 0) {
    contents.FromEmailAddress = expectString(output["FromEmailAddress"]);
  }
  if (output["TemplateSubject"] !== void 0) {
    contents.TemplateSubject = expectString(output["TemplateSubject"]);
  }
  if (output["SuccessRedirectionURL"] !== void 0) {
    contents.SuccessRedirectionURL = expectString(output["SuccessRedirectionURL"]);
  }
  if (output["FailureRedirectionURL"] !== void 0) {
    contents.FailureRedirectionURL = expectString(output["FailureRedirectionURL"]);
  }
  return contents;
};
var deserializeAws_queryCustomVerificationEmailTemplateAlreadyExistsException = function(output, context) {
  var contents = {
    CustomVerificationEmailTemplateName: void 0,
    message: void 0
  };
  if (output["CustomVerificationEmailTemplateName"] !== void 0) {
    contents.CustomVerificationEmailTemplateName = expectString(output["CustomVerificationEmailTemplateName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistException = function(output, context) {
  var contents = {
    CustomVerificationEmailTemplateName: void 0,
    message: void 0
  };
  if (output["CustomVerificationEmailTemplateName"] !== void 0) {
    contents.CustomVerificationEmailTemplateName = expectString(output["CustomVerificationEmailTemplateName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryCustomVerificationEmailTemplates = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryCustomVerificationEmailTemplate(entry, context);
  });
};
var deserializeAws_queryDeleteConfigurationSetEventDestinationResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryDeleteConfigurationSetResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryDeleteConfigurationSetTrackingOptionsResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryDeleteIdentityPolicyResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryDeleteIdentityResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryDeleteReceiptFilterResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryDeleteReceiptRuleResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryDeleteReceiptRuleSetResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryDeleteTemplateResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryDeliveryOptions = function(output, context) {
  var contents = {
    TlsPolicy: void 0
  };
  if (output["TlsPolicy"] !== void 0) {
    contents.TlsPolicy = expectString(output["TlsPolicy"]);
  }
  return contents;
};
var deserializeAws_queryDescribeActiveReceiptRuleSetResponse = function(output, context) {
  var contents = {
    Metadata: void 0,
    Rules: void 0
  };
  if (output["Metadata"] !== void 0) {
    contents.Metadata = deserializeAws_queryReceiptRuleSetMetadata(output["Metadata"], context);
  }
  if (output.Rules === "") {
    contents.Rules = [];
  }
  if (output["Rules"] !== void 0 && output["Rules"]["member"] !== void 0) {
    contents.Rules = deserializeAws_queryReceiptRulesList(getArrayIfSingleItem(output["Rules"]["member"]), context);
  }
  return contents;
};
var deserializeAws_queryDescribeConfigurationSetResponse = function(output, context) {
  var contents = {
    ConfigurationSet: void 0,
    EventDestinations: void 0,
    TrackingOptions: void 0,
    DeliveryOptions: void 0,
    ReputationOptions: void 0
  };
  if (output["ConfigurationSet"] !== void 0) {
    contents.ConfigurationSet = deserializeAws_queryConfigurationSet(output["ConfigurationSet"], context);
  }
  if (output.EventDestinations === "") {
    contents.EventDestinations = [];
  }
  if (output["EventDestinations"] !== void 0 && output["EventDestinations"]["member"] !== void 0) {
    contents.EventDestinations = deserializeAws_queryEventDestinations(getArrayIfSingleItem(output["EventDestinations"]["member"]), context);
  }
  if (output["TrackingOptions"] !== void 0) {
    contents.TrackingOptions = deserializeAws_queryTrackingOptions(output["TrackingOptions"], context);
  }
  if (output["DeliveryOptions"] !== void 0) {
    contents.DeliveryOptions = deserializeAws_queryDeliveryOptions(output["DeliveryOptions"], context);
  }
  if (output["ReputationOptions"] !== void 0) {
    contents.ReputationOptions = deserializeAws_queryReputationOptions(output["ReputationOptions"], context);
  }
  return contents;
};
var deserializeAws_queryDescribeReceiptRuleResponse = function(output, context) {
  var contents = {
    Rule: void 0
  };
  if (output["Rule"] !== void 0) {
    contents.Rule = deserializeAws_queryReceiptRule(output["Rule"], context);
  }
  return contents;
};
var deserializeAws_queryDescribeReceiptRuleSetResponse = function(output, context) {
  var contents = {
    Metadata: void 0,
    Rules: void 0
  };
  if (output["Metadata"] !== void 0) {
    contents.Metadata = deserializeAws_queryReceiptRuleSetMetadata(output["Metadata"], context);
  }
  if (output.Rules === "") {
    contents.Rules = [];
  }
  if (output["Rules"] !== void 0 && output["Rules"]["member"] !== void 0) {
    contents.Rules = deserializeAws_queryReceiptRulesList(getArrayIfSingleItem(output["Rules"]["member"]), context);
  }
  return contents;
};
var deserializeAws_queryDkimAttributes = function(output, context) {
  return output.reduce(function(acc, pair) {
    var _a;
    if (pair["value"] === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_a = {}, _a[pair["key"]] = deserializeAws_queryIdentityDkimAttributes(pair["value"], context), _a));
  }, {});
};
var deserializeAws_queryEventDestination = function(output, context) {
  var contents = {
    Name: void 0,
    Enabled: void 0,
    MatchingEventTypes: void 0,
    KinesisFirehoseDestination: void 0,
    CloudWatchDestination: void 0,
    SNSDestination: void 0
  };
  if (output["Name"] !== void 0) {
    contents.Name = expectString(output["Name"]);
  }
  if (output["Enabled"] !== void 0) {
    contents.Enabled = parseBoolean(output["Enabled"]);
  }
  if (output.MatchingEventTypes === "") {
    contents.MatchingEventTypes = [];
  }
  if (output["MatchingEventTypes"] !== void 0 && output["MatchingEventTypes"]["member"] !== void 0) {
    contents.MatchingEventTypes = deserializeAws_queryEventTypes(getArrayIfSingleItem(output["MatchingEventTypes"]["member"]), context);
  }
  if (output["KinesisFirehoseDestination"] !== void 0) {
    contents.KinesisFirehoseDestination = deserializeAws_queryKinesisFirehoseDestination(output["KinesisFirehoseDestination"], context);
  }
  if (output["CloudWatchDestination"] !== void 0) {
    contents.CloudWatchDestination = deserializeAws_queryCloudWatchDestination(output["CloudWatchDestination"], context);
  }
  if (output["SNSDestination"] !== void 0) {
    contents.SNSDestination = deserializeAws_querySNSDestination(output["SNSDestination"], context);
  }
  return contents;
};
var deserializeAws_queryEventDestinationAlreadyExistsException = function(output, context) {
  var contents = {
    ConfigurationSetName: void 0,
    EventDestinationName: void 0,
    message: void 0
  };
  if (output["ConfigurationSetName"] !== void 0) {
    contents.ConfigurationSetName = expectString(output["ConfigurationSetName"]);
  }
  if (output["EventDestinationName"] !== void 0) {
    contents.EventDestinationName = expectString(output["EventDestinationName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryEventDestinationDoesNotExistException = function(output, context) {
  var contents = {
    ConfigurationSetName: void 0,
    EventDestinationName: void 0,
    message: void 0
  };
  if (output["ConfigurationSetName"] !== void 0) {
    contents.ConfigurationSetName = expectString(output["ConfigurationSetName"]);
  }
  if (output["EventDestinationName"] !== void 0) {
    contents.EventDestinationName = expectString(output["EventDestinationName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryEventDestinations = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryEventDestination(entry, context);
  });
};
var deserializeAws_queryEventTypes = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_queryFromEmailAddressNotVerifiedException = function(output, context) {
  var contents = {
    FromEmailAddress: void 0,
    message: void 0
  };
  if (output["FromEmailAddress"] !== void 0) {
    contents.FromEmailAddress = expectString(output["FromEmailAddress"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryGetAccountSendingEnabledResponse = function(output, context) {
  var contents = {
    Enabled: void 0
  };
  if (output["Enabled"] !== void 0) {
    contents.Enabled = parseBoolean(output["Enabled"]);
  }
  return contents;
};
var deserializeAws_queryGetCustomVerificationEmailTemplateResponse = function(output, context) {
  var contents = {
    TemplateName: void 0,
    FromEmailAddress: void 0,
    TemplateSubject: void 0,
    TemplateContent: void 0,
    SuccessRedirectionURL: void 0,
    FailureRedirectionURL: void 0
  };
  if (output["TemplateName"] !== void 0) {
    contents.TemplateName = expectString(output["TemplateName"]);
  }
  if (output["FromEmailAddress"] !== void 0) {
    contents.FromEmailAddress = expectString(output["FromEmailAddress"]);
  }
  if (output["TemplateSubject"] !== void 0) {
    contents.TemplateSubject = expectString(output["TemplateSubject"]);
  }
  if (output["TemplateContent"] !== void 0) {
    contents.TemplateContent = expectString(output["TemplateContent"]);
  }
  if (output["SuccessRedirectionURL"] !== void 0) {
    contents.SuccessRedirectionURL = expectString(output["SuccessRedirectionURL"]);
  }
  if (output["FailureRedirectionURL"] !== void 0) {
    contents.FailureRedirectionURL = expectString(output["FailureRedirectionURL"]);
  }
  return contents;
};
var deserializeAws_queryGetIdentityDkimAttributesResponse = function(output, context) {
  var contents = {
    DkimAttributes: void 0
  };
  if (output.DkimAttributes === "") {
    contents.DkimAttributes = {};
  }
  if (output["DkimAttributes"] !== void 0 && output["DkimAttributes"]["entry"] !== void 0) {
    contents.DkimAttributes = deserializeAws_queryDkimAttributes(getArrayIfSingleItem(output["DkimAttributes"]["entry"]), context);
  }
  return contents;
};
var deserializeAws_queryGetIdentityMailFromDomainAttributesResponse = function(output, context) {
  var contents = {
    MailFromDomainAttributes: void 0
  };
  if (output.MailFromDomainAttributes === "") {
    contents.MailFromDomainAttributes = {};
  }
  if (output["MailFromDomainAttributes"] !== void 0 && output["MailFromDomainAttributes"]["entry"] !== void 0) {
    contents.MailFromDomainAttributes = deserializeAws_queryMailFromDomainAttributes(getArrayIfSingleItem(output["MailFromDomainAttributes"]["entry"]), context);
  }
  return contents;
};
var deserializeAws_queryGetIdentityNotificationAttributesResponse = function(output, context) {
  var contents = {
    NotificationAttributes: void 0
  };
  if (output.NotificationAttributes === "") {
    contents.NotificationAttributes = {};
  }
  if (output["NotificationAttributes"] !== void 0 && output["NotificationAttributes"]["entry"] !== void 0) {
    contents.NotificationAttributes = deserializeAws_queryNotificationAttributes(getArrayIfSingleItem(output["NotificationAttributes"]["entry"]), context);
  }
  return contents;
};
var deserializeAws_queryGetIdentityPoliciesResponse = function(output, context) {
  var contents = {
    Policies: void 0
  };
  if (output.Policies === "") {
    contents.Policies = {};
  }
  if (output["Policies"] !== void 0 && output["Policies"]["entry"] !== void 0) {
    contents.Policies = deserializeAws_queryPolicyMap(getArrayIfSingleItem(output["Policies"]["entry"]), context);
  }
  return contents;
};
var deserializeAws_queryGetIdentityVerificationAttributesResponse = function(output, context) {
  var contents = {
    VerificationAttributes: void 0
  };
  if (output.VerificationAttributes === "") {
    contents.VerificationAttributes = {};
  }
  if (output["VerificationAttributes"] !== void 0 && output["VerificationAttributes"]["entry"] !== void 0) {
    contents.VerificationAttributes = deserializeAws_queryVerificationAttributes(getArrayIfSingleItem(output["VerificationAttributes"]["entry"]), context);
  }
  return contents;
};
var deserializeAws_queryGetSendQuotaResponse = function(output, context) {
  var contents = {
    Max24HourSend: void 0,
    MaxSendRate: void 0,
    SentLast24Hours: void 0
  };
  if (output["Max24HourSend"] !== void 0) {
    contents.Max24HourSend = strictParseFloat(output["Max24HourSend"]);
  }
  if (output["MaxSendRate"] !== void 0) {
    contents.MaxSendRate = strictParseFloat(output["MaxSendRate"]);
  }
  if (output["SentLast24Hours"] !== void 0) {
    contents.SentLast24Hours = strictParseFloat(output["SentLast24Hours"]);
  }
  return contents;
};
var deserializeAws_queryGetSendStatisticsResponse = function(output, context) {
  var contents = {
    SendDataPoints: void 0
  };
  if (output.SendDataPoints === "") {
    contents.SendDataPoints = [];
  }
  if (output["SendDataPoints"] !== void 0 && output["SendDataPoints"]["member"] !== void 0) {
    contents.SendDataPoints = deserializeAws_querySendDataPointList(getArrayIfSingleItem(output["SendDataPoints"]["member"]), context);
  }
  return contents;
};
var deserializeAws_queryGetTemplateResponse = function(output, context) {
  var contents = {
    Template: void 0
  };
  if (output["Template"] !== void 0) {
    contents.Template = deserializeAws_queryTemplate(output["Template"], context);
  }
  return contents;
};
var deserializeAws_queryIdentityDkimAttributes = function(output, context) {
  var contents = {
    DkimEnabled: void 0,
    DkimVerificationStatus: void 0,
    DkimTokens: void 0
  };
  if (output["DkimEnabled"] !== void 0) {
    contents.DkimEnabled = parseBoolean(output["DkimEnabled"]);
  }
  if (output["DkimVerificationStatus"] !== void 0) {
    contents.DkimVerificationStatus = expectString(output["DkimVerificationStatus"]);
  }
  if (output.DkimTokens === "") {
    contents.DkimTokens = [];
  }
  if (output["DkimTokens"] !== void 0 && output["DkimTokens"]["member"] !== void 0) {
    contents.DkimTokens = deserializeAws_queryVerificationTokenList(getArrayIfSingleItem(output["DkimTokens"]["member"]), context);
  }
  return contents;
};
var deserializeAws_queryIdentityList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_queryIdentityMailFromDomainAttributes = function(output, context) {
  var contents = {
    MailFromDomain: void 0,
    MailFromDomainStatus: void 0,
    BehaviorOnMXFailure: void 0
  };
  if (output["MailFromDomain"] !== void 0) {
    contents.MailFromDomain = expectString(output["MailFromDomain"]);
  }
  if (output["MailFromDomainStatus"] !== void 0) {
    contents.MailFromDomainStatus = expectString(output["MailFromDomainStatus"]);
  }
  if (output["BehaviorOnMXFailure"] !== void 0) {
    contents.BehaviorOnMXFailure = expectString(output["BehaviorOnMXFailure"]);
  }
  return contents;
};
var deserializeAws_queryIdentityNotificationAttributes = function(output, context) {
  var contents = {
    BounceTopic: void 0,
    ComplaintTopic: void 0,
    DeliveryTopic: void 0,
    ForwardingEnabled: void 0,
    HeadersInBounceNotificationsEnabled: void 0,
    HeadersInComplaintNotificationsEnabled: void 0,
    HeadersInDeliveryNotificationsEnabled: void 0
  };
  if (output["BounceTopic"] !== void 0) {
    contents.BounceTopic = expectString(output["BounceTopic"]);
  }
  if (output["ComplaintTopic"] !== void 0) {
    contents.ComplaintTopic = expectString(output["ComplaintTopic"]);
  }
  if (output["DeliveryTopic"] !== void 0) {
    contents.DeliveryTopic = expectString(output["DeliveryTopic"]);
  }
  if (output["ForwardingEnabled"] !== void 0) {
    contents.ForwardingEnabled = parseBoolean(output["ForwardingEnabled"]);
  }
  if (output["HeadersInBounceNotificationsEnabled"] !== void 0) {
    contents.HeadersInBounceNotificationsEnabled = parseBoolean(output["HeadersInBounceNotificationsEnabled"]);
  }
  if (output["HeadersInComplaintNotificationsEnabled"] !== void 0) {
    contents.HeadersInComplaintNotificationsEnabled = parseBoolean(output["HeadersInComplaintNotificationsEnabled"]);
  }
  if (output["HeadersInDeliveryNotificationsEnabled"] !== void 0) {
    contents.HeadersInDeliveryNotificationsEnabled = parseBoolean(output["HeadersInDeliveryNotificationsEnabled"]);
  }
  return contents;
};
var deserializeAws_queryIdentityVerificationAttributes = function(output, context) {
  var contents = {
    VerificationStatus: void 0,
    VerificationToken: void 0
  };
  if (output["VerificationStatus"] !== void 0) {
    contents.VerificationStatus = expectString(output["VerificationStatus"]);
  }
  if (output["VerificationToken"] !== void 0) {
    contents.VerificationToken = expectString(output["VerificationToken"]);
  }
  return contents;
};
var deserializeAws_queryInvalidCloudWatchDestinationException = function(output, context) {
  var contents = {
    ConfigurationSetName: void 0,
    EventDestinationName: void 0,
    message: void 0
  };
  if (output["ConfigurationSetName"] !== void 0) {
    contents.ConfigurationSetName = expectString(output["ConfigurationSetName"]);
  }
  if (output["EventDestinationName"] !== void 0) {
    contents.EventDestinationName = expectString(output["EventDestinationName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidConfigurationSetException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidDeliveryOptionsException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidFirehoseDestinationException = function(output, context) {
  var contents = {
    ConfigurationSetName: void 0,
    EventDestinationName: void 0,
    message: void 0
  };
  if (output["ConfigurationSetName"] !== void 0) {
    contents.ConfigurationSetName = expectString(output["ConfigurationSetName"]);
  }
  if (output["EventDestinationName"] !== void 0) {
    contents.EventDestinationName = expectString(output["EventDestinationName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidLambdaFunctionException = function(output, context) {
  var contents = {
    FunctionArn: void 0,
    message: void 0
  };
  if (output["FunctionArn"] !== void 0) {
    contents.FunctionArn = expectString(output["FunctionArn"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidPolicyException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidRenderingParameterException = function(output, context) {
  var contents = {
    TemplateName: void 0,
    message: void 0
  };
  if (output["TemplateName"] !== void 0) {
    contents.TemplateName = expectString(output["TemplateName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidS3ConfigurationException = function(output, context) {
  var contents = {
    Bucket: void 0,
    message: void 0
  };
  if (output["Bucket"] !== void 0) {
    contents.Bucket = expectString(output["Bucket"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidSNSDestinationException = function(output, context) {
  var contents = {
    ConfigurationSetName: void 0,
    EventDestinationName: void 0,
    message: void 0
  };
  if (output["ConfigurationSetName"] !== void 0) {
    contents.ConfigurationSetName = expectString(output["ConfigurationSetName"]);
  }
  if (output["EventDestinationName"] !== void 0) {
    contents.EventDestinationName = expectString(output["EventDestinationName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidSnsTopicException = function(output, context) {
  var contents = {
    Topic: void 0,
    message: void 0
  };
  if (output["Topic"] !== void 0) {
    contents.Topic = expectString(output["Topic"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidTemplateException = function(output, context) {
  var contents = {
    TemplateName: void 0,
    message: void 0
  };
  if (output["TemplateName"] !== void 0) {
    contents.TemplateName = expectString(output["TemplateName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidTrackingOptionsException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryKinesisFirehoseDestination = function(output, context) {
  var contents = {
    IAMRoleARN: void 0,
    DeliveryStreamARN: void 0
  };
  if (output["IAMRoleARN"] !== void 0) {
    contents.IAMRoleARN = expectString(output["IAMRoleARN"]);
  }
  if (output["DeliveryStreamARN"] !== void 0) {
    contents.DeliveryStreamARN = expectString(output["DeliveryStreamARN"]);
  }
  return contents;
};
var deserializeAws_queryLambdaAction = function(output, context) {
  var contents = {
    TopicArn: void 0,
    FunctionArn: void 0,
    InvocationType: void 0
  };
  if (output["TopicArn"] !== void 0) {
    contents.TopicArn = expectString(output["TopicArn"]);
  }
  if (output["FunctionArn"] !== void 0) {
    contents.FunctionArn = expectString(output["FunctionArn"]);
  }
  if (output["InvocationType"] !== void 0) {
    contents.InvocationType = expectString(output["InvocationType"]);
  }
  return contents;
};
var deserializeAws_queryLimitExceededException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryListConfigurationSetsResponse = function(output, context) {
  var contents = {
    ConfigurationSets: void 0,
    NextToken: void 0
  };
  if (output.ConfigurationSets === "") {
    contents.ConfigurationSets = [];
  }
  if (output["ConfigurationSets"] !== void 0 && output["ConfigurationSets"]["member"] !== void 0) {
    contents.ConfigurationSets = deserializeAws_queryConfigurationSets(getArrayIfSingleItem(output["ConfigurationSets"]["member"]), context);
  }
  if (output["NextToken"] !== void 0) {
    contents.NextToken = expectString(output["NextToken"]);
  }
  return contents;
};
var deserializeAws_queryListCustomVerificationEmailTemplatesResponse = function(output, context) {
  var contents = {
    CustomVerificationEmailTemplates: void 0,
    NextToken: void 0
  };
  if (output.CustomVerificationEmailTemplates === "") {
    contents.CustomVerificationEmailTemplates = [];
  }
  if (output["CustomVerificationEmailTemplates"] !== void 0 && output["CustomVerificationEmailTemplates"]["member"] !== void 0) {
    contents.CustomVerificationEmailTemplates = deserializeAws_queryCustomVerificationEmailTemplates(getArrayIfSingleItem(output["CustomVerificationEmailTemplates"]["member"]), context);
  }
  if (output["NextToken"] !== void 0) {
    contents.NextToken = expectString(output["NextToken"]);
  }
  return contents;
};
var deserializeAws_queryListIdentitiesResponse = function(output, context) {
  var contents = {
    Identities: void 0,
    NextToken: void 0
  };
  if (output.Identities === "") {
    contents.Identities = [];
  }
  if (output["Identities"] !== void 0 && output["Identities"]["member"] !== void 0) {
    contents.Identities = deserializeAws_queryIdentityList(getArrayIfSingleItem(output["Identities"]["member"]), context);
  }
  if (output["NextToken"] !== void 0) {
    contents.NextToken = expectString(output["NextToken"]);
  }
  return contents;
};
var deserializeAws_queryListIdentityPoliciesResponse = function(output, context) {
  var contents = {
    PolicyNames: void 0
  };
  if (output.PolicyNames === "") {
    contents.PolicyNames = [];
  }
  if (output["PolicyNames"] !== void 0 && output["PolicyNames"]["member"] !== void 0) {
    contents.PolicyNames = deserializeAws_queryPolicyNameList(getArrayIfSingleItem(output["PolicyNames"]["member"]), context);
  }
  return contents;
};
var deserializeAws_queryListReceiptFiltersResponse = function(output, context) {
  var contents = {
    Filters: void 0
  };
  if (output.Filters === "") {
    contents.Filters = [];
  }
  if (output["Filters"] !== void 0 && output["Filters"]["member"] !== void 0) {
    contents.Filters = deserializeAws_queryReceiptFilterList(getArrayIfSingleItem(output["Filters"]["member"]), context);
  }
  return contents;
};
var deserializeAws_queryListReceiptRuleSetsResponse = function(output, context) {
  var contents = {
    RuleSets: void 0,
    NextToken: void 0
  };
  if (output.RuleSets === "") {
    contents.RuleSets = [];
  }
  if (output["RuleSets"] !== void 0 && output["RuleSets"]["member"] !== void 0) {
    contents.RuleSets = deserializeAws_queryReceiptRuleSetsLists(getArrayIfSingleItem(output["RuleSets"]["member"]), context);
  }
  if (output["NextToken"] !== void 0) {
    contents.NextToken = expectString(output["NextToken"]);
  }
  return contents;
};
var deserializeAws_queryListTemplatesResponse = function(output, context) {
  var contents = {
    TemplatesMetadata: void 0,
    NextToken: void 0
  };
  if (output.TemplatesMetadata === "") {
    contents.TemplatesMetadata = [];
  }
  if (output["TemplatesMetadata"] !== void 0 && output["TemplatesMetadata"]["member"] !== void 0) {
    contents.TemplatesMetadata = deserializeAws_queryTemplateMetadataList(getArrayIfSingleItem(output["TemplatesMetadata"]["member"]), context);
  }
  if (output["NextToken"] !== void 0) {
    contents.NextToken = expectString(output["NextToken"]);
  }
  return contents;
};
var deserializeAws_queryListVerifiedEmailAddressesResponse = function(output, context) {
  var contents = {
    VerifiedEmailAddresses: void 0
  };
  if (output.VerifiedEmailAddresses === "") {
    contents.VerifiedEmailAddresses = [];
  }
  if (output["VerifiedEmailAddresses"] !== void 0 && output["VerifiedEmailAddresses"]["member"] !== void 0) {
    contents.VerifiedEmailAddresses = deserializeAws_queryAddressList(getArrayIfSingleItem(output["VerifiedEmailAddresses"]["member"]), context);
  }
  return contents;
};
var deserializeAws_queryMailFromDomainAttributes = function(output, context) {
  return output.reduce(function(acc, pair) {
    var _a;
    if (pair["value"] === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_a = {}, _a[pair["key"]] = deserializeAws_queryIdentityMailFromDomainAttributes(pair["value"], context), _a));
  }, {});
};
var deserializeAws_queryMailFromDomainNotVerifiedException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryMessageRejected = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryMissingRenderingAttributeException = function(output, context) {
  var contents = {
    TemplateName: void 0,
    message: void 0
  };
  if (output["TemplateName"] !== void 0) {
    contents.TemplateName = expectString(output["TemplateName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryNotificationAttributes = function(output, context) {
  return output.reduce(function(acc, pair) {
    var _a;
    if (pair["value"] === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_a = {}, _a[pair["key"]] = deserializeAws_queryIdentityNotificationAttributes(pair["value"], context), _a));
  }, {});
};
var deserializeAws_queryPolicyMap = function(output, context) {
  return output.reduce(function(acc, pair) {
    var _a;
    if (pair["value"] === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_a = {}, _a[pair["key"]] = expectString(pair["value"]), _a));
  }, {});
};
var deserializeAws_queryPolicyNameList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_queryProductionAccessNotGrantedException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryPutConfigurationSetDeliveryOptionsResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryPutIdentityPolicyResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryReceiptAction = function(output, context) {
  var contents = {
    S3Action: void 0,
    BounceAction: void 0,
    WorkmailAction: void 0,
    LambdaAction: void 0,
    StopAction: void 0,
    AddHeaderAction: void 0,
    SNSAction: void 0
  };
  if (output["S3Action"] !== void 0) {
    contents.S3Action = deserializeAws_queryS3Action(output["S3Action"], context);
  }
  if (output["BounceAction"] !== void 0) {
    contents.BounceAction = deserializeAws_queryBounceAction(output["BounceAction"], context);
  }
  if (output["WorkmailAction"] !== void 0) {
    contents.WorkmailAction = deserializeAws_queryWorkmailAction(output["WorkmailAction"], context);
  }
  if (output["LambdaAction"] !== void 0) {
    contents.LambdaAction = deserializeAws_queryLambdaAction(output["LambdaAction"], context);
  }
  if (output["StopAction"] !== void 0) {
    contents.StopAction = deserializeAws_queryStopAction(output["StopAction"], context);
  }
  if (output["AddHeaderAction"] !== void 0) {
    contents.AddHeaderAction = deserializeAws_queryAddHeaderAction(output["AddHeaderAction"], context);
  }
  if (output["SNSAction"] !== void 0) {
    contents.SNSAction = deserializeAws_querySNSAction(output["SNSAction"], context);
  }
  return contents;
};
var deserializeAws_queryReceiptActionsList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryReceiptAction(entry, context);
  });
};
var deserializeAws_queryReceiptFilter = function(output, context) {
  var contents = {
    Name: void 0,
    IpFilter: void 0
  };
  if (output["Name"] !== void 0) {
    contents.Name = expectString(output["Name"]);
  }
  if (output["IpFilter"] !== void 0) {
    contents.IpFilter = deserializeAws_queryReceiptIpFilter(output["IpFilter"], context);
  }
  return contents;
};
var deserializeAws_queryReceiptFilterList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryReceiptFilter(entry, context);
  });
};
var deserializeAws_queryReceiptIpFilter = function(output, context) {
  var contents = {
    Policy: void 0,
    Cidr: void 0
  };
  if (output["Policy"] !== void 0) {
    contents.Policy = expectString(output["Policy"]);
  }
  if (output["Cidr"] !== void 0) {
    contents.Cidr = expectString(output["Cidr"]);
  }
  return contents;
};
var deserializeAws_queryReceiptRule = function(output, context) {
  var contents = {
    Name: void 0,
    Enabled: void 0,
    TlsPolicy: void 0,
    Recipients: void 0,
    Actions: void 0,
    ScanEnabled: void 0
  };
  if (output["Name"] !== void 0) {
    contents.Name = expectString(output["Name"]);
  }
  if (output["Enabled"] !== void 0) {
    contents.Enabled = parseBoolean(output["Enabled"]);
  }
  if (output["TlsPolicy"] !== void 0) {
    contents.TlsPolicy = expectString(output["TlsPolicy"]);
  }
  if (output.Recipients === "") {
    contents.Recipients = [];
  }
  if (output["Recipients"] !== void 0 && output["Recipients"]["member"] !== void 0) {
    contents.Recipients = deserializeAws_queryRecipientsList(getArrayIfSingleItem(output["Recipients"]["member"]), context);
  }
  if (output.Actions === "") {
    contents.Actions = [];
  }
  if (output["Actions"] !== void 0 && output["Actions"]["member"] !== void 0) {
    contents.Actions = deserializeAws_queryReceiptActionsList(getArrayIfSingleItem(output["Actions"]["member"]), context);
  }
  if (output["ScanEnabled"] !== void 0) {
    contents.ScanEnabled = parseBoolean(output["ScanEnabled"]);
  }
  return contents;
};
var deserializeAws_queryReceiptRuleSetMetadata = function(output, context) {
  var contents = {
    Name: void 0,
    CreatedTimestamp: void 0
  };
  if (output["Name"] !== void 0) {
    contents.Name = expectString(output["Name"]);
  }
  if (output["CreatedTimestamp"] !== void 0) {
    contents.CreatedTimestamp = expectNonNull(parseRfc3339DateTime(output["CreatedTimestamp"]));
  }
  return contents;
};
var deserializeAws_queryReceiptRuleSetsLists = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryReceiptRuleSetMetadata(entry, context);
  });
};
var deserializeAws_queryReceiptRulesList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryReceiptRule(entry, context);
  });
};
var deserializeAws_queryRecipientsList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_queryReorderReceiptRuleSetResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryReputationOptions = function(output, context) {
  var contents = {
    SendingEnabled: void 0,
    ReputationMetricsEnabled: void 0,
    LastFreshStart: void 0
  };
  if (output["SendingEnabled"] !== void 0) {
    contents.SendingEnabled = parseBoolean(output["SendingEnabled"]);
  }
  if (output["ReputationMetricsEnabled"] !== void 0) {
    contents.ReputationMetricsEnabled = parseBoolean(output["ReputationMetricsEnabled"]);
  }
  if (output["LastFreshStart"] !== void 0) {
    contents.LastFreshStart = expectNonNull(parseRfc3339DateTime(output["LastFreshStart"]));
  }
  return contents;
};
var deserializeAws_queryRuleDoesNotExistException = function(output, context) {
  var contents = {
    Name: void 0,
    message: void 0
  };
  if (output["Name"] !== void 0) {
    contents.Name = expectString(output["Name"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryRuleSetDoesNotExistException = function(output, context) {
  var contents = {
    Name: void 0,
    message: void 0
  };
  if (output["Name"] !== void 0) {
    contents.Name = expectString(output["Name"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryS3Action = function(output, context) {
  var contents = {
    TopicArn: void 0,
    BucketName: void 0,
    ObjectKeyPrefix: void 0,
    KmsKeyArn: void 0
  };
  if (output["TopicArn"] !== void 0) {
    contents.TopicArn = expectString(output["TopicArn"]);
  }
  if (output["BucketName"] !== void 0) {
    contents.BucketName = expectString(output["BucketName"]);
  }
  if (output["ObjectKeyPrefix"] !== void 0) {
    contents.ObjectKeyPrefix = expectString(output["ObjectKeyPrefix"]);
  }
  if (output["KmsKeyArn"] !== void 0) {
    contents.KmsKeyArn = expectString(output["KmsKeyArn"]);
  }
  return contents;
};
var deserializeAws_querySendBounceResponse = function(output, context) {
  var contents = {
    MessageId: void 0
  };
  if (output["MessageId"] !== void 0) {
    contents.MessageId = expectString(output["MessageId"]);
  }
  return contents;
};
var deserializeAws_querySendBulkTemplatedEmailResponse = function(output, context) {
  var contents = {
    Status: void 0
  };
  if (output.Status === "") {
    contents.Status = [];
  }
  if (output["Status"] !== void 0 && output["Status"]["member"] !== void 0) {
    contents.Status = deserializeAws_queryBulkEmailDestinationStatusList(getArrayIfSingleItem(output["Status"]["member"]), context);
  }
  return contents;
};
var deserializeAws_querySendCustomVerificationEmailResponse = function(output, context) {
  var contents = {
    MessageId: void 0
  };
  if (output["MessageId"] !== void 0) {
    contents.MessageId = expectString(output["MessageId"]);
  }
  return contents;
};
var deserializeAws_querySendDataPoint = function(output, context) {
  var contents = {
    Timestamp: void 0,
    DeliveryAttempts: void 0,
    Bounces: void 0,
    Complaints: void 0,
    Rejects: void 0
  };
  if (output["Timestamp"] !== void 0) {
    contents.Timestamp = expectNonNull(parseRfc3339DateTime(output["Timestamp"]));
  }
  if (output["DeliveryAttempts"] !== void 0) {
    contents.DeliveryAttempts = strictParseLong(output["DeliveryAttempts"]);
  }
  if (output["Bounces"] !== void 0) {
    contents.Bounces = strictParseLong(output["Bounces"]);
  }
  if (output["Complaints"] !== void 0) {
    contents.Complaints = strictParseLong(output["Complaints"]);
  }
  if (output["Rejects"] !== void 0) {
    contents.Rejects = strictParseLong(output["Rejects"]);
  }
  return contents;
};
var deserializeAws_querySendDataPointList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_querySendDataPoint(entry, context);
  });
};
var deserializeAws_querySendEmailResponse = function(output, context) {
  var contents = {
    MessageId: void 0
  };
  if (output["MessageId"] !== void 0) {
    contents.MessageId = expectString(output["MessageId"]);
  }
  return contents;
};
var deserializeAws_querySendRawEmailResponse = function(output, context) {
  var contents = {
    MessageId: void 0
  };
  if (output["MessageId"] !== void 0) {
    contents.MessageId = expectString(output["MessageId"]);
  }
  return contents;
};
var deserializeAws_querySendTemplatedEmailResponse = function(output, context) {
  var contents = {
    MessageId: void 0
  };
  if (output["MessageId"] !== void 0) {
    contents.MessageId = expectString(output["MessageId"]);
  }
  return contents;
};
var deserializeAws_querySetActiveReceiptRuleSetResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_querySetIdentityDkimEnabledResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_querySetIdentityFeedbackForwardingEnabledResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_querySetIdentityHeadersInNotificationsEnabledResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_querySetIdentityMailFromDomainResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_querySetIdentityNotificationTopicResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_querySetReceiptRulePositionResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_querySNSAction = function(output, context) {
  var contents = {
    TopicArn: void 0,
    Encoding: void 0
  };
  if (output["TopicArn"] !== void 0) {
    contents.TopicArn = expectString(output["TopicArn"]);
  }
  if (output["Encoding"] !== void 0) {
    contents.Encoding = expectString(output["Encoding"]);
  }
  return contents;
};
var deserializeAws_querySNSDestination = function(output, context) {
  var contents = {
    TopicARN: void 0
  };
  if (output["TopicARN"] !== void 0) {
    contents.TopicARN = expectString(output["TopicARN"]);
  }
  return contents;
};
var deserializeAws_queryStopAction = function(output, context) {
  var contents = {
    Scope: void 0,
    TopicArn: void 0
  };
  if (output["Scope"] !== void 0) {
    contents.Scope = expectString(output["Scope"]);
  }
  if (output["TopicArn"] !== void 0) {
    contents.TopicArn = expectString(output["TopicArn"]);
  }
  return contents;
};
var deserializeAws_queryTemplate = function(output, context) {
  var contents = {
    TemplateName: void 0,
    SubjectPart: void 0,
    TextPart: void 0,
    HtmlPart: void 0
  };
  if (output["TemplateName"] !== void 0) {
    contents.TemplateName = expectString(output["TemplateName"]);
  }
  if (output["SubjectPart"] !== void 0) {
    contents.SubjectPart = expectString(output["SubjectPart"]);
  }
  if (output["TextPart"] !== void 0) {
    contents.TextPart = expectString(output["TextPart"]);
  }
  if (output["HtmlPart"] !== void 0) {
    contents.HtmlPart = expectString(output["HtmlPart"]);
  }
  return contents;
};
var deserializeAws_queryTemplateDoesNotExistException = function(output, context) {
  var contents = {
    TemplateName: void 0,
    message: void 0
  };
  if (output["TemplateName"] !== void 0) {
    contents.TemplateName = expectString(output["TemplateName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryTemplateMetadata = function(output, context) {
  var contents = {
    Name: void 0,
    CreatedTimestamp: void 0
  };
  if (output["Name"] !== void 0) {
    contents.Name = expectString(output["Name"]);
  }
  if (output["CreatedTimestamp"] !== void 0) {
    contents.CreatedTimestamp = expectNonNull(parseRfc3339DateTime(output["CreatedTimestamp"]));
  }
  return contents;
};
var deserializeAws_queryTemplateMetadataList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryTemplateMetadata(entry, context);
  });
};
var deserializeAws_queryTestRenderTemplateResponse = function(output, context) {
  var contents = {
    RenderedTemplate: void 0
  };
  if (output["RenderedTemplate"] !== void 0) {
    contents.RenderedTemplate = expectString(output["RenderedTemplate"]);
  }
  return contents;
};
var deserializeAws_queryTrackingOptions = function(output, context) {
  var contents = {
    CustomRedirectDomain: void 0
  };
  if (output["CustomRedirectDomain"] !== void 0) {
    contents.CustomRedirectDomain = expectString(output["CustomRedirectDomain"]);
  }
  return contents;
};
var deserializeAws_queryTrackingOptionsAlreadyExistsException = function(output, context) {
  var contents = {
    ConfigurationSetName: void 0,
    message: void 0
  };
  if (output["ConfigurationSetName"] !== void 0) {
    contents.ConfigurationSetName = expectString(output["ConfigurationSetName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryTrackingOptionsDoesNotExistException = function(output, context) {
  var contents = {
    ConfigurationSetName: void 0,
    message: void 0
  };
  if (output["ConfigurationSetName"] !== void 0) {
    contents.ConfigurationSetName = expectString(output["ConfigurationSetName"]);
  }
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryUpdateConfigurationSetEventDestinationResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryUpdateConfigurationSetTrackingOptionsResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryUpdateReceiptRuleResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryUpdateTemplateResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryVerificationAttributes = function(output, context) {
  return output.reduce(function(acc, pair) {
    var _a;
    if (pair["value"] === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_a = {}, _a[pair["key"]] = deserializeAws_queryIdentityVerificationAttributes(pair["value"], context), _a));
  }, {});
};
var deserializeAws_queryVerificationTokenList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_queryVerifyDomainDkimResponse = function(output, context) {
  var contents = {
    DkimTokens: void 0
  };
  if (output.DkimTokens === "") {
    contents.DkimTokens = [];
  }
  if (output["DkimTokens"] !== void 0 && output["DkimTokens"]["member"] !== void 0) {
    contents.DkimTokens = deserializeAws_queryVerificationTokenList(getArrayIfSingleItem(output["DkimTokens"]["member"]), context);
  }
  return contents;
};
var deserializeAws_queryVerifyDomainIdentityResponse = function(output, context) {
  var contents = {
    VerificationToken: void 0
  };
  if (output["VerificationToken"] !== void 0) {
    contents.VerificationToken = expectString(output["VerificationToken"]);
  }
  return contents;
};
var deserializeAws_queryVerifyEmailIdentityResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryWorkmailAction = function(output, context) {
  var contents = {
    TopicArn: void 0,
    OrganizationArn: void 0
  };
  if (output["TopicArn"] !== void 0) {
    contents.TopicArn = expectString(output["TopicArn"]);
  }
  if (output["OrganizationArn"] !== void 0) {
    contents.OrganizationArn = expectString(output["OrganizationArn"]);
  }
  return contents;
};
var deserializeMetadata4 = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody5 = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString5 = function(streamBody, context) {
  return collectBody5(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var buildHttpRpcRequest3 = function(context, headers, path, resolvedHostname, body) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          contents = {
            protocol,
            hostname,
            port,
            method: "POST",
            path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
            headers
          };
          if (resolvedHostname !== void 0) {
            contents.hostname = resolvedHostname;
          }
          if (body !== void 0) {
            contents.body = body;
          }
          return [2, new HttpRequest(contents)];
      }
    });
  });
};
var parseBody4 = function(streamBody, context) {
  return collectBodyString5(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      var parsedObj = (0, import_fast_xml_parser2.parse)(encoded, {
        attributeNamePrefix: "",
        ignoreAttributes: false,
        parseNodeValue: false,
        trimValues: false,
        tagValueProcessor: function(val) {
          return val.trim() === "" && val.includes("\n") ? "" : (0, import_entities2.decodeHTML)(val);
        }
      });
      var textNodeName = "#text";
      var key = Object.keys(parsedObj)[0];
      var parsedObjToReturn = parsedObj[key];
      if (parsedObjToReturn[textNodeName]) {
        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
        delete parsedObjToReturn[textNodeName];
      }
      return getValueFromTextNode(parsedObjToReturn);
    }
    return {};
  });
};
var buildFormUrlencodedString = function(formEntries) {
  return Object.entries(formEntries).map(function(_a) {
    var _b = __read(_a, 2), key = _b[0], value = _b[1];
    return extendedEncodeURIComponent(key) + "=" + extendedEncodeURIComponent(value);
  }).join("&");
};
var loadQueryErrorCode = function(output, data) {
  if (data.Error.Code !== void 0) {
    return data.Error.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
  return "";
};

// node_modules/@aws-sdk/client-ses/dist-es/commands/CloneReceiptRuleSetCommand.js
var CloneReceiptRuleSetCommand = function(_super) {
  __extends(CloneReceiptRuleSetCommand2, _super);
  function CloneReceiptRuleSetCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CloneReceiptRuleSetCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "CloneReceiptRuleSetCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CloneReceiptRuleSetRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CloneReceiptRuleSetResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CloneReceiptRuleSetCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCloneReceiptRuleSetCommand(input, context);
  };
  CloneReceiptRuleSetCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCloneReceiptRuleSetCommand(output, context);
  };
  return CloneReceiptRuleSetCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/CreateConfigurationSetCommand.js
var CreateConfigurationSetCommand = function(_super) {
  __extends(CreateConfigurationSetCommand2, _super);
  function CreateConfigurationSetCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateConfigurationSetCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "CreateConfigurationSetCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateConfigurationSetRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateConfigurationSetResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateConfigurationSetCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCreateConfigurationSetCommand(input, context);
  };
  CreateConfigurationSetCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCreateConfigurationSetCommand(output, context);
  };
  return CreateConfigurationSetCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/CreateConfigurationSetEventDestinationCommand.js
var CreateConfigurationSetEventDestinationCommand = function(_super) {
  __extends(CreateConfigurationSetEventDestinationCommand2, _super);
  function CreateConfigurationSetEventDestinationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateConfigurationSetEventDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "CreateConfigurationSetEventDestinationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateConfigurationSetEventDestinationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateConfigurationSetEventDestinationResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateConfigurationSetEventDestinationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCreateConfigurationSetEventDestinationCommand(input, context);
  };
  CreateConfigurationSetEventDestinationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCreateConfigurationSetEventDestinationCommand(output, context);
  };
  return CreateConfigurationSetEventDestinationCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/CreateConfigurationSetTrackingOptionsCommand.js
var CreateConfigurationSetTrackingOptionsCommand = function(_super) {
  __extends(CreateConfigurationSetTrackingOptionsCommand2, _super);
  function CreateConfigurationSetTrackingOptionsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateConfigurationSetTrackingOptionsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "CreateConfigurationSetTrackingOptionsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateConfigurationSetTrackingOptionsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateConfigurationSetTrackingOptionsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateConfigurationSetTrackingOptionsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCreateConfigurationSetTrackingOptionsCommand(input, context);
  };
  CreateConfigurationSetTrackingOptionsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCreateConfigurationSetTrackingOptionsCommand(output, context);
  };
  return CreateConfigurationSetTrackingOptionsCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/CreateCustomVerificationEmailTemplateCommand.js
var CreateCustomVerificationEmailTemplateCommand = function(_super) {
  __extends(CreateCustomVerificationEmailTemplateCommand2, _super);
  function CreateCustomVerificationEmailTemplateCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateCustomVerificationEmailTemplateCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "CreateCustomVerificationEmailTemplateCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateCustomVerificationEmailTemplateRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateCustomVerificationEmailTemplateCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCreateCustomVerificationEmailTemplateCommand(input, context);
  };
  CreateCustomVerificationEmailTemplateCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCreateCustomVerificationEmailTemplateCommand(output, context);
  };
  return CreateCustomVerificationEmailTemplateCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/CreateReceiptFilterCommand.js
var CreateReceiptFilterCommand = function(_super) {
  __extends(CreateReceiptFilterCommand2, _super);
  function CreateReceiptFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateReceiptFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "CreateReceiptFilterCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateReceiptFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateReceiptFilterResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateReceiptFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCreateReceiptFilterCommand(input, context);
  };
  CreateReceiptFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCreateReceiptFilterCommand(output, context);
  };
  return CreateReceiptFilterCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/CreateReceiptRuleCommand.js
var CreateReceiptRuleCommand = function(_super) {
  __extends(CreateReceiptRuleCommand2, _super);
  function CreateReceiptRuleCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateReceiptRuleCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "CreateReceiptRuleCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateReceiptRuleRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateReceiptRuleResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateReceiptRuleCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCreateReceiptRuleCommand(input, context);
  };
  CreateReceiptRuleCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCreateReceiptRuleCommand(output, context);
  };
  return CreateReceiptRuleCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/CreateReceiptRuleSetCommand.js
var CreateReceiptRuleSetCommand = function(_super) {
  __extends(CreateReceiptRuleSetCommand2, _super);
  function CreateReceiptRuleSetCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateReceiptRuleSetCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "CreateReceiptRuleSetCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateReceiptRuleSetRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateReceiptRuleSetResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateReceiptRuleSetCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCreateReceiptRuleSetCommand(input, context);
  };
  CreateReceiptRuleSetCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCreateReceiptRuleSetCommand(output, context);
  };
  return CreateReceiptRuleSetCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/CreateTemplateCommand.js
var CreateTemplateCommand = function(_super) {
  __extends(CreateTemplateCommand2, _super);
  function CreateTemplateCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateTemplateCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "CreateTemplateCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateTemplateRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateTemplateResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateTemplateCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCreateTemplateCommand(input, context);
  };
  CreateTemplateCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCreateTemplateCommand(output, context);
  };
  return CreateTemplateCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DeleteConfigurationSetCommand.js
var DeleteConfigurationSetCommand = function(_super) {
  __extends(DeleteConfigurationSetCommand2, _super);
  function DeleteConfigurationSetCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteConfigurationSetCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DeleteConfigurationSetCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteConfigurationSetRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteConfigurationSetResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteConfigurationSetCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteConfigurationSetCommand(input, context);
  };
  DeleteConfigurationSetCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteConfigurationSetCommand(output, context);
  };
  return DeleteConfigurationSetCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DeleteConfigurationSetEventDestinationCommand.js
var DeleteConfigurationSetEventDestinationCommand = function(_super) {
  __extends(DeleteConfigurationSetEventDestinationCommand2, _super);
  function DeleteConfigurationSetEventDestinationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteConfigurationSetEventDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DeleteConfigurationSetEventDestinationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteConfigurationSetEventDestinationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteConfigurationSetEventDestinationResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteConfigurationSetEventDestinationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteConfigurationSetEventDestinationCommand(input, context);
  };
  DeleteConfigurationSetEventDestinationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteConfigurationSetEventDestinationCommand(output, context);
  };
  return DeleteConfigurationSetEventDestinationCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DeleteConfigurationSetTrackingOptionsCommand.js
var DeleteConfigurationSetTrackingOptionsCommand = function(_super) {
  __extends(DeleteConfigurationSetTrackingOptionsCommand2, _super);
  function DeleteConfigurationSetTrackingOptionsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteConfigurationSetTrackingOptionsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DeleteConfigurationSetTrackingOptionsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteConfigurationSetTrackingOptionsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteConfigurationSetTrackingOptionsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteConfigurationSetTrackingOptionsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteConfigurationSetTrackingOptionsCommand(input, context);
  };
  DeleteConfigurationSetTrackingOptionsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteConfigurationSetTrackingOptionsCommand(output, context);
  };
  return DeleteConfigurationSetTrackingOptionsCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DeleteCustomVerificationEmailTemplateCommand.js
var DeleteCustomVerificationEmailTemplateCommand = function(_super) {
  __extends(DeleteCustomVerificationEmailTemplateCommand2, _super);
  function DeleteCustomVerificationEmailTemplateCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteCustomVerificationEmailTemplateCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DeleteCustomVerificationEmailTemplateCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteCustomVerificationEmailTemplateRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteCustomVerificationEmailTemplateCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteCustomVerificationEmailTemplateCommand(input, context);
  };
  DeleteCustomVerificationEmailTemplateCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteCustomVerificationEmailTemplateCommand(output, context);
  };
  return DeleteCustomVerificationEmailTemplateCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DeleteIdentityCommand.js
var DeleteIdentityCommand = function(_super) {
  __extends(DeleteIdentityCommand2, _super);
  function DeleteIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DeleteIdentityCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteIdentityRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteIdentityResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteIdentityCommand(input, context);
  };
  DeleteIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteIdentityCommand(output, context);
  };
  return DeleteIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DeleteIdentityPolicyCommand.js
var DeleteIdentityPolicyCommand = function(_super) {
  __extends(DeleteIdentityPolicyCommand2, _super);
  function DeleteIdentityPolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteIdentityPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DeleteIdentityPolicyCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteIdentityPolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteIdentityPolicyResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteIdentityPolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteIdentityPolicyCommand(input, context);
  };
  DeleteIdentityPolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteIdentityPolicyCommand(output, context);
  };
  return DeleteIdentityPolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DeleteReceiptFilterCommand.js
var DeleteReceiptFilterCommand = function(_super) {
  __extends(DeleteReceiptFilterCommand2, _super);
  function DeleteReceiptFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteReceiptFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DeleteReceiptFilterCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteReceiptFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteReceiptFilterResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteReceiptFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteReceiptFilterCommand(input, context);
  };
  DeleteReceiptFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteReceiptFilterCommand(output, context);
  };
  return DeleteReceiptFilterCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DeleteReceiptRuleCommand.js
var DeleteReceiptRuleCommand = function(_super) {
  __extends(DeleteReceiptRuleCommand2, _super);
  function DeleteReceiptRuleCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteReceiptRuleCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DeleteReceiptRuleCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteReceiptRuleRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteReceiptRuleResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteReceiptRuleCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteReceiptRuleCommand(input, context);
  };
  DeleteReceiptRuleCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteReceiptRuleCommand(output, context);
  };
  return DeleteReceiptRuleCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DeleteReceiptRuleSetCommand.js
var DeleteReceiptRuleSetCommand = function(_super) {
  __extends(DeleteReceiptRuleSetCommand2, _super);
  function DeleteReceiptRuleSetCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteReceiptRuleSetCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DeleteReceiptRuleSetCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteReceiptRuleSetRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteReceiptRuleSetResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteReceiptRuleSetCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteReceiptRuleSetCommand(input, context);
  };
  DeleteReceiptRuleSetCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteReceiptRuleSetCommand(output, context);
  };
  return DeleteReceiptRuleSetCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DeleteTemplateCommand.js
var DeleteTemplateCommand = function(_super) {
  __extends(DeleteTemplateCommand2, _super);
  function DeleteTemplateCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteTemplateCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DeleteTemplateCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteTemplateRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteTemplateResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteTemplateCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteTemplateCommand(input, context);
  };
  DeleteTemplateCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteTemplateCommand(output, context);
  };
  return DeleteTemplateCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DeleteVerifiedEmailAddressCommand.js
var DeleteVerifiedEmailAddressCommand = function(_super) {
  __extends(DeleteVerifiedEmailAddressCommand2, _super);
  function DeleteVerifiedEmailAddressCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteVerifiedEmailAddressCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DeleteVerifiedEmailAddressCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteVerifiedEmailAddressRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteVerifiedEmailAddressCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteVerifiedEmailAddressCommand(input, context);
  };
  DeleteVerifiedEmailAddressCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteVerifiedEmailAddressCommand(output, context);
  };
  return DeleteVerifiedEmailAddressCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DescribeActiveReceiptRuleSetCommand.js
var DescribeActiveReceiptRuleSetCommand = function(_super) {
  __extends(DescribeActiveReceiptRuleSetCommand2, _super);
  function DescribeActiveReceiptRuleSetCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeActiveReceiptRuleSetCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DescribeActiveReceiptRuleSetCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeActiveReceiptRuleSetRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeActiveReceiptRuleSetResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeActiveReceiptRuleSetCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDescribeActiveReceiptRuleSetCommand(input, context);
  };
  DescribeActiveReceiptRuleSetCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDescribeActiveReceiptRuleSetCommand(output, context);
  };
  return DescribeActiveReceiptRuleSetCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DescribeConfigurationSetCommand.js
var DescribeConfigurationSetCommand = function(_super) {
  __extends(DescribeConfigurationSetCommand2, _super);
  function DescribeConfigurationSetCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeConfigurationSetCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DescribeConfigurationSetCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeConfigurationSetRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeConfigurationSetResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeConfigurationSetCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDescribeConfigurationSetCommand(input, context);
  };
  DescribeConfigurationSetCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDescribeConfigurationSetCommand(output, context);
  };
  return DescribeConfigurationSetCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DescribeReceiptRuleCommand.js
var DescribeReceiptRuleCommand = function(_super) {
  __extends(DescribeReceiptRuleCommand2, _super);
  function DescribeReceiptRuleCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeReceiptRuleCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DescribeReceiptRuleCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeReceiptRuleRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeReceiptRuleResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeReceiptRuleCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDescribeReceiptRuleCommand(input, context);
  };
  DescribeReceiptRuleCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDescribeReceiptRuleCommand(output, context);
  };
  return DescribeReceiptRuleCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/DescribeReceiptRuleSetCommand.js
var DescribeReceiptRuleSetCommand = function(_super) {
  __extends(DescribeReceiptRuleSetCommand2, _super);
  function DescribeReceiptRuleSetCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeReceiptRuleSetCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "DescribeReceiptRuleSetCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeReceiptRuleSetRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeReceiptRuleSetResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeReceiptRuleSetCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDescribeReceiptRuleSetCommand(input, context);
  };
  DescribeReceiptRuleSetCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDescribeReceiptRuleSetCommand(output, context);
  };
  return DescribeReceiptRuleSetCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/GetAccountSendingEnabledCommand.js
var GetAccountSendingEnabledCommand = function(_super) {
  __extends(GetAccountSendingEnabledCommand2, _super);
  function GetAccountSendingEnabledCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetAccountSendingEnabledCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "GetAccountSendingEnabledCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: function(input) {
        return input;
      },
      outputFilterSensitiveLog: GetAccountSendingEnabledResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetAccountSendingEnabledCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetAccountSendingEnabledCommand(input, context);
  };
  GetAccountSendingEnabledCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetAccountSendingEnabledCommand(output, context);
  };
  return GetAccountSendingEnabledCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/GetCustomVerificationEmailTemplateCommand.js
var GetCustomVerificationEmailTemplateCommand = function(_super) {
  __extends(GetCustomVerificationEmailTemplateCommand2, _super);
  function GetCustomVerificationEmailTemplateCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetCustomVerificationEmailTemplateCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "GetCustomVerificationEmailTemplateCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetCustomVerificationEmailTemplateRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetCustomVerificationEmailTemplateResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetCustomVerificationEmailTemplateCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetCustomVerificationEmailTemplateCommand(input, context);
  };
  GetCustomVerificationEmailTemplateCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetCustomVerificationEmailTemplateCommand(output, context);
  };
  return GetCustomVerificationEmailTemplateCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/GetIdentityDkimAttributesCommand.js
var GetIdentityDkimAttributesCommand = function(_super) {
  __extends(GetIdentityDkimAttributesCommand2, _super);
  function GetIdentityDkimAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetIdentityDkimAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "GetIdentityDkimAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetIdentityDkimAttributesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetIdentityDkimAttributesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetIdentityDkimAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetIdentityDkimAttributesCommand(input, context);
  };
  GetIdentityDkimAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetIdentityDkimAttributesCommand(output, context);
  };
  return GetIdentityDkimAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/GetIdentityMailFromDomainAttributesCommand.js
var GetIdentityMailFromDomainAttributesCommand = function(_super) {
  __extends(GetIdentityMailFromDomainAttributesCommand2, _super);
  function GetIdentityMailFromDomainAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetIdentityMailFromDomainAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "GetIdentityMailFromDomainAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetIdentityMailFromDomainAttributesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetIdentityMailFromDomainAttributesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetIdentityMailFromDomainAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetIdentityMailFromDomainAttributesCommand(input, context);
  };
  GetIdentityMailFromDomainAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetIdentityMailFromDomainAttributesCommand(output, context);
  };
  return GetIdentityMailFromDomainAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/GetIdentityNotificationAttributesCommand.js
var GetIdentityNotificationAttributesCommand = function(_super) {
  __extends(GetIdentityNotificationAttributesCommand2, _super);
  function GetIdentityNotificationAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetIdentityNotificationAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "GetIdentityNotificationAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetIdentityNotificationAttributesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetIdentityNotificationAttributesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetIdentityNotificationAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetIdentityNotificationAttributesCommand(input, context);
  };
  GetIdentityNotificationAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetIdentityNotificationAttributesCommand(output, context);
  };
  return GetIdentityNotificationAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/GetIdentityPoliciesCommand.js
var GetIdentityPoliciesCommand = function(_super) {
  __extends(GetIdentityPoliciesCommand2, _super);
  function GetIdentityPoliciesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetIdentityPoliciesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "GetIdentityPoliciesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetIdentityPoliciesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetIdentityPoliciesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetIdentityPoliciesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetIdentityPoliciesCommand(input, context);
  };
  GetIdentityPoliciesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetIdentityPoliciesCommand(output, context);
  };
  return GetIdentityPoliciesCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/GetIdentityVerificationAttributesCommand.js
var GetIdentityVerificationAttributesCommand = function(_super) {
  __extends(GetIdentityVerificationAttributesCommand2, _super);
  function GetIdentityVerificationAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetIdentityVerificationAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "GetIdentityVerificationAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetIdentityVerificationAttributesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetIdentityVerificationAttributesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetIdentityVerificationAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetIdentityVerificationAttributesCommand(input, context);
  };
  GetIdentityVerificationAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetIdentityVerificationAttributesCommand(output, context);
  };
  return GetIdentityVerificationAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/GetSendQuotaCommand.js
var GetSendQuotaCommand = function(_super) {
  __extends(GetSendQuotaCommand2, _super);
  function GetSendQuotaCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetSendQuotaCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "GetSendQuotaCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: function(input) {
        return input;
      },
      outputFilterSensitiveLog: GetSendQuotaResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetSendQuotaCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetSendQuotaCommand(input, context);
  };
  GetSendQuotaCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetSendQuotaCommand(output, context);
  };
  return GetSendQuotaCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/GetSendStatisticsCommand.js
var GetSendStatisticsCommand = function(_super) {
  __extends(GetSendStatisticsCommand2, _super);
  function GetSendStatisticsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetSendStatisticsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "GetSendStatisticsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: function(input) {
        return input;
      },
      outputFilterSensitiveLog: GetSendStatisticsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetSendStatisticsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetSendStatisticsCommand(input, context);
  };
  GetSendStatisticsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetSendStatisticsCommand(output, context);
  };
  return GetSendStatisticsCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/GetTemplateCommand.js
var GetTemplateCommand = function(_super) {
  __extends(GetTemplateCommand2, _super);
  function GetTemplateCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetTemplateCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "GetTemplateCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetTemplateRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetTemplateResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetTemplateCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetTemplateCommand(input, context);
  };
  GetTemplateCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetTemplateCommand(output, context);
  };
  return GetTemplateCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/ListConfigurationSetsCommand.js
var ListConfigurationSetsCommand = function(_super) {
  __extends(ListConfigurationSetsCommand2, _super);
  function ListConfigurationSetsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListConfigurationSetsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "ListConfigurationSetsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListConfigurationSetsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListConfigurationSetsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListConfigurationSetsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListConfigurationSetsCommand(input, context);
  };
  ListConfigurationSetsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListConfigurationSetsCommand(output, context);
  };
  return ListConfigurationSetsCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/ListCustomVerificationEmailTemplatesCommand.js
var ListCustomVerificationEmailTemplatesCommand = function(_super) {
  __extends(ListCustomVerificationEmailTemplatesCommand2, _super);
  function ListCustomVerificationEmailTemplatesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListCustomVerificationEmailTemplatesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "ListCustomVerificationEmailTemplatesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListCustomVerificationEmailTemplatesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListCustomVerificationEmailTemplatesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListCustomVerificationEmailTemplatesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListCustomVerificationEmailTemplatesCommand(input, context);
  };
  ListCustomVerificationEmailTemplatesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListCustomVerificationEmailTemplatesCommand(output, context);
  };
  return ListCustomVerificationEmailTemplatesCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/ListIdentitiesCommand.js
var ListIdentitiesCommand = function(_super) {
  __extends(ListIdentitiesCommand2, _super);
  function ListIdentitiesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListIdentitiesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "ListIdentitiesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListIdentitiesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListIdentitiesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListIdentitiesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListIdentitiesCommand(input, context);
  };
  ListIdentitiesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListIdentitiesCommand(output, context);
  };
  return ListIdentitiesCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/ListIdentityPoliciesCommand.js
var ListIdentityPoliciesCommand = function(_super) {
  __extends(ListIdentityPoliciesCommand2, _super);
  function ListIdentityPoliciesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListIdentityPoliciesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "ListIdentityPoliciesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListIdentityPoliciesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListIdentityPoliciesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListIdentityPoliciesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListIdentityPoliciesCommand(input, context);
  };
  ListIdentityPoliciesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListIdentityPoliciesCommand(output, context);
  };
  return ListIdentityPoliciesCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/ListReceiptFiltersCommand.js
var ListReceiptFiltersCommand = function(_super) {
  __extends(ListReceiptFiltersCommand2, _super);
  function ListReceiptFiltersCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListReceiptFiltersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "ListReceiptFiltersCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListReceiptFiltersRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListReceiptFiltersResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListReceiptFiltersCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListReceiptFiltersCommand(input, context);
  };
  ListReceiptFiltersCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListReceiptFiltersCommand(output, context);
  };
  return ListReceiptFiltersCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/ListReceiptRuleSetsCommand.js
var ListReceiptRuleSetsCommand = function(_super) {
  __extends(ListReceiptRuleSetsCommand2, _super);
  function ListReceiptRuleSetsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListReceiptRuleSetsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "ListReceiptRuleSetsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListReceiptRuleSetsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListReceiptRuleSetsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListReceiptRuleSetsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListReceiptRuleSetsCommand(input, context);
  };
  ListReceiptRuleSetsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListReceiptRuleSetsCommand(output, context);
  };
  return ListReceiptRuleSetsCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/ListTemplatesCommand.js
var ListTemplatesCommand = function(_super) {
  __extends(ListTemplatesCommand2, _super);
  function ListTemplatesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListTemplatesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "ListTemplatesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListTemplatesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListTemplatesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListTemplatesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListTemplatesCommand(input, context);
  };
  ListTemplatesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListTemplatesCommand(output, context);
  };
  return ListTemplatesCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/ListVerifiedEmailAddressesCommand.js
var ListVerifiedEmailAddressesCommand = function(_super) {
  __extends(ListVerifiedEmailAddressesCommand2, _super);
  function ListVerifiedEmailAddressesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListVerifiedEmailAddressesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "ListVerifiedEmailAddressesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: function(input) {
        return input;
      },
      outputFilterSensitiveLog: ListVerifiedEmailAddressesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListVerifiedEmailAddressesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListVerifiedEmailAddressesCommand(input, context);
  };
  ListVerifiedEmailAddressesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListVerifiedEmailAddressesCommand(output, context);
  };
  return ListVerifiedEmailAddressesCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/PutConfigurationSetDeliveryOptionsCommand.js
var PutConfigurationSetDeliveryOptionsCommand = function(_super) {
  __extends(PutConfigurationSetDeliveryOptionsCommand2, _super);
  function PutConfigurationSetDeliveryOptionsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutConfigurationSetDeliveryOptionsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "PutConfigurationSetDeliveryOptionsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutConfigurationSetDeliveryOptionsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutConfigurationSetDeliveryOptionsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutConfigurationSetDeliveryOptionsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryPutConfigurationSetDeliveryOptionsCommand(input, context);
  };
  PutConfigurationSetDeliveryOptionsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryPutConfigurationSetDeliveryOptionsCommand(output, context);
  };
  return PutConfigurationSetDeliveryOptionsCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/PutIdentityPolicyCommand.js
var PutIdentityPolicyCommand = function(_super) {
  __extends(PutIdentityPolicyCommand2, _super);
  function PutIdentityPolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutIdentityPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "PutIdentityPolicyCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutIdentityPolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutIdentityPolicyResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutIdentityPolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryPutIdentityPolicyCommand(input, context);
  };
  PutIdentityPolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryPutIdentityPolicyCommand(output, context);
  };
  return PutIdentityPolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/ReorderReceiptRuleSetCommand.js
var ReorderReceiptRuleSetCommand = function(_super) {
  __extends(ReorderReceiptRuleSetCommand2, _super);
  function ReorderReceiptRuleSetCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ReorderReceiptRuleSetCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "ReorderReceiptRuleSetCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ReorderReceiptRuleSetRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ReorderReceiptRuleSetResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ReorderReceiptRuleSetCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryReorderReceiptRuleSetCommand(input, context);
  };
  ReorderReceiptRuleSetCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryReorderReceiptRuleSetCommand(output, context);
  };
  return ReorderReceiptRuleSetCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/SendBounceCommand.js
var SendBounceCommand = function(_super) {
  __extends(SendBounceCommand2, _super);
  function SendBounceCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SendBounceCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "SendBounceCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SendBounceRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SendBounceResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SendBounceCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySendBounceCommand(input, context);
  };
  SendBounceCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySendBounceCommand(output, context);
  };
  return SendBounceCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/SendBulkTemplatedEmailCommand.js
var SendBulkTemplatedEmailCommand = function(_super) {
  __extends(SendBulkTemplatedEmailCommand2, _super);
  function SendBulkTemplatedEmailCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SendBulkTemplatedEmailCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "SendBulkTemplatedEmailCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SendBulkTemplatedEmailRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SendBulkTemplatedEmailResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SendBulkTemplatedEmailCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySendBulkTemplatedEmailCommand(input, context);
  };
  SendBulkTemplatedEmailCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySendBulkTemplatedEmailCommand(output, context);
  };
  return SendBulkTemplatedEmailCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/SendCustomVerificationEmailCommand.js
var SendCustomVerificationEmailCommand = function(_super) {
  __extends(SendCustomVerificationEmailCommand2, _super);
  function SendCustomVerificationEmailCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SendCustomVerificationEmailCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "SendCustomVerificationEmailCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SendCustomVerificationEmailRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SendCustomVerificationEmailResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SendCustomVerificationEmailCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySendCustomVerificationEmailCommand(input, context);
  };
  SendCustomVerificationEmailCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySendCustomVerificationEmailCommand(output, context);
  };
  return SendCustomVerificationEmailCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/SendEmailCommand.js
var SendEmailCommand = function(_super) {
  __extends(SendEmailCommand2, _super);
  function SendEmailCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SendEmailCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "SendEmailCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SendEmailRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SendEmailResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SendEmailCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySendEmailCommand(input, context);
  };
  SendEmailCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySendEmailCommand(output, context);
  };
  return SendEmailCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/SendRawEmailCommand.js
var SendRawEmailCommand = function(_super) {
  __extends(SendRawEmailCommand2, _super);
  function SendRawEmailCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SendRawEmailCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "SendRawEmailCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SendRawEmailRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SendRawEmailResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SendRawEmailCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySendRawEmailCommand(input, context);
  };
  SendRawEmailCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySendRawEmailCommand(output, context);
  };
  return SendRawEmailCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/SendTemplatedEmailCommand.js
var SendTemplatedEmailCommand = function(_super) {
  __extends(SendTemplatedEmailCommand2, _super);
  function SendTemplatedEmailCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SendTemplatedEmailCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "SendTemplatedEmailCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SendTemplatedEmailRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SendTemplatedEmailResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SendTemplatedEmailCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySendTemplatedEmailCommand(input, context);
  };
  SendTemplatedEmailCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySendTemplatedEmailCommand(output, context);
  };
  return SendTemplatedEmailCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/SetActiveReceiptRuleSetCommand.js
var SetActiveReceiptRuleSetCommand = function(_super) {
  __extends(SetActiveReceiptRuleSetCommand2, _super);
  function SetActiveReceiptRuleSetCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetActiveReceiptRuleSetCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "SetActiveReceiptRuleSetCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetActiveReceiptRuleSetRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SetActiveReceiptRuleSetResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetActiveReceiptRuleSetCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySetActiveReceiptRuleSetCommand(input, context);
  };
  SetActiveReceiptRuleSetCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySetActiveReceiptRuleSetCommand(output, context);
  };
  return SetActiveReceiptRuleSetCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/SetIdentityDkimEnabledCommand.js
var SetIdentityDkimEnabledCommand = function(_super) {
  __extends(SetIdentityDkimEnabledCommand2, _super);
  function SetIdentityDkimEnabledCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetIdentityDkimEnabledCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "SetIdentityDkimEnabledCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetIdentityDkimEnabledRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SetIdentityDkimEnabledResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetIdentityDkimEnabledCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySetIdentityDkimEnabledCommand(input, context);
  };
  SetIdentityDkimEnabledCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySetIdentityDkimEnabledCommand(output, context);
  };
  return SetIdentityDkimEnabledCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/SetIdentityFeedbackForwardingEnabledCommand.js
var SetIdentityFeedbackForwardingEnabledCommand = function(_super) {
  __extends(SetIdentityFeedbackForwardingEnabledCommand2, _super);
  function SetIdentityFeedbackForwardingEnabledCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetIdentityFeedbackForwardingEnabledCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "SetIdentityFeedbackForwardingEnabledCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetIdentityFeedbackForwardingEnabledRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SetIdentityFeedbackForwardingEnabledResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetIdentityFeedbackForwardingEnabledCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySetIdentityFeedbackForwardingEnabledCommand(input, context);
  };
  SetIdentityFeedbackForwardingEnabledCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySetIdentityFeedbackForwardingEnabledCommand(output, context);
  };
  return SetIdentityFeedbackForwardingEnabledCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/SetIdentityHeadersInNotificationsEnabledCommand.js
var SetIdentityHeadersInNotificationsEnabledCommand = function(_super) {
  __extends(SetIdentityHeadersInNotificationsEnabledCommand2, _super);
  function SetIdentityHeadersInNotificationsEnabledCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetIdentityHeadersInNotificationsEnabledCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "SetIdentityHeadersInNotificationsEnabledCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetIdentityHeadersInNotificationsEnabledRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SetIdentityHeadersInNotificationsEnabledResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetIdentityHeadersInNotificationsEnabledCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySetIdentityHeadersInNotificationsEnabledCommand(input, context);
  };
  SetIdentityHeadersInNotificationsEnabledCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySetIdentityHeadersInNotificationsEnabledCommand(output, context);
  };
  return SetIdentityHeadersInNotificationsEnabledCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/SetIdentityMailFromDomainCommand.js
var SetIdentityMailFromDomainCommand = function(_super) {
  __extends(SetIdentityMailFromDomainCommand2, _super);
  function SetIdentityMailFromDomainCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetIdentityMailFromDomainCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "SetIdentityMailFromDomainCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetIdentityMailFromDomainRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SetIdentityMailFromDomainResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetIdentityMailFromDomainCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySetIdentityMailFromDomainCommand(input, context);
  };
  SetIdentityMailFromDomainCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySetIdentityMailFromDomainCommand(output, context);
  };
  return SetIdentityMailFromDomainCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/SetIdentityNotificationTopicCommand.js
var SetIdentityNotificationTopicCommand = function(_super) {
  __extends(SetIdentityNotificationTopicCommand2, _super);
  function SetIdentityNotificationTopicCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetIdentityNotificationTopicCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "SetIdentityNotificationTopicCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetIdentityNotificationTopicRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SetIdentityNotificationTopicResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetIdentityNotificationTopicCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySetIdentityNotificationTopicCommand(input, context);
  };
  SetIdentityNotificationTopicCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySetIdentityNotificationTopicCommand(output, context);
  };
  return SetIdentityNotificationTopicCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/SetReceiptRulePositionCommand.js
var SetReceiptRulePositionCommand = function(_super) {
  __extends(SetReceiptRulePositionCommand2, _super);
  function SetReceiptRulePositionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetReceiptRulePositionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "SetReceiptRulePositionCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetReceiptRulePositionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SetReceiptRulePositionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetReceiptRulePositionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySetReceiptRulePositionCommand(input, context);
  };
  SetReceiptRulePositionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySetReceiptRulePositionCommand(output, context);
  };
  return SetReceiptRulePositionCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/TestRenderTemplateCommand.js
var TestRenderTemplateCommand = function(_super) {
  __extends(TestRenderTemplateCommand2, _super);
  function TestRenderTemplateCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TestRenderTemplateCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "TestRenderTemplateCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: TestRenderTemplateRequest.filterSensitiveLog,
      outputFilterSensitiveLog: TestRenderTemplateResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TestRenderTemplateCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryTestRenderTemplateCommand(input, context);
  };
  TestRenderTemplateCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryTestRenderTemplateCommand(output, context);
  };
  return TestRenderTemplateCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/UpdateAccountSendingEnabledCommand.js
var UpdateAccountSendingEnabledCommand = function(_super) {
  __extends(UpdateAccountSendingEnabledCommand2, _super);
  function UpdateAccountSendingEnabledCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateAccountSendingEnabledCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "UpdateAccountSendingEnabledCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateAccountSendingEnabledRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateAccountSendingEnabledCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryUpdateAccountSendingEnabledCommand(input, context);
  };
  UpdateAccountSendingEnabledCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryUpdateAccountSendingEnabledCommand(output, context);
  };
  return UpdateAccountSendingEnabledCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/UpdateConfigurationSetEventDestinationCommand.js
var UpdateConfigurationSetEventDestinationCommand = function(_super) {
  __extends(UpdateConfigurationSetEventDestinationCommand2, _super);
  function UpdateConfigurationSetEventDestinationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateConfigurationSetEventDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "UpdateConfigurationSetEventDestinationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateConfigurationSetEventDestinationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateConfigurationSetEventDestinationResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateConfigurationSetEventDestinationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryUpdateConfigurationSetEventDestinationCommand(input, context);
  };
  UpdateConfigurationSetEventDestinationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryUpdateConfigurationSetEventDestinationCommand(output, context);
  };
  return UpdateConfigurationSetEventDestinationCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/UpdateConfigurationSetReputationMetricsEnabledCommand.js
var UpdateConfigurationSetReputationMetricsEnabledCommand = function(_super) {
  __extends(UpdateConfigurationSetReputationMetricsEnabledCommand2, _super);
  function UpdateConfigurationSetReputationMetricsEnabledCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateConfigurationSetReputationMetricsEnabledCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "UpdateConfigurationSetReputationMetricsEnabledCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateConfigurationSetReputationMetricsEnabledRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateConfigurationSetReputationMetricsEnabledCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand(input, context);
  };
  UpdateConfigurationSetReputationMetricsEnabledCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand(output, context);
  };
  return UpdateConfigurationSetReputationMetricsEnabledCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/UpdateConfigurationSetSendingEnabledCommand.js
var UpdateConfigurationSetSendingEnabledCommand = function(_super) {
  __extends(UpdateConfigurationSetSendingEnabledCommand2, _super);
  function UpdateConfigurationSetSendingEnabledCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateConfigurationSetSendingEnabledCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "UpdateConfigurationSetSendingEnabledCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateConfigurationSetSendingEnabledRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateConfigurationSetSendingEnabledCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryUpdateConfigurationSetSendingEnabledCommand(input, context);
  };
  UpdateConfigurationSetSendingEnabledCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryUpdateConfigurationSetSendingEnabledCommand(output, context);
  };
  return UpdateConfigurationSetSendingEnabledCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/UpdateConfigurationSetTrackingOptionsCommand.js
var UpdateConfigurationSetTrackingOptionsCommand = function(_super) {
  __extends(UpdateConfigurationSetTrackingOptionsCommand2, _super);
  function UpdateConfigurationSetTrackingOptionsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateConfigurationSetTrackingOptionsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "UpdateConfigurationSetTrackingOptionsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateConfigurationSetTrackingOptionsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateConfigurationSetTrackingOptionsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateConfigurationSetTrackingOptionsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryUpdateConfigurationSetTrackingOptionsCommand(input, context);
  };
  UpdateConfigurationSetTrackingOptionsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryUpdateConfigurationSetTrackingOptionsCommand(output, context);
  };
  return UpdateConfigurationSetTrackingOptionsCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/UpdateCustomVerificationEmailTemplateCommand.js
var UpdateCustomVerificationEmailTemplateCommand = function(_super) {
  __extends(UpdateCustomVerificationEmailTemplateCommand2, _super);
  function UpdateCustomVerificationEmailTemplateCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateCustomVerificationEmailTemplateCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "UpdateCustomVerificationEmailTemplateCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateCustomVerificationEmailTemplateRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateCustomVerificationEmailTemplateCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryUpdateCustomVerificationEmailTemplateCommand(input, context);
  };
  UpdateCustomVerificationEmailTemplateCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryUpdateCustomVerificationEmailTemplateCommand(output, context);
  };
  return UpdateCustomVerificationEmailTemplateCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/UpdateReceiptRuleCommand.js
var UpdateReceiptRuleCommand = function(_super) {
  __extends(UpdateReceiptRuleCommand2, _super);
  function UpdateReceiptRuleCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateReceiptRuleCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "UpdateReceiptRuleCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateReceiptRuleRequest.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateReceiptRuleResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateReceiptRuleCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryUpdateReceiptRuleCommand(input, context);
  };
  UpdateReceiptRuleCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryUpdateReceiptRuleCommand(output, context);
  };
  return UpdateReceiptRuleCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/UpdateTemplateCommand.js
var UpdateTemplateCommand = function(_super) {
  __extends(UpdateTemplateCommand2, _super);
  function UpdateTemplateCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateTemplateCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "UpdateTemplateCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateTemplateRequest.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateTemplateResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateTemplateCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryUpdateTemplateCommand(input, context);
  };
  UpdateTemplateCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryUpdateTemplateCommand(output, context);
  };
  return UpdateTemplateCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/VerifyDomainDkimCommand.js
var VerifyDomainDkimCommand = function(_super) {
  __extends(VerifyDomainDkimCommand2, _super);
  function VerifyDomainDkimCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  VerifyDomainDkimCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "VerifyDomainDkimCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: VerifyDomainDkimRequest.filterSensitiveLog,
      outputFilterSensitiveLog: VerifyDomainDkimResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  VerifyDomainDkimCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryVerifyDomainDkimCommand(input, context);
  };
  VerifyDomainDkimCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryVerifyDomainDkimCommand(output, context);
  };
  return VerifyDomainDkimCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/VerifyDomainIdentityCommand.js
var VerifyDomainIdentityCommand = function(_super) {
  __extends(VerifyDomainIdentityCommand2, _super);
  function VerifyDomainIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  VerifyDomainIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "VerifyDomainIdentityCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: VerifyDomainIdentityRequest.filterSensitiveLog,
      outputFilterSensitiveLog: VerifyDomainIdentityResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  VerifyDomainIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryVerifyDomainIdentityCommand(input, context);
  };
  VerifyDomainIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryVerifyDomainIdentityCommand(output, context);
  };
  return VerifyDomainIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/VerifyEmailAddressCommand.js
var VerifyEmailAddressCommand = function(_super) {
  __extends(VerifyEmailAddressCommand2, _super);
  function VerifyEmailAddressCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  VerifyEmailAddressCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "VerifyEmailAddressCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: VerifyEmailAddressRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  VerifyEmailAddressCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryVerifyEmailAddressCommand(input, context);
  };
  VerifyEmailAddressCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryVerifyEmailAddressCommand(output, context);
  };
  return VerifyEmailAddressCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/dist-es/commands/VerifyEmailIdentityCommand.js
var VerifyEmailIdentityCommand = function(_super) {
  __extends(VerifyEmailIdentityCommand2, _super);
  function VerifyEmailIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  VerifyEmailIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SESClient";
    var commandName = "VerifyEmailIdentityCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: VerifyEmailIdentityRequest.filterSensitiveLog,
      outputFilterSensitiveLog: VerifyEmailIdentityResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  VerifyEmailIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryVerifyEmailIdentityCommand(input, context);
  };
  VerifyEmailIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryVerifyEmailIdentityCommand(output, context);
  };
  return VerifyEmailIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-ses/package.json
var name4 = "@aws-sdk/client-ses";
var description4 = "AWS SDK for JavaScript Ses Client for Node.js, Browser and React Native";
var version4 = "3.42.0";
var scripts4 = {
  build: "yarn build:cjs && yarn build:es && yarn build:types",
  "build:cjs": "tsc -p tsconfig.json",
  "build:docs": "yarn clean:docs && typedoc ./",
  "build:es": "tsc -p tsconfig.es.json",
  "build:types": "tsc -p tsconfig.types.json",
  clean: "yarn clean:dist && yarn clean:docs",
  "clean:dist": "rimraf ./dist",
  "clean:docs": "rimraf ./docs",
  "downlevel-dts": "downlevel-dts dist-types dist-types/ts3.4",
  test: "exit 0"
};
var main4 = "./dist-cjs/index.js";
var types4 = "./dist-types/index.d.ts";
var module4 = "./dist-es/index.js";
var sideEffects4 = false;
var dependencies4 = {
  "@aws-crypto/sha256-browser": "2.0.0",
  "@aws-crypto/sha256-js": "2.0.0",
  "@aws-sdk/client-sts": "3.42.0",
  "@aws-sdk/config-resolver": "3.40.0",
  "@aws-sdk/credential-provider-node": "3.41.0",
  "@aws-sdk/fetch-http-handler": "3.40.0",
  "@aws-sdk/hash-node": "3.40.0",
  "@aws-sdk/invalid-dependency": "3.40.0",
  "@aws-sdk/middleware-content-length": "3.40.0",
  "@aws-sdk/middleware-host-header": "3.40.0",
  "@aws-sdk/middleware-logger": "3.40.0",
  "@aws-sdk/middleware-retry": "3.40.0",
  "@aws-sdk/middleware-serde": "3.40.0",
  "@aws-sdk/middleware-signing": "3.40.0",
  "@aws-sdk/middleware-stack": "3.40.0",
  "@aws-sdk/middleware-user-agent": "3.40.0",
  "@aws-sdk/node-config-provider": "3.40.0",
  "@aws-sdk/node-http-handler": "3.40.0",
  "@aws-sdk/protocol-http": "3.40.0",
  "@aws-sdk/smithy-client": "3.41.0",
  "@aws-sdk/types": "3.40.0",
  "@aws-sdk/url-parser": "3.40.0",
  "@aws-sdk/util-base64-browser": "3.37.0",
  "@aws-sdk/util-base64-node": "3.37.0",
  "@aws-sdk/util-body-length-browser": "3.37.0",
  "@aws-sdk/util-body-length-node": "3.37.0",
  "@aws-sdk/util-user-agent-browser": "3.40.0",
  "@aws-sdk/util-user-agent-node": "3.40.0",
  "@aws-sdk/util-utf8-browser": "3.37.0",
  "@aws-sdk/util-utf8-node": "3.37.0",
  "@aws-sdk/util-waiter": "3.40.0",
  entities: "2.2.0",
  "fast-xml-parser": "3.19.0",
  tslib: "^2.3.0"
};
var devDependencies4 = {
  "@aws-sdk/service-client-documentation-generator": "3.38.0",
  "@types/node": "^12.7.5",
  "downlevel-dts": "0.7.0",
  jest: "^26.1.0",
  rimraf: "^3.0.0",
  "ts-jest": "^26.4.1",
  typedoc: "^0.19.2",
  typescript: "~4.3.5"
};
var engines4 = {
  node: ">=10.0.0"
};
var typesVersions4 = {
  "<4.0": {
    "dist-types/*": [
      "dist-types/ts3.4/*"
    ]
  }
};
var files4 = [
  "dist-*"
];
var author4 = {
  name: "AWS SDK for JavaScript Team",
  url: "https://aws.amazon.com/javascript/"
};
var license4 = "Apache-2.0";
var browser4 = {
  "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
};
var react_native4 = {
  "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
};
var homepage4 = "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-ses";
var repository4 = {
  type: "git",
  url: "https://github.com/aws/aws-sdk-js-v3.git",
  directory: "clients/client-ses"
};
var package_default4 = {
  name: name4,
  description: description4,
  version: version4,
  scripts: scripts4,
  main: main4,
  types: types4,
  module: module4,
  sideEffects: sideEffects4,
  dependencies: dependencies4,
  devDependencies: devDependencies4,
  engines: engines4,
  typesVersions: typesVersions4,
  files: files4,
  author: author4,
  license: license4,
  browser: browser4,
  "react-native": react_native4,
  homepage: homepage4,
  repository: repository4
};

// node_modules/@aws-sdk/client-ses/dist-es/runtimeConfig.browser.js
var import_sha256_browser4 = __toModule(require_build5());
var import_util_utf8_browser4 = __toModule(require_dist_cjs());

// node_modules/@aws-sdk/client-ses/dist-es/endpoints.js
var regionHash4 = {
  "us-gov-west-1": {
    variants: [
      {
        hostname: "email.us-gov-west-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "email-fips.us-gov-west-1.amazonaws.com",
        tags: ["fips"]
      }
    ]
  }
};
var partitionHash4 = {
  aws: {
    regions: [
      "af-south-1",
      "ap-east-1",
      "ap-northeast-1",
      "ap-northeast-2",
      "ap-northeast-3",
      "ap-south-1",
      "ap-southeast-1",
      "ap-southeast-2",
      "ca-central-1",
      "eu-central-1",
      "eu-north-1",
      "eu-south-1",
      "eu-west-1",
      "eu-west-2",
      "eu-west-3",
      "me-south-1",
      "sa-east-1",
      "us-east-1",
      "us-east-2",
      "us-west-1",
      "us-west-2"
    ],
    regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "email.{region}.amazonaws.com",
        tags: []
      },
      {
        hostname: "email-fips.{region}.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "email-fips.{region}.api.aws",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "email.{region}.api.aws",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-cn": {
    regions: ["cn-north-1", "cn-northwest-1"],
    regionRegex: "^cn\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "email.{region}.amazonaws.com.cn",
        tags: []
      },
      {
        hostname: "email-fips.{region}.amazonaws.com.cn",
        tags: ["fips"]
      },
      {
        hostname: "email-fips.{region}.api.amazonwebservices.com.cn",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "email.{region}.api.amazonwebservices.com.cn",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-iso": {
    regions: ["us-iso-east-1", "us-iso-west-1"],
    regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "email.{region}.c2s.ic.gov",
        tags: []
      },
      {
        hostname: "email-fips.{region}.c2s.ic.gov",
        tags: ["fips"]
      }
    ]
  },
  "aws-iso-b": {
    regions: ["us-isob-east-1"],
    regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "email.{region}.sc2s.sgov.gov",
        tags: []
      },
      {
        hostname: "email-fips.{region}.sc2s.sgov.gov",
        tags: ["fips"]
      }
    ]
  },
  "aws-us-gov": {
    regions: ["fips-us-gov-west-1", "us-gov-east-1", "us-gov-west-1"],
    regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "email.{region}.amazonaws.com",
        tags: []
      },
      {
        hostname: "email-fips.{region}.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "email-fips.{region}.api.aws",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "email.{region}.api.aws",
        tags: ["dualstack"]
      }
    ]
  }
};
var defaultRegionInfoProvider4 = function(region, options) {
  return __awaiter(void 0, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, getRegionInfo(region, __assign(__assign({}, options), { signingService: "ses", regionHash: regionHash4, partitionHash: partitionHash4 }))];
    });
  });
};

// node_modules/@aws-sdk/client-ses/dist-es/runtimeConfig.shared.js
var getRuntimeConfig7 = function(config) {
  var _a, _b, _c, _d, _e;
  return {
    apiVersion: "2010-12-01",
    disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
    logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
    regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : defaultRegionInfoProvider4,
    serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "SES",
    urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : parseUrl
  };
};

// node_modules/@aws-sdk/client-ses/dist-es/runtimeConfig.browser.js
var getRuntimeConfig8 = function(config) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
  var clientSharedValues = getRuntimeConfig7(config);
  return __assign(__assign(__assign({}, clientSharedValues), config), { runtime: "browser", base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : fromBase64, base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : toBase64, bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : calculateBodyLength, credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : function(_) {
    return function() {
      return Promise.reject(new Error("Credential is missing"));
    };
  }, defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default4.version }), maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : DEFAULT_MAX_ATTEMPTS, region: (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0 ? _g : invalidProvider("Region is missing"), requestHandler: (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0 ? _h : new FetchHttpHandler(), retryMode: (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0 ? _j : function() {
    return Promise.resolve(DEFAULT_RETRY_MODE);
  }, sha256: (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0 ? _k : import_sha256_browser4.Sha256, streamCollector: (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0 ? _l : streamCollector, useDualstackEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0 ? _m : function() {
    return Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT);
  }, useFipsEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0 ? _o : function() {
    return Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT);
  }, utf8Decoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0 ? _p : import_util_utf8_browser4.fromUtf8, utf8Encoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0 ? _q : import_util_utf8_browser4.toUtf8 });
};

// node_modules/@aws-sdk/client-ses/dist-es/SESClient.js
var SESClient = function(_super) {
  __extends(SESClient2, _super);
  function SESClient2(configuration) {
    var _this = this;
    var _config_0 = getRuntimeConfig8(configuration);
    var _config_1 = resolveRegionConfig(_config_0);
    var _config_2 = resolveEndpointsConfig(_config_1);
    var _config_3 = resolveRetryConfig(_config_2);
    var _config_4 = resolveHostHeaderConfig(_config_3);
    var _config_5 = resolveAwsAuthConfig(_config_4);
    var _config_6 = resolveUserAgentConfig(_config_5);
    _this = _super.call(this, _config_6) || this;
    _this.config = _config_6;
    _this.middlewareStack.use(getRetryPlugin(_this.config));
    _this.middlewareStack.use(getContentLengthPlugin(_this.config));
    _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
    _this.middlewareStack.use(getLoggerPlugin(_this.config));
    _this.middlewareStack.use(getAwsAuthPlugin(_this.config));
    _this.middlewareStack.use(getUserAgentPlugin(_this.config));
    return _this;
  }
  SESClient2.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
  };
  return SESClient2;
}(Client);

// node_modules/@aws-sdk/client-ses/dist-es/SES.js
var SES = function(_super) {
  __extends(SES2, _super);
  function SES2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SES2.prototype.cloneReceiptRuleSet = function(args, optionsOrCb, cb) {
    var command = new CloneReceiptRuleSetCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.createConfigurationSet = function(args, optionsOrCb, cb) {
    var command = new CreateConfigurationSetCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.createConfigurationSetEventDestination = function(args, optionsOrCb, cb) {
    var command = new CreateConfigurationSetEventDestinationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.createConfigurationSetTrackingOptions = function(args, optionsOrCb, cb) {
    var command = new CreateConfigurationSetTrackingOptionsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.createCustomVerificationEmailTemplate = function(args, optionsOrCb, cb) {
    var command = new CreateCustomVerificationEmailTemplateCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.createReceiptFilter = function(args, optionsOrCb, cb) {
    var command = new CreateReceiptFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.createReceiptRule = function(args, optionsOrCb, cb) {
    var command = new CreateReceiptRuleCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.createReceiptRuleSet = function(args, optionsOrCb, cb) {
    var command = new CreateReceiptRuleSetCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.createTemplate = function(args, optionsOrCb, cb) {
    var command = new CreateTemplateCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.deleteConfigurationSet = function(args, optionsOrCb, cb) {
    var command = new DeleteConfigurationSetCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.deleteConfigurationSetEventDestination = function(args, optionsOrCb, cb) {
    var command = new DeleteConfigurationSetEventDestinationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.deleteConfigurationSetTrackingOptions = function(args, optionsOrCb, cb) {
    var command = new DeleteConfigurationSetTrackingOptionsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.deleteCustomVerificationEmailTemplate = function(args, optionsOrCb, cb) {
    var command = new DeleteCustomVerificationEmailTemplateCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.deleteIdentity = function(args, optionsOrCb, cb) {
    var command = new DeleteIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.deleteIdentityPolicy = function(args, optionsOrCb, cb) {
    var command = new DeleteIdentityPolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.deleteReceiptFilter = function(args, optionsOrCb, cb) {
    var command = new DeleteReceiptFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.deleteReceiptRule = function(args, optionsOrCb, cb) {
    var command = new DeleteReceiptRuleCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.deleteReceiptRuleSet = function(args, optionsOrCb, cb) {
    var command = new DeleteReceiptRuleSetCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.deleteTemplate = function(args, optionsOrCb, cb) {
    var command = new DeleteTemplateCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.deleteVerifiedEmailAddress = function(args, optionsOrCb, cb) {
    var command = new DeleteVerifiedEmailAddressCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.describeActiveReceiptRuleSet = function(args, optionsOrCb, cb) {
    var command = new DescribeActiveReceiptRuleSetCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.describeConfigurationSet = function(args, optionsOrCb, cb) {
    var command = new DescribeConfigurationSetCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.describeReceiptRule = function(args, optionsOrCb, cb) {
    var command = new DescribeReceiptRuleCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.describeReceiptRuleSet = function(args, optionsOrCb, cb) {
    var command = new DescribeReceiptRuleSetCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.getAccountSendingEnabled = function(args, optionsOrCb, cb) {
    var command = new GetAccountSendingEnabledCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.getCustomVerificationEmailTemplate = function(args, optionsOrCb, cb) {
    var command = new GetCustomVerificationEmailTemplateCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.getIdentityDkimAttributes = function(args, optionsOrCb, cb) {
    var command = new GetIdentityDkimAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.getIdentityMailFromDomainAttributes = function(args, optionsOrCb, cb) {
    var command = new GetIdentityMailFromDomainAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.getIdentityNotificationAttributes = function(args, optionsOrCb, cb) {
    var command = new GetIdentityNotificationAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.getIdentityPolicies = function(args, optionsOrCb, cb) {
    var command = new GetIdentityPoliciesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.getIdentityVerificationAttributes = function(args, optionsOrCb, cb) {
    var command = new GetIdentityVerificationAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.getSendQuota = function(args, optionsOrCb, cb) {
    var command = new GetSendQuotaCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.getSendStatistics = function(args, optionsOrCb, cb) {
    var command = new GetSendStatisticsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.getTemplate = function(args, optionsOrCb, cb) {
    var command = new GetTemplateCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.listConfigurationSets = function(args, optionsOrCb, cb) {
    var command = new ListConfigurationSetsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.listCustomVerificationEmailTemplates = function(args, optionsOrCb, cb) {
    var command = new ListCustomVerificationEmailTemplatesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.listIdentities = function(args, optionsOrCb, cb) {
    var command = new ListIdentitiesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.listIdentityPolicies = function(args, optionsOrCb, cb) {
    var command = new ListIdentityPoliciesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.listReceiptFilters = function(args, optionsOrCb, cb) {
    var command = new ListReceiptFiltersCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.listReceiptRuleSets = function(args, optionsOrCb, cb) {
    var command = new ListReceiptRuleSetsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.listTemplates = function(args, optionsOrCb, cb) {
    var command = new ListTemplatesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.listVerifiedEmailAddresses = function(args, optionsOrCb, cb) {
    var command = new ListVerifiedEmailAddressesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.putConfigurationSetDeliveryOptions = function(args, optionsOrCb, cb) {
    var command = new PutConfigurationSetDeliveryOptionsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.putIdentityPolicy = function(args, optionsOrCb, cb) {
    var command = new PutIdentityPolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.reorderReceiptRuleSet = function(args, optionsOrCb, cb) {
    var command = new ReorderReceiptRuleSetCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.sendBounce = function(args, optionsOrCb, cb) {
    var command = new SendBounceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.sendBulkTemplatedEmail = function(args, optionsOrCb, cb) {
    var command = new SendBulkTemplatedEmailCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.sendCustomVerificationEmail = function(args, optionsOrCb, cb) {
    var command = new SendCustomVerificationEmailCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.sendEmail = function(args, optionsOrCb, cb) {
    var command = new SendEmailCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.sendRawEmail = function(args, optionsOrCb, cb) {
    var command = new SendRawEmailCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.sendTemplatedEmail = function(args, optionsOrCb, cb) {
    var command = new SendTemplatedEmailCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.setActiveReceiptRuleSet = function(args, optionsOrCb, cb) {
    var command = new SetActiveReceiptRuleSetCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.setIdentityDkimEnabled = function(args, optionsOrCb, cb) {
    var command = new SetIdentityDkimEnabledCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.setIdentityFeedbackForwardingEnabled = function(args, optionsOrCb, cb) {
    var command = new SetIdentityFeedbackForwardingEnabledCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.setIdentityHeadersInNotificationsEnabled = function(args, optionsOrCb, cb) {
    var command = new SetIdentityHeadersInNotificationsEnabledCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.setIdentityMailFromDomain = function(args, optionsOrCb, cb) {
    var command = new SetIdentityMailFromDomainCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.setIdentityNotificationTopic = function(args, optionsOrCb, cb) {
    var command = new SetIdentityNotificationTopicCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.setReceiptRulePosition = function(args, optionsOrCb, cb) {
    var command = new SetReceiptRulePositionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.testRenderTemplate = function(args, optionsOrCb, cb) {
    var command = new TestRenderTemplateCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.updateAccountSendingEnabled = function(args, optionsOrCb, cb) {
    var command = new UpdateAccountSendingEnabledCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.updateConfigurationSetEventDestination = function(args, optionsOrCb, cb) {
    var command = new UpdateConfigurationSetEventDestinationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.updateConfigurationSetReputationMetricsEnabled = function(args, optionsOrCb, cb) {
    var command = new UpdateConfigurationSetReputationMetricsEnabledCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.updateConfigurationSetSendingEnabled = function(args, optionsOrCb, cb) {
    var command = new UpdateConfigurationSetSendingEnabledCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.updateConfigurationSetTrackingOptions = function(args, optionsOrCb, cb) {
    var command = new UpdateConfigurationSetTrackingOptionsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.updateCustomVerificationEmailTemplate = function(args, optionsOrCb, cb) {
    var command = new UpdateCustomVerificationEmailTemplateCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.updateReceiptRule = function(args, optionsOrCb, cb) {
    var command = new UpdateReceiptRuleCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.updateTemplate = function(args, optionsOrCb, cb) {
    var command = new UpdateTemplateCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.verifyDomainDkim = function(args, optionsOrCb, cb) {
    var command = new VerifyDomainDkimCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.verifyDomainIdentity = function(args, optionsOrCb, cb) {
    var command = new VerifyDomainIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.verifyEmailAddress = function(args, optionsOrCb, cb) {
    var command = new VerifyEmailAddressCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SES2.prototype.verifyEmailIdentity = function(args, optionsOrCb, cb) {
    var command = new VerifyEmailIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  return SES2;
}(SESClient);

// node_modules/@aws-sdk/client-sns/dist-es/models/models_0.js
var AddPermissionInput;
(function(AddPermissionInput2) {
  AddPermissionInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AddPermissionInput || (AddPermissionInput = {}));
var AuthorizationErrorException;
(function(AuthorizationErrorException2) {
  AuthorizationErrorException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AuthorizationErrorException || (AuthorizationErrorException = {}));
var InternalErrorException;
(function(InternalErrorException2) {
  InternalErrorException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InternalErrorException || (InternalErrorException = {}));
var InvalidParameterException;
(function(InvalidParameterException2) {
  InvalidParameterException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidParameterException || (InvalidParameterException = {}));
var NotFoundException;
(function(NotFoundException2) {
  NotFoundException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(NotFoundException || (NotFoundException = {}));
var CheckIfPhoneNumberIsOptedOutInput;
(function(CheckIfPhoneNumberIsOptedOutInput2) {
  CheckIfPhoneNumberIsOptedOutInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CheckIfPhoneNumberIsOptedOutInput || (CheckIfPhoneNumberIsOptedOutInput = {}));
var CheckIfPhoneNumberIsOptedOutResponse;
(function(CheckIfPhoneNumberIsOptedOutResponse2) {
  CheckIfPhoneNumberIsOptedOutResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CheckIfPhoneNumberIsOptedOutResponse || (CheckIfPhoneNumberIsOptedOutResponse = {}));
var ThrottledException;
(function(ThrottledException2) {
  ThrottledException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ThrottledException || (ThrottledException = {}));
var ConfirmSubscriptionInput;
(function(ConfirmSubscriptionInput2) {
  ConfirmSubscriptionInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ConfirmSubscriptionInput || (ConfirmSubscriptionInput = {}));
var ConfirmSubscriptionResponse;
(function(ConfirmSubscriptionResponse2) {
  ConfirmSubscriptionResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ConfirmSubscriptionResponse || (ConfirmSubscriptionResponse = {}));
var FilterPolicyLimitExceededException;
(function(FilterPolicyLimitExceededException2) {
  FilterPolicyLimitExceededException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(FilterPolicyLimitExceededException || (FilterPolicyLimitExceededException = {}));
var SubscriptionLimitExceededException;
(function(SubscriptionLimitExceededException2) {
  SubscriptionLimitExceededException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SubscriptionLimitExceededException || (SubscriptionLimitExceededException = {}));
var CreatePlatformApplicationInput;
(function(CreatePlatformApplicationInput2) {
  CreatePlatformApplicationInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreatePlatformApplicationInput || (CreatePlatformApplicationInput = {}));
var CreatePlatformApplicationResponse;
(function(CreatePlatformApplicationResponse2) {
  CreatePlatformApplicationResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreatePlatformApplicationResponse || (CreatePlatformApplicationResponse = {}));
var CreateEndpointResponse;
(function(CreateEndpointResponse2) {
  CreateEndpointResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateEndpointResponse || (CreateEndpointResponse = {}));
var CreatePlatformEndpointInput;
(function(CreatePlatformEndpointInput2) {
  CreatePlatformEndpointInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreatePlatformEndpointInput || (CreatePlatformEndpointInput = {}));
var LanguageCodeString;
(function(LanguageCodeString2) {
  LanguageCodeString2["de_DE"] = "de-DE";
  LanguageCodeString2["en_GB"] = "en-GB";
  LanguageCodeString2["en_US"] = "en-US";
  LanguageCodeString2["es_419"] = "es-419";
  LanguageCodeString2["es_ES"] = "es-ES";
  LanguageCodeString2["fr_CA"] = "fr-CA";
  LanguageCodeString2["fr_FR"] = "fr-FR";
  LanguageCodeString2["it_IT"] = "it-IT";
  LanguageCodeString2["jp_JP"] = "ja-JP";
  LanguageCodeString2["kr_KR"] = "kr-KR";
  LanguageCodeString2["pt_BR"] = "pt-BR";
  LanguageCodeString2["zh_CN"] = "zh-CN";
  LanguageCodeString2["zh_TW"] = "zh-TW";
})(LanguageCodeString || (LanguageCodeString = {}));
var CreateSMSSandboxPhoneNumberInput;
(function(CreateSMSSandboxPhoneNumberInput2) {
  CreateSMSSandboxPhoneNumberInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateSMSSandboxPhoneNumberInput || (CreateSMSSandboxPhoneNumberInput = {}));
var CreateSMSSandboxPhoneNumberResult;
(function(CreateSMSSandboxPhoneNumberResult2) {
  CreateSMSSandboxPhoneNumberResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateSMSSandboxPhoneNumberResult || (CreateSMSSandboxPhoneNumberResult = {}));
var OptedOutException;
(function(OptedOutException2) {
  OptedOutException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(OptedOutException || (OptedOutException = {}));
var UserErrorException;
(function(UserErrorException2) {
  UserErrorException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UserErrorException || (UserErrorException = {}));
var ConcurrentAccessException;
(function(ConcurrentAccessException2) {
  ConcurrentAccessException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ConcurrentAccessException || (ConcurrentAccessException = {}));
var Tag4;
(function(Tag5) {
  Tag5.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Tag4 || (Tag4 = {}));
var CreateTopicInput;
(function(CreateTopicInput2) {
  CreateTopicInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateTopicInput || (CreateTopicInput = {}));
var CreateTopicResponse;
(function(CreateTopicResponse2) {
  CreateTopicResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateTopicResponse || (CreateTopicResponse = {}));
var InvalidSecurityException;
(function(InvalidSecurityException2) {
  InvalidSecurityException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidSecurityException || (InvalidSecurityException = {}));
var StaleTagException;
(function(StaleTagException2) {
  StaleTagException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StaleTagException || (StaleTagException = {}));
var TagLimitExceededException;
(function(TagLimitExceededException2) {
  TagLimitExceededException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TagLimitExceededException || (TagLimitExceededException = {}));
var TagPolicyException;
(function(TagPolicyException2) {
  TagPolicyException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TagPolicyException || (TagPolicyException = {}));
var TopicLimitExceededException;
(function(TopicLimitExceededException2) {
  TopicLimitExceededException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TopicLimitExceededException || (TopicLimitExceededException = {}));
var DeleteEndpointInput;
(function(DeleteEndpointInput2) {
  DeleteEndpointInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteEndpointInput || (DeleteEndpointInput = {}));
var DeletePlatformApplicationInput;
(function(DeletePlatformApplicationInput2) {
  DeletePlatformApplicationInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeletePlatformApplicationInput || (DeletePlatformApplicationInput = {}));
var DeleteSMSSandboxPhoneNumberInput;
(function(DeleteSMSSandboxPhoneNumberInput2) {
  DeleteSMSSandboxPhoneNumberInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteSMSSandboxPhoneNumberInput || (DeleteSMSSandboxPhoneNumberInput = {}));
var DeleteSMSSandboxPhoneNumberResult;
(function(DeleteSMSSandboxPhoneNumberResult2) {
  DeleteSMSSandboxPhoneNumberResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteSMSSandboxPhoneNumberResult || (DeleteSMSSandboxPhoneNumberResult = {}));
var ResourceNotFoundException3;
(function(ResourceNotFoundException4) {
  ResourceNotFoundException4.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ResourceNotFoundException3 || (ResourceNotFoundException3 = {}));
var DeleteTopicInput;
(function(DeleteTopicInput2) {
  DeleteTopicInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteTopicInput || (DeleteTopicInput = {}));
var GetEndpointAttributesInput;
(function(GetEndpointAttributesInput2) {
  GetEndpointAttributesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetEndpointAttributesInput || (GetEndpointAttributesInput = {}));
var GetEndpointAttributesResponse;
(function(GetEndpointAttributesResponse2) {
  GetEndpointAttributesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetEndpointAttributesResponse || (GetEndpointAttributesResponse = {}));
var GetPlatformApplicationAttributesInput;
(function(GetPlatformApplicationAttributesInput2) {
  GetPlatformApplicationAttributesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetPlatformApplicationAttributesInput || (GetPlatformApplicationAttributesInput = {}));
var GetPlatformApplicationAttributesResponse;
(function(GetPlatformApplicationAttributesResponse2) {
  GetPlatformApplicationAttributesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetPlatformApplicationAttributesResponse || (GetPlatformApplicationAttributesResponse = {}));
var GetSMSAttributesInput;
(function(GetSMSAttributesInput2) {
  GetSMSAttributesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetSMSAttributesInput || (GetSMSAttributesInput = {}));
var GetSMSAttributesResponse;
(function(GetSMSAttributesResponse2) {
  GetSMSAttributesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetSMSAttributesResponse || (GetSMSAttributesResponse = {}));
var GetSMSSandboxAccountStatusInput;
(function(GetSMSSandboxAccountStatusInput2) {
  GetSMSSandboxAccountStatusInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetSMSSandboxAccountStatusInput || (GetSMSSandboxAccountStatusInput = {}));
var GetSMSSandboxAccountStatusResult;
(function(GetSMSSandboxAccountStatusResult2) {
  GetSMSSandboxAccountStatusResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetSMSSandboxAccountStatusResult || (GetSMSSandboxAccountStatusResult = {}));
var GetSubscriptionAttributesInput;
(function(GetSubscriptionAttributesInput2) {
  GetSubscriptionAttributesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetSubscriptionAttributesInput || (GetSubscriptionAttributesInput = {}));
var GetSubscriptionAttributesResponse;
(function(GetSubscriptionAttributesResponse2) {
  GetSubscriptionAttributesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetSubscriptionAttributesResponse || (GetSubscriptionAttributesResponse = {}));
var GetTopicAttributesInput;
(function(GetTopicAttributesInput2) {
  GetTopicAttributesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetTopicAttributesInput || (GetTopicAttributesInput = {}));
var GetTopicAttributesResponse;
(function(GetTopicAttributesResponse2) {
  GetTopicAttributesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetTopicAttributesResponse || (GetTopicAttributesResponse = {}));
var ListEndpointsByPlatformApplicationInput;
(function(ListEndpointsByPlatformApplicationInput2) {
  ListEndpointsByPlatformApplicationInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListEndpointsByPlatformApplicationInput || (ListEndpointsByPlatformApplicationInput = {}));
var Endpoint2;
(function(Endpoint3) {
  Endpoint3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Endpoint2 || (Endpoint2 = {}));
var ListEndpointsByPlatformApplicationResponse;
(function(ListEndpointsByPlatformApplicationResponse2) {
  ListEndpointsByPlatformApplicationResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListEndpointsByPlatformApplicationResponse || (ListEndpointsByPlatformApplicationResponse = {}));
var ListOriginationNumbersRequest;
(function(ListOriginationNumbersRequest2) {
  ListOriginationNumbersRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListOriginationNumbersRequest || (ListOriginationNumbersRequest = {}));
var NumberCapability;
(function(NumberCapability2) {
  NumberCapability2["MMS"] = "MMS";
  NumberCapability2["SMS"] = "SMS";
  NumberCapability2["VOICE"] = "VOICE";
})(NumberCapability || (NumberCapability = {}));
var RouteType;
(function(RouteType2) {
  RouteType2["Premium"] = "Premium";
  RouteType2["Promotional"] = "Promotional";
  RouteType2["Transactional"] = "Transactional";
})(RouteType || (RouteType = {}));
var PhoneNumberInformation;
(function(PhoneNumberInformation2) {
  PhoneNumberInformation2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PhoneNumberInformation || (PhoneNumberInformation = {}));
var ListOriginationNumbersResult;
(function(ListOriginationNumbersResult2) {
  ListOriginationNumbersResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListOriginationNumbersResult || (ListOriginationNumbersResult = {}));
var ValidationException;
(function(ValidationException2) {
  ValidationException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ValidationException || (ValidationException = {}));
var ListPhoneNumbersOptedOutInput;
(function(ListPhoneNumbersOptedOutInput2) {
  ListPhoneNumbersOptedOutInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListPhoneNumbersOptedOutInput || (ListPhoneNumbersOptedOutInput = {}));
var ListPhoneNumbersOptedOutResponse;
(function(ListPhoneNumbersOptedOutResponse2) {
  ListPhoneNumbersOptedOutResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListPhoneNumbersOptedOutResponse || (ListPhoneNumbersOptedOutResponse = {}));
var ListPlatformApplicationsInput;
(function(ListPlatformApplicationsInput2) {
  ListPlatformApplicationsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListPlatformApplicationsInput || (ListPlatformApplicationsInput = {}));
var PlatformApplication;
(function(PlatformApplication2) {
  PlatformApplication2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PlatformApplication || (PlatformApplication = {}));
var ListPlatformApplicationsResponse;
(function(ListPlatformApplicationsResponse2) {
  ListPlatformApplicationsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListPlatformApplicationsResponse || (ListPlatformApplicationsResponse = {}));
var ListSMSSandboxPhoneNumbersInput;
(function(ListSMSSandboxPhoneNumbersInput2) {
  ListSMSSandboxPhoneNumbersInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListSMSSandboxPhoneNumbersInput || (ListSMSSandboxPhoneNumbersInput = {}));
var SMSSandboxPhoneNumberVerificationStatus;
(function(SMSSandboxPhoneNumberVerificationStatus2) {
  SMSSandboxPhoneNumberVerificationStatus2["Pending"] = "Pending";
  SMSSandboxPhoneNumberVerificationStatus2["Verified"] = "Verified";
})(SMSSandboxPhoneNumberVerificationStatus || (SMSSandboxPhoneNumberVerificationStatus = {}));
var SMSSandboxPhoneNumber;
(function(SMSSandboxPhoneNumber2) {
  SMSSandboxPhoneNumber2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SMSSandboxPhoneNumber || (SMSSandboxPhoneNumber = {}));
var ListSMSSandboxPhoneNumbersResult;
(function(ListSMSSandboxPhoneNumbersResult2) {
  ListSMSSandboxPhoneNumbersResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListSMSSandboxPhoneNumbersResult || (ListSMSSandboxPhoneNumbersResult = {}));
var ListSubscriptionsInput;
(function(ListSubscriptionsInput2) {
  ListSubscriptionsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListSubscriptionsInput || (ListSubscriptionsInput = {}));
var Subscription;
(function(Subscription2) {
  Subscription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Subscription || (Subscription = {}));
var ListSubscriptionsResponse;
(function(ListSubscriptionsResponse2) {
  ListSubscriptionsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListSubscriptionsResponse || (ListSubscriptionsResponse = {}));
var ListSubscriptionsByTopicInput;
(function(ListSubscriptionsByTopicInput2) {
  ListSubscriptionsByTopicInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListSubscriptionsByTopicInput || (ListSubscriptionsByTopicInput = {}));
var ListSubscriptionsByTopicResponse;
(function(ListSubscriptionsByTopicResponse2) {
  ListSubscriptionsByTopicResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListSubscriptionsByTopicResponse || (ListSubscriptionsByTopicResponse = {}));
var ListTagsForResourceRequest;
(function(ListTagsForResourceRequest2) {
  ListTagsForResourceRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTagsForResourceRequest || (ListTagsForResourceRequest = {}));
var ListTagsForResourceResponse;
(function(ListTagsForResourceResponse2) {
  ListTagsForResourceResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTagsForResourceResponse || (ListTagsForResourceResponse = {}));
var ListTopicsInput;
(function(ListTopicsInput2) {
  ListTopicsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTopicsInput || (ListTopicsInput = {}));
var Topic;
(function(Topic2) {
  Topic2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Topic || (Topic = {}));
var ListTopicsResponse;
(function(ListTopicsResponse2) {
  ListTopicsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTopicsResponse || (ListTopicsResponse = {}));
var OptInPhoneNumberInput;
(function(OptInPhoneNumberInput2) {
  OptInPhoneNumberInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(OptInPhoneNumberInput || (OptInPhoneNumberInput = {}));
var OptInPhoneNumberResponse;
(function(OptInPhoneNumberResponse2) {
  OptInPhoneNumberResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(OptInPhoneNumberResponse || (OptInPhoneNumberResponse = {}));
var EndpointDisabledException;
(function(EndpointDisabledException2) {
  EndpointDisabledException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(EndpointDisabledException || (EndpointDisabledException = {}));
var InvalidParameterValueException;
(function(InvalidParameterValueException2) {
  InvalidParameterValueException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidParameterValueException || (InvalidParameterValueException = {}));
var KMSAccessDeniedException2;
(function(KMSAccessDeniedException3) {
  KMSAccessDeniedException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KMSAccessDeniedException2 || (KMSAccessDeniedException2 = {}));
var KMSDisabledException2;
(function(KMSDisabledException3) {
  KMSDisabledException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KMSDisabledException2 || (KMSDisabledException2 = {}));
var KMSInvalidStateException2;
(function(KMSInvalidStateException3) {
  KMSInvalidStateException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KMSInvalidStateException2 || (KMSInvalidStateException2 = {}));
var KMSNotFoundException2;
(function(KMSNotFoundException3) {
  KMSNotFoundException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KMSNotFoundException2 || (KMSNotFoundException2 = {}));
var KMSOptInRequired2;
(function(KMSOptInRequired3) {
  KMSOptInRequired3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KMSOptInRequired2 || (KMSOptInRequired2 = {}));
var KMSThrottlingException2;
(function(KMSThrottlingException3) {
  KMSThrottlingException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(KMSThrottlingException2 || (KMSThrottlingException2 = {}));
var PlatformApplicationDisabledException;
(function(PlatformApplicationDisabledException2) {
  PlatformApplicationDisabledException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PlatformApplicationDisabledException || (PlatformApplicationDisabledException = {}));
var MessageAttributeValue;
(function(MessageAttributeValue3) {
  MessageAttributeValue3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MessageAttributeValue || (MessageAttributeValue = {}));
var PublishInput;
(function(PublishInput2) {
  PublishInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PublishInput || (PublishInput = {}));
var PublishResponse;
(function(PublishResponse2) {
  PublishResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PublishResponse || (PublishResponse = {}));
var BatchEntryIdsNotDistinctException;
(function(BatchEntryIdsNotDistinctException2) {
  BatchEntryIdsNotDistinctException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BatchEntryIdsNotDistinctException || (BatchEntryIdsNotDistinctException = {}));
var BatchRequestTooLongException;
(function(BatchRequestTooLongException2) {
  BatchRequestTooLongException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BatchRequestTooLongException || (BatchRequestTooLongException = {}));
var EmptyBatchRequestException;
(function(EmptyBatchRequestException2) {
  EmptyBatchRequestException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(EmptyBatchRequestException || (EmptyBatchRequestException = {}));
var InvalidBatchEntryIdException;
(function(InvalidBatchEntryIdException2) {
  InvalidBatchEntryIdException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidBatchEntryIdException || (InvalidBatchEntryIdException = {}));
var PublishBatchRequestEntry;
(function(PublishBatchRequestEntry2) {
  PublishBatchRequestEntry2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PublishBatchRequestEntry || (PublishBatchRequestEntry = {}));
var PublishBatchInput;
(function(PublishBatchInput2) {
  PublishBatchInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PublishBatchInput || (PublishBatchInput = {}));
var BatchResultErrorEntry;
(function(BatchResultErrorEntry3) {
  BatchResultErrorEntry3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BatchResultErrorEntry || (BatchResultErrorEntry = {}));
var PublishBatchResultEntry;
(function(PublishBatchResultEntry2) {
  PublishBatchResultEntry2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PublishBatchResultEntry || (PublishBatchResultEntry = {}));
var PublishBatchResponse;
(function(PublishBatchResponse2) {
  PublishBatchResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PublishBatchResponse || (PublishBatchResponse = {}));
var TooManyEntriesInBatchRequestException;
(function(TooManyEntriesInBatchRequestException2) {
  TooManyEntriesInBatchRequestException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TooManyEntriesInBatchRequestException || (TooManyEntriesInBatchRequestException = {}));
var RemovePermissionInput;
(function(RemovePermissionInput2) {
  RemovePermissionInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RemovePermissionInput || (RemovePermissionInput = {}));
var SetEndpointAttributesInput;
(function(SetEndpointAttributesInput2) {
  SetEndpointAttributesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetEndpointAttributesInput || (SetEndpointAttributesInput = {}));
var SetPlatformApplicationAttributesInput;
(function(SetPlatformApplicationAttributesInput2) {
  SetPlatformApplicationAttributesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetPlatformApplicationAttributesInput || (SetPlatformApplicationAttributesInput = {}));
var SetSMSAttributesInput;
(function(SetSMSAttributesInput2) {
  SetSMSAttributesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetSMSAttributesInput || (SetSMSAttributesInput = {}));
var SetSMSAttributesResponse;
(function(SetSMSAttributesResponse2) {
  SetSMSAttributesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetSMSAttributesResponse || (SetSMSAttributesResponse = {}));
var SetSubscriptionAttributesInput;
(function(SetSubscriptionAttributesInput2) {
  SetSubscriptionAttributesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetSubscriptionAttributesInput || (SetSubscriptionAttributesInput = {}));
var SetTopicAttributesInput;
(function(SetTopicAttributesInput2) {
  SetTopicAttributesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetTopicAttributesInput || (SetTopicAttributesInput = {}));
var SubscribeInput;
(function(SubscribeInput2) {
  SubscribeInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SubscribeInput || (SubscribeInput = {}));
var SubscribeResponse;
(function(SubscribeResponse2) {
  SubscribeResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SubscribeResponse || (SubscribeResponse = {}));
var TagResourceRequest;
(function(TagResourceRequest2) {
  TagResourceRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TagResourceRequest || (TagResourceRequest = {}));
var TagResourceResponse;
(function(TagResourceResponse2) {
  TagResourceResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TagResourceResponse || (TagResourceResponse = {}));
var UnsubscribeInput;
(function(UnsubscribeInput2) {
  UnsubscribeInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UnsubscribeInput || (UnsubscribeInput = {}));
var UntagResourceRequest;
(function(UntagResourceRequest2) {
  UntagResourceRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UntagResourceRequest || (UntagResourceRequest = {}));
var UntagResourceResponse;
(function(UntagResourceResponse2) {
  UntagResourceResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UntagResourceResponse || (UntagResourceResponse = {}));
var VerificationException;
(function(VerificationException2) {
  VerificationException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(VerificationException || (VerificationException = {}));
var VerifySMSSandboxPhoneNumberInput;
(function(VerifySMSSandboxPhoneNumberInput2) {
  VerifySMSSandboxPhoneNumberInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(VerifySMSSandboxPhoneNumberInput || (VerifySMSSandboxPhoneNumberInput = {}));
var VerifySMSSandboxPhoneNumberResult;
(function(VerifySMSSandboxPhoneNumberResult2) {
  VerifySMSSandboxPhoneNumberResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(VerifySMSSandboxPhoneNumberResult || (VerifySMSSandboxPhoneNumberResult = {}));

// node_modules/@aws-sdk/client-sns/dist-es/protocols/Aws_query.js
var import_entities3 = __toModule(require_lib());
var import_fast_xml_parser3 = __toModule(require_parser());
var serializeAws_queryAddPermissionCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryAddPermissionInput(input, context)), { Action: "AddPermission", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryCheckIfPhoneNumberIsOptedOutCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryCheckIfPhoneNumberIsOptedOutInput(input, context)), { Action: "CheckIfPhoneNumberIsOptedOut", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryConfirmSubscriptionCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryConfirmSubscriptionInput(input, context)), { Action: "ConfirmSubscription", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryCreatePlatformApplicationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryCreatePlatformApplicationInput(input, context)), { Action: "CreatePlatformApplication", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryCreatePlatformEndpointCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryCreatePlatformEndpointInput(input, context)), { Action: "CreatePlatformEndpoint", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryCreateSMSSandboxPhoneNumberCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryCreateSMSSandboxPhoneNumberInput(input, context)), { Action: "CreateSMSSandboxPhoneNumber", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryCreateTopicCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryCreateTopicInput(input, context)), { Action: "CreateTopic", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteEndpointCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryDeleteEndpointInput(input, context)), { Action: "DeleteEndpoint", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeletePlatformApplicationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryDeletePlatformApplicationInput(input, context)), { Action: "DeletePlatformApplication", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteSMSSandboxPhoneNumberCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryDeleteSMSSandboxPhoneNumberInput(input, context)), { Action: "DeleteSMSSandboxPhoneNumber", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteTopicCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryDeleteTopicInput(input, context)), { Action: "DeleteTopic", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetEndpointAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryGetEndpointAttributesInput(input, context)), { Action: "GetEndpointAttributes", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetPlatformApplicationAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryGetPlatformApplicationAttributesInput(input, context)), { Action: "GetPlatformApplicationAttributes", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetSMSAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryGetSMSAttributesInput(input, context)), { Action: "GetSMSAttributes", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetSMSSandboxAccountStatusCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryGetSMSSandboxAccountStatusInput(input, context)), { Action: "GetSMSSandboxAccountStatus", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetSubscriptionAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryGetSubscriptionAttributesInput(input, context)), { Action: "GetSubscriptionAttributes", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetTopicAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryGetTopicAttributesInput(input, context)), { Action: "GetTopicAttributes", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListEndpointsByPlatformApplicationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryListEndpointsByPlatformApplicationInput(input, context)), { Action: "ListEndpointsByPlatformApplication", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListOriginationNumbersCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryListOriginationNumbersRequest(input, context)), { Action: "ListOriginationNumbers", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListPhoneNumbersOptedOutCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryListPhoneNumbersOptedOutInput(input, context)), { Action: "ListPhoneNumbersOptedOut", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListPlatformApplicationsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryListPlatformApplicationsInput(input, context)), { Action: "ListPlatformApplications", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListSMSSandboxPhoneNumbersCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryListSMSSandboxPhoneNumbersInput(input, context)), { Action: "ListSMSSandboxPhoneNumbers", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListSubscriptionsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryListSubscriptionsInput(input, context)), { Action: "ListSubscriptions", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListSubscriptionsByTopicCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryListSubscriptionsByTopicInput(input, context)), { Action: "ListSubscriptionsByTopic", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListTagsForResourceCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryListTagsForResourceRequest(input, context)), { Action: "ListTagsForResource", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListTopicsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryListTopicsInput(input, context)), { Action: "ListTopics", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryOptInPhoneNumberCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryOptInPhoneNumberInput(input, context)), { Action: "OptInPhoneNumber", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryPublishCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryPublishInput(input, context)), { Action: "Publish", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryPublishBatchCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryPublishBatchInput(input, context)), { Action: "PublishBatch", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryRemovePermissionCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryRemovePermissionInput(input, context)), { Action: "RemovePermission", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySetEndpointAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_querySetEndpointAttributesInput(input, context)), { Action: "SetEndpointAttributes", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySetPlatformApplicationAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_querySetPlatformApplicationAttributesInput(input, context)), { Action: "SetPlatformApplicationAttributes", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySetSMSAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_querySetSMSAttributesInput(input, context)), { Action: "SetSMSAttributes", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySetSubscriptionAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_querySetSubscriptionAttributesInput(input, context)), { Action: "SetSubscriptionAttributes", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySetTopicAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_querySetTopicAttributesInput(input, context)), { Action: "SetTopicAttributes", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySubscribeCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_querySubscribeInput(input, context)), { Action: "Subscribe", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryTagResourceCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryTagResourceRequest(input, context)), { Action: "TagResource", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryUnsubscribeCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryUnsubscribeInput(input, context)), { Action: "Unsubscribe", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryUntagResourceCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryUntagResourceRequest(input, context)), { Action: "UntagResource", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryVerifySMSSandboxPhoneNumberCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString2(__assign(__assign({}, serializeAws_queryVerifySMSSandboxPhoneNumberInput(input, context)), { Action: "VerifySMSSandboxPhoneNumber", Version: "2010-03-31" }));
      return [2, buildHttpRpcRequest4(context, headers, "/", void 0, body)];
    });
  });
};
var deserializeAws_queryAddPermissionCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryAddPermissionCommandError(output, context)];
          }
          return [4, collectBody6(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata5(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryAddPermissionCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "NotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryCheckIfPhoneNumberIsOptedOutCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCheckIfPhoneNumberIsOptedOutCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryCheckIfPhoneNumberIsOptedOutResponse(data.CheckIfPhoneNumberIsOptedOutResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCheckIfPhoneNumberIsOptedOutCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "ThrottledException":
              return [3, 8];
            case "com.amazonaws.sns#ThrottledException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryThrottledExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryConfirmSubscriptionCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryConfirmSubscriptionCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryConfirmSubscriptionResponse(data.ConfirmSubscriptionResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryConfirmSubscriptionCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "FilterPolicyLimitExceededException":
              return [3, 4];
            case "com.amazonaws.sns#FilterPolicyLimitExceededException":
              return [3, 4];
            case "InternalErrorException":
              return [3, 6];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 6];
            case "InvalidParameterException":
              return [3, 8];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 8];
            case "NotFoundException":
              return [3, 10];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 10];
            case "SubscriptionLimitExceededException":
              return [3, 12];
            case "com.amazonaws.sns#SubscriptionLimitExceededException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryFilterPolicyLimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_querySubscriptionLimitExceededExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryCreatePlatformApplicationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCreatePlatformApplicationCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryCreatePlatformApplicationResponse(data.CreatePlatformApplicationResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCreatePlatformApplicationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryCreatePlatformEndpointCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCreatePlatformEndpointCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryCreateEndpointResponse(data.CreatePlatformEndpointResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCreatePlatformEndpointCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "NotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryCreateSMSSandboxPhoneNumberCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCreateSMSSandboxPhoneNumberCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryCreateSMSSandboxPhoneNumberResult(data.CreateSMSSandboxPhoneNumberResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCreateSMSSandboxPhoneNumberCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "OptedOutException":
              return [3, 8];
            case "com.amazonaws.sns#OptedOutException":
              return [3, 8];
            case "ThrottledException":
              return [3, 10];
            case "com.amazonaws.sns#ThrottledException":
              return [3, 10];
            case "UserErrorException":
              return [3, 12];
            case "com.amazonaws.sns#UserErrorException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryOptedOutExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryThrottledExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryUserErrorExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryCreateTopicCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCreateTopicCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryCreateTopicResponse(data.CreateTopicResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCreateTopicCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
    var _m;
    return __generator(this, function(_o) {
      switch (_o.label) {
        case 0:
          _a = [__assign({}, output)];
          _m = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_m.body = _o.sent(), _m)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "ConcurrentAccessException":
              return [3, 4];
            case "com.amazonaws.sns#ConcurrentAccessException":
              return [3, 4];
            case "InternalErrorException":
              return [3, 6];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 6];
            case "InvalidParameterException":
              return [3, 8];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 8];
            case "InvalidSecurityException":
              return [3, 10];
            case "com.amazonaws.sns#InvalidSecurityException":
              return [3, 10];
            case "StaleTagException":
              return [3, 12];
            case "com.amazonaws.sns#StaleTagException":
              return [3, 12];
            case "TagLimitExceededException":
              return [3, 14];
            case "com.amazonaws.sns#TagLimitExceededException":
              return [3, 14];
            case "TagPolicyException":
              return [3, 16];
            case "com.amazonaws.sns#TagPolicyException":
              return [3, 16];
            case "TopicLimitExceededException":
              return [3, 18];
            case "com.amazonaws.sns#TopicLimitExceededException":
              return [3, 18];
          }
          return [3, 20];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 21];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryConcurrentAccessExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 21];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 21];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 21];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryInvalidSecurityExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 21];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryStaleTagExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 21];
        case 14:
          _j = [{}];
          return [4, deserializeAws_queryTagLimitExceededExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 21];
        case 16:
          _k = [{}];
          return [4, deserializeAws_queryTagPolicyExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 21];
        case 18:
          _l = [{}];
          return [4, deserializeAws_queryTopicLimitExceededExceptionResponse(parsedOutput, context)];
        case 19:
          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_o.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 21];
        case 20:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _o.label = 21;
        case 21:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteEndpointCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteEndpointCommandError(output, context)];
          }
          return [4, collectBody6(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata5(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteEndpointCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeletePlatformApplicationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeletePlatformApplicationCommandError(output, context)];
          }
          return [4, collectBody6(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata5(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeletePlatformApplicationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteSMSSandboxPhoneNumberCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteSMSSandboxPhoneNumberCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDeleteSMSSandboxPhoneNumberResult(data.DeleteSMSSandboxPhoneNumberResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteSMSSandboxPhoneNumberCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#ResourceNotFoundException":
              return [3, 8];
            case "ThrottledException":
              return [3, 10];
            case "com.amazonaws.sns#ThrottledException":
              return [3, 10];
            case "UserErrorException":
              return [3, 12];
            case "com.amazonaws.sns#UserErrorException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryThrottledExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryUserErrorExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteTopicCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteTopicCommandError(output, context)];
          }
          return [4, collectBody6(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata5(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteTopicCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign({}, output)];
          _k = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "ConcurrentAccessException":
              return [3, 4];
            case "com.amazonaws.sns#ConcurrentAccessException":
              return [3, 4];
            case "InternalErrorException":
              return [3, 6];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 6];
            case "InvalidParameterException":
              return [3, 8];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 8];
            case "NotFoundException":
              return [3, 10];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 10];
            case "StaleTagException":
              return [3, 12];
            case "com.amazonaws.sns#StaleTagException":
              return [3, 12];
            case "TagPolicyException":
              return [3, 14];
            case "com.amazonaws.sns#TagPolicyException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryConcurrentAccessExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryStaleTagExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_queryTagPolicyExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetEndpointAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetEndpointAttributesCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetEndpointAttributesResponse(data.GetEndpointAttributesResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetEndpointAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "NotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetPlatformApplicationAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetPlatformApplicationAttributesCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetPlatformApplicationAttributesResponse(data.GetPlatformApplicationAttributesResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetPlatformApplicationAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "NotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetSMSAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetSMSAttributesCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetSMSAttributesResponse(data.GetSMSAttributesResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetSMSAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "ThrottledException":
              return [3, 8];
            case "com.amazonaws.sns#ThrottledException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryThrottledExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetSMSSandboxAccountStatusCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetSMSSandboxAccountStatusCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetSMSSandboxAccountStatusResult(data.GetSMSSandboxAccountStatusResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetSMSSandboxAccountStatusCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "ThrottledException":
              return [3, 6];
            case "com.amazonaws.sns#ThrottledException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryThrottledExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetSubscriptionAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetSubscriptionAttributesCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetSubscriptionAttributesResponse(data.GetSubscriptionAttributesResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetSubscriptionAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "NotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetTopicAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetTopicAttributesCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetTopicAttributesResponse(data.GetTopicAttributesResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetTopicAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "InvalidSecurityException":
              return [3, 8];
            case "com.amazonaws.sns#InvalidSecurityException":
              return [3, 8];
            case "NotFoundException":
              return [3, 10];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryInvalidSecurityExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListEndpointsByPlatformApplicationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListEndpointsByPlatformApplicationCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListEndpointsByPlatformApplicationResponse(data.ListEndpointsByPlatformApplicationResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListEndpointsByPlatformApplicationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "NotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListOriginationNumbersCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListOriginationNumbersCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListOriginationNumbersResult(data.ListOriginationNumbersResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListOriginationNumbersCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "ThrottledException":
              return [3, 8];
            case "com.amazonaws.sns#ThrottledException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.sns#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryThrottledExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListPhoneNumbersOptedOutCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListPhoneNumbersOptedOutCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListPhoneNumbersOptedOutResponse(data.ListPhoneNumbersOptedOutResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListPhoneNumbersOptedOutCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "ThrottledException":
              return [3, 8];
            case "com.amazonaws.sns#ThrottledException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryThrottledExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListPlatformApplicationsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListPlatformApplicationsCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListPlatformApplicationsResponse(data.ListPlatformApplicationsResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListPlatformApplicationsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListSMSSandboxPhoneNumbersCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListSMSSandboxPhoneNumbersCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListSMSSandboxPhoneNumbersResult(data.ListSMSSandboxPhoneNumbersResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListSMSSandboxPhoneNumbersCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#ResourceNotFoundException":
              return [3, 8];
            case "ThrottledException":
              return [3, 10];
            case "com.amazonaws.sns#ThrottledException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryThrottledExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListSubscriptionsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListSubscriptionsCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListSubscriptionsResponse(data.ListSubscriptionsResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListSubscriptionsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListSubscriptionsByTopicCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListSubscriptionsByTopicCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListSubscriptionsByTopicResponse(data.ListSubscriptionsByTopicResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListSubscriptionsByTopicCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "NotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListTagsForResourceCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListTagsForResourceCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListTagsForResourceResponse(data.ListTagsForResourceResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListTagsForResourceCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "ConcurrentAccessException":
              return [3, 4];
            case "com.amazonaws.sns#ConcurrentAccessException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#ResourceNotFoundException":
              return [3, 8];
            case "TagPolicyException":
              return [3, 10];
            case "com.amazonaws.sns#TagPolicyException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryConcurrentAccessExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryTagPolicyExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListTopicsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListTopicsCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListTopicsResponse(data.ListTopicsResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListTopicsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryOptInPhoneNumberCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryOptInPhoneNumberCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryOptInPhoneNumberResponse(data.OptInPhoneNumberResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryOptInPhoneNumberCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "ThrottledException":
              return [3, 8];
            case "com.amazonaws.sns#ThrottledException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryThrottledExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryPublishCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryPublishCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryPublishResponse(data.PublishResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryPublishCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, parsedBody, message;
    var _s;
    return __generator(this, function(_t) {
      switch (_t.label) {
        case 0:
          _a = [__assign({}, output)];
          _s = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_s.body = _t.sent(), _s)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "EndpointDisabledException":
              return [3, 4];
            case "com.amazonaws.sns#EndpointDisabledException":
              return [3, 4];
            case "InternalErrorException":
              return [3, 6];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 6];
            case "InvalidParameterException":
              return [3, 8];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 8];
            case "InvalidParameterValueException":
              return [3, 10];
            case "com.amazonaws.sns#InvalidParameterValueException":
              return [3, 10];
            case "InvalidSecurityException":
              return [3, 12];
            case "com.amazonaws.sns#InvalidSecurityException":
              return [3, 12];
            case "KMSAccessDeniedException":
              return [3, 14];
            case "com.amazonaws.sns#KMSAccessDeniedException":
              return [3, 14];
            case "KMSDisabledException":
              return [3, 16];
            case "com.amazonaws.sns#KMSDisabledException":
              return [3, 16];
            case "KMSInvalidStateException":
              return [3, 18];
            case "com.amazonaws.sns#KMSInvalidStateException":
              return [3, 18];
            case "KMSNotFoundException":
              return [3, 20];
            case "com.amazonaws.sns#KMSNotFoundException":
              return [3, 20];
            case "KMSOptInRequired":
              return [3, 22];
            case "com.amazonaws.sns#KMSOptInRequired":
              return [3, 22];
            case "KMSThrottlingException":
              return [3, 24];
            case "com.amazonaws.sns#KMSThrottlingException":
              return [3, 24];
            case "NotFoundException":
              return [3, 26];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 26];
            case "PlatformApplicationDisabledException":
              return [3, 28];
            case "com.amazonaws.sns#PlatformApplicationDisabledException":
              return [3, 28];
          }
          return [3, 30];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_t.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 31];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryEndpointDisabledExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_t.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 31];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_t.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 31];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_t.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 31];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryInvalidParameterValueExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_t.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 31];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryInvalidSecurityExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_t.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 31];
        case 14:
          _j = [{}];
          return [4, deserializeAws_queryKMSAccessDeniedExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_t.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 31];
        case 16:
          _k = [{}];
          return [4, deserializeAws_queryKMSDisabledExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_t.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 31];
        case 18:
          _l = [{}];
          return [4, deserializeAws_queryKMSInvalidStateExceptionResponse(parsedOutput, context)];
        case 19:
          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_t.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 31];
        case 20:
          _m = [{}];
          return [4, deserializeAws_queryKMSNotFoundExceptionResponse(parsedOutput, context)];
        case 21:
          response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([_t.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 31];
        case 22:
          _o = [{}];
          return [4, deserializeAws_queryKMSOptInRequiredResponse(parsedOutput, context)];
        case 23:
          response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([_t.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 31];
        case 24:
          _p = [{}];
          return [4, deserializeAws_queryKMSThrottlingExceptionResponse(parsedOutput, context)];
        case 25:
          response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([_t.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 31];
        case 26:
          _q = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 27:
          response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([_t.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 31];
        case 28:
          _r = [{}];
          return [4, deserializeAws_queryPlatformApplicationDisabledExceptionResponse(parsedOutput, context)];
        case 29:
          response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([_t.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 31];
        case 30:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _t.label = 31;
        case 31:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryPublishBatchCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryPublishBatchCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryPublishBatchResponse(data.PublishBatchResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryPublishBatchCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, parsedBody, message;
    var _x;
    return __generator(this, function(_y) {
      switch (_y.label) {
        case 0:
          _a = [__assign({}, output)];
          _x = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_x.body = _y.sent(), _x)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "BatchEntryIdsNotDistinctException":
              return [3, 4];
            case "com.amazonaws.sns#BatchEntryIdsNotDistinctException":
              return [3, 4];
            case "BatchRequestTooLongException":
              return [3, 6];
            case "com.amazonaws.sns#BatchRequestTooLongException":
              return [3, 6];
            case "EmptyBatchRequestException":
              return [3, 8];
            case "com.amazonaws.sns#EmptyBatchRequestException":
              return [3, 8];
            case "EndpointDisabledException":
              return [3, 10];
            case "com.amazonaws.sns#EndpointDisabledException":
              return [3, 10];
            case "InternalErrorException":
              return [3, 12];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 12];
            case "InvalidBatchEntryIdException":
              return [3, 14];
            case "com.amazonaws.sns#InvalidBatchEntryIdException":
              return [3, 14];
            case "InvalidParameterException":
              return [3, 16];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 16];
            case "InvalidParameterValueException":
              return [3, 18];
            case "com.amazonaws.sns#InvalidParameterValueException":
              return [3, 18];
            case "InvalidSecurityException":
              return [3, 20];
            case "com.amazonaws.sns#InvalidSecurityException":
              return [3, 20];
            case "KMSAccessDeniedException":
              return [3, 22];
            case "com.amazonaws.sns#KMSAccessDeniedException":
              return [3, 22];
            case "KMSDisabledException":
              return [3, 24];
            case "com.amazonaws.sns#KMSDisabledException":
              return [3, 24];
            case "KMSInvalidStateException":
              return [3, 26];
            case "com.amazonaws.sns#KMSInvalidStateException":
              return [3, 26];
            case "KMSNotFoundException":
              return [3, 28];
            case "com.amazonaws.sns#KMSNotFoundException":
              return [3, 28];
            case "KMSOptInRequired":
              return [3, 30];
            case "com.amazonaws.sns#KMSOptInRequired":
              return [3, 30];
            case "KMSThrottlingException":
              return [3, 32];
            case "com.amazonaws.sns#KMSThrottlingException":
              return [3, 32];
            case "NotFoundException":
              return [3, 34];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 34];
            case "PlatformApplicationDisabledException":
              return [3, 36];
            case "com.amazonaws.sns#PlatformApplicationDisabledException":
              return [3, 36];
            case "TooManyEntriesInBatchRequestException":
              return [3, 38];
            case "com.amazonaws.sns#TooManyEntriesInBatchRequestException":
              return [3, 38];
          }
          return [3, 40];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryBatchEntryIdsNotDistinctExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryBatchRequestTooLongExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryEmptyBatchRequestExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryEndpointDisabledExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 14:
          _j = [{}];
          return [4, deserializeAws_queryInvalidBatchEntryIdExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 16:
          _k = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 18:
          _l = [{}];
          return [4, deserializeAws_queryInvalidParameterValueExceptionResponse(parsedOutput, context)];
        case 19:
          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 20:
          _m = [{}];
          return [4, deserializeAws_queryInvalidSecurityExceptionResponse(parsedOutput, context)];
        case 21:
          response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 22:
          _o = [{}];
          return [4, deserializeAws_queryKMSAccessDeniedExceptionResponse(parsedOutput, context)];
        case 23:
          response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 24:
          _p = [{}];
          return [4, deserializeAws_queryKMSDisabledExceptionResponse(parsedOutput, context)];
        case 25:
          response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 26:
          _q = [{}];
          return [4, deserializeAws_queryKMSInvalidStateExceptionResponse(parsedOutput, context)];
        case 27:
          response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 28:
          _r = [{}];
          return [4, deserializeAws_queryKMSNotFoundExceptionResponse(parsedOutput, context)];
        case 29:
          response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 30:
          _s = [{}];
          return [4, deserializeAws_queryKMSOptInRequiredResponse(parsedOutput, context)];
        case 31:
          response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 32:
          _t = [{}];
          return [4, deserializeAws_queryKMSThrottlingExceptionResponse(parsedOutput, context)];
        case 33:
          response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 34:
          _u = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 35:
          response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 36:
          _v = [{}];
          return [4, deserializeAws_queryPlatformApplicationDisabledExceptionResponse(parsedOutput, context)];
        case 37:
          response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 38:
          _w = [{}];
          return [4, deserializeAws_queryTooManyEntriesInBatchRequestExceptionResponse(parsedOutput, context)];
        case 39:
          response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([_y.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 41];
        case 40:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _y.label = 41;
        case 41:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryRemovePermissionCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryRemovePermissionCommandError(output, context)];
          }
          return [4, collectBody6(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata5(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryRemovePermissionCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "NotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySetEndpointAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySetEndpointAttributesCommandError(output, context)];
          }
          return [4, collectBody6(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata5(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySetEndpointAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "NotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySetPlatformApplicationAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySetPlatformApplicationAttributesCommandError(output, context)];
          }
          return [4, collectBody6(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata5(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySetPlatformApplicationAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "NotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySetSMSAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySetSMSAttributesCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySetSMSAttributesResponse(data.SetSMSAttributesResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySetSMSAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "ThrottledException":
              return [3, 8];
            case "com.amazonaws.sns#ThrottledException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryThrottledExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySetSubscriptionAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySetSubscriptionAttributesCommandError(output, context)];
          }
          return [4, collectBody6(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata5(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySetSubscriptionAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "FilterPolicyLimitExceededException":
              return [3, 4];
            case "com.amazonaws.sns#FilterPolicyLimitExceededException":
              return [3, 4];
            case "InternalErrorException":
              return [3, 6];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 6];
            case "InvalidParameterException":
              return [3, 8];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 8];
            case "NotFoundException":
              return [3, 10];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryFilterPolicyLimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySetTopicAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySetTopicAttributesCommandError(output, context)];
          }
          return [4, collectBody6(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata5(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySetTopicAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "InvalidSecurityException":
              return [3, 8];
            case "com.amazonaws.sns#InvalidSecurityException":
              return [3, 8];
            case "NotFoundException":
              return [3, 10];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryInvalidSecurityExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySubscribeCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySubscribeCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySubscribeResponse(data.SubscribeResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySubscribeCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign({}, output)];
          _k = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "FilterPolicyLimitExceededException":
              return [3, 4];
            case "com.amazonaws.sns#FilterPolicyLimitExceededException":
              return [3, 4];
            case "InternalErrorException":
              return [3, 6];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 6];
            case "InvalidParameterException":
              return [3, 8];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 8];
            case "InvalidSecurityException":
              return [3, 10];
            case "com.amazonaws.sns#InvalidSecurityException":
              return [3, 10];
            case "NotFoundException":
              return [3, 12];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 12];
            case "SubscriptionLimitExceededException":
              return [3, 14];
            case "com.amazonaws.sns#SubscriptionLimitExceededException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryFilterPolicyLimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryInvalidSecurityExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_querySubscriptionLimitExceededExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryTagResourceCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryTagResourceCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryTagResourceResponse(data.TagResourceResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryTagResourceCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign({}, output)];
          _k = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "ConcurrentAccessException":
              return [3, 4];
            case "com.amazonaws.sns#ConcurrentAccessException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#ResourceNotFoundException":
              return [3, 8];
            case "StaleTagException":
              return [3, 10];
            case "com.amazonaws.sns#StaleTagException":
              return [3, 10];
            case "TagLimitExceededException":
              return [3, 12];
            case "com.amazonaws.sns#TagLimitExceededException":
              return [3, 12];
            case "TagPolicyException":
              return [3, 14];
            case "com.amazonaws.sns#TagPolicyException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryConcurrentAccessExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryStaleTagExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryTagLimitExceededExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_queryTagPolicyExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryUnsubscribeCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryUnsubscribeCommandError(output, context)];
          }
          return [4, collectBody6(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata5(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryUnsubscribeCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "InvalidSecurityException":
              return [3, 8];
            case "com.amazonaws.sns#InvalidSecurityException":
              return [3, 8];
            case "NotFoundException":
              return [3, 10];
            case "com.amazonaws.sns#NotFoundException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryInvalidSecurityExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryUntagResourceCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryUntagResourceCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryUntagResourceResponse(data.UntagResourceResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryUntagResourceCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign({}, output)];
          _k = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "ConcurrentAccessException":
              return [3, 4];
            case "com.amazonaws.sns#ConcurrentAccessException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#ResourceNotFoundException":
              return [3, 8];
            case "StaleTagException":
              return [3, 10];
            case "com.amazonaws.sns#StaleTagException":
              return [3, 10];
            case "TagLimitExceededException":
              return [3, 12];
            case "com.amazonaws.sns#TagLimitExceededException":
              return [3, 12];
            case "TagPolicyException":
              return [3, 14];
            case "com.amazonaws.sns#TagPolicyException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryConcurrentAccessExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryStaleTagExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryTagLimitExceededExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_queryTagPolicyExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryVerifySMSSandboxPhoneNumberCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryVerifySMSSandboxPhoneNumberCommandError(output, context)];
          }
          return [4, parseBody5(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryVerifySMSSandboxPhoneNumberResult(data.VerifySMSSandboxPhoneNumberResult, context);
          response = __assign({ $metadata: deserializeMetadata5(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryVerifySMSSandboxPhoneNumberCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody5(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AuthorizationErrorException":
              return [3, 2];
            case "com.amazonaws.sns#AuthorizationErrorException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.sns#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.sns#InvalidParameterException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.sns#ResourceNotFoundException":
              return [3, 8];
            case "ThrottledException":
              return [3, 10];
            case "com.amazonaws.sns#ThrottledException":
              return [3, 10];
            case "VerificationException":
              return [3, 12];
            case "com.amazonaws.sns#VerificationException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryAuthorizationErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryInternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidParameterExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryThrottledExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryVerificationExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata5(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata5(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryAuthorizationErrorExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryAuthorizationErrorException(body.Error, context);
      contents = __assign({ name: "AuthorizationErrorException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryBatchEntryIdsNotDistinctExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryBatchEntryIdsNotDistinctException(body.Error, context);
      contents = __assign({ name: "BatchEntryIdsNotDistinctException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryBatchRequestTooLongExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryBatchRequestTooLongException(body.Error, context);
      contents = __assign({ name: "BatchRequestTooLongException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryConcurrentAccessExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryConcurrentAccessException(body.Error, context);
      contents = __assign({ name: "ConcurrentAccessException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryEmptyBatchRequestExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryEmptyBatchRequestException(body.Error, context);
      contents = __assign({ name: "EmptyBatchRequestException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryEndpointDisabledExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryEndpointDisabledException(body.Error, context);
      contents = __assign({ name: "EndpointDisabledException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryFilterPolicyLimitExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryFilterPolicyLimitExceededException(body.Error, context);
      contents = __assign({ name: "FilterPolicyLimitExceededException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInternalErrorExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInternalErrorException(body.Error, context);
      contents = __assign({ name: "InternalErrorException", $fault: "server", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidBatchEntryIdExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidBatchEntryIdException(body.Error, context);
      contents = __assign({ name: "InvalidBatchEntryIdException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidParameterExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidParameterException(body.Error, context);
      contents = __assign({ name: "InvalidParameterException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidParameterValueExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidParameterValueException(body.Error, context);
      contents = __assign({ name: "InvalidParameterValueException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidSecurityExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidSecurityException(body.Error, context);
      contents = __assign({ name: "InvalidSecurityException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryKMSAccessDeniedExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryKMSAccessDeniedException(body.Error, context);
      contents = __assign({ name: "KMSAccessDeniedException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryKMSDisabledExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryKMSDisabledException(body.Error, context);
      contents = __assign({ name: "KMSDisabledException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryKMSInvalidStateExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryKMSInvalidStateException(body.Error, context);
      contents = __assign({ name: "KMSInvalidStateException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryKMSNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryKMSNotFoundException(body.Error, context);
      contents = __assign({ name: "KMSNotFoundException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryKMSOptInRequiredResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryKMSOptInRequired(body.Error, context);
      contents = __assign({ name: "KMSOptInRequired", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryKMSThrottlingExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryKMSThrottlingException(body.Error, context);
      contents = __assign({ name: "KMSThrottlingException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryNotFoundException(body.Error, context);
      contents = __assign({ name: "NotFoundException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryOptedOutExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryOptedOutException(body.Error, context);
      contents = __assign({ name: "OptedOutException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryPlatformApplicationDisabledExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryPlatformApplicationDisabledException(body.Error, context);
      contents = __assign({ name: "PlatformApplicationDisabledException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryResourceNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryResourceNotFoundException(body.Error, context);
      contents = __assign({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryStaleTagExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryStaleTagException(body.Error, context);
      contents = __assign({ name: "StaleTagException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_querySubscriptionLimitExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_querySubscriptionLimitExceededException(body.Error, context);
      contents = __assign({ name: "SubscriptionLimitExceededException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryTagLimitExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryTagLimitExceededException(body.Error, context);
      contents = __assign({ name: "TagLimitExceededException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryTagPolicyExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryTagPolicyException(body.Error, context);
      contents = __assign({ name: "TagPolicyException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryThrottledExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryThrottledException(body.Error, context);
      contents = __assign({ name: "ThrottledException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryTooManyEntriesInBatchRequestExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryTooManyEntriesInBatchRequestException(body.Error, context);
      contents = __assign({ name: "TooManyEntriesInBatchRequestException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryTopicLimitExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryTopicLimitExceededException(body.Error, context);
      contents = __assign({ name: "TopicLimitExceededException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryUserErrorExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryUserErrorException(body.Error, context);
      contents = __assign({ name: "UserErrorException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryValidationExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryValidationException(body.Error, context);
      contents = __assign({ name: "ValidationException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryVerificationExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryVerificationException(body.Error, context);
      contents = __assign({ name: "VerificationException", $fault: "client", $metadata: deserializeMetadata5(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var serializeAws_queryActionsList = function(input, context) {
  var e_1, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
      var entry = input_1_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (input_1_1 && !input_1_1.done && (_a = input_1.return))
        _a.call(input_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return entries;
};
var serializeAws_queryAddPermissionInput = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  if (input.Label !== void 0 && input.Label !== null) {
    entries["Label"] = input.Label;
  }
  if (input.AWSAccountId !== void 0 && input.AWSAccountId !== null) {
    var memberEntries = serializeAws_queryDelegatesList(input.AWSAccountId, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "AWSAccountId." + key;
      entries[loc] = value;
    });
  }
  if (input.ActionName !== void 0 && input.ActionName !== null) {
    var memberEntries = serializeAws_queryActionsList(input.ActionName, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "ActionName." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryCheckIfPhoneNumberIsOptedOutInput = function(input, context) {
  var entries = {};
  if (input.phoneNumber !== void 0 && input.phoneNumber !== null) {
    entries["phoneNumber"] = input.phoneNumber;
  }
  return entries;
};
var serializeAws_queryConfirmSubscriptionInput = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  if (input.Token !== void 0 && input.Token !== null) {
    entries["Token"] = input.Token;
  }
  if (input.AuthenticateOnUnsubscribe !== void 0 && input.AuthenticateOnUnsubscribe !== null) {
    entries["AuthenticateOnUnsubscribe"] = input.AuthenticateOnUnsubscribe;
  }
  return entries;
};
var serializeAws_queryCreatePlatformApplicationInput = function(input, context) {
  var entries = {};
  if (input.Name !== void 0 && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  if (input.Platform !== void 0 && input.Platform !== null) {
    entries["Platform"] = input.Platform;
  }
  if (input.Attributes !== void 0 && input.Attributes !== null) {
    var memberEntries = serializeAws_queryMapStringToString(input.Attributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Attributes." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryCreatePlatformEndpointInput = function(input, context) {
  var entries = {};
  if (input.PlatformApplicationArn !== void 0 && input.PlatformApplicationArn !== null) {
    entries["PlatformApplicationArn"] = input.PlatformApplicationArn;
  }
  if (input.Token !== void 0 && input.Token !== null) {
    entries["Token"] = input.Token;
  }
  if (input.CustomUserData !== void 0 && input.CustomUserData !== null) {
    entries["CustomUserData"] = input.CustomUserData;
  }
  if (input.Attributes !== void 0 && input.Attributes !== null) {
    var memberEntries = serializeAws_queryMapStringToString(input.Attributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Attributes." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryCreateSMSSandboxPhoneNumberInput = function(input, context) {
  var entries = {};
  if (input.PhoneNumber !== void 0 && input.PhoneNumber !== null) {
    entries["PhoneNumber"] = input.PhoneNumber;
  }
  if (input.LanguageCode !== void 0 && input.LanguageCode !== null) {
    entries["LanguageCode"] = input.LanguageCode;
  }
  return entries;
};
var serializeAws_queryCreateTopicInput = function(input, context) {
  var entries = {};
  if (input.Name !== void 0 && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  if (input.Attributes !== void 0 && input.Attributes !== null) {
    var memberEntries = serializeAws_queryTopicAttributesMap(input.Attributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Attributes." + key;
      entries[loc] = value;
    });
  }
  if (input.Tags !== void 0 && input.Tags !== null) {
    var memberEntries = serializeAws_queryTagList(input.Tags, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Tags." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryDelegatesList = function(input, context) {
  var e_2, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_2 = __values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {
      var entry = input_2_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (input_2_1 && !input_2_1.done && (_a = input_2.return))
        _a.call(input_2);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  return entries;
};
var serializeAws_queryDeleteEndpointInput = function(input, context) {
  var entries = {};
  if (input.EndpointArn !== void 0 && input.EndpointArn !== null) {
    entries["EndpointArn"] = input.EndpointArn;
  }
  return entries;
};
var serializeAws_queryDeletePlatformApplicationInput = function(input, context) {
  var entries = {};
  if (input.PlatformApplicationArn !== void 0 && input.PlatformApplicationArn !== null) {
    entries["PlatformApplicationArn"] = input.PlatformApplicationArn;
  }
  return entries;
};
var serializeAws_queryDeleteSMSSandboxPhoneNumberInput = function(input, context) {
  var entries = {};
  if (input.PhoneNumber !== void 0 && input.PhoneNumber !== null) {
    entries["PhoneNumber"] = input.PhoneNumber;
  }
  return entries;
};
var serializeAws_queryDeleteTopicInput = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  return entries;
};
var serializeAws_queryGetEndpointAttributesInput = function(input, context) {
  var entries = {};
  if (input.EndpointArn !== void 0 && input.EndpointArn !== null) {
    entries["EndpointArn"] = input.EndpointArn;
  }
  return entries;
};
var serializeAws_queryGetPlatformApplicationAttributesInput = function(input, context) {
  var entries = {};
  if (input.PlatformApplicationArn !== void 0 && input.PlatformApplicationArn !== null) {
    entries["PlatformApplicationArn"] = input.PlatformApplicationArn;
  }
  return entries;
};
var serializeAws_queryGetSMSAttributesInput = function(input, context) {
  var entries = {};
  if (input.attributes !== void 0 && input.attributes !== null) {
    var memberEntries = serializeAws_queryListString(input.attributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "attributes." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryGetSMSSandboxAccountStatusInput = function(input, context) {
  var entries = {};
  return entries;
};
var serializeAws_queryGetSubscriptionAttributesInput = function(input, context) {
  var entries = {};
  if (input.SubscriptionArn !== void 0 && input.SubscriptionArn !== null) {
    entries["SubscriptionArn"] = input.SubscriptionArn;
  }
  return entries;
};
var serializeAws_queryGetTopicAttributesInput = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  return entries;
};
var serializeAws_queryListEndpointsByPlatformApplicationInput = function(input, context) {
  var entries = {};
  if (input.PlatformApplicationArn !== void 0 && input.PlatformApplicationArn !== null) {
    entries["PlatformApplicationArn"] = input.PlatformApplicationArn;
  }
  if (input.NextToken !== void 0 && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};
var serializeAws_queryListOriginationNumbersRequest = function(input, context) {
  var entries = {};
  if (input.NextToken !== void 0 && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== void 0 && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};
var serializeAws_queryListPhoneNumbersOptedOutInput = function(input, context) {
  var entries = {};
  if (input.nextToken !== void 0 && input.nextToken !== null) {
    entries["nextToken"] = input.nextToken;
  }
  return entries;
};
var serializeAws_queryListPlatformApplicationsInput = function(input, context) {
  var entries = {};
  if (input.NextToken !== void 0 && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};
var serializeAws_queryListSMSSandboxPhoneNumbersInput = function(input, context) {
  var entries = {};
  if (input.NextToken !== void 0 && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== void 0 && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};
var serializeAws_queryListString = function(input, context) {
  var e_3, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_3 = __values(input), input_3_1 = input_3.next(); !input_3_1.done; input_3_1 = input_3.next()) {
      var entry = input_3_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_3_1) {
    e_3 = { error: e_3_1 };
  } finally {
    try {
      if (input_3_1 && !input_3_1.done && (_a = input_3.return))
        _a.call(input_3);
    } finally {
      if (e_3)
        throw e_3.error;
    }
  }
  return entries;
};
var serializeAws_queryListSubscriptionsByTopicInput = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  if (input.NextToken !== void 0 && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};
var serializeAws_queryListSubscriptionsInput = function(input, context) {
  var entries = {};
  if (input.NextToken !== void 0 && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};
var serializeAws_queryListTagsForResourceRequest = function(input, context) {
  var entries = {};
  if (input.ResourceArn !== void 0 && input.ResourceArn !== null) {
    entries["ResourceArn"] = input.ResourceArn;
  }
  return entries;
};
var serializeAws_queryListTopicsInput = function(input, context) {
  var entries = {};
  if (input.NextToken !== void 0 && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};
var serializeAws_queryMapStringToString = function(input, context) {
  var entries = {};
  var counter = 1;
  Object.keys(input).filter(function(key) {
    return input[key] != null;
  }).forEach(function(key) {
    entries["entry." + counter + ".key"] = key;
    entries["entry." + counter + ".value"] = input[key];
    counter++;
  });
  return entries;
};
var serializeAws_queryMessageAttributeMap = function(input, context) {
  var entries = {};
  var counter = 1;
  Object.keys(input).filter(function(key) {
    return input[key] != null;
  }).forEach(function(key) {
    entries["entry." + counter + ".Name"] = key;
    var memberEntries = serializeAws_queryMessageAttributeValue(input[key], context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key2 = _b[0], value = _b[1];
      entries["entry." + counter + ".Value." + key2] = value;
    });
    counter++;
  });
  return entries;
};
var serializeAws_queryMessageAttributeValue = function(input, context) {
  var entries = {};
  if (input.DataType !== void 0 && input.DataType !== null) {
    entries["DataType"] = input.DataType;
  }
  if (input.StringValue !== void 0 && input.StringValue !== null) {
    entries["StringValue"] = input.StringValue;
  }
  if (input.BinaryValue !== void 0 && input.BinaryValue !== null) {
    entries["BinaryValue"] = context.base64Encoder(input.BinaryValue);
  }
  return entries;
};
var serializeAws_queryOptInPhoneNumberInput = function(input, context) {
  var entries = {};
  if (input.phoneNumber !== void 0 && input.phoneNumber !== null) {
    entries["phoneNumber"] = input.phoneNumber;
  }
  return entries;
};
var serializeAws_queryPublishBatchInput = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  if (input.PublishBatchRequestEntries !== void 0 && input.PublishBatchRequestEntries !== null) {
    var memberEntries = serializeAws_queryPublishBatchRequestEntryList(input.PublishBatchRequestEntries, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "PublishBatchRequestEntries." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryPublishBatchRequestEntry = function(input, context) {
  var entries = {};
  if (input.Id !== void 0 && input.Id !== null) {
    entries["Id"] = input.Id;
  }
  if (input.Message !== void 0 && input.Message !== null) {
    entries["Message"] = input.Message;
  }
  if (input.Subject !== void 0 && input.Subject !== null) {
    entries["Subject"] = input.Subject;
  }
  if (input.MessageStructure !== void 0 && input.MessageStructure !== null) {
    entries["MessageStructure"] = input.MessageStructure;
  }
  if (input.MessageAttributes !== void 0 && input.MessageAttributes !== null) {
    var memberEntries = serializeAws_queryMessageAttributeMap(input.MessageAttributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "MessageAttributes." + key;
      entries[loc] = value;
    });
  }
  if (input.MessageDeduplicationId !== void 0 && input.MessageDeduplicationId !== null) {
    entries["MessageDeduplicationId"] = input.MessageDeduplicationId;
  }
  if (input.MessageGroupId !== void 0 && input.MessageGroupId !== null) {
    entries["MessageGroupId"] = input.MessageGroupId;
  }
  return entries;
};
var serializeAws_queryPublishBatchRequestEntryList = function(input, context) {
  var e_4, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_4 = __values(input), input_4_1 = input_4.next(); !input_4_1.done; input_4_1 = input_4.next()) {
      var entry = input_4_1.value;
      if (entry === null) {
        continue;
      }
      var memberEntries = serializeAws_queryPublishBatchRequestEntry(entry, context);
      Object.entries(memberEntries).forEach(function(_a2) {
        var _b = __read(_a2, 2), key = _b[0], value = _b[1];
        entries["member." + counter + "." + key] = value;
      });
      counter++;
    }
  } catch (e_4_1) {
    e_4 = { error: e_4_1 };
  } finally {
    try {
      if (input_4_1 && !input_4_1.done && (_a = input_4.return))
        _a.call(input_4);
    } finally {
      if (e_4)
        throw e_4.error;
    }
  }
  return entries;
};
var serializeAws_queryPublishInput = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  if (input.TargetArn !== void 0 && input.TargetArn !== null) {
    entries["TargetArn"] = input.TargetArn;
  }
  if (input.PhoneNumber !== void 0 && input.PhoneNumber !== null) {
    entries["PhoneNumber"] = input.PhoneNumber;
  }
  if (input.Message !== void 0 && input.Message !== null) {
    entries["Message"] = input.Message;
  }
  if (input.Subject !== void 0 && input.Subject !== null) {
    entries["Subject"] = input.Subject;
  }
  if (input.MessageStructure !== void 0 && input.MessageStructure !== null) {
    entries["MessageStructure"] = input.MessageStructure;
  }
  if (input.MessageAttributes !== void 0 && input.MessageAttributes !== null) {
    var memberEntries = serializeAws_queryMessageAttributeMap(input.MessageAttributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "MessageAttributes." + key;
      entries[loc] = value;
    });
  }
  if (input.MessageDeduplicationId !== void 0 && input.MessageDeduplicationId !== null) {
    entries["MessageDeduplicationId"] = input.MessageDeduplicationId;
  }
  if (input.MessageGroupId !== void 0 && input.MessageGroupId !== null) {
    entries["MessageGroupId"] = input.MessageGroupId;
  }
  return entries;
};
var serializeAws_queryRemovePermissionInput = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  if (input.Label !== void 0 && input.Label !== null) {
    entries["Label"] = input.Label;
  }
  return entries;
};
var serializeAws_querySetEndpointAttributesInput = function(input, context) {
  var entries = {};
  if (input.EndpointArn !== void 0 && input.EndpointArn !== null) {
    entries["EndpointArn"] = input.EndpointArn;
  }
  if (input.Attributes !== void 0 && input.Attributes !== null) {
    var memberEntries = serializeAws_queryMapStringToString(input.Attributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Attributes." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_querySetPlatformApplicationAttributesInput = function(input, context) {
  var entries = {};
  if (input.PlatformApplicationArn !== void 0 && input.PlatformApplicationArn !== null) {
    entries["PlatformApplicationArn"] = input.PlatformApplicationArn;
  }
  if (input.Attributes !== void 0 && input.Attributes !== null) {
    var memberEntries = serializeAws_queryMapStringToString(input.Attributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Attributes." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_querySetSMSAttributesInput = function(input, context) {
  var entries = {};
  if (input.attributes !== void 0 && input.attributes !== null) {
    var memberEntries = serializeAws_queryMapStringToString(input.attributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "attributes." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_querySetSubscriptionAttributesInput = function(input, context) {
  var entries = {};
  if (input.SubscriptionArn !== void 0 && input.SubscriptionArn !== null) {
    entries["SubscriptionArn"] = input.SubscriptionArn;
  }
  if (input.AttributeName !== void 0 && input.AttributeName !== null) {
    entries["AttributeName"] = input.AttributeName;
  }
  if (input.AttributeValue !== void 0 && input.AttributeValue !== null) {
    entries["AttributeValue"] = input.AttributeValue;
  }
  return entries;
};
var serializeAws_querySetTopicAttributesInput = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  if (input.AttributeName !== void 0 && input.AttributeName !== null) {
    entries["AttributeName"] = input.AttributeName;
  }
  if (input.AttributeValue !== void 0 && input.AttributeValue !== null) {
    entries["AttributeValue"] = input.AttributeValue;
  }
  return entries;
};
var serializeAws_querySubscribeInput = function(input, context) {
  var entries = {};
  if (input.TopicArn !== void 0 && input.TopicArn !== null) {
    entries["TopicArn"] = input.TopicArn;
  }
  if (input.Protocol !== void 0 && input.Protocol !== null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.Endpoint !== void 0 && input.Endpoint !== null) {
    entries["Endpoint"] = input.Endpoint;
  }
  if (input.Attributes !== void 0 && input.Attributes !== null) {
    var memberEntries = serializeAws_querySubscriptionAttributesMap(input.Attributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Attributes." + key;
      entries[loc] = value;
    });
  }
  if (input.ReturnSubscriptionArn !== void 0 && input.ReturnSubscriptionArn !== null) {
    entries["ReturnSubscriptionArn"] = input.ReturnSubscriptionArn;
  }
  return entries;
};
var serializeAws_querySubscriptionAttributesMap = function(input, context) {
  var entries = {};
  var counter = 1;
  Object.keys(input).filter(function(key) {
    return input[key] != null;
  }).forEach(function(key) {
    entries["entry." + counter + ".key"] = key;
    entries["entry." + counter + ".value"] = input[key];
    counter++;
  });
  return entries;
};
var serializeAws_queryTag = function(input, context) {
  var entries = {};
  if (input.Key !== void 0 && input.Key !== null) {
    entries["Key"] = input.Key;
  }
  if (input.Value !== void 0 && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  return entries;
};
var serializeAws_queryTagKeyList = function(input, context) {
  var e_5, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_5 = __values(input), input_5_1 = input_5.next(); !input_5_1.done; input_5_1 = input_5.next()) {
      var entry = input_5_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_5_1) {
    e_5 = { error: e_5_1 };
  } finally {
    try {
      if (input_5_1 && !input_5_1.done && (_a = input_5.return))
        _a.call(input_5);
    } finally {
      if (e_5)
        throw e_5.error;
    }
  }
  return entries;
};
var serializeAws_queryTagList = function(input, context) {
  var e_6, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_6 = __values(input), input_6_1 = input_6.next(); !input_6_1.done; input_6_1 = input_6.next()) {
      var entry = input_6_1.value;
      if (entry === null) {
        continue;
      }
      var memberEntries = serializeAws_queryTag(entry, context);
      Object.entries(memberEntries).forEach(function(_a2) {
        var _b = __read(_a2, 2), key = _b[0], value = _b[1];
        entries["member." + counter + "." + key] = value;
      });
      counter++;
    }
  } catch (e_6_1) {
    e_6 = { error: e_6_1 };
  } finally {
    try {
      if (input_6_1 && !input_6_1.done && (_a = input_6.return))
        _a.call(input_6);
    } finally {
      if (e_6)
        throw e_6.error;
    }
  }
  return entries;
};
var serializeAws_queryTagResourceRequest = function(input, context) {
  var entries = {};
  if (input.ResourceArn !== void 0 && input.ResourceArn !== null) {
    entries["ResourceArn"] = input.ResourceArn;
  }
  if (input.Tags !== void 0 && input.Tags !== null) {
    var memberEntries = serializeAws_queryTagList(input.Tags, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Tags." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryTopicAttributesMap = function(input, context) {
  var entries = {};
  var counter = 1;
  Object.keys(input).filter(function(key) {
    return input[key] != null;
  }).forEach(function(key) {
    entries["entry." + counter + ".key"] = key;
    entries["entry." + counter + ".value"] = input[key];
    counter++;
  });
  return entries;
};
var serializeAws_queryUnsubscribeInput = function(input, context) {
  var entries = {};
  if (input.SubscriptionArn !== void 0 && input.SubscriptionArn !== null) {
    entries["SubscriptionArn"] = input.SubscriptionArn;
  }
  return entries;
};
var serializeAws_queryUntagResourceRequest = function(input, context) {
  var entries = {};
  if (input.ResourceArn !== void 0 && input.ResourceArn !== null) {
    entries["ResourceArn"] = input.ResourceArn;
  }
  if (input.TagKeys !== void 0 && input.TagKeys !== null) {
    var memberEntries = serializeAws_queryTagKeyList(input.TagKeys, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "TagKeys." + key;
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryVerifySMSSandboxPhoneNumberInput = function(input, context) {
  var entries = {};
  if (input.PhoneNumber !== void 0 && input.PhoneNumber !== null) {
    entries["PhoneNumber"] = input.PhoneNumber;
  }
  if (input.OneTimePassword !== void 0 && input.OneTimePassword !== null) {
    entries["OneTimePassword"] = input.OneTimePassword;
  }
  return entries;
};
var deserializeAws_queryAuthorizationErrorException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryBatchEntryIdsNotDistinctException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryBatchRequestTooLongException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryBatchResultErrorEntry = function(output, context) {
  var contents = {
    Id: void 0,
    Code: void 0,
    Message: void 0,
    SenderFault: void 0
  };
  if (output["Id"] !== void 0) {
    contents.Id = expectString(output["Id"]);
  }
  if (output["Code"] !== void 0) {
    contents.Code = expectString(output["Code"]);
  }
  if (output["Message"] !== void 0) {
    contents.Message = expectString(output["Message"]);
  }
  if (output["SenderFault"] !== void 0) {
    contents.SenderFault = parseBoolean(output["SenderFault"]);
  }
  return contents;
};
var deserializeAws_queryBatchResultErrorEntryList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryBatchResultErrorEntry(entry, context);
  });
};
var deserializeAws_queryCheckIfPhoneNumberIsOptedOutResponse = function(output, context) {
  var contents = {
    isOptedOut: void 0
  };
  if (output["isOptedOut"] !== void 0) {
    contents.isOptedOut = parseBoolean(output["isOptedOut"]);
  }
  return contents;
};
var deserializeAws_queryConcurrentAccessException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryConfirmSubscriptionResponse = function(output, context) {
  var contents = {
    SubscriptionArn: void 0
  };
  if (output["SubscriptionArn"] !== void 0) {
    contents.SubscriptionArn = expectString(output["SubscriptionArn"]);
  }
  return contents;
};
var deserializeAws_queryCreateEndpointResponse = function(output, context) {
  var contents = {
    EndpointArn: void 0
  };
  if (output["EndpointArn"] !== void 0) {
    contents.EndpointArn = expectString(output["EndpointArn"]);
  }
  return contents;
};
var deserializeAws_queryCreatePlatformApplicationResponse = function(output, context) {
  var contents = {
    PlatformApplicationArn: void 0
  };
  if (output["PlatformApplicationArn"] !== void 0) {
    contents.PlatformApplicationArn = expectString(output["PlatformApplicationArn"]);
  }
  return contents;
};
var deserializeAws_queryCreateSMSSandboxPhoneNumberResult = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryCreateTopicResponse = function(output, context) {
  var contents = {
    TopicArn: void 0
  };
  if (output["TopicArn"] !== void 0) {
    contents.TopicArn = expectString(output["TopicArn"]);
  }
  return contents;
};
var deserializeAws_queryDeleteSMSSandboxPhoneNumberResult = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryEmptyBatchRequestException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryEndpoint = function(output, context) {
  var contents = {
    EndpointArn: void 0,
    Attributes: void 0
  };
  if (output["EndpointArn"] !== void 0) {
    contents.EndpointArn = expectString(output["EndpointArn"]);
  }
  if (output.Attributes === "") {
    contents.Attributes = {};
  }
  if (output["Attributes"] !== void 0 && output["Attributes"]["entry"] !== void 0) {
    contents.Attributes = deserializeAws_queryMapStringToString(getArrayIfSingleItem(output["Attributes"]["entry"]), context);
  }
  return contents;
};
var deserializeAws_queryEndpointDisabledException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryFilterPolicyLimitExceededException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryGetEndpointAttributesResponse = function(output, context) {
  var contents = {
    Attributes: void 0
  };
  if (output.Attributes === "") {
    contents.Attributes = {};
  }
  if (output["Attributes"] !== void 0 && output["Attributes"]["entry"] !== void 0) {
    contents.Attributes = deserializeAws_queryMapStringToString(getArrayIfSingleItem(output["Attributes"]["entry"]), context);
  }
  return contents;
};
var deserializeAws_queryGetPlatformApplicationAttributesResponse = function(output, context) {
  var contents = {
    Attributes: void 0
  };
  if (output.Attributes === "") {
    contents.Attributes = {};
  }
  if (output["Attributes"] !== void 0 && output["Attributes"]["entry"] !== void 0) {
    contents.Attributes = deserializeAws_queryMapStringToString(getArrayIfSingleItem(output["Attributes"]["entry"]), context);
  }
  return contents;
};
var deserializeAws_queryGetSMSAttributesResponse = function(output, context) {
  var contents = {
    attributes: void 0
  };
  if (output.attributes === "") {
    contents.attributes = {};
  }
  if (output["attributes"] !== void 0 && output["attributes"]["entry"] !== void 0) {
    contents.attributes = deserializeAws_queryMapStringToString(getArrayIfSingleItem(output["attributes"]["entry"]), context);
  }
  return contents;
};
var deserializeAws_queryGetSMSSandboxAccountStatusResult = function(output, context) {
  var contents = {
    IsInSandbox: void 0
  };
  if (output["IsInSandbox"] !== void 0) {
    contents.IsInSandbox = parseBoolean(output["IsInSandbox"]);
  }
  return contents;
};
var deserializeAws_queryGetSubscriptionAttributesResponse = function(output, context) {
  var contents = {
    Attributes: void 0
  };
  if (output.Attributes === "") {
    contents.Attributes = {};
  }
  if (output["Attributes"] !== void 0 && output["Attributes"]["entry"] !== void 0) {
    contents.Attributes = deserializeAws_querySubscriptionAttributesMap(getArrayIfSingleItem(output["Attributes"]["entry"]), context);
  }
  return contents;
};
var deserializeAws_queryGetTopicAttributesResponse = function(output, context) {
  var contents = {
    Attributes: void 0
  };
  if (output.Attributes === "") {
    contents.Attributes = {};
  }
  if (output["Attributes"] !== void 0 && output["Attributes"]["entry"] !== void 0) {
    contents.Attributes = deserializeAws_queryTopicAttributesMap(getArrayIfSingleItem(output["Attributes"]["entry"]), context);
  }
  return contents;
};
var deserializeAws_queryInternalErrorException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidBatchEntryIdException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidParameterException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidParameterValueException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryInvalidSecurityException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryKMSAccessDeniedException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryKMSDisabledException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryKMSInvalidStateException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryKMSNotFoundException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryKMSOptInRequired = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryKMSThrottlingException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryListEndpointsByPlatformApplicationResponse = function(output, context) {
  var contents = {
    Endpoints: void 0,
    NextToken: void 0
  };
  if (output.Endpoints === "") {
    contents.Endpoints = [];
  }
  if (output["Endpoints"] !== void 0 && output["Endpoints"]["member"] !== void 0) {
    contents.Endpoints = deserializeAws_queryListOfEndpoints(getArrayIfSingleItem(output["Endpoints"]["member"]), context);
  }
  if (output["NextToken"] !== void 0) {
    contents.NextToken = expectString(output["NextToken"]);
  }
  return contents;
};
var deserializeAws_queryListOfEndpoints = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryEndpoint(entry, context);
  });
};
var deserializeAws_queryListOfPlatformApplications = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryPlatformApplication(entry, context);
  });
};
var deserializeAws_queryListOriginationNumbersResult = function(output, context) {
  var contents = {
    NextToken: void 0,
    PhoneNumbers: void 0
  };
  if (output["NextToken"] !== void 0) {
    contents.NextToken = expectString(output["NextToken"]);
  }
  if (output.PhoneNumbers === "") {
    contents.PhoneNumbers = [];
  }
  if (output["PhoneNumbers"] !== void 0 && output["PhoneNumbers"]["member"] !== void 0) {
    contents.PhoneNumbers = deserializeAws_queryPhoneNumberInformationList(getArrayIfSingleItem(output["PhoneNumbers"]["member"]), context);
  }
  return contents;
};
var deserializeAws_queryListPhoneNumbersOptedOutResponse = function(output, context) {
  var contents = {
    phoneNumbers: void 0,
    nextToken: void 0
  };
  if (output.phoneNumbers === "") {
    contents.phoneNumbers = [];
  }
  if (output["phoneNumbers"] !== void 0 && output["phoneNumbers"]["member"] !== void 0) {
    contents.phoneNumbers = deserializeAws_queryPhoneNumberList(getArrayIfSingleItem(output["phoneNumbers"]["member"]), context);
  }
  if (output["nextToken"] !== void 0) {
    contents.nextToken = expectString(output["nextToken"]);
  }
  return contents;
};
var deserializeAws_queryListPlatformApplicationsResponse = function(output, context) {
  var contents = {
    PlatformApplications: void 0,
    NextToken: void 0
  };
  if (output.PlatformApplications === "") {
    contents.PlatformApplications = [];
  }
  if (output["PlatformApplications"] !== void 0 && output["PlatformApplications"]["member"] !== void 0) {
    contents.PlatformApplications = deserializeAws_queryListOfPlatformApplications(getArrayIfSingleItem(output["PlatformApplications"]["member"]), context);
  }
  if (output["NextToken"] !== void 0) {
    contents.NextToken = expectString(output["NextToken"]);
  }
  return contents;
};
var deserializeAws_queryListSMSSandboxPhoneNumbersResult = function(output, context) {
  var contents = {
    PhoneNumbers: void 0,
    NextToken: void 0
  };
  if (output.PhoneNumbers === "") {
    contents.PhoneNumbers = [];
  }
  if (output["PhoneNumbers"] !== void 0 && output["PhoneNumbers"]["member"] !== void 0) {
    contents.PhoneNumbers = deserializeAws_querySMSSandboxPhoneNumberList(getArrayIfSingleItem(output["PhoneNumbers"]["member"]), context);
  }
  if (output["NextToken"] !== void 0) {
    contents.NextToken = expectString(output["NextToken"]);
  }
  return contents;
};
var deserializeAws_queryListSubscriptionsByTopicResponse = function(output, context) {
  var contents = {
    Subscriptions: void 0,
    NextToken: void 0
  };
  if (output.Subscriptions === "") {
    contents.Subscriptions = [];
  }
  if (output["Subscriptions"] !== void 0 && output["Subscriptions"]["member"] !== void 0) {
    contents.Subscriptions = deserializeAws_querySubscriptionsList(getArrayIfSingleItem(output["Subscriptions"]["member"]), context);
  }
  if (output["NextToken"] !== void 0) {
    contents.NextToken = expectString(output["NextToken"]);
  }
  return contents;
};
var deserializeAws_queryListSubscriptionsResponse = function(output, context) {
  var contents = {
    Subscriptions: void 0,
    NextToken: void 0
  };
  if (output.Subscriptions === "") {
    contents.Subscriptions = [];
  }
  if (output["Subscriptions"] !== void 0 && output["Subscriptions"]["member"] !== void 0) {
    contents.Subscriptions = deserializeAws_querySubscriptionsList(getArrayIfSingleItem(output["Subscriptions"]["member"]), context);
  }
  if (output["NextToken"] !== void 0) {
    contents.NextToken = expectString(output["NextToken"]);
  }
  return contents;
};
var deserializeAws_queryListTagsForResourceResponse = function(output, context) {
  var contents = {
    Tags: void 0
  };
  if (output.Tags === "") {
    contents.Tags = [];
  }
  if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
    contents.Tags = deserializeAws_queryTagList(getArrayIfSingleItem(output["Tags"]["member"]), context);
  }
  return contents;
};
var deserializeAws_queryListTopicsResponse = function(output, context) {
  var contents = {
    Topics: void 0,
    NextToken: void 0
  };
  if (output.Topics === "") {
    contents.Topics = [];
  }
  if (output["Topics"] !== void 0 && output["Topics"]["member"] !== void 0) {
    contents.Topics = deserializeAws_queryTopicsList(getArrayIfSingleItem(output["Topics"]["member"]), context);
  }
  if (output["NextToken"] !== void 0) {
    contents.NextToken = expectString(output["NextToken"]);
  }
  return contents;
};
var deserializeAws_queryMapStringToString = function(output, context) {
  return output.reduce(function(acc, pair) {
    var _a;
    if (pair["value"] === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_a = {}, _a[pair["key"]] = expectString(pair["value"]), _a));
  }, {});
};
var deserializeAws_queryNotFoundException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryNumberCapabilityList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_queryOptedOutException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryOptInPhoneNumberResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryPhoneNumberInformation = function(output, context) {
  var contents = {
    CreatedAt: void 0,
    PhoneNumber: void 0,
    Status: void 0,
    Iso2CountryCode: void 0,
    RouteType: void 0,
    NumberCapabilities: void 0
  };
  if (output["CreatedAt"] !== void 0) {
    contents.CreatedAt = expectNonNull(parseRfc3339DateTime(output["CreatedAt"]));
  }
  if (output["PhoneNumber"] !== void 0) {
    contents.PhoneNumber = expectString(output["PhoneNumber"]);
  }
  if (output["Status"] !== void 0) {
    contents.Status = expectString(output["Status"]);
  }
  if (output["Iso2CountryCode"] !== void 0) {
    contents.Iso2CountryCode = expectString(output["Iso2CountryCode"]);
  }
  if (output["RouteType"] !== void 0) {
    contents.RouteType = expectString(output["RouteType"]);
  }
  if (output.NumberCapabilities === "") {
    contents.NumberCapabilities = [];
  }
  if (output["NumberCapabilities"] !== void 0 && output["NumberCapabilities"]["member"] !== void 0) {
    contents.NumberCapabilities = deserializeAws_queryNumberCapabilityList(getArrayIfSingleItem(output["NumberCapabilities"]["member"]), context);
  }
  return contents;
};
var deserializeAws_queryPhoneNumberInformationList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryPhoneNumberInformation(entry, context);
  });
};
var deserializeAws_queryPhoneNumberList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_queryPlatformApplication = function(output, context) {
  var contents = {
    PlatformApplicationArn: void 0,
    Attributes: void 0
  };
  if (output["PlatformApplicationArn"] !== void 0) {
    contents.PlatformApplicationArn = expectString(output["PlatformApplicationArn"]);
  }
  if (output.Attributes === "") {
    contents.Attributes = {};
  }
  if (output["Attributes"] !== void 0 && output["Attributes"]["entry"] !== void 0) {
    contents.Attributes = deserializeAws_queryMapStringToString(getArrayIfSingleItem(output["Attributes"]["entry"]), context);
  }
  return contents;
};
var deserializeAws_queryPlatformApplicationDisabledException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryPublishBatchResponse = function(output, context) {
  var contents = {
    Successful: void 0,
    Failed: void 0
  };
  if (output.Successful === "") {
    contents.Successful = [];
  }
  if (output["Successful"] !== void 0 && output["Successful"]["member"] !== void 0) {
    contents.Successful = deserializeAws_queryPublishBatchResultEntryList(getArrayIfSingleItem(output["Successful"]["member"]), context);
  }
  if (output.Failed === "") {
    contents.Failed = [];
  }
  if (output["Failed"] !== void 0 && output["Failed"]["member"] !== void 0) {
    contents.Failed = deserializeAws_queryBatchResultErrorEntryList(getArrayIfSingleItem(output["Failed"]["member"]), context);
  }
  return contents;
};
var deserializeAws_queryPublishBatchResultEntry = function(output, context) {
  var contents = {
    Id: void 0,
    MessageId: void 0,
    SequenceNumber: void 0
  };
  if (output["Id"] !== void 0) {
    contents.Id = expectString(output["Id"]);
  }
  if (output["MessageId"] !== void 0) {
    contents.MessageId = expectString(output["MessageId"]);
  }
  if (output["SequenceNumber"] !== void 0) {
    contents.SequenceNumber = expectString(output["SequenceNumber"]);
  }
  return contents;
};
var deserializeAws_queryPublishBatchResultEntryList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryPublishBatchResultEntry(entry, context);
  });
};
var deserializeAws_queryPublishResponse = function(output, context) {
  var contents = {
    MessageId: void 0,
    SequenceNumber: void 0
  };
  if (output["MessageId"] !== void 0) {
    contents.MessageId = expectString(output["MessageId"]);
  }
  if (output["SequenceNumber"] !== void 0) {
    contents.SequenceNumber = expectString(output["SequenceNumber"]);
  }
  return contents;
};
var deserializeAws_queryResourceNotFoundException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_querySetSMSAttributesResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_querySMSSandboxPhoneNumber = function(output, context) {
  var contents = {
    PhoneNumber: void 0,
    Status: void 0
  };
  if (output["PhoneNumber"] !== void 0) {
    contents.PhoneNumber = expectString(output["PhoneNumber"]);
  }
  if (output["Status"] !== void 0) {
    contents.Status = expectString(output["Status"]);
  }
  return contents;
};
var deserializeAws_querySMSSandboxPhoneNumberList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_querySMSSandboxPhoneNumber(entry, context);
  });
};
var deserializeAws_queryStaleTagException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_querySubscribeResponse = function(output, context) {
  var contents = {
    SubscriptionArn: void 0
  };
  if (output["SubscriptionArn"] !== void 0) {
    contents.SubscriptionArn = expectString(output["SubscriptionArn"]);
  }
  return contents;
};
var deserializeAws_querySubscription = function(output, context) {
  var contents = {
    SubscriptionArn: void 0,
    Owner: void 0,
    Protocol: void 0,
    Endpoint: void 0,
    TopicArn: void 0
  };
  if (output["SubscriptionArn"] !== void 0) {
    contents.SubscriptionArn = expectString(output["SubscriptionArn"]);
  }
  if (output["Owner"] !== void 0) {
    contents.Owner = expectString(output["Owner"]);
  }
  if (output["Protocol"] !== void 0) {
    contents.Protocol = expectString(output["Protocol"]);
  }
  if (output["Endpoint"] !== void 0) {
    contents.Endpoint = expectString(output["Endpoint"]);
  }
  if (output["TopicArn"] !== void 0) {
    contents.TopicArn = expectString(output["TopicArn"]);
  }
  return contents;
};
var deserializeAws_querySubscriptionAttributesMap = function(output, context) {
  return output.reduce(function(acc, pair) {
    var _a;
    if (pair["value"] === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_a = {}, _a[pair["key"]] = expectString(pair["value"]), _a));
  }, {});
};
var deserializeAws_querySubscriptionLimitExceededException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_querySubscriptionsList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_querySubscription(entry, context);
  });
};
var deserializeAws_queryTag = function(output, context) {
  var contents = {
    Key: void 0,
    Value: void 0
  };
  if (output["Key"] !== void 0) {
    contents.Key = expectString(output["Key"]);
  }
  if (output["Value"] !== void 0) {
    contents.Value = expectString(output["Value"]);
  }
  return contents;
};
var deserializeAws_queryTagLimitExceededException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryTagList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryTag(entry, context);
  });
};
var deserializeAws_queryTagPolicyException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryTagResourceResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryThrottledException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryTooManyEntriesInBatchRequestException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryTopic = function(output, context) {
  var contents = {
    TopicArn: void 0
  };
  if (output["TopicArn"] !== void 0) {
    contents.TopicArn = expectString(output["TopicArn"]);
  }
  return contents;
};
var deserializeAws_queryTopicAttributesMap = function(output, context) {
  return output.reduce(function(acc, pair) {
    var _a;
    if (pair["value"] === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_a = {}, _a[pair["key"]] = expectString(pair["value"]), _a));
  }, {});
};
var deserializeAws_queryTopicLimitExceededException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryTopicsList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryTopic(entry, context);
  });
};
var deserializeAws_queryUntagResourceResponse = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryUserErrorException = function(output, context) {
  var contents = {
    message: void 0
  };
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeAws_queryValidationException = function(output, context) {
  var contents = {
    Message: void 0
  };
  if (output["Message"] !== void 0) {
    contents.Message = expectString(output["Message"]);
  }
  return contents;
};
var deserializeAws_queryVerificationException = function(output, context) {
  var contents = {
    Message: void 0,
    Status: void 0
  };
  if (output["Message"] !== void 0) {
    contents.Message = expectString(output["Message"]);
  }
  if (output["Status"] !== void 0) {
    contents.Status = expectString(output["Status"]);
  }
  return contents;
};
var deserializeAws_queryVerifySMSSandboxPhoneNumberResult = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeMetadata5 = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody6 = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString6 = function(streamBody, context) {
  return collectBody6(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var buildHttpRpcRequest4 = function(context, headers, path, resolvedHostname, body) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          contents = {
            protocol,
            hostname,
            port,
            method: "POST",
            path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
            headers
          };
          if (resolvedHostname !== void 0) {
            contents.hostname = resolvedHostname;
          }
          if (body !== void 0) {
            contents.body = body;
          }
          return [2, new HttpRequest(contents)];
      }
    });
  });
};
var parseBody5 = function(streamBody, context) {
  return collectBodyString6(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      var parsedObj = (0, import_fast_xml_parser3.parse)(encoded, {
        attributeNamePrefix: "",
        ignoreAttributes: false,
        parseNodeValue: false,
        trimValues: false,
        tagValueProcessor: function(val) {
          return val.trim() === "" && val.includes("\n") ? "" : (0, import_entities3.decodeHTML)(val);
        }
      });
      var textNodeName = "#text";
      var key = Object.keys(parsedObj)[0];
      var parsedObjToReturn = parsedObj[key];
      if (parsedObjToReturn[textNodeName]) {
        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
        delete parsedObjToReturn[textNodeName];
      }
      return getValueFromTextNode(parsedObjToReturn);
    }
    return {};
  });
};
var buildFormUrlencodedString2 = function(formEntries) {
  return Object.entries(formEntries).map(function(_a) {
    var _b = __read(_a, 2), key = _b[0], value = _b[1];
    return extendedEncodeURIComponent(key) + "=" + extendedEncodeURIComponent(value);
  }).join("&");
};
var loadQueryErrorCode2 = function(output, data) {
  if (data.Error.Code !== void 0) {
    return data.Error.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
  return "";
};

// node_modules/@aws-sdk/client-sns/dist-es/commands/AddPermissionCommand.js
var AddPermissionCommand = function(_super) {
  __extends(AddPermissionCommand3, _super);
  function AddPermissionCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  AddPermissionCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "AddPermissionCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: AddPermissionInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  AddPermissionCommand3.prototype.serialize = function(input, context) {
    return serializeAws_queryAddPermissionCommand(input, context);
  };
  AddPermissionCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_queryAddPermissionCommand(output, context);
  };
  return AddPermissionCommand3;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/CheckIfPhoneNumberIsOptedOutCommand.js
var CheckIfPhoneNumberIsOptedOutCommand = function(_super) {
  __extends(CheckIfPhoneNumberIsOptedOutCommand2, _super);
  function CheckIfPhoneNumberIsOptedOutCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CheckIfPhoneNumberIsOptedOutCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "CheckIfPhoneNumberIsOptedOutCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CheckIfPhoneNumberIsOptedOutInput.filterSensitiveLog,
      outputFilterSensitiveLog: CheckIfPhoneNumberIsOptedOutResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CheckIfPhoneNumberIsOptedOutCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCheckIfPhoneNumberIsOptedOutCommand(input, context);
  };
  CheckIfPhoneNumberIsOptedOutCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCheckIfPhoneNumberIsOptedOutCommand(output, context);
  };
  return CheckIfPhoneNumberIsOptedOutCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/ConfirmSubscriptionCommand.js
var ConfirmSubscriptionCommand = function(_super) {
  __extends(ConfirmSubscriptionCommand2, _super);
  function ConfirmSubscriptionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ConfirmSubscriptionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "ConfirmSubscriptionCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ConfirmSubscriptionInput.filterSensitiveLog,
      outputFilterSensitiveLog: ConfirmSubscriptionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ConfirmSubscriptionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryConfirmSubscriptionCommand(input, context);
  };
  ConfirmSubscriptionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryConfirmSubscriptionCommand(output, context);
  };
  return ConfirmSubscriptionCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/CreatePlatformApplicationCommand.js
var CreatePlatformApplicationCommand = function(_super) {
  __extends(CreatePlatformApplicationCommand2, _super);
  function CreatePlatformApplicationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreatePlatformApplicationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "CreatePlatformApplicationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreatePlatformApplicationInput.filterSensitiveLog,
      outputFilterSensitiveLog: CreatePlatformApplicationResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreatePlatformApplicationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCreatePlatformApplicationCommand(input, context);
  };
  CreatePlatformApplicationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCreatePlatformApplicationCommand(output, context);
  };
  return CreatePlatformApplicationCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/CreatePlatformEndpointCommand.js
var CreatePlatformEndpointCommand = function(_super) {
  __extends(CreatePlatformEndpointCommand2, _super);
  function CreatePlatformEndpointCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreatePlatformEndpointCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "CreatePlatformEndpointCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreatePlatformEndpointInput.filterSensitiveLog,
      outputFilterSensitiveLog: CreateEndpointResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreatePlatformEndpointCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCreatePlatformEndpointCommand(input, context);
  };
  CreatePlatformEndpointCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCreatePlatformEndpointCommand(output, context);
  };
  return CreatePlatformEndpointCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/CreateSMSSandboxPhoneNumberCommand.js
var CreateSMSSandboxPhoneNumberCommand = function(_super) {
  __extends(CreateSMSSandboxPhoneNumberCommand2, _super);
  function CreateSMSSandboxPhoneNumberCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateSMSSandboxPhoneNumberCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "CreateSMSSandboxPhoneNumberCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateSMSSandboxPhoneNumberInput.filterSensitiveLog,
      outputFilterSensitiveLog: CreateSMSSandboxPhoneNumberResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateSMSSandboxPhoneNumberCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCreateSMSSandboxPhoneNumberCommand(input, context);
  };
  CreateSMSSandboxPhoneNumberCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCreateSMSSandboxPhoneNumberCommand(output, context);
  };
  return CreateSMSSandboxPhoneNumberCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/CreateTopicCommand.js
var CreateTopicCommand = function(_super) {
  __extends(CreateTopicCommand2, _super);
  function CreateTopicCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateTopicCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "CreateTopicCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateTopicInput.filterSensitiveLog,
      outputFilterSensitiveLog: CreateTopicResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateTopicCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCreateTopicCommand(input, context);
  };
  CreateTopicCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCreateTopicCommand(output, context);
  };
  return CreateTopicCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/DeleteEndpointCommand.js
var DeleteEndpointCommand = function(_super) {
  __extends(DeleteEndpointCommand2, _super);
  function DeleteEndpointCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteEndpointCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "DeleteEndpointCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteEndpointInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteEndpointCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteEndpointCommand(input, context);
  };
  DeleteEndpointCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteEndpointCommand(output, context);
  };
  return DeleteEndpointCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/DeletePlatformApplicationCommand.js
var DeletePlatformApplicationCommand = function(_super) {
  __extends(DeletePlatformApplicationCommand2, _super);
  function DeletePlatformApplicationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeletePlatformApplicationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "DeletePlatformApplicationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeletePlatformApplicationInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeletePlatformApplicationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeletePlatformApplicationCommand(input, context);
  };
  DeletePlatformApplicationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeletePlatformApplicationCommand(output, context);
  };
  return DeletePlatformApplicationCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/DeleteSMSSandboxPhoneNumberCommand.js
var DeleteSMSSandboxPhoneNumberCommand = function(_super) {
  __extends(DeleteSMSSandboxPhoneNumberCommand2, _super);
  function DeleteSMSSandboxPhoneNumberCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteSMSSandboxPhoneNumberCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "DeleteSMSSandboxPhoneNumberCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteSMSSandboxPhoneNumberInput.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteSMSSandboxPhoneNumberResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteSMSSandboxPhoneNumberCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteSMSSandboxPhoneNumberCommand(input, context);
  };
  DeleteSMSSandboxPhoneNumberCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteSMSSandboxPhoneNumberCommand(output, context);
  };
  return DeleteSMSSandboxPhoneNumberCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/DeleteTopicCommand.js
var DeleteTopicCommand = function(_super) {
  __extends(DeleteTopicCommand2, _super);
  function DeleteTopicCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteTopicCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "DeleteTopicCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteTopicInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteTopicCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteTopicCommand(input, context);
  };
  DeleteTopicCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteTopicCommand(output, context);
  };
  return DeleteTopicCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/GetEndpointAttributesCommand.js
var GetEndpointAttributesCommand = function(_super) {
  __extends(GetEndpointAttributesCommand2, _super);
  function GetEndpointAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetEndpointAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "GetEndpointAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetEndpointAttributesInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetEndpointAttributesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetEndpointAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetEndpointAttributesCommand(input, context);
  };
  GetEndpointAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetEndpointAttributesCommand(output, context);
  };
  return GetEndpointAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/GetPlatformApplicationAttributesCommand.js
var GetPlatformApplicationAttributesCommand = function(_super) {
  __extends(GetPlatformApplicationAttributesCommand2, _super);
  function GetPlatformApplicationAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetPlatformApplicationAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "GetPlatformApplicationAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetPlatformApplicationAttributesInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetPlatformApplicationAttributesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetPlatformApplicationAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetPlatformApplicationAttributesCommand(input, context);
  };
  GetPlatformApplicationAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetPlatformApplicationAttributesCommand(output, context);
  };
  return GetPlatformApplicationAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/GetSMSAttributesCommand.js
var GetSMSAttributesCommand = function(_super) {
  __extends(GetSMSAttributesCommand2, _super);
  function GetSMSAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetSMSAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "GetSMSAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetSMSAttributesInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetSMSAttributesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetSMSAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetSMSAttributesCommand(input, context);
  };
  GetSMSAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetSMSAttributesCommand(output, context);
  };
  return GetSMSAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/GetSMSSandboxAccountStatusCommand.js
var GetSMSSandboxAccountStatusCommand = function(_super) {
  __extends(GetSMSSandboxAccountStatusCommand2, _super);
  function GetSMSSandboxAccountStatusCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetSMSSandboxAccountStatusCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "GetSMSSandboxAccountStatusCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetSMSSandboxAccountStatusInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetSMSSandboxAccountStatusResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetSMSSandboxAccountStatusCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetSMSSandboxAccountStatusCommand(input, context);
  };
  GetSMSSandboxAccountStatusCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetSMSSandboxAccountStatusCommand(output, context);
  };
  return GetSMSSandboxAccountStatusCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/GetSubscriptionAttributesCommand.js
var GetSubscriptionAttributesCommand = function(_super) {
  __extends(GetSubscriptionAttributesCommand2, _super);
  function GetSubscriptionAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetSubscriptionAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "GetSubscriptionAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetSubscriptionAttributesInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetSubscriptionAttributesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetSubscriptionAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetSubscriptionAttributesCommand(input, context);
  };
  GetSubscriptionAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetSubscriptionAttributesCommand(output, context);
  };
  return GetSubscriptionAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/GetTopicAttributesCommand.js
var GetTopicAttributesCommand = function(_super) {
  __extends(GetTopicAttributesCommand2, _super);
  function GetTopicAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetTopicAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "GetTopicAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetTopicAttributesInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetTopicAttributesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetTopicAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetTopicAttributesCommand(input, context);
  };
  GetTopicAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetTopicAttributesCommand(output, context);
  };
  return GetTopicAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/ListEndpointsByPlatformApplicationCommand.js
var ListEndpointsByPlatformApplicationCommand = function(_super) {
  __extends(ListEndpointsByPlatformApplicationCommand2, _super);
  function ListEndpointsByPlatformApplicationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListEndpointsByPlatformApplicationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "ListEndpointsByPlatformApplicationCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListEndpointsByPlatformApplicationInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListEndpointsByPlatformApplicationResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListEndpointsByPlatformApplicationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListEndpointsByPlatformApplicationCommand(input, context);
  };
  ListEndpointsByPlatformApplicationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListEndpointsByPlatformApplicationCommand(output, context);
  };
  return ListEndpointsByPlatformApplicationCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/ListOriginationNumbersCommand.js
var ListOriginationNumbersCommand = function(_super) {
  __extends(ListOriginationNumbersCommand2, _super);
  function ListOriginationNumbersCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListOriginationNumbersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "ListOriginationNumbersCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListOriginationNumbersRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListOriginationNumbersResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListOriginationNumbersCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListOriginationNumbersCommand(input, context);
  };
  ListOriginationNumbersCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListOriginationNumbersCommand(output, context);
  };
  return ListOriginationNumbersCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/ListPhoneNumbersOptedOutCommand.js
var ListPhoneNumbersOptedOutCommand = function(_super) {
  __extends(ListPhoneNumbersOptedOutCommand2, _super);
  function ListPhoneNumbersOptedOutCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListPhoneNumbersOptedOutCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "ListPhoneNumbersOptedOutCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListPhoneNumbersOptedOutInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListPhoneNumbersOptedOutResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListPhoneNumbersOptedOutCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListPhoneNumbersOptedOutCommand(input, context);
  };
  ListPhoneNumbersOptedOutCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListPhoneNumbersOptedOutCommand(output, context);
  };
  return ListPhoneNumbersOptedOutCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/ListPlatformApplicationsCommand.js
var ListPlatformApplicationsCommand = function(_super) {
  __extends(ListPlatformApplicationsCommand2, _super);
  function ListPlatformApplicationsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListPlatformApplicationsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "ListPlatformApplicationsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListPlatformApplicationsInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListPlatformApplicationsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListPlatformApplicationsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListPlatformApplicationsCommand(input, context);
  };
  ListPlatformApplicationsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListPlatformApplicationsCommand(output, context);
  };
  return ListPlatformApplicationsCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/ListSMSSandboxPhoneNumbersCommand.js
var ListSMSSandboxPhoneNumbersCommand = function(_super) {
  __extends(ListSMSSandboxPhoneNumbersCommand2, _super);
  function ListSMSSandboxPhoneNumbersCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListSMSSandboxPhoneNumbersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "ListSMSSandboxPhoneNumbersCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListSMSSandboxPhoneNumbersInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListSMSSandboxPhoneNumbersResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListSMSSandboxPhoneNumbersCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListSMSSandboxPhoneNumbersCommand(input, context);
  };
  ListSMSSandboxPhoneNumbersCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListSMSSandboxPhoneNumbersCommand(output, context);
  };
  return ListSMSSandboxPhoneNumbersCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/ListSubscriptionsByTopicCommand.js
var ListSubscriptionsByTopicCommand = function(_super) {
  __extends(ListSubscriptionsByTopicCommand2, _super);
  function ListSubscriptionsByTopicCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListSubscriptionsByTopicCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "ListSubscriptionsByTopicCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListSubscriptionsByTopicInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListSubscriptionsByTopicResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListSubscriptionsByTopicCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListSubscriptionsByTopicCommand(input, context);
  };
  ListSubscriptionsByTopicCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListSubscriptionsByTopicCommand(output, context);
  };
  return ListSubscriptionsByTopicCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/ListSubscriptionsCommand.js
var ListSubscriptionsCommand = function(_super) {
  __extends(ListSubscriptionsCommand2, _super);
  function ListSubscriptionsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListSubscriptionsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "ListSubscriptionsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListSubscriptionsInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListSubscriptionsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListSubscriptionsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListSubscriptionsCommand(input, context);
  };
  ListSubscriptionsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListSubscriptionsCommand(output, context);
  };
  return ListSubscriptionsCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/ListTagsForResourceCommand.js
var ListTagsForResourceCommand = function(_super) {
  __extends(ListTagsForResourceCommand2, _super);
  function ListTagsForResourceCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListTagsForResourceCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "ListTagsForResourceCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListTagsForResourceRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListTagsForResourceResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListTagsForResourceCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListTagsForResourceCommand(input, context);
  };
  ListTagsForResourceCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListTagsForResourceCommand(output, context);
  };
  return ListTagsForResourceCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/ListTopicsCommand.js
var ListTopicsCommand = function(_super) {
  __extends(ListTopicsCommand2, _super);
  function ListTopicsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListTopicsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "ListTopicsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListTopicsInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListTopicsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListTopicsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListTopicsCommand(input, context);
  };
  ListTopicsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListTopicsCommand(output, context);
  };
  return ListTopicsCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/OptInPhoneNumberCommand.js
var OptInPhoneNumberCommand = function(_super) {
  __extends(OptInPhoneNumberCommand2, _super);
  function OptInPhoneNumberCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  OptInPhoneNumberCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "OptInPhoneNumberCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: OptInPhoneNumberInput.filterSensitiveLog,
      outputFilterSensitiveLog: OptInPhoneNumberResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  OptInPhoneNumberCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryOptInPhoneNumberCommand(input, context);
  };
  OptInPhoneNumberCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryOptInPhoneNumberCommand(output, context);
  };
  return OptInPhoneNumberCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/PublishBatchCommand.js
var PublishBatchCommand = function(_super) {
  __extends(PublishBatchCommand2, _super);
  function PublishBatchCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PublishBatchCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "PublishBatchCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PublishBatchInput.filterSensitiveLog,
      outputFilterSensitiveLog: PublishBatchResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PublishBatchCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryPublishBatchCommand(input, context);
  };
  PublishBatchCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryPublishBatchCommand(output, context);
  };
  return PublishBatchCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/PublishCommand.js
var PublishCommand = function(_super) {
  __extends(PublishCommand2, _super);
  function PublishCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PublishCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "PublishCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PublishInput.filterSensitiveLog,
      outputFilterSensitiveLog: PublishResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PublishCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryPublishCommand(input, context);
  };
  PublishCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryPublishCommand(output, context);
  };
  return PublishCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/RemovePermissionCommand.js
var RemovePermissionCommand = function(_super) {
  __extends(RemovePermissionCommand3, _super);
  function RemovePermissionCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  RemovePermissionCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "RemovePermissionCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: RemovePermissionInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  RemovePermissionCommand3.prototype.serialize = function(input, context) {
    return serializeAws_queryRemovePermissionCommand(input, context);
  };
  RemovePermissionCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_queryRemovePermissionCommand(output, context);
  };
  return RemovePermissionCommand3;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/SetEndpointAttributesCommand.js
var SetEndpointAttributesCommand = function(_super) {
  __extends(SetEndpointAttributesCommand2, _super);
  function SetEndpointAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetEndpointAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "SetEndpointAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetEndpointAttributesInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetEndpointAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySetEndpointAttributesCommand(input, context);
  };
  SetEndpointAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySetEndpointAttributesCommand(output, context);
  };
  return SetEndpointAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/SetPlatformApplicationAttributesCommand.js
var SetPlatformApplicationAttributesCommand = function(_super) {
  __extends(SetPlatformApplicationAttributesCommand2, _super);
  function SetPlatformApplicationAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetPlatformApplicationAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "SetPlatformApplicationAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetPlatformApplicationAttributesInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetPlatformApplicationAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySetPlatformApplicationAttributesCommand(input, context);
  };
  SetPlatformApplicationAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySetPlatformApplicationAttributesCommand(output, context);
  };
  return SetPlatformApplicationAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/SetSMSAttributesCommand.js
var SetSMSAttributesCommand = function(_super) {
  __extends(SetSMSAttributesCommand2, _super);
  function SetSMSAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetSMSAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "SetSMSAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetSMSAttributesInput.filterSensitiveLog,
      outputFilterSensitiveLog: SetSMSAttributesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetSMSAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySetSMSAttributesCommand(input, context);
  };
  SetSMSAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySetSMSAttributesCommand(output, context);
  };
  return SetSMSAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/SetSubscriptionAttributesCommand.js
var SetSubscriptionAttributesCommand = function(_super) {
  __extends(SetSubscriptionAttributesCommand2, _super);
  function SetSubscriptionAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetSubscriptionAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "SetSubscriptionAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetSubscriptionAttributesInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetSubscriptionAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySetSubscriptionAttributesCommand(input, context);
  };
  SetSubscriptionAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySetSubscriptionAttributesCommand(output, context);
  };
  return SetSubscriptionAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/SetTopicAttributesCommand.js
var SetTopicAttributesCommand = function(_super) {
  __extends(SetTopicAttributesCommand2, _super);
  function SetTopicAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetTopicAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "SetTopicAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetTopicAttributesInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetTopicAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySetTopicAttributesCommand(input, context);
  };
  SetTopicAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySetTopicAttributesCommand(output, context);
  };
  return SetTopicAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/SubscribeCommand.js
var SubscribeCommand = function(_super) {
  __extends(SubscribeCommand2, _super);
  function SubscribeCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SubscribeCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "SubscribeCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SubscribeInput.filterSensitiveLog,
      outputFilterSensitiveLog: SubscribeResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SubscribeCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySubscribeCommand(input, context);
  };
  SubscribeCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySubscribeCommand(output, context);
  };
  return SubscribeCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/TagResourceCommand.js
var TagResourceCommand2 = function(_super) {
  __extends(TagResourceCommand3, _super);
  function TagResourceCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TagResourceCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "TagResourceCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: TagResourceRequest.filterSensitiveLog,
      outputFilterSensitiveLog: TagResourceResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TagResourceCommand3.prototype.serialize = function(input, context) {
    return serializeAws_queryTagResourceCommand(input, context);
  };
  TagResourceCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_queryTagResourceCommand(output, context);
  };
  return TagResourceCommand3;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/UnsubscribeCommand.js
var UnsubscribeCommand = function(_super) {
  __extends(UnsubscribeCommand2, _super);
  function UnsubscribeCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UnsubscribeCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "UnsubscribeCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UnsubscribeInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UnsubscribeCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryUnsubscribeCommand(input, context);
  };
  UnsubscribeCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryUnsubscribeCommand(output, context);
  };
  return UnsubscribeCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/UntagResourceCommand.js
var UntagResourceCommand2 = function(_super) {
  __extends(UntagResourceCommand3, _super);
  function UntagResourceCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UntagResourceCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "UntagResourceCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UntagResourceRequest.filterSensitiveLog,
      outputFilterSensitiveLog: UntagResourceResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UntagResourceCommand3.prototype.serialize = function(input, context) {
    return serializeAws_queryUntagResourceCommand(input, context);
  };
  UntagResourceCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_queryUntagResourceCommand(output, context);
  };
  return UntagResourceCommand3;
}(Command);

// node_modules/@aws-sdk/client-sns/dist-es/commands/VerifySMSSandboxPhoneNumberCommand.js
var VerifySMSSandboxPhoneNumberCommand = function(_super) {
  __extends(VerifySMSSandboxPhoneNumberCommand2, _super);
  function VerifySMSSandboxPhoneNumberCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  VerifySMSSandboxPhoneNumberCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SNSClient";
    var commandName = "VerifySMSSandboxPhoneNumberCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: VerifySMSSandboxPhoneNumberInput.filterSensitiveLog,
      outputFilterSensitiveLog: VerifySMSSandboxPhoneNumberResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  VerifySMSSandboxPhoneNumberCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryVerifySMSSandboxPhoneNumberCommand(input, context);
  };
  VerifySMSSandboxPhoneNumberCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryVerifySMSSandboxPhoneNumberCommand(output, context);
  };
  return VerifySMSSandboxPhoneNumberCommand2;
}(Command);

// node_modules/@aws-sdk/client-sns/package.json
var name5 = "@aws-sdk/client-sns";
var description5 = "AWS SDK for JavaScript Sns Client for Node.js, Browser and React Native";
var version5 = "3.42.0";
var scripts5 = {
  build: "yarn build:cjs && yarn build:es && yarn build:types",
  "build:cjs": "tsc -p tsconfig.json",
  "build:docs": "yarn clean:docs && typedoc ./",
  "build:es": "tsc -p tsconfig.es.json",
  "build:types": "tsc -p tsconfig.types.json",
  clean: "yarn clean:dist && yarn clean:docs",
  "clean:dist": "rimraf ./dist",
  "clean:docs": "rimraf ./docs",
  "downlevel-dts": "downlevel-dts dist-types dist-types/ts3.4",
  test: "exit 0"
};
var main5 = "./dist-cjs/index.js";
var types5 = "./dist-types/index.d.ts";
var module5 = "./dist-es/index.js";
var sideEffects5 = false;
var dependencies5 = {
  "@aws-crypto/sha256-browser": "2.0.0",
  "@aws-crypto/sha256-js": "2.0.0",
  "@aws-sdk/client-sts": "3.42.0",
  "@aws-sdk/config-resolver": "3.40.0",
  "@aws-sdk/credential-provider-node": "3.41.0",
  "@aws-sdk/fetch-http-handler": "3.40.0",
  "@aws-sdk/hash-node": "3.40.0",
  "@aws-sdk/invalid-dependency": "3.40.0",
  "@aws-sdk/middleware-content-length": "3.40.0",
  "@aws-sdk/middleware-host-header": "3.40.0",
  "@aws-sdk/middleware-logger": "3.40.0",
  "@aws-sdk/middleware-retry": "3.40.0",
  "@aws-sdk/middleware-serde": "3.40.0",
  "@aws-sdk/middleware-signing": "3.40.0",
  "@aws-sdk/middleware-stack": "3.40.0",
  "@aws-sdk/middleware-user-agent": "3.40.0",
  "@aws-sdk/node-config-provider": "3.40.0",
  "@aws-sdk/node-http-handler": "3.40.0",
  "@aws-sdk/protocol-http": "3.40.0",
  "@aws-sdk/smithy-client": "3.41.0",
  "@aws-sdk/types": "3.40.0",
  "@aws-sdk/url-parser": "3.40.0",
  "@aws-sdk/util-base64-browser": "3.37.0",
  "@aws-sdk/util-base64-node": "3.37.0",
  "@aws-sdk/util-body-length-browser": "3.37.0",
  "@aws-sdk/util-body-length-node": "3.37.0",
  "@aws-sdk/util-user-agent-browser": "3.40.0",
  "@aws-sdk/util-user-agent-node": "3.40.0",
  "@aws-sdk/util-utf8-browser": "3.37.0",
  "@aws-sdk/util-utf8-node": "3.37.0",
  entities: "2.2.0",
  "fast-xml-parser": "3.19.0",
  tslib: "^2.3.0"
};
var devDependencies5 = {
  "@aws-sdk/service-client-documentation-generator": "3.38.0",
  "@types/node": "^12.7.5",
  "downlevel-dts": "0.7.0",
  jest: "^26.1.0",
  rimraf: "^3.0.0",
  "ts-jest": "^26.4.1",
  typedoc: "^0.19.2",
  typescript: "~4.3.5"
};
var engines5 = {
  node: ">=10.0.0"
};
var typesVersions5 = {
  "<4.0": {
    "dist-types/*": [
      "dist-types/ts3.4/*"
    ]
  }
};
var files5 = [
  "dist-*"
];
var author5 = {
  name: "AWS SDK for JavaScript Team",
  url: "https://aws.amazon.com/javascript/"
};
var license5 = "Apache-2.0";
var browser5 = {
  "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
};
var react_native5 = {
  "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
};
var homepage5 = "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sns";
var repository5 = {
  type: "git",
  url: "https://github.com/aws/aws-sdk-js-v3.git",
  directory: "clients/client-sns"
};
var package_default5 = {
  name: name5,
  description: description5,
  version: version5,
  scripts: scripts5,
  main: main5,
  types: types5,
  module: module5,
  sideEffects: sideEffects5,
  dependencies: dependencies5,
  devDependencies: devDependencies5,
  engines: engines5,
  typesVersions: typesVersions5,
  files: files5,
  author: author5,
  license: license5,
  browser: browser5,
  "react-native": react_native5,
  homepage: homepage5,
  repository: repository5
};

// node_modules/@aws-sdk/client-sns/dist-es/runtimeConfig.browser.js
var import_sha256_browser5 = __toModule(require_build5());
var import_util_utf8_browser5 = __toModule(require_dist_cjs());

// node_modules/@aws-sdk/client-sns/dist-es/endpoints.js
var regionHash5 = {
  "us-east-1": {
    variants: [
      {
        hostname: "sns.us-east-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "sns-fips.us-east-1.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  "us-east-2": {
    variants: [
      {
        hostname: "sns.us-east-2.amazonaws.com",
        tags: []
      },
      {
        hostname: "sns-fips.us-east-2.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  "us-gov-east-1": {
    variants: [
      {
        hostname: "sns.us-gov-east-1.amazonaws.com",
        tags: []
      }
    ],
    signingRegion: "us-gov-east-1"
  },
  "us-gov-west-1": {
    variants: [
      {
        hostname: "sns.us-gov-west-1.amazonaws.com",
        tags: []
      }
    ],
    signingRegion: "us-gov-west-1"
  },
  "us-west-1": {
    variants: [
      {
        hostname: "sns.us-west-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "sns-fips.us-west-1.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  "us-west-2": {
    variants: [
      {
        hostname: "sns.us-west-2.amazonaws.com",
        tags: []
      },
      {
        hostname: "sns-fips.us-west-2.amazonaws.com",
        tags: ["fips"]
      }
    ]
  }
};
var partitionHash5 = {
  aws: {
    regions: [
      "af-south-1",
      "ap-east-1",
      "ap-northeast-1",
      "ap-northeast-2",
      "ap-northeast-3",
      "ap-south-1",
      "ap-southeast-1",
      "ap-southeast-2",
      "ca-central-1",
      "eu-central-1",
      "eu-north-1",
      "eu-south-1",
      "eu-west-1",
      "eu-west-2",
      "eu-west-3",
      "fips-us-east-1",
      "fips-us-east-2",
      "fips-us-west-1",
      "fips-us-west-2",
      "me-south-1",
      "sa-east-1",
      "us-east-1",
      "us-east-2",
      "us-west-1",
      "us-west-2"
    ],
    regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "sns.{region}.amazonaws.com",
        tags: []
      },
      {
        hostname: "sns-fips.{region}.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "sns-fips.{region}.api.aws",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "sns.{region}.api.aws",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-cn": {
    regions: ["cn-north-1", "cn-northwest-1"],
    regionRegex: "^cn\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "sns.{region}.amazonaws.com.cn",
        tags: []
      },
      {
        hostname: "sns-fips.{region}.amazonaws.com.cn",
        tags: ["fips"]
      },
      {
        hostname: "sns-fips.{region}.api.amazonwebservices.com.cn",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "sns.{region}.api.amazonwebservices.com.cn",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-iso": {
    regions: ["us-iso-east-1", "us-iso-west-1"],
    regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "sns.{region}.c2s.ic.gov",
        tags: []
      },
      {
        hostname: "sns-fips.{region}.c2s.ic.gov",
        tags: ["fips"]
      }
    ]
  },
  "aws-iso-b": {
    regions: ["us-isob-east-1"],
    regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "sns.{region}.sc2s.sgov.gov",
        tags: []
      },
      {
        hostname: "sns-fips.{region}.sc2s.sgov.gov",
        tags: ["fips"]
      }
    ]
  },
  "aws-us-gov": {
    regions: ["us-gov-east-1", "us-gov-west-1"],
    regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "sns.{region}.amazonaws.com",
        tags: []
      },
      {
        hostname: "sns-fips.{region}.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "sns-fips.{region}.api.aws",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "sns.{region}.api.aws",
        tags: ["dualstack"]
      }
    ]
  }
};
var defaultRegionInfoProvider5 = function(region, options) {
  return __awaiter(void 0, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, getRegionInfo(region, __assign(__assign({}, options), { signingService: "sns", regionHash: regionHash5, partitionHash: partitionHash5 }))];
    });
  });
};

// node_modules/@aws-sdk/client-sns/dist-es/runtimeConfig.shared.js
var getRuntimeConfig9 = function(config) {
  var _a, _b, _c, _d, _e;
  return {
    apiVersion: "2010-03-31",
    disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
    logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
    regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : defaultRegionInfoProvider5,
    serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "SNS",
    urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : parseUrl
  };
};

// node_modules/@aws-sdk/client-sns/dist-es/runtimeConfig.browser.js
var getRuntimeConfig10 = function(config) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
  var clientSharedValues = getRuntimeConfig9(config);
  return __assign(__assign(__assign({}, clientSharedValues), config), { runtime: "browser", base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : fromBase64, base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : toBase64, bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : calculateBodyLength, credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : function(_) {
    return function() {
      return Promise.reject(new Error("Credential is missing"));
    };
  }, defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default5.version }), maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : DEFAULT_MAX_ATTEMPTS, region: (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0 ? _g : invalidProvider("Region is missing"), requestHandler: (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0 ? _h : new FetchHttpHandler(), retryMode: (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0 ? _j : function() {
    return Promise.resolve(DEFAULT_RETRY_MODE);
  }, sha256: (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0 ? _k : import_sha256_browser5.Sha256, streamCollector: (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0 ? _l : streamCollector, useDualstackEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0 ? _m : function() {
    return Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT);
  }, useFipsEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0 ? _o : function() {
    return Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT);
  }, utf8Decoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0 ? _p : import_util_utf8_browser5.fromUtf8, utf8Encoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0 ? _q : import_util_utf8_browser5.toUtf8 });
};

// node_modules/@aws-sdk/client-sns/dist-es/SNSClient.js
var SNSClient = function(_super) {
  __extends(SNSClient2, _super);
  function SNSClient2(configuration) {
    var _this = this;
    var _config_0 = getRuntimeConfig10(configuration);
    var _config_1 = resolveRegionConfig(_config_0);
    var _config_2 = resolveEndpointsConfig(_config_1);
    var _config_3 = resolveRetryConfig(_config_2);
    var _config_4 = resolveHostHeaderConfig(_config_3);
    var _config_5 = resolveAwsAuthConfig(_config_4);
    var _config_6 = resolveUserAgentConfig(_config_5);
    _this = _super.call(this, _config_6) || this;
    _this.config = _config_6;
    _this.middlewareStack.use(getRetryPlugin(_this.config));
    _this.middlewareStack.use(getContentLengthPlugin(_this.config));
    _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
    _this.middlewareStack.use(getLoggerPlugin(_this.config));
    _this.middlewareStack.use(getAwsAuthPlugin(_this.config));
    _this.middlewareStack.use(getUserAgentPlugin(_this.config));
    return _this;
  }
  SNSClient2.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
  };
  return SNSClient2;
}(Client);

// node_modules/@aws-sdk/client-sns/dist-es/SNS.js
var SNS = function(_super) {
  __extends(SNS2, _super);
  function SNS2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SNS2.prototype.addPermission = function(args, optionsOrCb, cb) {
    var command = new AddPermissionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.checkIfPhoneNumberIsOptedOut = function(args, optionsOrCb, cb) {
    var command = new CheckIfPhoneNumberIsOptedOutCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.confirmSubscription = function(args, optionsOrCb, cb) {
    var command = new ConfirmSubscriptionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.createPlatformApplication = function(args, optionsOrCb, cb) {
    var command = new CreatePlatformApplicationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.createPlatformEndpoint = function(args, optionsOrCb, cb) {
    var command = new CreatePlatformEndpointCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.createSMSSandboxPhoneNumber = function(args, optionsOrCb, cb) {
    var command = new CreateSMSSandboxPhoneNumberCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.createTopic = function(args, optionsOrCb, cb) {
    var command = new CreateTopicCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.deleteEndpoint = function(args, optionsOrCb, cb) {
    var command = new DeleteEndpointCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.deletePlatformApplication = function(args, optionsOrCb, cb) {
    var command = new DeletePlatformApplicationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.deleteSMSSandboxPhoneNumber = function(args, optionsOrCb, cb) {
    var command = new DeleteSMSSandboxPhoneNumberCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.deleteTopic = function(args, optionsOrCb, cb) {
    var command = new DeleteTopicCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.getEndpointAttributes = function(args, optionsOrCb, cb) {
    var command = new GetEndpointAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.getPlatformApplicationAttributes = function(args, optionsOrCb, cb) {
    var command = new GetPlatformApplicationAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.getSMSAttributes = function(args, optionsOrCb, cb) {
    var command = new GetSMSAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.getSMSSandboxAccountStatus = function(args, optionsOrCb, cb) {
    var command = new GetSMSSandboxAccountStatusCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.getSubscriptionAttributes = function(args, optionsOrCb, cb) {
    var command = new GetSubscriptionAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.getTopicAttributes = function(args, optionsOrCb, cb) {
    var command = new GetTopicAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.listEndpointsByPlatformApplication = function(args, optionsOrCb, cb) {
    var command = new ListEndpointsByPlatformApplicationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.listOriginationNumbers = function(args, optionsOrCb, cb) {
    var command = new ListOriginationNumbersCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.listPhoneNumbersOptedOut = function(args, optionsOrCb, cb) {
    var command = new ListPhoneNumbersOptedOutCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.listPlatformApplications = function(args, optionsOrCb, cb) {
    var command = new ListPlatformApplicationsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.listSMSSandboxPhoneNumbers = function(args, optionsOrCb, cb) {
    var command = new ListSMSSandboxPhoneNumbersCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.listSubscriptions = function(args, optionsOrCb, cb) {
    var command = new ListSubscriptionsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.listSubscriptionsByTopic = function(args, optionsOrCb, cb) {
    var command = new ListSubscriptionsByTopicCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.listTagsForResource = function(args, optionsOrCb, cb) {
    var command = new ListTagsForResourceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.listTopics = function(args, optionsOrCb, cb) {
    var command = new ListTopicsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.optInPhoneNumber = function(args, optionsOrCb, cb) {
    var command = new OptInPhoneNumberCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.publish = function(args, optionsOrCb, cb) {
    var command = new PublishCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.publishBatch = function(args, optionsOrCb, cb) {
    var command = new PublishBatchCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.removePermission = function(args, optionsOrCb, cb) {
    var command = new RemovePermissionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.setEndpointAttributes = function(args, optionsOrCb, cb) {
    var command = new SetEndpointAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.setPlatformApplicationAttributes = function(args, optionsOrCb, cb) {
    var command = new SetPlatformApplicationAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.setSMSAttributes = function(args, optionsOrCb, cb) {
    var command = new SetSMSAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.setSubscriptionAttributes = function(args, optionsOrCb, cb) {
    var command = new SetSubscriptionAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.setTopicAttributes = function(args, optionsOrCb, cb) {
    var command = new SetTopicAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.subscribe = function(args, optionsOrCb, cb) {
    var command = new SubscribeCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.tagResource = function(args, optionsOrCb, cb) {
    var command = new TagResourceCommand2(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.unsubscribe = function(args, optionsOrCb, cb) {
    var command = new UnsubscribeCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.untagResource = function(args, optionsOrCb, cb) {
    var command = new UntagResourceCommand2(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SNS2.prototype.verifySMSSandboxPhoneNumber = function(args, optionsOrCb, cb) {
    var command = new VerifySMSSandboxPhoneNumberCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  return SNS2;
}(SNSClient);

// node_modules/@aws-sdk/client-sqs/dist-es/models/models_0.js
var AddPermissionRequest;
(function(AddPermissionRequest2) {
  AddPermissionRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AddPermissionRequest || (AddPermissionRequest = {}));
var OverLimit;
(function(OverLimit2) {
  OverLimit2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(OverLimit || (OverLimit = {}));
var ChangeMessageVisibilityRequest;
(function(ChangeMessageVisibilityRequest2) {
  ChangeMessageVisibilityRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ChangeMessageVisibilityRequest || (ChangeMessageVisibilityRequest = {}));
var MessageNotInflight;
(function(MessageNotInflight2) {
  MessageNotInflight2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MessageNotInflight || (MessageNotInflight = {}));
var ReceiptHandleIsInvalid;
(function(ReceiptHandleIsInvalid2) {
  ReceiptHandleIsInvalid2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReceiptHandleIsInvalid || (ReceiptHandleIsInvalid = {}));
var BatchEntryIdsNotDistinct;
(function(BatchEntryIdsNotDistinct2) {
  BatchEntryIdsNotDistinct2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BatchEntryIdsNotDistinct || (BatchEntryIdsNotDistinct = {}));
var ChangeMessageVisibilityBatchRequestEntry;
(function(ChangeMessageVisibilityBatchRequestEntry2) {
  ChangeMessageVisibilityBatchRequestEntry2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ChangeMessageVisibilityBatchRequestEntry || (ChangeMessageVisibilityBatchRequestEntry = {}));
var ChangeMessageVisibilityBatchRequest;
(function(ChangeMessageVisibilityBatchRequest2) {
  ChangeMessageVisibilityBatchRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ChangeMessageVisibilityBatchRequest || (ChangeMessageVisibilityBatchRequest = {}));
var BatchResultErrorEntry2;
(function(BatchResultErrorEntry3) {
  BatchResultErrorEntry3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BatchResultErrorEntry2 || (BatchResultErrorEntry2 = {}));
var ChangeMessageVisibilityBatchResultEntry;
(function(ChangeMessageVisibilityBatchResultEntry2) {
  ChangeMessageVisibilityBatchResultEntry2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ChangeMessageVisibilityBatchResultEntry || (ChangeMessageVisibilityBatchResultEntry = {}));
var ChangeMessageVisibilityBatchResult;
(function(ChangeMessageVisibilityBatchResult2) {
  ChangeMessageVisibilityBatchResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ChangeMessageVisibilityBatchResult || (ChangeMessageVisibilityBatchResult = {}));
var EmptyBatchRequest;
(function(EmptyBatchRequest2) {
  EmptyBatchRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(EmptyBatchRequest || (EmptyBatchRequest = {}));
var InvalidBatchEntryId;
(function(InvalidBatchEntryId2) {
  InvalidBatchEntryId2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidBatchEntryId || (InvalidBatchEntryId = {}));
var TooManyEntriesInBatchRequest;
(function(TooManyEntriesInBatchRequest2) {
  TooManyEntriesInBatchRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TooManyEntriesInBatchRequest || (TooManyEntriesInBatchRequest = {}));
var CreateQueueRequest;
(function(CreateQueueRequest2) {
  CreateQueueRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateQueueRequest || (CreateQueueRequest = {}));
var CreateQueueResult;
(function(CreateQueueResult2) {
  CreateQueueResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateQueueResult || (CreateQueueResult = {}));
var QueueDeletedRecently;
(function(QueueDeletedRecently2) {
  QueueDeletedRecently2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(QueueDeletedRecently || (QueueDeletedRecently = {}));
var QueueNameExists;
(function(QueueNameExists2) {
  QueueNameExists2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(QueueNameExists || (QueueNameExists = {}));
var DeleteMessageRequest;
(function(DeleteMessageRequest2) {
  DeleteMessageRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteMessageRequest || (DeleteMessageRequest = {}));
var InvalidIdFormat;
(function(InvalidIdFormat2) {
  InvalidIdFormat2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidIdFormat || (InvalidIdFormat = {}));
var DeleteMessageBatchRequestEntry;
(function(DeleteMessageBatchRequestEntry2) {
  DeleteMessageBatchRequestEntry2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteMessageBatchRequestEntry || (DeleteMessageBatchRequestEntry = {}));
var DeleteMessageBatchRequest;
(function(DeleteMessageBatchRequest2) {
  DeleteMessageBatchRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteMessageBatchRequest || (DeleteMessageBatchRequest = {}));
var DeleteMessageBatchResultEntry;
(function(DeleteMessageBatchResultEntry2) {
  DeleteMessageBatchResultEntry2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteMessageBatchResultEntry || (DeleteMessageBatchResultEntry = {}));
var DeleteMessageBatchResult;
(function(DeleteMessageBatchResult2) {
  DeleteMessageBatchResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteMessageBatchResult || (DeleteMessageBatchResult = {}));
var DeleteQueueRequest;
(function(DeleteQueueRequest2) {
  DeleteQueueRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteQueueRequest || (DeleteQueueRequest = {}));
var GetQueueAttributesRequest;
(function(GetQueueAttributesRequest2) {
  GetQueueAttributesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetQueueAttributesRequest || (GetQueueAttributesRequest = {}));
var GetQueueAttributesResult;
(function(GetQueueAttributesResult2) {
  GetQueueAttributesResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetQueueAttributesResult || (GetQueueAttributesResult = {}));
var InvalidAttributeName;
(function(InvalidAttributeName2) {
  InvalidAttributeName2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidAttributeName || (InvalidAttributeName = {}));
var GetQueueUrlRequest;
(function(GetQueueUrlRequest2) {
  GetQueueUrlRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetQueueUrlRequest || (GetQueueUrlRequest = {}));
var GetQueueUrlResult;
(function(GetQueueUrlResult2) {
  GetQueueUrlResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetQueueUrlResult || (GetQueueUrlResult = {}));
var QueueDoesNotExist;
(function(QueueDoesNotExist2) {
  QueueDoesNotExist2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(QueueDoesNotExist || (QueueDoesNotExist = {}));
var ListDeadLetterSourceQueuesRequest;
(function(ListDeadLetterSourceQueuesRequest2) {
  ListDeadLetterSourceQueuesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListDeadLetterSourceQueuesRequest || (ListDeadLetterSourceQueuesRequest = {}));
var ListDeadLetterSourceQueuesResult;
(function(ListDeadLetterSourceQueuesResult2) {
  ListDeadLetterSourceQueuesResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListDeadLetterSourceQueuesResult || (ListDeadLetterSourceQueuesResult = {}));
var ListQueuesRequest;
(function(ListQueuesRequest2) {
  ListQueuesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListQueuesRequest || (ListQueuesRequest = {}));
var ListQueuesResult;
(function(ListQueuesResult2) {
  ListQueuesResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListQueuesResult || (ListQueuesResult = {}));
var ListQueueTagsRequest;
(function(ListQueueTagsRequest2) {
  ListQueueTagsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListQueueTagsRequest || (ListQueueTagsRequest = {}));
var ListQueueTagsResult;
(function(ListQueueTagsResult2) {
  ListQueueTagsResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListQueueTagsResult || (ListQueueTagsResult = {}));
var PurgeQueueInProgress;
(function(PurgeQueueInProgress2) {
  PurgeQueueInProgress2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PurgeQueueInProgress || (PurgeQueueInProgress = {}));
var PurgeQueueRequest;
(function(PurgeQueueRequest2) {
  PurgeQueueRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PurgeQueueRequest || (PurgeQueueRequest = {}));
var ReceiveMessageRequest;
(function(ReceiveMessageRequest2) {
  ReceiveMessageRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReceiveMessageRequest || (ReceiveMessageRequest = {}));
var MessageAttributeValue2;
(function(MessageAttributeValue3) {
  MessageAttributeValue3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MessageAttributeValue2 || (MessageAttributeValue2 = {}));
var Message2;
(function(Message3) {
  Message3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Message2 || (Message2 = {}));
var ReceiveMessageResult;
(function(ReceiveMessageResult2) {
  ReceiveMessageResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ReceiveMessageResult || (ReceiveMessageResult = {}));
var RemovePermissionRequest;
(function(RemovePermissionRequest2) {
  RemovePermissionRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RemovePermissionRequest || (RemovePermissionRequest = {}));
var InvalidMessageContents;
(function(InvalidMessageContents2) {
  InvalidMessageContents2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidMessageContents || (InvalidMessageContents = {}));
var MessageSystemAttributeValue;
(function(MessageSystemAttributeValue2) {
  MessageSystemAttributeValue2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MessageSystemAttributeValue || (MessageSystemAttributeValue = {}));
var SendMessageRequest;
(function(SendMessageRequest2) {
  SendMessageRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendMessageRequest || (SendMessageRequest = {}));
var SendMessageResult;
(function(SendMessageResult2) {
  SendMessageResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendMessageResult || (SendMessageResult = {}));
var UnsupportedOperation;
(function(UnsupportedOperation2) {
  UnsupportedOperation2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UnsupportedOperation || (UnsupportedOperation = {}));
var BatchRequestTooLong;
(function(BatchRequestTooLong2) {
  BatchRequestTooLong2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(BatchRequestTooLong || (BatchRequestTooLong = {}));
var SendMessageBatchRequestEntry;
(function(SendMessageBatchRequestEntry2) {
  SendMessageBatchRequestEntry2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendMessageBatchRequestEntry || (SendMessageBatchRequestEntry = {}));
var SendMessageBatchRequest;
(function(SendMessageBatchRequest2) {
  SendMessageBatchRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendMessageBatchRequest || (SendMessageBatchRequest = {}));
var SendMessageBatchResultEntry;
(function(SendMessageBatchResultEntry2) {
  SendMessageBatchResultEntry2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendMessageBatchResultEntry || (SendMessageBatchResultEntry = {}));
var SendMessageBatchResult;
(function(SendMessageBatchResult2) {
  SendMessageBatchResult2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SendMessageBatchResult || (SendMessageBatchResult = {}));
var SetQueueAttributesRequest;
(function(SetQueueAttributesRequest2) {
  SetQueueAttributesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetQueueAttributesRequest || (SetQueueAttributesRequest = {}));
var TagQueueRequest;
(function(TagQueueRequest2) {
  TagQueueRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TagQueueRequest || (TagQueueRequest = {}));
var UntagQueueRequest;
(function(UntagQueueRequest2) {
  UntagQueueRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UntagQueueRequest || (UntagQueueRequest = {}));

// node_modules/@aws-sdk/client-sqs/dist-es/protocols/Aws_query.js
var import_entities4 = __toModule(require_lib());
var import_fast_xml_parser4 = __toModule(require_parser());
var serializeAws_queryAddPermissionCommand2 = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryAddPermissionRequest(input, context)), { Action: "AddPermission", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryChangeMessageVisibilityCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryChangeMessageVisibilityRequest(input, context)), { Action: "ChangeMessageVisibility", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryChangeMessageVisibilityBatchCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryChangeMessageVisibilityBatchRequest(input, context)), { Action: "ChangeMessageVisibilityBatch", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryCreateQueueCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryCreateQueueRequest(input, context)), { Action: "CreateQueue", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteMessageCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryDeleteMessageRequest(input, context)), { Action: "DeleteMessage", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteMessageBatchCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryDeleteMessageBatchRequest(input, context)), { Action: "DeleteMessageBatch", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryDeleteQueueCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryDeleteQueueRequest(input, context)), { Action: "DeleteQueue", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetQueueAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryGetQueueAttributesRequest(input, context)), { Action: "GetQueueAttributes", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryGetQueueUrlCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryGetQueueUrlRequest(input, context)), { Action: "GetQueueUrl", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListDeadLetterSourceQueuesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryListDeadLetterSourceQueuesRequest(input, context)), { Action: "ListDeadLetterSourceQueues", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListQueuesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryListQueuesRequest(input, context)), { Action: "ListQueues", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryListQueueTagsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryListQueueTagsRequest(input, context)), { Action: "ListQueueTags", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryPurgeQueueCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryPurgeQueueRequest(input, context)), { Action: "PurgeQueue", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryReceiveMessageCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryReceiveMessageRequest(input, context)), { Action: "ReceiveMessage", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryRemovePermissionCommand2 = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryRemovePermissionRequest(input, context)), { Action: "RemovePermission", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySendMessageCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_querySendMessageRequest(input, context)), { Action: "SendMessage", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySendMessageBatchCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_querySendMessageBatchRequest(input, context)), { Action: "SendMessageBatch", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_querySetQueueAttributesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_querySetQueueAttributesRequest(input, context)), { Action: "SetQueueAttributes", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryTagQueueCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryTagQueueRequest(input, context)), { Action: "TagQueue", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_queryUntagQueueCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      body = buildFormUrlencodedString3(__assign(__assign({}, serializeAws_queryUntagQueueRequest(input, context)), { Action: "UntagQueue", Version: "2012-11-05" }));
      return [2, buildHttpRpcRequest5(context, headers, "/", void 0, body)];
    });
  });
};
var deserializeAws_queryAddPermissionCommand2 = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryAddPermissionCommandError2(output, context)];
          }
          return [4, collectBody7(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata6(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryAddPermissionCommandError2 = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "OverLimit":
              return [3, 2];
            case "com.amazonaws.sqs#OverLimit":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryOverLimitResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryChangeMessageVisibilityCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryChangeMessageVisibilityCommandError(output, context)];
          }
          return [4, collectBody7(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata6(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryChangeMessageVisibilityCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "MessageNotInflight":
              return [3, 2];
            case "com.amazonaws.sqs#MessageNotInflight":
              return [3, 2];
            case "ReceiptHandleIsInvalid":
              return [3, 4];
            case "com.amazonaws.sqs#ReceiptHandleIsInvalid":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryMessageNotInflightResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryReceiptHandleIsInvalidResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryChangeMessageVisibilityBatchCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryChangeMessageVisibilityBatchCommandError(output, context)];
          }
          return [4, parseBody6(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryChangeMessageVisibilityBatchResult(data.ChangeMessageVisibilityBatchResult, context);
          response = __assign({ $metadata: deserializeMetadata6(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryChangeMessageVisibilityBatchCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "BatchEntryIdsNotDistinct":
              return [3, 2];
            case "com.amazonaws.sqs#BatchEntryIdsNotDistinct":
              return [3, 2];
            case "EmptyBatchRequest":
              return [3, 4];
            case "com.amazonaws.sqs#EmptyBatchRequest":
              return [3, 4];
            case "InvalidBatchEntryId":
              return [3, 6];
            case "com.amazonaws.sqs#InvalidBatchEntryId":
              return [3, 6];
            case "TooManyEntriesInBatchRequest":
              return [3, 8];
            case "com.amazonaws.sqs#TooManyEntriesInBatchRequest":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryBatchEntryIdsNotDistinctResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryEmptyBatchRequestResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidBatchEntryIdResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryTooManyEntriesInBatchRequestResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryCreateQueueCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryCreateQueueCommandError(output, context)];
          }
          return [4, parseBody6(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryCreateQueueResult(data.CreateQueueResult, context);
          response = __assign({ $metadata: deserializeMetadata6(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryCreateQueueCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "QueueDeletedRecently":
              return [3, 2];
            case "com.amazonaws.sqs#QueueDeletedRecently":
              return [3, 2];
            case "QueueNameExists":
              return [3, 4];
            case "com.amazonaws.sqs#QueueNameExists":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryQueueDeletedRecentlyResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryQueueNameExistsResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteMessageCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteMessageCommandError(output, context)];
          }
          return [4, collectBody7(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata6(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteMessageCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidIdFormat":
              return [3, 2];
            case "com.amazonaws.sqs#InvalidIdFormat":
              return [3, 2];
            case "ReceiptHandleIsInvalid":
              return [3, 4];
            case "com.amazonaws.sqs#ReceiptHandleIsInvalid":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryInvalidIdFormatResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryReceiptHandleIsInvalidResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteMessageBatchCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteMessageBatchCommandError(output, context)];
          }
          return [4, parseBody6(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryDeleteMessageBatchResult(data.DeleteMessageBatchResult, context);
          response = __assign({ $metadata: deserializeMetadata6(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteMessageBatchCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "BatchEntryIdsNotDistinct":
              return [3, 2];
            case "com.amazonaws.sqs#BatchEntryIdsNotDistinct":
              return [3, 2];
            case "EmptyBatchRequest":
              return [3, 4];
            case "com.amazonaws.sqs#EmptyBatchRequest":
              return [3, 4];
            case "InvalidBatchEntryId":
              return [3, 6];
            case "com.amazonaws.sqs#InvalidBatchEntryId":
              return [3, 6];
            case "TooManyEntriesInBatchRequest":
              return [3, 8];
            case "com.amazonaws.sqs#TooManyEntriesInBatchRequest":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryBatchEntryIdsNotDistinctResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryEmptyBatchRequestResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryInvalidBatchEntryIdResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryTooManyEntriesInBatchRequestResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryDeleteQueueCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryDeleteQueueCommandError(output, context)];
          }
          return [4, collectBody7(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata6(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryDeleteQueueCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetQueueAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetQueueAttributesCommandError(output, context)];
          }
          return [4, parseBody6(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetQueueAttributesResult(data.GetQueueAttributesResult, context);
          response = __assign({ $metadata: deserializeMetadata6(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetQueueAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidAttributeName":
              return [3, 2];
            case "com.amazonaws.sqs#InvalidAttributeName":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryInvalidAttributeNameResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryGetQueueUrlCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryGetQueueUrlCommandError(output, context)];
          }
          return [4, parseBody6(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryGetQueueUrlResult(data.GetQueueUrlResult, context);
          response = __assign({ $metadata: deserializeMetadata6(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryGetQueueUrlCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "QueueDoesNotExist":
              return [3, 2];
            case "com.amazonaws.sqs#QueueDoesNotExist":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryQueueDoesNotExistResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListDeadLetterSourceQueuesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListDeadLetterSourceQueuesCommandError(output, context)];
          }
          return [4, parseBody6(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListDeadLetterSourceQueuesResult(data.ListDeadLetterSourceQueuesResult, context);
          response = __assign({ $metadata: deserializeMetadata6(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListDeadLetterSourceQueuesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "QueueDoesNotExist":
              return [3, 2];
            case "com.amazonaws.sqs#QueueDoesNotExist":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryQueueDoesNotExistResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListQueuesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListQueuesCommandError(output, context)];
          }
          return [4, parseBody6(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListQueuesResult(data.ListQueuesResult, context);
          response = __assign({ $metadata: deserializeMetadata6(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListQueuesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryListQueueTagsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryListQueueTagsCommandError(output, context)];
          }
          return [4, parseBody6(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryListQueueTagsResult(data.ListQueueTagsResult, context);
          response = __assign({ $metadata: deserializeMetadata6(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryListQueueTagsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryPurgeQueueCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryPurgeQueueCommandError(output, context)];
          }
          return [4, collectBody7(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata6(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryPurgeQueueCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "PurgeQueueInProgress":
              return [3, 2];
            case "com.amazonaws.sqs#PurgeQueueInProgress":
              return [3, 2];
            case "QueueDoesNotExist":
              return [3, 4];
            case "com.amazonaws.sqs#QueueDoesNotExist":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryPurgeQueueInProgressResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryQueueDoesNotExistResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryReceiveMessageCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryReceiveMessageCommandError(output, context)];
          }
          return [4, parseBody6(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_queryReceiveMessageResult(data.ReceiveMessageResult, context);
          response = __assign({ $metadata: deserializeMetadata6(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryReceiveMessageCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "OverLimit":
              return [3, 2];
            case "com.amazonaws.sqs#OverLimit":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryOverLimitResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryRemovePermissionCommand2 = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryRemovePermissionCommandError2(output, context)];
          }
          return [4, collectBody7(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata6(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryRemovePermissionCommandError2 = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySendMessageCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySendMessageCommandError(output, context)];
          }
          return [4, parseBody6(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySendMessageResult(data.SendMessageResult, context);
          response = __assign({ $metadata: deserializeMetadata6(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySendMessageCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidMessageContents":
              return [3, 2];
            case "com.amazonaws.sqs#InvalidMessageContents":
              return [3, 2];
            case "UnsupportedOperation":
              return [3, 4];
            case "com.amazonaws.sqs#UnsupportedOperation":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryInvalidMessageContentsResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryUnsupportedOperationResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySendMessageBatchCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySendMessageBatchCommandError(output, context)];
          }
          return [4, parseBody6(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_querySendMessageBatchResult(data.SendMessageBatchResult, context);
          response = __assign({ $metadata: deserializeMetadata6(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySendMessageBatchCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "BatchEntryIdsNotDistinct":
              return [3, 2];
            case "com.amazonaws.sqs#BatchEntryIdsNotDistinct":
              return [3, 2];
            case "BatchRequestTooLong":
              return [3, 4];
            case "com.amazonaws.sqs#BatchRequestTooLong":
              return [3, 4];
            case "EmptyBatchRequest":
              return [3, 6];
            case "com.amazonaws.sqs#EmptyBatchRequest":
              return [3, 6];
            case "InvalidBatchEntryId":
              return [3, 8];
            case "com.amazonaws.sqs#InvalidBatchEntryId":
              return [3, 8];
            case "TooManyEntriesInBatchRequest":
              return [3, 10];
            case "com.amazonaws.sqs#TooManyEntriesInBatchRequest":
              return [3, 10];
            case "UnsupportedOperation":
              return [3, 12];
            case "com.amazonaws.sqs#UnsupportedOperation":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryBatchEntryIdsNotDistinctResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_queryBatchRequestTooLongResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_queryEmptyBatchRequestResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_queryInvalidBatchEntryIdResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_queryTooManyEntriesInBatchRequestResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_queryUnsupportedOperationResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_querySetQueueAttributesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_querySetQueueAttributesCommandError(output, context)];
          }
          return [4, collectBody7(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata6(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_querySetQueueAttributesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidAttributeName":
              return [3, 2];
            case "com.amazonaws.sqs#InvalidAttributeName":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_queryInvalidAttributeNameResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata6(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
          response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryTagQueueCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryTagQueueCommandError(output, context)];
          }
          return [4, collectBody7(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata6(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryTagQueueCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryUntagQueueCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_queryUntagQueueCommandError(output, context)];
          }
          return [4, collectBody7(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata6(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_queryUntagQueueCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = [__assign({}, output)];
          _b = {};
          return [4, parseBody6(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
          errorCode = "UnknownError";
          errorCode = loadQueryErrorCode3(output, parsedOutput.body);
          switch (errorCode) {
            default:
              parsedBody = parsedOutput.body;
              errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
              response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata6(output) });
          }
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_queryBatchEntryIdsNotDistinctResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryBatchEntryIdsNotDistinct(body.Error, context);
      contents = __assign({ name: "BatchEntryIdsNotDistinct", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryBatchRequestTooLongResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryBatchRequestTooLong(body.Error, context);
      contents = __assign({ name: "BatchRequestTooLong", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryEmptyBatchRequestResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryEmptyBatchRequest(body.Error, context);
      contents = __assign({ name: "EmptyBatchRequest", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidAttributeNameResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidAttributeName(body.Error, context);
      contents = __assign({ name: "InvalidAttributeName", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidBatchEntryIdResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidBatchEntryId(body.Error, context);
      contents = __assign({ name: "InvalidBatchEntryId", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidIdFormatResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidIdFormat(body.Error, context);
      contents = __assign({ name: "InvalidIdFormat", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryInvalidMessageContentsResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryInvalidMessageContents(body.Error, context);
      contents = __assign({ name: "InvalidMessageContents", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryMessageNotInflightResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryMessageNotInflight(body.Error, context);
      contents = __assign({ name: "MessageNotInflight", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryOverLimitResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryOverLimit(body.Error, context);
      contents = __assign({ name: "OverLimit", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryPurgeQueueInProgressResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryPurgeQueueInProgress(body.Error, context);
      contents = __assign({ name: "PurgeQueueInProgress", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryQueueDeletedRecentlyResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryQueueDeletedRecently(body.Error, context);
      contents = __assign({ name: "QueueDeletedRecently", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryQueueDoesNotExistResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryQueueDoesNotExist(body.Error, context);
      contents = __assign({ name: "QueueDoesNotExist", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryQueueNameExistsResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryQueueNameExists(body.Error, context);
      contents = __assign({ name: "QueueNameExists", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryReceiptHandleIsInvalidResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryReceiptHandleIsInvalid(body.Error, context);
      contents = __assign({ name: "ReceiptHandleIsInvalid", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryTooManyEntriesInBatchRequestResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryTooManyEntriesInBatchRequest(body.Error, context);
      contents = __assign({ name: "TooManyEntriesInBatchRequest", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_queryUnsupportedOperationResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_queryUnsupportedOperation(body.Error, context);
      contents = __assign({ name: "UnsupportedOperation", $fault: "client", $metadata: deserializeMetadata6(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var serializeAws_queryActionNameList = function(input, context) {
  var e_1, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
      var entry = input_1_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (input_1_1 && !input_1_1.done && (_a = input_1.return))
        _a.call(input_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return entries;
};
var serializeAws_queryAddPermissionRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  if (input.Label !== void 0 && input.Label !== null) {
    entries["Label"] = input.Label;
  }
  if (input.AWSAccountIds !== void 0 && input.AWSAccountIds !== null) {
    var memberEntries = serializeAws_queryAWSAccountIdList(input.AWSAccountIds, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "AWSAccountId." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  if (input.Actions !== void 0 && input.Actions !== null) {
    var memberEntries = serializeAws_queryActionNameList(input.Actions, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "ActionName." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryAttributeNameList = function(input, context) {
  var e_2, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_2 = __values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {
      var entry = input_2_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (input_2_1 && !input_2_1.done && (_a = input_2.return))
        _a.call(input_2);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  return entries;
};
var serializeAws_queryAWSAccountIdList = function(input, context) {
  var e_3, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_3 = __values(input), input_3_1 = input_3.next(); !input_3_1.done; input_3_1 = input_3.next()) {
      var entry = input_3_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_3_1) {
    e_3 = { error: e_3_1 };
  } finally {
    try {
      if (input_3_1 && !input_3_1.done && (_a = input_3.return))
        _a.call(input_3);
    } finally {
      if (e_3)
        throw e_3.error;
    }
  }
  return entries;
};
var serializeAws_queryBinaryList = function(input, context) {
  var e_4, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_4 = __values(input), input_4_1 = input_4.next(); !input_4_1.done; input_4_1 = input_4.next()) {
      var entry = input_4_1.value;
      if (entry === null) {
        continue;
      }
      entries["BinaryListValue." + counter] = context.base64Encoder(entry);
      counter++;
    }
  } catch (e_4_1) {
    e_4 = { error: e_4_1 };
  } finally {
    try {
      if (input_4_1 && !input_4_1.done && (_a = input_4.return))
        _a.call(input_4);
    } finally {
      if (e_4)
        throw e_4.error;
    }
  }
  return entries;
};
var serializeAws_queryChangeMessageVisibilityBatchRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  if (input.Entries !== void 0 && input.Entries !== null) {
    var memberEntries = serializeAws_queryChangeMessageVisibilityBatchRequestEntryList(input.Entries, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "ChangeMessageVisibilityBatchRequestEntry." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryChangeMessageVisibilityBatchRequestEntry = function(input, context) {
  var entries = {};
  if (input.Id !== void 0 && input.Id !== null) {
    entries["Id"] = input.Id;
  }
  if (input.ReceiptHandle !== void 0 && input.ReceiptHandle !== null) {
    entries["ReceiptHandle"] = input.ReceiptHandle;
  }
  if (input.VisibilityTimeout !== void 0 && input.VisibilityTimeout !== null) {
    entries["VisibilityTimeout"] = input.VisibilityTimeout;
  }
  return entries;
};
var serializeAws_queryChangeMessageVisibilityBatchRequestEntryList = function(input, context) {
  var e_5, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_5 = __values(input), input_5_1 = input_5.next(); !input_5_1.done; input_5_1 = input_5.next()) {
      var entry = input_5_1.value;
      if (entry === null) {
        continue;
      }
      var memberEntries = serializeAws_queryChangeMessageVisibilityBatchRequestEntry(entry, context);
      Object.entries(memberEntries).forEach(function(_a2) {
        var _b = __read(_a2, 2), key = _b[0], value = _b[1];
        entries["member." + counter + "." + key] = value;
      });
      counter++;
    }
  } catch (e_5_1) {
    e_5 = { error: e_5_1 };
  } finally {
    try {
      if (input_5_1 && !input_5_1.done && (_a = input_5.return))
        _a.call(input_5);
    } finally {
      if (e_5)
        throw e_5.error;
    }
  }
  return entries;
};
var serializeAws_queryChangeMessageVisibilityRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  if (input.ReceiptHandle !== void 0 && input.ReceiptHandle !== null) {
    entries["ReceiptHandle"] = input.ReceiptHandle;
  }
  if (input.VisibilityTimeout !== void 0 && input.VisibilityTimeout !== null) {
    entries["VisibilityTimeout"] = input.VisibilityTimeout;
  }
  return entries;
};
var serializeAws_queryCreateQueueRequest = function(input, context) {
  var entries = {};
  if (input.QueueName !== void 0 && input.QueueName !== null) {
    entries["QueueName"] = input.QueueName;
  }
  if (input.tags !== void 0 && input.tags !== null) {
    var memberEntries = serializeAws_queryTagMap(input.tags, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Tag." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  if (input.Attributes !== void 0 && input.Attributes !== null) {
    var memberEntries = serializeAws_queryQueueAttributeMap(input.Attributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Attribute." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryDeleteMessageBatchRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  if (input.Entries !== void 0 && input.Entries !== null) {
    var memberEntries = serializeAws_queryDeleteMessageBatchRequestEntryList(input.Entries, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "DeleteMessageBatchRequestEntry." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryDeleteMessageBatchRequestEntry = function(input, context) {
  var entries = {};
  if (input.Id !== void 0 && input.Id !== null) {
    entries["Id"] = input.Id;
  }
  if (input.ReceiptHandle !== void 0 && input.ReceiptHandle !== null) {
    entries["ReceiptHandle"] = input.ReceiptHandle;
  }
  return entries;
};
var serializeAws_queryDeleteMessageBatchRequestEntryList = function(input, context) {
  var e_6, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_6 = __values(input), input_6_1 = input_6.next(); !input_6_1.done; input_6_1 = input_6.next()) {
      var entry = input_6_1.value;
      if (entry === null) {
        continue;
      }
      var memberEntries = serializeAws_queryDeleteMessageBatchRequestEntry(entry, context);
      Object.entries(memberEntries).forEach(function(_a2) {
        var _b = __read(_a2, 2), key = _b[0], value = _b[1];
        entries["member." + counter + "." + key] = value;
      });
      counter++;
    }
  } catch (e_6_1) {
    e_6 = { error: e_6_1 };
  } finally {
    try {
      if (input_6_1 && !input_6_1.done && (_a = input_6.return))
        _a.call(input_6);
    } finally {
      if (e_6)
        throw e_6.error;
    }
  }
  return entries;
};
var serializeAws_queryDeleteMessageRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  if (input.ReceiptHandle !== void 0 && input.ReceiptHandle !== null) {
    entries["ReceiptHandle"] = input.ReceiptHandle;
  }
  return entries;
};
var serializeAws_queryDeleteQueueRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  return entries;
};
var serializeAws_queryGetQueueAttributesRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  if (input.AttributeNames !== void 0 && input.AttributeNames !== null) {
    var memberEntries = serializeAws_queryAttributeNameList(input.AttributeNames, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "AttributeName." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryGetQueueUrlRequest = function(input, context) {
  var entries = {};
  if (input.QueueName !== void 0 && input.QueueName !== null) {
    entries["QueueName"] = input.QueueName;
  }
  if (input.QueueOwnerAWSAccountId !== void 0 && input.QueueOwnerAWSAccountId !== null) {
    entries["QueueOwnerAWSAccountId"] = input.QueueOwnerAWSAccountId;
  }
  return entries;
};
var serializeAws_queryListDeadLetterSourceQueuesRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  if (input.NextToken !== void 0 && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== void 0 && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};
var serializeAws_queryListQueuesRequest = function(input, context) {
  var entries = {};
  if (input.QueueNamePrefix !== void 0 && input.QueueNamePrefix !== null) {
    entries["QueueNamePrefix"] = input.QueueNamePrefix;
  }
  if (input.NextToken !== void 0 && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== void 0 && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};
var serializeAws_queryListQueueTagsRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  return entries;
};
var serializeAws_queryMessageAttributeNameList = function(input, context) {
  var e_7, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_7 = __values(input), input_7_1 = input_7.next(); !input_7_1.done; input_7_1 = input_7.next()) {
      var entry = input_7_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_7_1) {
    e_7 = { error: e_7_1 };
  } finally {
    try {
      if (input_7_1 && !input_7_1.done && (_a = input_7.return))
        _a.call(input_7);
    } finally {
      if (e_7)
        throw e_7.error;
    }
  }
  return entries;
};
var serializeAws_queryMessageAttributeValue2 = function(input, context) {
  var entries = {};
  if (input.StringValue !== void 0 && input.StringValue !== null) {
    entries["StringValue"] = input.StringValue;
  }
  if (input.BinaryValue !== void 0 && input.BinaryValue !== null) {
    entries["BinaryValue"] = context.base64Encoder(input.BinaryValue);
  }
  if (input.StringListValues !== void 0 && input.StringListValues !== null) {
    var memberEntries = serializeAws_queryStringList(input.StringListValues, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "StringListValue." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  if (input.BinaryListValues !== void 0 && input.BinaryListValues !== null) {
    var memberEntries = serializeAws_queryBinaryList(input.BinaryListValues, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "BinaryListValue." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  if (input.DataType !== void 0 && input.DataType !== null) {
    entries["DataType"] = input.DataType;
  }
  return entries;
};
var serializeAws_queryMessageBodyAttributeMap = function(input, context) {
  var entries = {};
  var counter = 1;
  Object.keys(input).filter(function(key) {
    return input[key] != null;
  }).forEach(function(key) {
    entries["entry." + counter + ".Name"] = key;
    var memberEntries = serializeAws_queryMessageAttributeValue2(input[key], context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key2 = _b[0], value = _b[1];
      entries["entry." + counter + ".Value." + key2] = value;
    });
    counter++;
  });
  return entries;
};
var serializeAws_queryMessageBodySystemAttributeMap = function(input, context) {
  var entries = {};
  var counter = 1;
  Object.keys(input).filter(function(key) {
    return input[key] != null;
  }).forEach(function(key) {
    entries["entry." + counter + ".Name"] = key;
    var memberEntries = serializeAws_queryMessageSystemAttributeValue(input[key], context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key2 = _b[0], value = _b[1];
      entries["entry." + counter + ".Value." + key2] = value;
    });
    counter++;
  });
  return entries;
};
var serializeAws_queryMessageSystemAttributeValue = function(input, context) {
  var entries = {};
  if (input.StringValue !== void 0 && input.StringValue !== null) {
    entries["StringValue"] = input.StringValue;
  }
  if (input.BinaryValue !== void 0 && input.BinaryValue !== null) {
    entries["BinaryValue"] = context.base64Encoder(input.BinaryValue);
  }
  if (input.StringListValues !== void 0 && input.StringListValues !== null) {
    var memberEntries = serializeAws_queryStringList(input.StringListValues, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "StringListValue." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  if (input.BinaryListValues !== void 0 && input.BinaryListValues !== null) {
    var memberEntries = serializeAws_queryBinaryList(input.BinaryListValues, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "BinaryListValue." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  if (input.DataType !== void 0 && input.DataType !== null) {
    entries["DataType"] = input.DataType;
  }
  return entries;
};
var serializeAws_queryPurgeQueueRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  return entries;
};
var serializeAws_queryQueueAttributeMap = function(input, context) {
  var entries = {};
  var counter = 1;
  Object.keys(input).filter(function(key) {
    return input[key] != null;
  }).forEach(function(key) {
    entries["entry." + counter + ".Name"] = key;
    entries["entry." + counter + ".Value"] = input[key];
    counter++;
  });
  return entries;
};
var serializeAws_queryReceiveMessageRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  if (input.AttributeNames !== void 0 && input.AttributeNames !== null) {
    var memberEntries = serializeAws_queryAttributeNameList(input.AttributeNames, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "AttributeName." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  if (input.MessageAttributeNames !== void 0 && input.MessageAttributeNames !== null) {
    var memberEntries = serializeAws_queryMessageAttributeNameList(input.MessageAttributeNames, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "MessageAttributeName." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  if (input.MaxNumberOfMessages !== void 0 && input.MaxNumberOfMessages !== null) {
    entries["MaxNumberOfMessages"] = input.MaxNumberOfMessages;
  }
  if (input.VisibilityTimeout !== void 0 && input.VisibilityTimeout !== null) {
    entries["VisibilityTimeout"] = input.VisibilityTimeout;
  }
  if (input.WaitTimeSeconds !== void 0 && input.WaitTimeSeconds !== null) {
    entries["WaitTimeSeconds"] = input.WaitTimeSeconds;
  }
  if (input.ReceiveRequestAttemptId !== void 0 && input.ReceiveRequestAttemptId !== null) {
    entries["ReceiveRequestAttemptId"] = input.ReceiveRequestAttemptId;
  }
  return entries;
};
var serializeAws_queryRemovePermissionRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  if (input.Label !== void 0 && input.Label !== null) {
    entries["Label"] = input.Label;
  }
  return entries;
};
var serializeAws_querySendMessageBatchRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  if (input.Entries !== void 0 && input.Entries !== null) {
    var memberEntries = serializeAws_querySendMessageBatchRequestEntryList(input.Entries, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "SendMessageBatchRequestEntry." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_querySendMessageBatchRequestEntry = function(input, context) {
  var entries = {};
  if (input.Id !== void 0 && input.Id !== null) {
    entries["Id"] = input.Id;
  }
  if (input.MessageBody !== void 0 && input.MessageBody !== null) {
    entries["MessageBody"] = input.MessageBody;
  }
  if (input.DelaySeconds !== void 0 && input.DelaySeconds !== null) {
    entries["DelaySeconds"] = input.DelaySeconds;
  }
  if (input.MessageAttributes !== void 0 && input.MessageAttributes !== null) {
    var memberEntries = serializeAws_queryMessageBodyAttributeMap(input.MessageAttributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "MessageAttribute." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  if (input.MessageSystemAttributes !== void 0 && input.MessageSystemAttributes !== null) {
    var memberEntries = serializeAws_queryMessageBodySystemAttributeMap(input.MessageSystemAttributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "MessageSystemAttribute." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  if (input.MessageDeduplicationId !== void 0 && input.MessageDeduplicationId !== null) {
    entries["MessageDeduplicationId"] = input.MessageDeduplicationId;
  }
  if (input.MessageGroupId !== void 0 && input.MessageGroupId !== null) {
    entries["MessageGroupId"] = input.MessageGroupId;
  }
  return entries;
};
var serializeAws_querySendMessageBatchRequestEntryList = function(input, context) {
  var e_8, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_8 = __values(input), input_8_1 = input_8.next(); !input_8_1.done; input_8_1 = input_8.next()) {
      var entry = input_8_1.value;
      if (entry === null) {
        continue;
      }
      var memberEntries = serializeAws_querySendMessageBatchRequestEntry(entry, context);
      Object.entries(memberEntries).forEach(function(_a2) {
        var _b = __read(_a2, 2), key = _b[0], value = _b[1];
        entries["member." + counter + "." + key] = value;
      });
      counter++;
    }
  } catch (e_8_1) {
    e_8 = { error: e_8_1 };
  } finally {
    try {
      if (input_8_1 && !input_8_1.done && (_a = input_8.return))
        _a.call(input_8);
    } finally {
      if (e_8)
        throw e_8.error;
    }
  }
  return entries;
};
var serializeAws_querySendMessageRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  if (input.MessageBody !== void 0 && input.MessageBody !== null) {
    entries["MessageBody"] = input.MessageBody;
  }
  if (input.DelaySeconds !== void 0 && input.DelaySeconds !== null) {
    entries["DelaySeconds"] = input.DelaySeconds;
  }
  if (input.MessageAttributes !== void 0 && input.MessageAttributes !== null) {
    var memberEntries = serializeAws_queryMessageBodyAttributeMap(input.MessageAttributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "MessageAttribute." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  if (input.MessageSystemAttributes !== void 0 && input.MessageSystemAttributes !== null) {
    var memberEntries = serializeAws_queryMessageBodySystemAttributeMap(input.MessageSystemAttributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "MessageSystemAttribute." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  if (input.MessageDeduplicationId !== void 0 && input.MessageDeduplicationId !== null) {
    entries["MessageDeduplicationId"] = input.MessageDeduplicationId;
  }
  if (input.MessageGroupId !== void 0 && input.MessageGroupId !== null) {
    entries["MessageGroupId"] = input.MessageGroupId;
  }
  return entries;
};
var serializeAws_querySetQueueAttributesRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  if (input.Attributes !== void 0 && input.Attributes !== null) {
    var memberEntries = serializeAws_queryQueueAttributeMap(input.Attributes, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Attribute." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryStringList = function(input, context) {
  var e_9, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_9 = __values(input), input_9_1 = input_9.next(); !input_9_1.done; input_9_1 = input_9.next()) {
      var entry = input_9_1.value;
      if (entry === null) {
        continue;
      }
      entries["StringListValue." + counter] = entry;
      counter++;
    }
  } catch (e_9_1) {
    e_9 = { error: e_9_1 };
  } finally {
    try {
      if (input_9_1 && !input_9_1.done && (_a = input_9.return))
        _a.call(input_9);
    } finally {
      if (e_9)
        throw e_9.error;
    }
  }
  return entries;
};
var serializeAws_queryTagKeyList2 = function(input, context) {
  var e_10, _a;
  var entries = {};
  var counter = 1;
  try {
    for (var input_10 = __values(input), input_10_1 = input_10.next(); !input_10_1.done; input_10_1 = input_10.next()) {
      var entry = input_10_1.value;
      if (entry === null) {
        continue;
      }
      entries["member." + counter] = entry;
      counter++;
    }
  } catch (e_10_1) {
    e_10 = { error: e_10_1 };
  } finally {
    try {
      if (input_10_1 && !input_10_1.done && (_a = input_10.return))
        _a.call(input_10);
    } finally {
      if (e_10)
        throw e_10.error;
    }
  }
  return entries;
};
var serializeAws_queryTagMap = function(input, context) {
  var entries = {};
  var counter = 1;
  Object.keys(input).filter(function(key) {
    return input[key] != null;
  }).forEach(function(key) {
    entries["entry." + counter + ".Key"] = key;
    entries["entry." + counter + ".Value"] = input[key];
    counter++;
  });
  return entries;
};
var serializeAws_queryTagQueueRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  if (input.Tags !== void 0 && input.Tags !== null) {
    var memberEntries = serializeAws_queryTagMap(input.Tags, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "Tag." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  return entries;
};
var serializeAws_queryUntagQueueRequest = function(input, context) {
  var entries = {};
  if (input.QueueUrl !== void 0 && input.QueueUrl !== null) {
    entries["QueueUrl"] = input.QueueUrl;
  }
  if (input.TagKeys !== void 0 && input.TagKeys !== null) {
    var memberEntries = serializeAws_queryTagKeyList2(input.TagKeys, context);
    Object.entries(memberEntries).forEach(function(_a) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      var loc = "TagKey." + key.substring(key.indexOf(".") + 1);
      entries[loc] = value;
    });
  }
  return entries;
};
var deserializeAws_queryBatchEntryIdsNotDistinct = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryBatchRequestTooLong = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryBatchResultErrorEntry2 = function(output, context) {
  var contents = {
    Id: void 0,
    SenderFault: void 0,
    Code: void 0,
    Message: void 0
  };
  if (output["Id"] !== void 0) {
    contents.Id = expectString(output["Id"]);
  }
  if (output["SenderFault"] !== void 0) {
    contents.SenderFault = parseBoolean(output["SenderFault"]);
  }
  if (output["Code"] !== void 0) {
    contents.Code = expectString(output["Code"]);
  }
  if (output["Message"] !== void 0) {
    contents.Message = expectString(output["Message"]);
  }
  return contents;
};
var deserializeAws_queryBatchResultErrorEntryList2 = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryBatchResultErrorEntry2(entry, context);
  });
};
var deserializeAws_queryBinaryList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return context.base64Decoder(entry);
  });
};
var deserializeAws_queryChangeMessageVisibilityBatchResult = function(output, context) {
  var contents = {
    Successful: void 0,
    Failed: void 0
  };
  if (output.ChangeMessageVisibilityBatchResultEntry === "") {
    contents.Successful = [];
  }
  if (output["ChangeMessageVisibilityBatchResultEntry"] !== void 0) {
    contents.Successful = deserializeAws_queryChangeMessageVisibilityBatchResultEntryList(getArrayIfSingleItem(output["ChangeMessageVisibilityBatchResultEntry"]), context);
  }
  if (output.BatchResultErrorEntry === "") {
    contents.Failed = [];
  }
  if (output["BatchResultErrorEntry"] !== void 0) {
    contents.Failed = deserializeAws_queryBatchResultErrorEntryList2(getArrayIfSingleItem(output["BatchResultErrorEntry"]), context);
  }
  return contents;
};
var deserializeAws_queryChangeMessageVisibilityBatchResultEntry = function(output, context) {
  var contents = {
    Id: void 0
  };
  if (output["Id"] !== void 0) {
    contents.Id = expectString(output["Id"]);
  }
  return contents;
};
var deserializeAws_queryChangeMessageVisibilityBatchResultEntryList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryChangeMessageVisibilityBatchResultEntry(entry, context);
  });
};
var deserializeAws_queryCreateQueueResult = function(output, context) {
  var contents = {
    QueueUrl: void 0
  };
  if (output["QueueUrl"] !== void 0) {
    contents.QueueUrl = expectString(output["QueueUrl"]);
  }
  return contents;
};
var deserializeAws_queryDeleteMessageBatchResult = function(output, context) {
  var contents = {
    Successful: void 0,
    Failed: void 0
  };
  if (output.DeleteMessageBatchResultEntry === "") {
    contents.Successful = [];
  }
  if (output["DeleteMessageBatchResultEntry"] !== void 0) {
    contents.Successful = deserializeAws_queryDeleteMessageBatchResultEntryList(getArrayIfSingleItem(output["DeleteMessageBatchResultEntry"]), context);
  }
  if (output.BatchResultErrorEntry === "") {
    contents.Failed = [];
  }
  if (output["BatchResultErrorEntry"] !== void 0) {
    contents.Failed = deserializeAws_queryBatchResultErrorEntryList2(getArrayIfSingleItem(output["BatchResultErrorEntry"]), context);
  }
  return contents;
};
var deserializeAws_queryDeleteMessageBatchResultEntry = function(output, context) {
  var contents = {
    Id: void 0
  };
  if (output["Id"] !== void 0) {
    contents.Id = expectString(output["Id"]);
  }
  return contents;
};
var deserializeAws_queryDeleteMessageBatchResultEntryList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryDeleteMessageBatchResultEntry(entry, context);
  });
};
var deserializeAws_queryEmptyBatchRequest = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryGetQueueAttributesResult = function(output, context) {
  var contents = {
    Attributes: void 0
  };
  if (output.Attribute === "") {
    contents.Attributes = {};
  }
  if (output["Attribute"] !== void 0) {
    contents.Attributes = deserializeAws_queryQueueAttributeMap(getArrayIfSingleItem(output["Attribute"]), context);
  }
  return contents;
};
var deserializeAws_queryGetQueueUrlResult = function(output, context) {
  var contents = {
    QueueUrl: void 0
  };
  if (output["QueueUrl"] !== void 0) {
    contents.QueueUrl = expectString(output["QueueUrl"]);
  }
  return contents;
};
var deserializeAws_queryInvalidAttributeName = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryInvalidBatchEntryId = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryInvalidIdFormat = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryInvalidMessageContents = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryListDeadLetterSourceQueuesResult = function(output, context) {
  var contents = {
    queueUrls: void 0,
    NextToken: void 0
  };
  if (output.QueueUrl === "") {
    contents.queueUrls = [];
  }
  if (output["QueueUrl"] !== void 0) {
    contents.queueUrls = deserializeAws_queryQueueUrlList(getArrayIfSingleItem(output["QueueUrl"]), context);
  }
  if (output["NextToken"] !== void 0) {
    contents.NextToken = expectString(output["NextToken"]);
  }
  return contents;
};
var deserializeAws_queryListQueuesResult = function(output, context) {
  var contents = {
    NextToken: void 0,
    QueueUrls: void 0
  };
  if (output["NextToken"] !== void 0) {
    contents.NextToken = expectString(output["NextToken"]);
  }
  if (output.QueueUrl === "") {
    contents.QueueUrls = [];
  }
  if (output["QueueUrl"] !== void 0) {
    contents.QueueUrls = deserializeAws_queryQueueUrlList(getArrayIfSingleItem(output["QueueUrl"]), context);
  }
  return contents;
};
var deserializeAws_queryListQueueTagsResult = function(output, context) {
  var contents = {
    Tags: void 0
  };
  if (output.Tag === "") {
    contents.Tags = {};
  }
  if (output["Tag"] !== void 0) {
    contents.Tags = deserializeAws_queryTagMap(getArrayIfSingleItem(output["Tag"]), context);
  }
  return contents;
};
var deserializeAws_queryMessage = function(output, context) {
  var contents = {
    MessageId: void 0,
    ReceiptHandle: void 0,
    MD5OfBody: void 0,
    Body: void 0,
    Attributes: void 0,
    MD5OfMessageAttributes: void 0,
    MessageAttributes: void 0
  };
  if (output["MessageId"] !== void 0) {
    contents.MessageId = expectString(output["MessageId"]);
  }
  if (output["ReceiptHandle"] !== void 0) {
    contents.ReceiptHandle = expectString(output["ReceiptHandle"]);
  }
  if (output["MD5OfBody"] !== void 0) {
    contents.MD5OfBody = expectString(output["MD5OfBody"]);
  }
  if (output["Body"] !== void 0) {
    contents.Body = expectString(output["Body"]);
  }
  if (output.Attribute === "") {
    contents.Attributes = {};
  }
  if (output["Attribute"] !== void 0) {
    contents.Attributes = deserializeAws_queryMessageSystemAttributeMap(getArrayIfSingleItem(output["Attribute"]), context);
  }
  if (output["MD5OfMessageAttributes"] !== void 0) {
    contents.MD5OfMessageAttributes = expectString(output["MD5OfMessageAttributes"]);
  }
  if (output.MessageAttribute === "") {
    contents.MessageAttributes = {};
  }
  if (output["MessageAttribute"] !== void 0) {
    contents.MessageAttributes = deserializeAws_queryMessageBodyAttributeMap(getArrayIfSingleItem(output["MessageAttribute"]), context);
  }
  return contents;
};
var deserializeAws_queryMessageAttributeValue = function(output, context) {
  var contents = {
    StringValue: void 0,
    BinaryValue: void 0,
    StringListValues: void 0,
    BinaryListValues: void 0,
    DataType: void 0
  };
  if (output["StringValue"] !== void 0) {
    contents.StringValue = expectString(output["StringValue"]);
  }
  if (output["BinaryValue"] !== void 0) {
    contents.BinaryValue = context.base64Decoder(output["BinaryValue"]);
  }
  if (output.StringListValue === "") {
    contents.StringListValues = [];
  }
  if (output["StringListValue"] !== void 0) {
    contents.StringListValues = deserializeAws_queryStringList(getArrayIfSingleItem(output["StringListValue"]), context);
  }
  if (output.BinaryListValue === "") {
    contents.BinaryListValues = [];
  }
  if (output["BinaryListValue"] !== void 0) {
    contents.BinaryListValues = deserializeAws_queryBinaryList(getArrayIfSingleItem(output["BinaryListValue"]), context);
  }
  if (output["DataType"] !== void 0) {
    contents.DataType = expectString(output["DataType"]);
  }
  return contents;
};
var deserializeAws_queryMessageBodyAttributeMap = function(output, context) {
  return output.reduce(function(acc, pair) {
    var _a;
    if (pair["Value"] === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_a = {}, _a[pair["Name"]] = deserializeAws_queryMessageAttributeValue(pair["Value"], context), _a));
  }, {});
};
var deserializeAws_queryMessageList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_queryMessage(entry, context);
  });
};
var deserializeAws_queryMessageNotInflight = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryMessageSystemAttributeMap = function(output, context) {
  return output.reduce(function(acc, pair) {
    var _a;
    if (pair["Value"] === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_a = {}, _a[pair["Name"]] = expectString(pair["Value"]), _a));
  }, {});
};
var deserializeAws_queryOverLimit = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryPurgeQueueInProgress = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryQueueAttributeMap = function(output, context) {
  return output.reduce(function(acc, pair) {
    var _a;
    if (pair["Value"] === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_a = {}, _a[pair["Name"]] = expectString(pair["Value"]), _a));
  }, {});
};
var deserializeAws_queryQueueDeletedRecently = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryQueueDoesNotExist = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryQueueNameExists = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryQueueUrlList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_queryReceiptHandleIsInvalid = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryReceiveMessageResult = function(output, context) {
  var contents = {
    Messages: void 0
  };
  if (output.Message === "") {
    contents.Messages = [];
  }
  if (output["Message"] !== void 0) {
    contents.Messages = deserializeAws_queryMessageList(getArrayIfSingleItem(output["Message"]), context);
  }
  return contents;
};
var deserializeAws_querySendMessageBatchResult = function(output, context) {
  var contents = {
    Successful: void 0,
    Failed: void 0
  };
  if (output.SendMessageBatchResultEntry === "") {
    contents.Successful = [];
  }
  if (output["SendMessageBatchResultEntry"] !== void 0) {
    contents.Successful = deserializeAws_querySendMessageBatchResultEntryList(getArrayIfSingleItem(output["SendMessageBatchResultEntry"]), context);
  }
  if (output.BatchResultErrorEntry === "") {
    contents.Failed = [];
  }
  if (output["BatchResultErrorEntry"] !== void 0) {
    contents.Failed = deserializeAws_queryBatchResultErrorEntryList2(getArrayIfSingleItem(output["BatchResultErrorEntry"]), context);
  }
  return contents;
};
var deserializeAws_querySendMessageBatchResultEntry = function(output, context) {
  var contents = {
    Id: void 0,
    MessageId: void 0,
    MD5OfMessageBody: void 0,
    MD5OfMessageAttributes: void 0,
    MD5OfMessageSystemAttributes: void 0,
    SequenceNumber: void 0
  };
  if (output["Id"] !== void 0) {
    contents.Id = expectString(output["Id"]);
  }
  if (output["MessageId"] !== void 0) {
    contents.MessageId = expectString(output["MessageId"]);
  }
  if (output["MD5OfMessageBody"] !== void 0) {
    contents.MD5OfMessageBody = expectString(output["MD5OfMessageBody"]);
  }
  if (output["MD5OfMessageAttributes"] !== void 0) {
    contents.MD5OfMessageAttributes = expectString(output["MD5OfMessageAttributes"]);
  }
  if (output["MD5OfMessageSystemAttributes"] !== void 0) {
    contents.MD5OfMessageSystemAttributes = expectString(output["MD5OfMessageSystemAttributes"]);
  }
  if (output["SequenceNumber"] !== void 0) {
    contents.SequenceNumber = expectString(output["SequenceNumber"]);
  }
  return contents;
};
var deserializeAws_querySendMessageBatchResultEntryList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_querySendMessageBatchResultEntry(entry, context);
  });
};
var deserializeAws_querySendMessageResult = function(output, context) {
  var contents = {
    MD5OfMessageBody: void 0,
    MD5OfMessageAttributes: void 0,
    MD5OfMessageSystemAttributes: void 0,
    MessageId: void 0,
    SequenceNumber: void 0
  };
  if (output["MD5OfMessageBody"] !== void 0) {
    contents.MD5OfMessageBody = expectString(output["MD5OfMessageBody"]);
  }
  if (output["MD5OfMessageAttributes"] !== void 0) {
    contents.MD5OfMessageAttributes = expectString(output["MD5OfMessageAttributes"]);
  }
  if (output["MD5OfMessageSystemAttributes"] !== void 0) {
    contents.MD5OfMessageSystemAttributes = expectString(output["MD5OfMessageSystemAttributes"]);
  }
  if (output["MessageId"] !== void 0) {
    contents.MessageId = expectString(output["MessageId"]);
  }
  if (output["SequenceNumber"] !== void 0) {
    contents.SequenceNumber = expectString(output["SequenceNumber"]);
  }
  return contents;
};
var deserializeAws_queryStringList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_queryTagMap = function(output, context) {
  return output.reduce(function(acc, pair) {
    var _a;
    if (pair["Value"] === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_a = {}, _a[pair["Key"]] = expectString(pair["Value"]), _a));
  }, {});
};
var deserializeAws_queryTooManyEntriesInBatchRequest = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeAws_queryUnsupportedOperation = function(output, context) {
  var contents = {};
  return contents;
};
var deserializeMetadata6 = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody7 = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString7 = function(streamBody, context) {
  return collectBody7(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var buildHttpRpcRequest5 = function(context, headers, path, resolvedHostname, body) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          contents = {
            protocol,
            hostname,
            port,
            method: "POST",
            path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
            headers
          };
          if (resolvedHostname !== void 0) {
            contents.hostname = resolvedHostname;
          }
          if (body !== void 0) {
            contents.body = body;
          }
          return [2, new HttpRequest(contents)];
      }
    });
  });
};
var parseBody6 = function(streamBody, context) {
  return collectBodyString7(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      var parsedObj = (0, import_fast_xml_parser4.parse)(encoded, {
        attributeNamePrefix: "",
        ignoreAttributes: false,
        parseNodeValue: false,
        trimValues: false,
        tagValueProcessor: function(val) {
          return val.trim() === "" && val.includes("\n") ? "" : (0, import_entities4.decodeHTML)(val);
        }
      });
      var textNodeName = "#text";
      var key = Object.keys(parsedObj)[0];
      var parsedObjToReturn = parsedObj[key];
      if (parsedObjToReturn[textNodeName]) {
        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
        delete parsedObjToReturn[textNodeName];
      }
      return getValueFromTextNode(parsedObjToReturn);
    }
    return {};
  });
};
var buildFormUrlencodedString3 = function(formEntries) {
  return Object.entries(formEntries).map(function(_a) {
    var _b = __read(_a, 2), key = _b[0], value = _b[1];
    return extendedEncodeURIComponent(key) + "=" + extendedEncodeURIComponent(value);
  }).join("&");
};
var loadQueryErrorCode3 = function(output, data) {
  if (data.Error.Code !== void 0) {
    return data.Error.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
  return "";
};

// node_modules/@aws-sdk/client-sqs/dist-es/commands/AddPermissionCommand.js
var AddPermissionCommand2 = function(_super) {
  __extends(AddPermissionCommand3, _super);
  function AddPermissionCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  AddPermissionCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "AddPermissionCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: AddPermissionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  AddPermissionCommand3.prototype.serialize = function(input, context) {
    return serializeAws_queryAddPermissionCommand2(input, context);
  };
  AddPermissionCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_queryAddPermissionCommand2(output, context);
  };
  return AddPermissionCommand3;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/ChangeMessageVisibilityBatchCommand.js
var ChangeMessageVisibilityBatchCommand = function(_super) {
  __extends(ChangeMessageVisibilityBatchCommand2, _super);
  function ChangeMessageVisibilityBatchCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ChangeMessageVisibilityBatchCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "ChangeMessageVisibilityBatchCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ChangeMessageVisibilityBatchRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ChangeMessageVisibilityBatchResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ChangeMessageVisibilityBatchCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryChangeMessageVisibilityBatchCommand(input, context);
  };
  ChangeMessageVisibilityBatchCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryChangeMessageVisibilityBatchCommand(output, context);
  };
  return ChangeMessageVisibilityBatchCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/ChangeMessageVisibilityCommand.js
var ChangeMessageVisibilityCommand = function(_super) {
  __extends(ChangeMessageVisibilityCommand2, _super);
  function ChangeMessageVisibilityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ChangeMessageVisibilityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "ChangeMessageVisibilityCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ChangeMessageVisibilityRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ChangeMessageVisibilityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryChangeMessageVisibilityCommand(input, context);
  };
  ChangeMessageVisibilityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryChangeMessageVisibilityCommand(output, context);
  };
  return ChangeMessageVisibilityCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/CreateQueueCommand.js
var CreateQueueCommand = function(_super) {
  __extends(CreateQueueCommand2, _super);
  function CreateQueueCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateQueueCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "CreateQueueCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateQueueRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateQueueResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateQueueCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryCreateQueueCommand(input, context);
  };
  CreateQueueCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryCreateQueueCommand(output, context);
  };
  return CreateQueueCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/DeleteMessageBatchCommand.js
var DeleteMessageBatchCommand = function(_super) {
  __extends(DeleteMessageBatchCommand2, _super);
  function DeleteMessageBatchCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteMessageBatchCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "DeleteMessageBatchCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteMessageBatchRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteMessageBatchResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteMessageBatchCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteMessageBatchCommand(input, context);
  };
  DeleteMessageBatchCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteMessageBatchCommand(output, context);
  };
  return DeleteMessageBatchCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/DeleteMessageCommand.js
var DeleteMessageCommand = function(_super) {
  __extends(DeleteMessageCommand2, _super);
  function DeleteMessageCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteMessageCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "DeleteMessageCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteMessageRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteMessageCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteMessageCommand(input, context);
  };
  DeleteMessageCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteMessageCommand(output, context);
  };
  return DeleteMessageCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/DeleteQueueCommand.js
var DeleteQueueCommand = function(_super) {
  __extends(DeleteQueueCommand2, _super);
  function DeleteQueueCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteQueueCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "DeleteQueueCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteQueueRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteQueueCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryDeleteQueueCommand(input, context);
  };
  DeleteQueueCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryDeleteQueueCommand(output, context);
  };
  return DeleteQueueCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/GetQueueAttributesCommand.js
var GetQueueAttributesCommand = function(_super) {
  __extends(GetQueueAttributesCommand2, _super);
  function GetQueueAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetQueueAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "GetQueueAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetQueueAttributesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetQueueAttributesResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetQueueAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetQueueAttributesCommand(input, context);
  };
  GetQueueAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetQueueAttributesCommand(output, context);
  };
  return GetQueueAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/GetQueueUrlCommand.js
var GetQueueUrlCommand = function(_super) {
  __extends(GetQueueUrlCommand2, _super);
  function GetQueueUrlCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetQueueUrlCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "GetQueueUrlCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetQueueUrlRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetQueueUrlResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetQueueUrlCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryGetQueueUrlCommand(input, context);
  };
  GetQueueUrlCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryGetQueueUrlCommand(output, context);
  };
  return GetQueueUrlCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/ListDeadLetterSourceQueuesCommand.js
var ListDeadLetterSourceQueuesCommand = function(_super) {
  __extends(ListDeadLetterSourceQueuesCommand2, _super);
  function ListDeadLetterSourceQueuesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListDeadLetterSourceQueuesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "ListDeadLetterSourceQueuesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListDeadLetterSourceQueuesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListDeadLetterSourceQueuesResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListDeadLetterSourceQueuesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListDeadLetterSourceQueuesCommand(input, context);
  };
  ListDeadLetterSourceQueuesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListDeadLetterSourceQueuesCommand(output, context);
  };
  return ListDeadLetterSourceQueuesCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/ListQueuesCommand.js
var ListQueuesCommand = function(_super) {
  __extends(ListQueuesCommand2, _super);
  function ListQueuesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListQueuesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "ListQueuesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListQueuesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListQueuesResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListQueuesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListQueuesCommand(input, context);
  };
  ListQueuesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListQueuesCommand(output, context);
  };
  return ListQueuesCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/ListQueueTagsCommand.js
var ListQueueTagsCommand = function(_super) {
  __extends(ListQueueTagsCommand2, _super);
  function ListQueueTagsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListQueueTagsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "ListQueueTagsCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListQueueTagsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListQueueTagsResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListQueueTagsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryListQueueTagsCommand(input, context);
  };
  ListQueueTagsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryListQueueTagsCommand(output, context);
  };
  return ListQueueTagsCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/PurgeQueueCommand.js
var PurgeQueueCommand = function(_super) {
  __extends(PurgeQueueCommand2, _super);
  function PurgeQueueCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PurgeQueueCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "PurgeQueueCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PurgeQueueRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PurgeQueueCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryPurgeQueueCommand(input, context);
  };
  PurgeQueueCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryPurgeQueueCommand(output, context);
  };
  return PurgeQueueCommand2;
}(Command);

// node_modules/@aws-sdk/middleware-sdk-sqs/dist-es/receive-message.js
function receiveMessageMiddleware(options) {
  var _this = this;
  return function(next) {
    return function(args) {
      return __awaiter(_this, void 0, void 0, function() {
        var resp, output, messageIds, _a, _b, message, md5, hash, _c, _d, e_1_1;
        var e_1, _e;
        return __generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              return [4, next(__assign({}, args))];
            case 1:
              resp = _f.sent();
              output = resp.output;
              messageIds = [];
              if (!(output.Messages !== void 0))
                return [3, 9];
              _f.label = 2;
            case 2:
              _f.trys.push([2, 7, 8, 9]);
              _a = __values(output.Messages), _b = _a.next();
              _f.label = 3;
            case 3:
              if (!!_b.done)
                return [3, 6];
              message = _b.value;
              md5 = message.MD5OfBody;
              hash = new options.md5();
              hash.update(message.Body || "");
              _c = md5;
              _d = toHex;
              return [4, hash.digest()];
            case 4:
              if (_c !== _d.apply(void 0, [_f.sent()])) {
                messageIds.push(message.MessageId);
              }
              _f.label = 5;
            case 5:
              _b = _a.next();
              return [3, 3];
            case 6:
              return [3, 9];
            case 7:
              e_1_1 = _f.sent();
              e_1 = { error: e_1_1 };
              return [3, 9];
            case 8:
              try {
                if (_b && !_b.done && (_e = _a.return))
                  _e.call(_a);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
              return [7];
            case 9:
              if (messageIds.length > 0) {
                throw new Error("Invalid MD5 checksum on messages: " + messageIds.join(", "));
              }
              return [2, resp];
          }
        });
      });
    };
  };
}
var receiveMessageMiddlewareOptions = {
  step: "initialize",
  tags: ["VALIDATE_BODY_MD5"],
  name: "receiveMessageMiddleware",
  override: true
};
var getReceiveMessagePlugin = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(receiveMessageMiddleware(config), receiveMessageMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-sdk-sqs/dist-es/send-message.js
var sendMessageMiddleware = function(options) {
  return function(next) {
    return function(args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var resp, output, hash, _a, _b;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              return [4, next(__assign({}, args))];
            case 1:
              resp = _c.sent();
              output = resp.output;
              hash = new options.md5();
              hash.update(args.input.MessageBody || "");
              _a = output.MD5OfMessageBody;
              _b = toHex;
              return [4, hash.digest()];
            case 2:
              if (_a !== _b.apply(void 0, [_c.sent()])) {
                throw new Error("InvalidChecksumError");
              }
              return [2, resp];
          }
        });
      });
    };
  };
};
var sendMessageMiddlewareOptions = {
  step: "initialize",
  tags: ["VALIDATE_BODY_MD5"],
  name: "sendMessageMiddleware",
  override: true
};
var getSendMessagePlugin = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(sendMessageMiddleware(config), sendMessageMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-sdk-sqs/dist-es/send-message-batch.js
var sendMessageBatchMiddleware = function(options) {
  return function(next) {
    return function(args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var resp, output, messageIds, entries, _a, _b, entry, _c, _d, entry, md5, hash, _e, _f, e_1_1;
        var e_2, _g, e_1, _h;
        return __generator(this, function(_j) {
          switch (_j.label) {
            case 0:
              return [4, next(__assign({}, args))];
            case 1:
              resp = _j.sent();
              output = resp.output;
              messageIds = [];
              entries = {};
              if (output.Successful !== void 0) {
                try {
                  for (_a = __values(output.Successful), _b = _a.next(); !_b.done; _b = _a.next()) {
                    entry = _b.value;
                    if (entry.Id !== void 0) {
                      entries[entry.Id] = entry;
                    }
                  }
                } catch (e_2_1) {
                  e_2 = { error: e_2_1 };
                } finally {
                  try {
                    if (_b && !_b.done && (_g = _a.return))
                      _g.call(_a);
                  } finally {
                    if (e_2)
                      throw e_2.error;
                  }
                }
              }
              _j.label = 2;
            case 2:
              _j.trys.push([2, 7, 8, 9]);
              _c = __values(args.input.Entries), _d = _c.next();
              _j.label = 3;
            case 3:
              if (!!_d.done)
                return [3, 6];
              entry = _d.value;
              if (!entries[entry.Id])
                return [3, 5];
              md5 = entries[entry.Id].MD5OfMessageBody;
              hash = new options.md5();
              hash.update(entry.MessageBody || "");
              _e = md5;
              _f = toHex;
              return [4, hash.digest()];
            case 4:
              if (_e !== _f.apply(void 0, [_j.sent()])) {
                messageIds.push(entries[entry.Id].MessageId);
              }
              _j.label = 5;
            case 5:
              _d = _c.next();
              return [3, 3];
            case 6:
              return [3, 9];
            case 7:
              e_1_1 = _j.sent();
              e_1 = { error: e_1_1 };
              return [3, 9];
            case 8:
              try {
                if (_d && !_d.done && (_h = _c.return))
                  _h.call(_c);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
              return [7];
            case 9:
              if (messageIds.length > 0) {
                throw new Error("Invalid MD5 checksum on messages: " + messageIds.join(", "));
              }
              return [2, resp];
          }
        });
      });
    };
  };
};
var sendMessageBatchMiddlewareOptions = {
  step: "initialize",
  tags: ["VALIDATE_BODY_MD5"],
  name: "sendMessageBatchMiddleware",
  override: true
};
var getSendMessageBatchPlugin = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(sendMessageBatchMiddleware(config), sendMessageBatchMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/client-sqs/dist-es/commands/ReceiveMessageCommand.js
var ReceiveMessageCommand = function(_super) {
  __extends(ReceiveMessageCommand2, _super);
  function ReceiveMessageCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ReceiveMessageCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getReceiveMessagePlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "ReceiveMessageCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: ReceiveMessageRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ReceiveMessageResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ReceiveMessageCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryReceiveMessageCommand(input, context);
  };
  ReceiveMessageCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryReceiveMessageCommand(output, context);
  };
  return ReceiveMessageCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/RemovePermissionCommand.js
var RemovePermissionCommand2 = function(_super) {
  __extends(RemovePermissionCommand3, _super);
  function RemovePermissionCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  RemovePermissionCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "RemovePermissionCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: RemovePermissionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  RemovePermissionCommand3.prototype.serialize = function(input, context) {
    return serializeAws_queryRemovePermissionCommand2(input, context);
  };
  RemovePermissionCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_queryRemovePermissionCommand2(output, context);
  };
  return RemovePermissionCommand3;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/SendMessageBatchCommand.js
var SendMessageBatchCommand = function(_super) {
  __extends(SendMessageBatchCommand2, _super);
  function SendMessageBatchCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SendMessageBatchCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getSendMessageBatchPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "SendMessageBatchCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SendMessageBatchRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SendMessageBatchResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SendMessageBatchCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySendMessageBatchCommand(input, context);
  };
  SendMessageBatchCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySendMessageBatchCommand(output, context);
  };
  return SendMessageBatchCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/SendMessageCommand.js
var SendMessageCommand = function(_super) {
  __extends(SendMessageCommand2, _super);
  function SendMessageCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SendMessageCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getSendMessagePlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "SendMessageCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SendMessageRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SendMessageResult.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SendMessageCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySendMessageCommand(input, context);
  };
  SendMessageCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySendMessageCommand(output, context);
  };
  return SendMessageCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/SetQueueAttributesCommand.js
var SetQueueAttributesCommand = function(_super) {
  __extends(SetQueueAttributesCommand2, _super);
  function SetQueueAttributesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetQueueAttributesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "SetQueueAttributesCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetQueueAttributesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetQueueAttributesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_querySetQueueAttributesCommand(input, context);
  };
  SetQueueAttributesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_querySetQueueAttributesCommand(output, context);
  };
  return SetQueueAttributesCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/TagQueueCommand.js
var TagQueueCommand = function(_super) {
  __extends(TagQueueCommand2, _super);
  function TagQueueCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TagQueueCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "TagQueueCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: TagQueueRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TagQueueCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryTagQueueCommand(input, context);
  };
  TagQueueCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryTagQueueCommand(output, context);
  };
  return TagQueueCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/dist-es/commands/UntagQueueCommand.js
var UntagQueueCommand = function(_super) {
  __extends(UntagQueueCommand2, _super);
  function UntagQueueCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UntagQueueCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger = configuration.logger;
    var clientName = "SQSClient";
    var commandName = "UntagQueueCommand";
    var handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: UntagQueueRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UntagQueueCommand2.prototype.serialize = function(input, context) {
    return serializeAws_queryUntagQueueCommand(input, context);
  };
  UntagQueueCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_queryUntagQueueCommand(output, context);
  };
  return UntagQueueCommand2;
}(Command);

// node_modules/@aws-sdk/client-sqs/package.json
var name6 = "@aws-sdk/client-sqs";
var description6 = "AWS SDK for JavaScript Sqs Client for Node.js, Browser and React Native";
var version6 = "3.42.0";
var scripts6 = {
  build: "yarn build:cjs && yarn build:es && yarn build:types",
  "build:cjs": "tsc -p tsconfig.json",
  "build:docs": "yarn clean:docs && typedoc ./",
  "build:es": "tsc -p tsconfig.es.json",
  "build:types": "tsc -p tsconfig.types.json",
  clean: "yarn clean:dist && yarn clean:docs",
  "clean:dist": "rimraf ./dist",
  "clean:docs": "rimraf ./docs",
  "downlevel-dts": "downlevel-dts dist-types dist-types/ts3.4",
  test: "exit 0"
};
var main6 = "./dist-cjs/index.js";
var types6 = "./dist-types/index.d.ts";
var module6 = "./dist-es/index.js";
var sideEffects6 = false;
var dependencies6 = {
  "@aws-crypto/sha256-browser": "2.0.0",
  "@aws-crypto/sha256-js": "2.0.0",
  "@aws-sdk/client-sts": "3.42.0",
  "@aws-sdk/config-resolver": "3.40.0",
  "@aws-sdk/credential-provider-node": "3.41.0",
  "@aws-sdk/fetch-http-handler": "3.40.0",
  "@aws-sdk/hash-node": "3.40.0",
  "@aws-sdk/invalid-dependency": "3.40.0",
  "@aws-sdk/md5-js": "3.40.0",
  "@aws-sdk/middleware-content-length": "3.40.0",
  "@aws-sdk/middleware-host-header": "3.40.0",
  "@aws-sdk/middleware-logger": "3.40.0",
  "@aws-sdk/middleware-retry": "3.40.0",
  "@aws-sdk/middleware-sdk-sqs": "3.40.0",
  "@aws-sdk/middleware-serde": "3.40.0",
  "@aws-sdk/middleware-signing": "3.40.0",
  "@aws-sdk/middleware-stack": "3.40.0",
  "@aws-sdk/middleware-user-agent": "3.40.0",
  "@aws-sdk/node-config-provider": "3.40.0",
  "@aws-sdk/node-http-handler": "3.40.0",
  "@aws-sdk/protocol-http": "3.40.0",
  "@aws-sdk/smithy-client": "3.41.0",
  "@aws-sdk/types": "3.40.0",
  "@aws-sdk/url-parser": "3.40.0",
  "@aws-sdk/util-base64-browser": "3.37.0",
  "@aws-sdk/util-base64-node": "3.37.0",
  "@aws-sdk/util-body-length-browser": "3.37.0",
  "@aws-sdk/util-body-length-node": "3.37.0",
  "@aws-sdk/util-user-agent-browser": "3.40.0",
  "@aws-sdk/util-user-agent-node": "3.40.0",
  "@aws-sdk/util-utf8-browser": "3.37.0",
  "@aws-sdk/util-utf8-node": "3.37.0",
  entities: "2.2.0",
  "fast-xml-parser": "3.19.0",
  tslib: "^2.3.0"
};
var devDependencies6 = {
  "@aws-sdk/service-client-documentation-generator": "3.38.0",
  "@types/node": "^12.7.5",
  "downlevel-dts": "0.7.0",
  jest: "^26.1.0",
  rimraf: "^3.0.0",
  "ts-jest": "^26.4.1",
  typedoc: "^0.19.2",
  typescript: "~4.3.5"
};
var engines6 = {
  node: ">=10.0.0"
};
var typesVersions6 = {
  "<4.0": {
    "dist-types/*": [
      "dist-types/ts3.4/*"
    ]
  }
};
var files6 = [
  "dist-*"
];
var author6 = {
  name: "AWS SDK for JavaScript Team",
  url: "https://aws.amazon.com/javascript/"
};
var license6 = "Apache-2.0";
var browser6 = {
  "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
};
var react_native6 = {
  "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
};
var homepage6 = "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sqs";
var repository6 = {
  type: "git",
  url: "https://github.com/aws/aws-sdk-js-v3.git",
  directory: "clients/client-sqs"
};
var package_default6 = {
  name: name6,
  description: description6,
  version: version6,
  scripts: scripts6,
  main: main6,
  types: types6,
  module: module6,
  sideEffects: sideEffects6,
  dependencies: dependencies6,
  devDependencies: devDependencies6,
  engines: engines6,
  typesVersions: typesVersions6,
  files: files6,
  author: author6,
  license: license6,
  browser: browser6,
  "react-native": react_native6,
  homepage: homepage6,
  repository: repository6
};

// node_modules/@aws-sdk/client-sqs/dist-es/runtimeConfig.browser.js
var import_sha256_browser6 = __toModule(require_build5());
var import_util_utf8_browser6 = __toModule(require_dist_cjs());

// node_modules/@aws-sdk/client-sqs/dist-es/endpoints.js
var regionHash6 = {
  "us-east-1": {
    variants: [
      {
        hostname: "sqs.us-east-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "sqs-fips.us-east-1.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  "us-east-2": {
    variants: [
      {
        hostname: "sqs.us-east-2.amazonaws.com",
        tags: []
      },
      {
        hostname: "sqs-fips.us-east-2.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  "us-gov-east-1": {
    variants: [
      {
        hostname: "sqs.us-gov-east-1.amazonaws.com",
        tags: []
      }
    ],
    signingRegion: "us-gov-east-1"
  },
  "us-gov-west-1": {
    variants: [
      {
        hostname: "sqs.us-gov-west-1.amazonaws.com",
        tags: []
      }
    ],
    signingRegion: "us-gov-west-1"
  },
  "us-west-1": {
    variants: [
      {
        hostname: "sqs.us-west-1.amazonaws.com",
        tags: []
      },
      {
        hostname: "sqs-fips.us-west-1.amazonaws.com",
        tags: ["fips"]
      }
    ]
  },
  "us-west-2": {
    variants: [
      {
        hostname: "sqs.us-west-2.amazonaws.com",
        tags: []
      },
      {
        hostname: "sqs-fips.us-west-2.amazonaws.com",
        tags: ["fips"]
      }
    ]
  }
};
var partitionHash6 = {
  aws: {
    regions: [
      "af-south-1",
      "ap-east-1",
      "ap-northeast-1",
      "ap-northeast-2",
      "ap-northeast-3",
      "ap-south-1",
      "ap-southeast-1",
      "ap-southeast-2",
      "ca-central-1",
      "eu-central-1",
      "eu-north-1",
      "eu-south-1",
      "eu-west-1",
      "eu-west-2",
      "eu-west-3",
      "fips-us-east-1",
      "fips-us-east-2",
      "fips-us-west-1",
      "fips-us-west-2",
      "me-south-1",
      "sa-east-1",
      "us-east-1",
      "us-east-2",
      "us-west-1",
      "us-west-2"
    ],
    regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "sqs.{region}.amazonaws.com",
        tags: []
      },
      {
        hostname: "sqs-fips.{region}.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "sqs-fips.{region}.api.aws",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "sqs.{region}.api.aws",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-cn": {
    regions: ["cn-north-1", "cn-northwest-1"],
    regionRegex: "^cn\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "sqs.{region}.amazonaws.com.cn",
        tags: []
      },
      {
        hostname: "sqs-fips.{region}.amazonaws.com.cn",
        tags: ["fips"]
      },
      {
        hostname: "sqs-fips.{region}.api.amazonwebservices.com.cn",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "sqs.{region}.api.amazonwebservices.com.cn",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-iso": {
    regions: ["us-iso-east-1", "us-iso-west-1"],
    regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "sqs.{region}.c2s.ic.gov",
        tags: []
      },
      {
        hostname: "sqs-fips.{region}.c2s.ic.gov",
        tags: ["fips"]
      }
    ]
  },
  "aws-iso-b": {
    regions: ["us-isob-east-1"],
    regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "sqs.{region}.sc2s.sgov.gov",
        tags: []
      },
      {
        hostname: "sqs-fips.{region}.sc2s.sgov.gov",
        tags: ["fips"]
      }
    ]
  },
  "aws-us-gov": {
    regions: ["us-gov-east-1", "us-gov-west-1"],
    regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "sqs.{region}.amazonaws.com",
        tags: []
      },
      {
        hostname: "sqs-fips.{region}.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "sqs-fips.{region}.api.aws",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "sqs.{region}.api.aws",
        tags: ["dualstack"]
      }
    ]
  }
};
var defaultRegionInfoProvider6 = function(region, options) {
  return __awaiter(void 0, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, getRegionInfo(region, __assign(__assign({}, options), { signingService: "sqs", regionHash: regionHash6, partitionHash: partitionHash6 }))];
    });
  });
};

// node_modules/@aws-sdk/client-sqs/dist-es/runtimeConfig.shared.js
var getRuntimeConfig11 = function(config) {
  var _a, _b, _c, _d, _e;
  return {
    apiVersion: "2012-11-05",
    disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
    logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
    regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : defaultRegionInfoProvider6,
    serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "SQS",
    urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : parseUrl
  };
};

// node_modules/@aws-sdk/client-sqs/dist-es/runtimeConfig.browser.js
var getRuntimeConfig12 = function(config) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
  var clientSharedValues = getRuntimeConfig11(config);
  return __assign(__assign(__assign({}, clientSharedValues), config), { runtime: "browser", base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : fromBase64, base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : toBase64, bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : calculateBodyLength, credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : function(_) {
    return function() {
      return Promise.reject(new Error("Credential is missing"));
    };
  }, defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default6.version }), maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : DEFAULT_MAX_ATTEMPTS, md5: (_g = config === null || config === void 0 ? void 0 : config.md5) !== null && _g !== void 0 ? _g : Md5, region: (_h = config === null || config === void 0 ? void 0 : config.region) !== null && _h !== void 0 ? _h : invalidProvider("Region is missing"), requestHandler: (_j = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _j !== void 0 ? _j : new FetchHttpHandler(), retryMode: (_k = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _k !== void 0 ? _k : function() {
    return Promise.resolve(DEFAULT_RETRY_MODE);
  }, sha256: (_l = config === null || config === void 0 ? void 0 : config.sha256) !== null && _l !== void 0 ? _l : import_sha256_browser6.Sha256, streamCollector: (_m = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _m !== void 0 ? _m : streamCollector, useDualstackEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _o !== void 0 ? _o : function() {
    return Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT);
  }, useFipsEndpoint: (_p = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _p !== void 0 ? _p : function() {
    return Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT);
  }, utf8Decoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _q !== void 0 ? _q : import_util_utf8_browser6.fromUtf8, utf8Encoder: (_r = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _r !== void 0 ? _r : import_util_utf8_browser6.toUtf8 });
};

// node_modules/@aws-sdk/client-sqs/dist-es/SQSClient.js
var SQSClient = function(_super) {
  __extends(SQSClient2, _super);
  function SQSClient2(configuration) {
    var _this = this;
    var _config_0 = getRuntimeConfig12(configuration);
    var _config_1 = resolveRegionConfig(_config_0);
    var _config_2 = resolveEndpointsConfig(_config_1);
    var _config_3 = resolveRetryConfig(_config_2);
    var _config_4 = resolveHostHeaderConfig(_config_3);
    var _config_5 = resolveAwsAuthConfig(_config_4);
    var _config_6 = resolveUserAgentConfig(_config_5);
    _this = _super.call(this, _config_6) || this;
    _this.config = _config_6;
    _this.middlewareStack.use(getRetryPlugin(_this.config));
    _this.middlewareStack.use(getContentLengthPlugin(_this.config));
    _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
    _this.middlewareStack.use(getLoggerPlugin(_this.config));
    _this.middlewareStack.use(getAwsAuthPlugin(_this.config));
    _this.middlewareStack.use(getUserAgentPlugin(_this.config));
    return _this;
  }
  SQSClient2.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
  };
  return SQSClient2;
}(Client);

// node_modules/@aws-sdk/client-sqs/dist-es/SQS.js
var SQS = function(_super) {
  __extends(SQS2, _super);
  function SQS2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SQS2.prototype.addPermission = function(args, optionsOrCb, cb) {
    var command = new AddPermissionCommand2(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.changeMessageVisibility = function(args, optionsOrCb, cb) {
    var command = new ChangeMessageVisibilityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.changeMessageVisibilityBatch = function(args, optionsOrCb, cb) {
    var command = new ChangeMessageVisibilityBatchCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.createQueue = function(args, optionsOrCb, cb) {
    var command = new CreateQueueCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.deleteMessage = function(args, optionsOrCb, cb) {
    var command = new DeleteMessageCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.deleteMessageBatch = function(args, optionsOrCb, cb) {
    var command = new DeleteMessageBatchCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.deleteQueue = function(args, optionsOrCb, cb) {
    var command = new DeleteQueueCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.getQueueAttributes = function(args, optionsOrCb, cb) {
    var command = new GetQueueAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.getQueueUrl = function(args, optionsOrCb, cb) {
    var command = new GetQueueUrlCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.listDeadLetterSourceQueues = function(args, optionsOrCb, cb) {
    var command = new ListDeadLetterSourceQueuesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.listQueues = function(args, optionsOrCb, cb) {
    var command = new ListQueuesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.listQueueTags = function(args, optionsOrCb, cb) {
    var command = new ListQueueTagsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.purgeQueue = function(args, optionsOrCb, cb) {
    var command = new PurgeQueueCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.receiveMessage = function(args, optionsOrCb, cb) {
    var command = new ReceiveMessageCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.removePermission = function(args, optionsOrCb, cb) {
    var command = new RemovePermissionCommand2(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.sendMessage = function(args, optionsOrCb, cb) {
    var command = new SendMessageCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.sendMessageBatch = function(args, optionsOrCb, cb) {
    var command = new SendMessageBatchCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.setQueueAttributes = function(args, optionsOrCb, cb) {
    var command = new SetQueueAttributesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.tagQueue = function(args, optionsOrCb, cb) {
    var command = new TagQueueCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  SQS2.prototype.untagQueue = function(args, optionsOrCb, cb) {
    var command = new UntagQueueCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  return SQS2;
}(SQSClient);

// index.mjs
var AWS = {
  DynamoDB,
  Kinesis,
  S3,
  SES,
  SNS,
  SQS
};
var build_default = AWS;
export {
  build_default as default
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
